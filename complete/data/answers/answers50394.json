[[{"text": ["Look at this:\nhttp://code.google.com/p/pywhois/"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://code.google.com/p/pywhois/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/pywhois/"}]}, {"text": ["pywhois - Python module for retrieving WHOIS information of domains"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Goal:\n- Create a simple importable Python module which will produce parsed WHOIS data for a given domain.", "- Able to extract data for all the popular TLDs (com, org, net, ...)\n- Query a WHOIS server directly instead of going through an intermediate web service like many others do.", "- Works with Python 2.4+ and no external dependencies"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Example:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import pywhois\n&gt;&gt;&gt; w = pywhois.whois('google.com')\n&gt;&gt;&gt; w.expiration_date\n['14-sep-2011']\n&gt;&gt;&gt; w.emails\n['contact-admin@google.com',\n 'dns-admin@google.com',\n 'dns-admin@google.com',\n 'dns-admin@google.com']\n&gt;&gt;&gt; print w\n...\n</code>\n</pre>\n", "senID": 4}], [{"text": ["There's nothing wrong with using a command line utility to do what you want.", "If you put a nice wrapper around the service, you can implement the internals however you want!", "For example:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class Whois(object):\n    _whois_by_query_cache = {}\n\n    def __init__(self, query):\n        \"\"\"Initializes the instance variables to defaults. See :meth:`lookup`\n        for details on how to submit the query.\"\"\"\n        self.query = query\n        self.domain = None\n        # ... other fields.\n\n    def lookup(self):\n        \"\"\"Submits the `whois` query and stores results internally.\"\"\"\n        # ... implementation\n</code>\n</pre>\n", "senID": 1}, {"text": ["Now, whether or not you roll your own using urllib, wrap around a command line utility (like you're doing), or import a third party library and use that (like you're saying), this interface stays the same."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "you're saying", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/50394#50423"}]}, {"text": ["This approach is generally not considered ugly at all -- sometimes command utilities do what you want and you should be able to leverage them.", "If speed ends up being a bottleneck, your abstraction makes the process of switching to a native Python implementation transparent to your client code."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "sometimes command utilities do what you want and you should be able to leverage them", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Practicality beats purity -- that's what's Pythonic.", ":)"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "Practicality beats purity", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0020/"}]}], [{"text": ["Here is the whois client re-implemented in Python:\nhttp://code.activestate.com/recipes/577364-whois-client/"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://code.activestate.com/recipes/577364-whois-client/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/577364-whois-client/"}]}], [{"text": ["I don't know if gwhois does something special with the server output; however, you can plainly connect to the whois server on port whois (43), send your query, read all the data in the reply and parse them.", "To make life a little easier, you could use the telnetlib.Telnet class (even if the whois protocol is much simpler than the telnet protocol) instead of plain sockets."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The tricky parts:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "which whois server will you ask? RIPE, ARIN, APNIC, LACNIC, AFRINIC, JPNIC, VERIO etc LACNIC could be a useful fallback, since they tend to reply with useful data to requests outside of their domain.", "tag": "none", "senID": 2}, {"text": "what are the exact options and arguments for each whois server? some offer help, others don't. In general, plain domain names work without any special options.", "tag": "none", "senID": 3}]}], [{"code": "<pre>\n<code>\n import socket\nsocket.gethostbyname_ex('url.com')\n</code>\n</pre>\n", "senID": 0}, {"text": ["if it returns a gaierror you know know it's not registered with any DNS"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Another way to do it is to use urllib2 module to parse some other page's whois service (many sites like that exist).", "But that seems like even more of a hack that what you do now, and would give you a dependency on whatever whois site you chose, which is bad."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "urllib2", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["I hate to say it, but unless you want to re-implement whois in your program (which would be re-inventing the wheel), running whois on the OS and parsing the output (ie what you are doing now) seems like the right way to do it."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "whois", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "whois", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Parsing another webpage woulnd't be as bad (assuming their html woulnd't be very bad), but it would actually tie me to them - if they're down, I'm down :) "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Actually I found some old project on sourceforge: rwhois.py.", "What scares me a bit is that their last update is from 2003.", "But, it might seem as a good place to start reimplementation of what I do right now... Well, I felt obligued to post the link to this project anyway, just for further reference."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "rwhois.py", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://sourceforge.net/projects/rwhois/"}]}], [{"text": ["here is a ready-to-use solution that works for me; written for Python 3.1 (when backporting to Py2.x, take special care of the bytes / Unicode text distinctions).", "your single point of access is the method DRWHO.whois(), which expects a domain name to be passed in; it will then try to resolve the name using the provider configured as DRWHO.whois_providers[ '*' ] (a more complete solution could differentiate providers according to the top level domain).", "DRWHO.whois() will return a dictionary with a single entry text, which contains the response text sent back by the WHOIS server.", "Again, a more complete solution would then try and parse the text (which must be done separately for each provider, as there is no standard format) and return a more structured format (e.g., set a flag available which specifies whether or not the domain looks available).", "have fun!"], "childNum": 5, "tag": "p", "senID": 0, "childList": [{"text": "DRWHO.whois()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "DRWHO.whois_providers[ '*' ]", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "DRWHO.whois()", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "text", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "available", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n ##########################################################################\nimport asyncore as                                   _sys_asyncore\nfrom asyncore import loop as                         _sys_asyncore_loop\nimport socket as                                     _sys_socket\n\n\n\n##########################################################################\nclass _Whois_request( _sys_asyncore.dispatcher_with_send, object ):\n  # simple whois requester\n  # original code by Frederik Lundh\n\n  #-----------------------------------------------------------------------\n  whoisPort = 43\n\n  #-----------------------------------------------------------------------\n  def __init__(self, consumer, host, provider ):\n    _sys_asyncore.dispatcher_with_send.__init__(self)\n    self.consumer = consumer\n    self.query    = host\n    self.create_socket( _sys_socket.AF_INET, _sys_socket.SOCK_STREAM )\n    self.connect( ( provider, self.whoisPort, ) )\n\n  #-----------------------------------------------------------------------\n  def handle_connect(self):\n    self.send( bytes( '%s\\r\\n' % ( self.query, ), 'utf-8' ) )\n\n  #-----------------------------------------------------------------------\n  def handle_expt(self):\n    self.close() # connection failed, shutdown\n    self.consumer.abort()\n\n  #-----------------------------------------------------------------------\n  def handle_read(self):\n    # get data from server\n    self.consumer.feed( self.recv( 2048 ) )\n\n  #-----------------------------------------------------------------------\n  def handle_close(self):\n    self.close()\n    self.consumer.close()\n\n\n##########################################################################\nclass _Whois_consumer( object ):\n  # original code by Frederik Lundh\n\n  #-----------------------------------------------------------------------\n  def __init__( self, host, provider, result ):\n    self.texts_as_bytes = []\n    self.host           = host\n    self.provider       = provider\n    self.result         = result\n\n  #-----------------------------------------------------------------------\n  def feed( self, text ):\n    self.texts_as_bytes.append( text.strip() )\n\n  #-----------------------------------------------------------------------\n  def abort(self):\n    del self.texts_as_bytes[:]\n    self.finalize()\n\n  #-----------------------------------------------------------------------\n  def close(self):\n    self.finalize()\n\n  #-----------------------------------------------------------------------\n  def finalize( self ):\n    # join bytestrings and decode them (witha a guessed encoding):\n    text_as_bytes         = b'\\n'.join( self.texts_as_bytes )\n    self.result[ 'text' ] = text_as_bytes.decode( 'utf-8' )\n\n\n##########################################################################\nclass DRWHO:\n\n  #-----------------------------------------------------------------------\n  whois_providers = {\n    '~isa':   'DRWHO/whois-providers',\n    '*':      'whois.opensrs.net', }\n\n  #-----------------------------------------------------------------------\n  def whois( self, domain ):\n    R         = {}\n    provider  = self._get_whois_provider( '*' )\n    self._fetch_whois( provider, domain, R )\n    return R\n\n  #-----------------------------------------------------------------------\n  def _get_whois_provider( self, top_level_domain ):\n    providers = self.whois_providers\n    R         = providers.get( top_level_domain, None )\n    if R is None:\n      R = providers[ '*' ]\n    return R\n\n  #-----------------------------------------------------------------------\n  def _fetch_whois( self, provider, domain, pod ):\n    #.....................................................................\n    consumer  = _Whois_consumer(           domain, provider, pod )\n    request   = _Whois_request(  consumer, domain, provider )\n    #.....................................................................\n    _sys_asyncore_loop() # loops until requests have been processed\n\n\n#=========================================================================\nDRWHO = DRWHO()\n\n\ndomain    = 'example.com'\nwhois     = DRWHO.whois( domain )\nprint( whois[ 'text' ] )\n</code>\n</pre>\n", "senID": 1}]]