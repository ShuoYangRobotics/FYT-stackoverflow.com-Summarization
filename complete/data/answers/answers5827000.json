[[{"text": ["like this?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import sys\nimport time\n&gt;&gt;&gt; for i in range(1, 100):\n...     sys.stdout.write(str(i))\n...     sys.stdout.flush()\n...     time.sleep(0.2)\n...     sys.stdout.write(\"\\b\"*4)\n&lt;numbers count here&gt;\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}], [{"text": ["A trailing comma suppresses the newline, a carriage return moves to the beginning of the line."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for i in range(1,100):\n    print \"\\r\",i,\n</code>\n</pre>\n", "senID": 1}, {"text": ["This works on Linux."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Depends on your platform.", "If the curses module is available to you, use that.", "If you're on Windows, and using a sufficiently old version of Python (2.6 and earlier), you could try Fredrik Lundh's Console."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Console", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://effbot.org/zone/console-index.htm"}]}], [{"text": ["It looks to me like you are looking for a progress bar.", "If so check out some ready-made ones."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "ready-made ones", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/progressbar/2.2"}]}, {"text": ["Even if you are not making a progress bar, the code therein would need to do something similar.", "Perhaps it can give you some clues."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["As I am not a python guy, I don't know the python syntax.", "For Perl you can add a \\r character to an interpolated quotation, this moves the cursor back to the beginning of the line, thus overwriting any previous text on the next iteration.", "Perhaps python has a similar character."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "\\r", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n perl -e 'print \"$_\\r\" for (1..100); print \"\\n\";'\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Simplest way is to use the backspace character \\b like"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "\\b", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\nfrom __future__ import print_function\nimport sys, time\n\nfor i in range(1, 100):\n  print('\\b\\b\\b%d' % i, end='')\n  sys.stdout.flush()\n  time.sleep(0.1)\n</pre>\n", "senID": 1}], [{"text": ["you can try this :"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import sys\nimport time\nfor num in range(100):\n    sys.stdout.write(\"\\r \"+str(num))\n    sys.stdout.flush()\n    time.sleep(0.3)\n</code>\n</pre>\n", "senID": 1}]]