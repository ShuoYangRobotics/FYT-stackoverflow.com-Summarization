[[{"text": ["Ref: http://www.amk.ca/python/howto/unicode"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.amk.ca/python/howto/unicode", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.amk.ca/python/howto/unicode"}]}, {"text": ["Reading Unicode from a file is therefore simple:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Reading Unicode from a file is therefore simple:", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import codecs\nf = codecs.open('unicode.rst', encoding='utf-8')\nfor line in f:\n    print repr(line)\n</code>\n</pre>\n", "senID": 2}, {"text": ["It's also possible to open files in update mode, allowing both reading and writing:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "It's also possible to open files in update mode, allowing both reading and writing:", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n f = codecs.open('test', encoding='utf-8', mode='w+')\nf.write(u'\\u4500 blah blah blah\\n')\nf.seek(0)\nprint repr(f.readline()[:1])\nf.close()\n</code>\n</pre>\n", "senID": 4}, {"text": ["EDIT: I'm assuming that your intended goal is just to be able to read the file properly into a string in Python.", "If you're trying to convert to an ASCII string from Unicode, then there's really no direct way to do so, since the Unicode characters won't necessarily exist in ASCII."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "EDIT", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["If you're trying to convert to an ASCII string, try one of the following: "], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["But it really is \"I don\\u2018t like this\" and not \"I don't like this\".", "The character u'\\u2018' is a completely different character than \"'\" (and, visually, should correspond more to '`')."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you're trying to convert encoded unicode into plain ASCII, you could perhaps keep a mapping of unicode punctuation that you would like to translate into ASCII."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n punctuation = {\n  u'\\u2018': \"'\",\n  u'\\u2019': \"'\",\n}\nfor src, dest in punctuation.iteritems():\n  text = text.replace(src, dest)\n</code>\n</pre>\n", "senID": 2}, {"text": ["There are an awful lot of punctuation characters in unicode, however, but I suppose you can count on only a few of them actually being used by whatever application is creating the documents you're reading."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "punctuation characters in unicode", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.fileformat.info/info/unicode/block/general_punctuation/images.htm"}]}], [{"text": ["There are a few points to consider."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["A \\u2018 character may appear only as a fragment of representation of a unicode string in Python, e.g.", "if you write:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; text = u'\u2018'\n&gt;&gt;&gt; print repr(text)\nu'\\u2018'\n</code>\n</pre>\n", "senID": 2}, {"text": ["Now if you simply want to print the unicode string prettily, just use unicode's encode method:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "encode", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; text = u'I don\\u2018t like this'\n&gt;&gt;&gt; print text.encode('utf-8')\nI don\u2018t like this\n</code>\n</pre>\n", "senID": 4}, {"text": ["To make sure that every line from any file would be read as unicode, you'd better use the codecs.open function instead of just open, which allows you to specify file's encoding:"], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "codecs.open", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "open", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import codecs\n&gt;&gt;&gt; f1 = codecs.open(file1, \"r\", \"utf-8\")\n&gt;&gt;&gt; text = f1.read()\n&gt;&gt;&gt; print type(text)\n&lt;type 'unicode'&gt;\n&gt;&gt;&gt; print text.encode('utf-8')\nI don\u2018t like this\n</code>\n</pre>\n", "senID": 6}], [{"text": ["Leaving aside the fact that your text file is broken (U+2018 is a left quotation mark, not an apostrophe): iconv can be used to transliterate unicode characters to ascii."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You'll have to google for \"iconvcodec\", since the module seems not to be supported anymore and I can't find a canonical home page for it."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import iconvcodec\n&gt;&gt;&gt; from locale import setlocale, LC_ALL\n&gt;&gt;&gt; setlocale(LC_ALL, '')\n&gt;&gt;&gt; u'\\u2018'.encode('ascii//translit')\n\"'\"\n</code>\n</pre>\n", "senID": 2}, {"text": ["Alternatively you can use the iconv command line utility to clean up your file:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "iconv", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n $ xxd foo\n0000000: e280 980a                                ....\n$ iconv -t 'ascii//translit' foo | xxd\n0000000: 270a                                     '.\n</code>\n</pre>\n", "senID": 4}], [{"text": ["Actually, U+2018 is the Unicode representation of the special character \u2018 .", "If you want, you can convert instances of that character to U+0027 with this code:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n text = text.replace (u\"\\u2018\", \"'\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["In addition, what are you using to write the file?", "f1.read() should return a string that looks like this:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "f1.read()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n 'I don\\xe2\\x80\\x98t like this'\n</code>\n</pre>\n", "senID": 3}, {"text": ["If it's returning this string, the file is being written incorrectly:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "this", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n 'I don\\u2018t like this'\n</code>\n</pre>\n", "senID": 5}], [{"text": ["There is a possibility that somehow you have a non-unicode string with unicode escape characters, e.g."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; print repr(text)\n'I don\\\\u2018t like this'\n</code>\n</pre>\n", "senID": 1}, {"text": ["This actually happened to me once before.", "You can use a unicode_escape codec to decode the string to unicode and then encode it to any format you want:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "unicode_escape", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; uni = text.decode('unicode_escape')\n&gt;&gt;&gt; print type(uni)\n&lt;type 'unicode'&gt;\n&gt;&gt;&gt; print uni.encode('utf-8')\nI don\u2018t like this\n</code>\n</pre>\n", "senID": 3}], [{"text": ["This is Pythons way do show you unicode encoded strings.", "But i think you should be able to print the string on the screen or write it into a new file without any problems."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; test = u\"I don\\u2018t like this\"\n&gt;&gt;&gt; test\nu'I don\\u2018t like this'\n&gt;&gt;&gt; print test\nI don\u2018t like this\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Some comments: I have seen some people use mapping to solve this problem, but really, is there no built-in conversion that does this kind of ANSI to unicode ( and vice versa) conversion?", "Thanks!"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["You should take a look at the unicodedata module:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://log.vaem.net/2008/06/python-translit-remove-accent.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://log.vaem.net/2008/06/python-translit-remove-accent.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://log.vaem.net/2008/06/python-translit-remove-accent.html"}]}, {"text": ["iconvcodec is dead and during my searches on google, I found that unicodedata was the answer."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]