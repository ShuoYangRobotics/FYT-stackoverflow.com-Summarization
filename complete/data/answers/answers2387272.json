[[{"text": ["It is often advisable to set"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #coding=&lt;coding&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["at the second line.", "Like"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n #coding=utf8\n</code>\n</pre>\n", "senID": 3}, {"text": ["For example.", "This an alternative to the verbose"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n # -*- coding: &lt;encoding name&gt; -*-\n</code>\n</pre>\n", "senID": 5}, {"text": ["See PEP-263 for more info."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "PEP-263", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0263/"}]}, {"text": ["Edit for full answer: Depends on the situation.", "If its for some internal project, simpler is better.", "But I almost always have"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n def main():\n    #code\n    pass\n\nif __name__==\"__main__\":\n    main()\n</code>\n</pre>\n", "senID": 8}, {"text": ["If I intend to publish the code, I add proper documentation and licensing terms as well as the mentioned encoding directive."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["The shebang (#!/usr/bin/env python) is only necessary for the file that is meant to be the executable."], "childNum": 1, "tag": "p", "senID": 10, "childList": [{"text": "#!/usr/bin/env python", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Even better, here is the suggested package layout by Dr. Titus Brown:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://github.com/ctb/SomePackage"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://github.com/ctb/SomePackage", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://github.com/ctb/SomePackage"}]}], [{"text": ["Modules aren't executable, so they shouldn't have a shebang."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Docstrings are good."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Coding is useful."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Metadata such as author, copyright, version and license as best stored in the setup.py as part of the packaging metadata.", "The usage of __(metadata)__ module attributes is an outdated practice, as it predates the time when Python had packaging metadata.", "If the code is of an ephemeral enough nature not to warrant packaging, then it's unlikley that you're going to need any of the metadata."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "setup.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__(metadata)__", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Additional features such as test() or a __main__ hack I don't use nearly enough to warrant inclusion in a module template."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "__main__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["So the only template needed is:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n # -*- coding: ascii -*-\n\"\"\"\n\"\"\"\n</code>\n</pre>\n", "senID": 6}, {"text": ["Nice and simple."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"code": "<pre>\n<code>\n #!/usr/bin/env python\n# coding: utf-8\n\"\"\"\n    package.module\n    ~~~~~~~~~~~~~\n\n    A description which can be long and explain the complete\n    functionality of this module even with indented code examples.\n    Class/Function however should not be documented here.\n\n    :copyright: year by my name, see AUTHORS for more details\n    :license: license_name, see LICENSE for more details\n\"\"\"\n</code>\n</pre>\n", "senID": 0}, {"text": ["The module may or may not contain a main function so that's not part of the template."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "main", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Returning something is a best practice too (here with called args):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n ...\nimport sys\n\ndef main(args):\n    return 0\n\nif __name__=='__main__':\n    sys.exit(main(sys.argv))\n</code>\n</pre>\n", "senID": 1}, {"text": ["But it's becoming more complex than a simple \"hello world\"."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I would say the best is the simplest one than satisfies your requirements.", "The more data you put to the 'skeleton' the more outdated or meaningless or mistaken data you may get there."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "The ", "tag": "none", "senID": 1}, {"text": "Python interpreter will usually say when the coding information is needed, not every piece code needs non-ascii characters. ", "tag": "none", "senID": 2}]}, {"text": ["The reasonable minimum IMHO is the docstring at the beginning of the module.", "Other pieces, mentioned in your question and other answers are also often useful, but are in no way obligatory."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Depending on the nature of the program, you could consider choosing a license and putting it at the start of the file."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["How about:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n ...\nimport sys\n\ndef main(*args):\n    return 0\n\nif __name__=='__main__':\n    sys.exit(main(*sys.argv[1:]))\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then of course you modify that skeleton main to reflect actual parameters of the program (after the filename):"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def main(arg1, arg2, *args):\n    ...\n</code>\n</pre>\n", "senID": 3}, {"text": ["(Surprised we can't use Markdown in comments...)"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]]