[[{"text": ["The name for the \"high frequency English words\" is stop words and there are many lists available.", "I'm not aware of any python or perl libraries, but you could encode your stop word list in a binary tree or hash (or you could use python's frozenset), then as you read each word from the input text, check if it is in your 'stop list' and filter it out."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "stop words", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Stop_words"}]}, {"text": ["Note that after you remove the stop words, you'll need to do some stemming to normalize the resulting text (remove plurals, -ings, -eds), then remove all the duplicate \"keywords\"."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "stemming", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Stemming"}]}], [{"text": ["You could try using the perl module Lingua::EN::Tagger for a quick and easy solution. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Lingua::EN::Tagger", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://search.cpan.org/~acoburn/Lingua-EN-Tagger-0.15/Tagger.pm"}]}, {"text": ["A more complicated module Lingua::EN::Semtags::Engine uses Lingua::EN::Tagger with a WordNet database to get a more structured output.", "Both are pretty easy to use, just check out the documentation on CPAN or use perldoc after you install the module."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Lingua::EN::Semtags::Engine", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/lingua-en-semtags-engine/"}]}], [{"text": ["In Perl there's Lingua::EN::Keywords."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Lingua::EN::Keywords", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://search.cpan.org/perldoc?Lingua::EN::Keywords"}]}], [{"text": ["To find the most frequently-used words in a text, do something like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/perl -w\n\nuse strict;\nuse warnings 'all';\n\n# Read the text:\nopen my $ifh, '&lt;', 'text.txt'\n  or die \"Cannot open file: $!\";\nlocal $/;\nmy $text = &lt;$ifh&gt;;\n\n# Find all the words, and count how many times they appear:\nmy %words = ( );\nmap { $words{$_}++ }\n  grep { length &gt; 1 &amp;&amp; $_ =~ m/^[\\@a-z-']+$/i }\n    map { s/[\",\\.]//g; $_ }\n      split /\\s/, $text;\n\nprint \"Words, sorted by frequency:\\n\";\nmy (@data_line);\nformat FMT = \n@&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;...     @########\n@data_line\n.\nlocal $~ = 'FMT';\n\n# Sort them by frequency:\nmap { @data_line = ($_, $words{$_}); write(); }\n  sort { $words{$b} &lt;=&gt; $words{$a} }\n    grep { $words{$_} &gt; 2 }\n      keys(%words);\n</code>\n</pre>\n", "senID": 1}, {"text": ["Example output looks like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n john@ubuntu-pc1:~/Desktop$ perl frequency.pl \nWords, sorted by frequency:\nfor                                   32\nJan                                   27\nam                                    26\nof                                    21\nyour                                  21\nto                                    18\nin                                    17\nthe                                   17\nGet                                   13\nyou                                   13\nOTRS                                  11\ntoday                                 11\nPSM                                   10\nCard                                  10\nme                                     9\non                                     9\nand                                    9\nOffline                                9\nwith                                   9\nInvited                                9\nBlack                                  8\nget                                    8\nWeb                                    7\nStarred                                7\nAll                                    7\nView                                   7\nObama                                  7\n</code>\n</pre>\n", "senID": 3}], [{"text": ["The simplest way to do what you want is this..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n>>> text = \"this is some of the sample text\"\n>>> words = [word for word in set(text.split(\" \")) if len(word) > 3]\n>>> words\n['this', 'some', 'sample', 'text']\n</pre>\n", "senID": 1}, {"text": ["I don't know of any standard module that does this, but it wouldn't be hard to replace the limit on three letter words with a lookup into a set of common English words."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["One liner solution (words longer than two chars which occurred more than two times):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n perl -ne'$h{$1}++while m/\\b(\\w{3,})\\b/g}{printf\"%-20s %5d\\n\",$_,$h{$_}for sort{$h{$b}&lt;=&gt;$h{$a}}grep{$h{$_}&gt;2}keys%h'\n</code>\n</pre>\n", "senID": 1}, {"text": ["EDIT: If one wants to sort alphabetically words with same frequency can use this enhanced one:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "EDIT:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n perl -ne'$h{$1}++while m/\\b(\\w{3,})\\b/g}{printf\"%-20s %5d\\n\",$_,$h{$_}for sort{$h{$b}&lt;=&gt;$h{$a}or$a cmp$b}grep{$h{$_}&gt;2}keys%h'\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I think the most accurate way that still maintains a semblance of simplicity would be to count the word frequencies in your source, then weight them according to their frequencies in common English (or whatever other language) usage.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Words that appear less frequently in common use, like \"coffeehouse\" are more likely to be a keyword than words that appear more often, like \"dog.", "\"  Still, if your source mentions \"dog\" 500 times and \"coffeehouse\" twice it's more likely that \"dog\" is a keyword even though it's a common word."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Deciding on the weighting scheme would be the difficult part."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]