[[{"text": ["unwind's suggestion of using the ast module in 2.6 is a good one.", "(There's also the undocumented _ast module in 2.5.", ") Here's example code for that"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n code = \"\"\"a = 'blah'\nb = '''multi\nline\nstring'''\nc = u\"spam\"\n\"\"\"\n\nimport ast\nroot = ast.parse(code)\n\nclass ShowStrings(ast.NodeVisitor):\n  def visit_Str(self, node):\n    print \"string at\", node.lineno, node.col_offset, repr(node.s)\n\nshow_strings = ShowStrings()\nshow_strings.visit(root)\n</code>\n</pre>\n", "senID": 1}, {"text": ["The problem is multiline strings.", "If you run the above you'll get."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n string at 1 4 'blah'\nstring at 4 -1 'multi\\nline\\nstring'\nstring at 5 4 u'spam'\n</code>\n</pre>\n", "senID": 3}, {"text": ["You see that it doesn't report the start of the multiline string, only the end.", "There's no good solution for that using the builtin Python tools."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Another option is that you can use my 'python4ply' module.", "This is a grammar definition for Python for PLY, which is a parser generator.", "Here's how you might use it:"], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "python4ply", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://dalkescientific.com/Python/python4ply.html"}, {"text": "PLY", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.dabeaz.com/ply/"}]}, {"code": "<pre>\n<code>\n import compiler\nimport compiler.visitor\n\n# from python4ply; requires the ply parser generator\nimport python_yacc\n\ncode = \"\"\"a = 'blah'\nb = '''multi\nline\nstring'''\nc = u\"spam\"\nd = 1\n\"\"\"\n\ntree = python_yacc.parse(code, \"&lt;string&gt;\")\n#print tree\n\nclass ShowStrings(compiler.visitor.ASTVisitor):\n    def visitConst(self, node):\n        if isinstance(node.value, basestring):\n            print \"string at\", node.lineno, repr(node.value)\n\nvisitor = ShowStrings()\ncompiler.walk(tree, visitor)\n</code>\n</pre>\n", "senID": 6}, {"text": ["The output from this is"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n string at 1 'blah'\nstring at 2 'multi\\nline\\nstring'\nstring at 5 u'spam'\n</code>\n</pre>\n", "senID": 8}, {"text": ["There's no support for column information.", "(There is some mostly complete commented out code to support that, but it's not fully tested.", ") Then again, I see you don't need it.", "It also means working with Python's 'compiler' module, which is clumsier than the AST module."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["Still, with a 30-40 lines of code you should have exactly what you want."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}], [{"text": ["If you can do this in Python, I'd suggest starting by looking at the ast (Abstract Syntax Tree) module, and going from there."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "ast", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/ast.html#module-ast"}]}], [{"text": ["Python's included tokenize module will also do the trick."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "tokenize", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n from __future__ import with_statement\nimport sys\nimport tokenize\n\nfor filename in sys.argv[1:]:\n    with open(filename) as f:\n        for toktype, tokstr, (lineno, _), _, _ in tokenize.generate_tokens(f.readline):\n            if toktype == tokenize.STRING:\n                strrepr = repr(eval(tokstr))\n                print filename, lineno, strrepr\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Are you asking about the I18N utilities in Python?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://docs.python.org/library/gettext.html#internationalizing-your-programs-and-modules"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.python.org/library/gettext.html#internationalizing-your-programs-and-modules", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/gettext.html#internationalizing-your-programs-and-modules"}]}, {"text": ["There's a utility called po-utils (formerly xpot) that can help with this."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["http://po-utils.progiciels-bpi.ca/README.html"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "http://po-utils.progiciels-bpi.ca/README.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://po-utils.progiciels-bpi.ca/README.html"}]}], [{"text": ["You may also consider to parse your code with \npygments."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pygments.", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pygments.org/"}]}, {"text": ["I don't know the other solution, but it sure is very\nsimple to use."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Gettext might help you.", "Put your strings in _(...) structures:"], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "Gettext", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/gettext.html"}, {"text": "_(", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "...", "childNum": 0, "tag": "strong", "childList": []}, {"text": ")", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n a = _('Test')\nb = a\nc = _('Another text')\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then run in the shell prompt:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n pygettext test.py\n</code>\n</pre>\n", "senID": 3}, {"text": ["You'll get a messages.pot file with the information you need:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "messages.pot", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n # SOME DESCRIPTIVE TITLE.\n# Copyright (C) YEAR ORGANIZATION\n# FIRST AUTHOR &lt;EMAIL@ADDRESS&gt;, YEAR.\n#\nmsgid \"\"\nmsgstr \"\"\n\"Project-Id-Version: PACKAGE VERSION\\n\"\n\"POT-Creation-Date: 2009-02-25 08:48+BRT\\n\"\n\"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\\n\"\n\"Last-Translator: FULL NAME &lt;EMAIL@ADDRESS&gt;\\n\"\n\"Language-Team: LANGUAGE &lt;LL@li.org&gt;\\n\"\n\"MIME-Version: 1.0\\n\"\n\"Content-Type: text/plain; charset=CHARSET\\n\"\n\"Content-Transfer-Encoding: ENCODING\\n\"\n\"Generated-By: pygettext.py 1.5\\n\"\n\n\n#: teste.py:1\nmsgid \"Test\"\nmsgstr \"\"\n\n#: teste.py:3\nmsgid \"Another text\"\nmsgstr \"\"\n</code>\n</pre>\n", "senID": 5}]]