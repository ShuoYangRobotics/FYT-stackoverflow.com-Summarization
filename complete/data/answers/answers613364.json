[[{"text": ["Well, I'm not much of a python programmer, but I'd say that the answer is 'YES'."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Any dynamic language that lets you create a variable with any name at any time, could use a 'strict' pragma."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Strict vars (one of the options for strict in Perl, 'use strict' turns them all on at once) in Perl requires that all variables are declared before they are used.", "Which means that this code:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n my $strict_is_good = 'foo';\n$strict_iS_good .= 'COMPILE TIME FATAL ERROR';\n</code>\n</pre>\n", "senID": 3}, {"text": ["Generates a fatal error at compile time."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["I don't know of a way to get Python to reject this code at compile time:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n strict_is_good = 'foo';\nstrict_iS_good += 'RUN TIME FATAL ERROR';\n</code>\n</pre>\n", "senID": 6}, {"text": ["You will get a run-time exception that strict_iS_good is undefined.", "But only when the code is executed.", "If your test suite does not have 100% coverage, you can easily ship this bug."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "strict_iS_good", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Any time I work in a language that does not have this behavior (PHP for example), I get nervous.", "I am not a perfect typist.", "A simple, but hard to spot, typo can cause your code to fail in ways that may be hard to track down. "], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["So, to reiterate, YES Python could use a 'strict' pragma to turn on compile time checks for things that can be checked at compile time.", "I can't think of any other checks to add, but a better Python programmer probably could think of some.  "], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "YES", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Note I focus on the pragmatic effect of stict vars in Perl, and am glossing over some of the details.", "If you really want to know all the details see the perldoc for strict."], "childNum": 2, "tag": "p", "senID": 10, "childList": [{"text": "Note", "childNum": 0, "tag": "b", "pos": 0, "childList": []}, {"text": "the perldoc for strict", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://perldoc.perl.org/strict.html"}]}, {"text": ["Update: Responses to some comments"], "childNum": 1, "tag": "p", "senID": 11, "childList": [{"text": "Update: Responses to some comments", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Jason Baker : Static checkers like pylint are useful.", "But they represent an extra step that can be and often is skipped.", "Building some basic checks into the compiler guarantees that these checks are performed consistently.", "If these checks are controllable by a pragma, even the objection relating to the cost of the checks becomes moot.  "], "childNum": 1, "tag": "p", "senID": 12, "childList": [{"text": "Jason Baker", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["popcnt :  I know that python will generate a run time exception.", "I said as much.", "I advocate compile time checking where possible.", "Please reread the post."], "childNum": 1, "tag": "p", "senID": 13, "childList": [{"text": "popcnt", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["mpeters : No computer analysis of code can find all errors--this amounts to solving the halting problem.", "Worse, to find typos in assignments, your compiler would need to know your intentions and find places where your intentions differ from your code.", "This is pretty clearly impossible."], "childNum": 2, "tag": "p", "senID": 14, "childList": [{"text": "mpeters", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "intentions", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["However this does not mean that no checking should be done.", "If there are classes of problems that are easy to detect, then it makes sense to trap them."], "childNum": 0, "tag": "p", "senID": 15, "childList": []}, {"text": ["I'm not familiar enough with pylint and pychecker to say what classes of errors they will catch.", "As I said I am very inexperienced with python."], "childNum": 0, "tag": "p", "senID": 16, "childList": []}, {"text": ["These static analysis programs are useful.", "However, I believe that unless they duplicate the capabilities of the compiler, the compiler will always be in a position to \"know\" more about the program than any static checker could.", "It seems wasteful not to take advantage of this to reduce errors where possible."], "childNum": 0, "tag": "p", "senID": 17, "childList": []}, {"text": ["Update 2:"], "childNum": 1, "tag": "p", "senID": 18, "childList": [{"text": "Update 2:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["cdleary - In theory, I agree with you, a static analyzer can do any validation that the compiler can.", "And in the case of Python, it should be enough.  "], "childNum": 0, "tag": "p", "senID": 19, "childList": []}, {"text": ["However, if your compiler is complex enough (especially if you have lots of pragmas that change how compilation occurs, or if like Perl, you can run code at compile time), then the static analyzer must approach the complexity of the compiler/interpreter to do the analysis.  "], "childNum": 0, "tag": "p", "senID": 20, "childList": []}, {"text": ["Heh, all this talk of complex compilers and running code at compile time shows my Perl background."], "childNum": 0, "tag": "p", "senID": 21, "childList": []}, {"text": ["My understanding is that Python does not have pragmas and can not run arbitrary code at compile time.", "So, unless I am wrong or these features are added, a relatively simple parser in the static analyzer should suffice.", "It certainly would be helpful to force these checks at every execution.", "Of course, the way I'd do this is with a pragma."], "childNum": 0, "tag": "p", "senID": 22, "childList": []}, {"text": ["Once you add pragmas to the mix, you have started down a slippery slope and the complexity of you analyzer must grow in proportion to the power and flexibility you provide in your pragmas.", "If you are not careful, you can wind up like Perl, and then \"only python can parse Python,\" a future I wouldn't want to see."], "childNum": 0, "tag": "p", "senID": 23, "childList": []}, {"text": ["Maybe a command line switch would be a better way to add forced static analysis ;)"], "childNum": 0, "tag": "p", "senID": 24, "childList": []}, {"text": ["(In no way do intend to impugn Python's capabilities when I say that it can't futz with compile time behavior like Perl can.", "I have a hunch  that this is a carefully considered design decision, and I can see the wisdom in it.", "Perl's extreme flexibility at compile time is, IMHO, a great strength and a terrible weakness of the language; I see the wisdom in this approach as well."], "childNum": 0, "tag": "p", "senID": 25, "childList": []}], [{"text": ["\"the run-time binding philosophy that Python embraces... makes \"use strict\" behavior unnecessary [and] especially undesirable\""], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Pretty good summary.", "Thanks."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["That is essentially it.", "Static analysis tools don't help Python enough to be worthwhile.  "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "hr", "senID": 3}, {"text": ["Edit"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "Edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["\"I'm asking for us to introspect on why we don't need it and, relatedly, why Perl programmers think they do need it."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "why", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["The reason why is precisely the reason you already gave.", "We don't need it because it doesn't help.", "Clearly, you don't like that answer, but there's not much more to be said.", "Compile-time or pre-compile time checking simply does not help. "], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["However, since you took the time to asked the question again, I'll provide more evidence for the answer you already gave."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["I write Java almost as much as I write Python.", "Java's static type checking does not prevent any logic problems; it doesn't facilitate meeting performance requirements; it doesn't help meet the use cases.", "It doesn't even reduce the volume of unit testing."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["While static type checking does spot the occasional misuse of a method, you find this out just as quickly in Python.", "In Python you find it at unit test time because it won't run.", "Note: I'm not saying wrong types are found with lots of clever unit tests, I'm saying most wrong type issues are found  through unhandled exceptions where the thing simply won't run far enough to get to test assertions."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["The reason why is Pythonistas don't waste time on static checking is simple.", "We don't need it.", "It doesn't offer any value.", "It's a level of analysis that has no economic benefit.", "It doesn't make me any more able to solve the real problems that real people are having with their real data."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["Look at the most popular SO Python questions that are language (not problem domain or library) related."], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"text": ["http://stackoverflow.com/questions/26595/is-there-any-difference-between-foo-is-none-and-foo-none -- == vs. is.", "No static checking can help with this.", "Also, see http://stackoverflow.com/questions/132988/is-there-a-difference-between-and-is-in-python"], "childNum": 4, "tag": "p", "senID": 12, "childList": [{"text": "http://stackoverflow.com/questions/26595/is-there-any-difference-between-foo-is-none-and-foo-none", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/26595/is-there-any-difference-between-foo-is-none-and-foo-none"}, {"text": "==", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "is", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "http://stackoverflow.com/questions/132988/is-there-a-difference-between-and-is-in-python", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/132988/is-there-a-difference-between-and-is-in-python"}]}, {"text": ["http://stackoverflow.com/questions/36901/what-does-and-do-for-python-parameters -- *x gives a list, **x gives a dictionary.", "If you don't know this, your program dies immediately when you try to do something inappropriate for those types.", "\"What if your program never does anything 'inappropriate'\".", "Then your program works.", "'nuff said."], "childNum": 3, "tag": "p", "senID": 13, "childList": [{"text": "http://stackoverflow.com/questions/36901/what-does-and-do-for-python-parameters", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/36901/what-does-and-do-for-python-parameters"}, {"text": "*x", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "**x", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["http://stackoverflow.com/questions/36932/whats-the-best-way-to-implement-an-enum-in-python -- this is a plea for some kind of limited-domain type.", "A class with class-level values pretty much does that job.", "\"What if someone changes the assignment\".", "Easy to build.", "Override __set__ to raise an exception.", "Yes static checking might spot this.", "No, it doesn't happen in practice that someone gets confused about an enum constant and a variable; and when they do, it's easy to spot at run time.", "\"What if the logic never gets executed\".", "Well, that's poor design and poor unit testing.", "Throwing a compiler error and putting in wrong logic that's never tested is no better than what happens in a dynamic language when it's never tested."], "childNum": 2, "tag": "p", "senID": 14, "childList": [{"text": "http://stackoverflow.com/questions/36932/whats-the-best-way-to-implement-an-enum-in-python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/36932/whats-the-best-way-to-implement-an-enum-in-python"}, {"text": "__set__", "childNum": 0, "tag": "code", "pos": 4, "childList": []}]}, {"text": ["http://stackoverflow.com/questions/47789/generator-expressions-vs-list-compre"], "childNum": 1, "tag": "p", "senID": 15, "childList": [{"text": "http://stackoverflow.com/questions/47789/generator-expressions-vs-list-compre", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/47789/generator-expressions-vs-list-comprehension"}]}], [{"text": ["Python does have something that can change script syntax:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from __future__ import print_function\n</code>\n</pre>\n", "senID": 1}, {"text": ["and various other future-features that have syntax implications.", "It's just that Python's syntax has been stricter, stabler and more well-defined than historical Perl; the kind of things that \u2018strict refs\u2019 and \u2018strict subs\u2019 prohibit have never existed in Python."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["\u2018strict vars\u2019 is primarily intended to stop typoed references and missed-out \u2018my\u2019s from creating accidental globals (well, package variables in Perl terms).", "This can't happen in Python as bare assignments default to local declaration, and bare unassigned symbols result in an exception."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["(There is still the case where users accidentally try to write-through to a global without declaring it with a \u2018global\u2019 statement, causing either an accidental local or, more often, an UnboundLocalError.", "This tends to be learned fairly quickly, but it is an arguable case where having to declare your locals could help.", "Although few experienced Python programmers would accept the readability burden."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Other language and library changes that do not involve syntax are handled through the warnings system."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "warnings", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/warnings.html"}]}], [{"text": ["Python has no true lexical scoping, so strict vars wouldn't be very sensible.", "It has no symbolic references AFAIK, so it has not need for strict refs.", "It has not barewords, so it has no need for strict vars."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["To be honest, it's only lexical scoping I miss.", "The other two I'd consider warts in Perl."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I think there's some confusion as the what \"use strict\" does, from the comments I'm seeing.", "It does not turn on compile time type checks (to be like Java).", "In that sense, Perl progammers are in agreement with python programmers.", "As S.Lott says above these types of checks don't protect against logic bugs, don't reduce the number of unit tests you need to write and we're also not big fans of bondage programming."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Here's a list of what \"use strict\" does do:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I consider the 'use strict' in Perl more like a pragma as you hinted at: it changes the behavior of the compiler.  "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "'use strict'", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Perl language philosophy is different from python philosophy.", "As in, you are given more than enough rope to hang yourself repeatedly, in Perl.  "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Larry Wall is big into linguistics, so we have from Perl what is referred to as the TIMTOWTDI (say tim-toe-dee) principle vs. Zen of python:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "tim-toe-dee", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["you could very easily use pylint and PyChecker to come up with your own flavor of use strict for python (or something analogous to perl -cw  *scriptname*) but because of the different philosophies in the language design, you will not encounter this in practice widely."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "use strict", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "perl -cw  *scriptname*", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Based on your comment to the first poster, you are familiar with python's import this.", "There are a lot of things in there which illuminate why you do not see an equivalent of use strict in Python.", "If you meditate on the koan found in the Zen of Python, you may find enlightenment for yourself.", ":)"], "childNum": 3, "tag": "p", "senID": 4, "childList": [{"text": "import this", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "use strict", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "koan", "childNum": 0, "tag": "em", "pos": 2, "childList": []}]}], [{"text": ["This original answer is correct, but does not perhaps explain the situation\nin a practical sense."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["What 'use strict' provides in Perl is the ability to ensure that a mis-spelled\nor variable name is (usually) caught at compile-time.", "This does improve code\nreliability, and speeds up development.", "But in order to make such a thing worthwhile,\nyou need to declare variables.", "And Python style seems to discourage that."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["So in Python, you never find out about a mis-spelled variable until you notice at\nrun-time that the assignment you thought you made is not being made, or that an\nexpression seems to resolve to an unexpected value.", "Catching such errors can be\ntime-consuming, especially as programs get large, and as people are forced to maintain\ncode developed by others."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Java and C/C++ take it a step further, with type checking.", "The motivation is practical,\nrather than philosophical.", "How can you catch as many errors as possible as soon as possible, and be sure that you eliminate all of them before releasing code to production?", "Each language seems to take a particular strategy and run with it, based upon what they\nthink is important.", "In a language like Perl, where run-time binding isn't supported,\nit makes sense to take advantage of 'use strict' to make development easier."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["I've found that I only really care about detecting references to undeclared vars.", "Eclipse has pylint integration via PyDev and, although pylint is far from perfect, it does a reasonable job at that."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["It does kind of go against Python's dynamic nature, and I do have to add #IGNOREs occasionally, when my code gets clever about something.", "But I find that happens infrequently enough that I'm happy with it."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["But I could see the utility of some pylint-like functionality becoming available in the form of a command-line flag.", "Kind of like Python 2.6's -3 switch, which identifies points of incompatibility between Python 2.x and 3.x code."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["It is very difficult to write large programs without 'use strict' in Perl.", "Without 'use strict', if you use a variable again, and misspell it by leaving a letter out, the program still runs.", "And without test cases to check your results, you can never find such errors.", "It can be very time-consuming to find why you are getting wrong results due to this reason."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Some of my Perl programs consist of 5,000 lines to 10,000 lines of code broken into dozens of modules.", "One cannot really do production programming without 'use strict'.", "I would never allow production code to be installed in the factory with languages that do not enforce \"variable declarations\"."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["This is why Perl 5.12.x now has the 'use strict' as the default behavior.", "You can turn them off."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["PHP has given me quite a few problems because of no variable declaration enforcement.", "So you need to limit yourself to small programs with this language."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Just an opinion ..."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["abcParsing"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["It seems like the ideal of \"Pythonic\" code serves a lot of the same purpose as use strict."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "use strict", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["I don't have a Perl background, but from what I know, there's no feature in python that needs to be disabled in order for your code to be \"more reliable\", so in that sense, I guess you can say it's unnecessary"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]