[[{"text": ["If you're having problems with syntax, you could try an editor with syntax highlighting.", "Until you get the feel for a language, simple errors won't just pop out at you."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The simplest form of debugging is just to insert some print statements.", "A more advanced (and extensible) form of this would be to use the logging module form the std lib."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "logging", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/logging.html#module-logging"}]}, {"text": ["The interactive interpreter is a wonderful tool for working with python code, and IPython is a great improvement over the built-in REPL."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "IPython", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://ipython.org"}]}, {"text": ["If you actually want to step through your code, the python debugger is called pdb, which can be called from the command line, or embedded in your code."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "pdb", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/pdb.html#module-pdb"}]}, {"text": ["If you're used to a fully integrated IDE, I would recommend using Eclipse with pydev, and PyCharm has a great commercial offering, with autocomplete, quick access to docs, and numerous shortcuts, among many other interesting features."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Here is some techniques to facilitate debugging in Python:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 6, "lis": [{"text": ["use interactive shell e.g., ipython.", "Python is a dynamic language you can explore your code as you type.", "The shell is running in the second window in my editor at all times."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "ipython", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://ipython.scipy.org/moin/Documentation"}]}, {"text": ["copy-paste from the shell into docstrings a code that illustrates a dominant usage and corner cases of the function (class, module).", "doctest.testmod() placed in a if __name__==\"__main__\" section allows to test all docstrings in the module.", "doctest can be easily integrated with unittest."], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "doctest.testmod()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "if __name__==\"__main__\"", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "doctest", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.python.org/doc/2.5.2/lib/module-doctest.html"}, {"href": "http://www.python.org/doc/2.5.2/lib/module-unittest.html", "text": "unittest", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["use assert for stuff that can never happen."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "assert", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["print() can solve many debugging problems; logging module is suitable for long-living python processes."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "print()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://www.python.org/doc/2.5.2/lib/module-logging.html", "text": "logging", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["write tests (not necessarily before your code), run them often (automatically or with one keystroke at most); nose provides extended test discovery and running features for unittest."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "nose", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/python-nose/"}, {"href": "http://www.python.org/doc/2.5.2/lib/module-unittest.html", "text": "unittest", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["run pylint occasionally (though it is treaky to install on non-debian systems). "], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "pylint", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.logilab.org/card/pylint_tutorial"}]}]}, {"text": ["At this point there is a little use for a formal python debugger.", "Winpdb is an external multi-platform GPL'ed GUI python debugger if you need one."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "Winpdb", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://winpdb.org/docs/"}]}], [{"text": ["All the really cool stuff is easily demonstrated in the interactive interpreter.", "I think this might be the \"gold standard\" for good design:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Can you exercise your class interactively?"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Can you exercise your class interactively?", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["If you can do stuff interactively, then you can write unittests and doctests with confidence that it's testable, simple, reliable."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["And, more important, you can explore it interactively.", "There's nothing better than the instant gratification that comes from typing code and seeing exactly what happens."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["The compiled language habits (write a bunch of stuff, debug a bunch of stuff, test a bunch of stuff) can be left behind.", "Instead, you can write a little bit of stuff, explore it, write a formal test and then attach your little bit of stuff to your growing final project."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["You still do overall design.", "But you don't squander time writing code that may or may not work.", "In Python you write code that works.", "If you're not sure, you play with it interactively until you're sure.", "Then you write code that works."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["Python provides a debugger which allows you to step through your code, inspect variables and manipulate them.", "Refer to http://www.ferg.org/papers/debugging_in_python.html which can take you over the steps..."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.ferg.org/papers/debugging_in_python.html", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.ferg.org/papers/debugging_in_python.html"}]}, {"text": ["Also check the python standard library reference for pdb\nhttp://www.python.org/doc/2.5.2/lib/module-pdb.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://www.python.org/doc/2.5.2/lib/module-pdb.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/doc/2.5.2/lib/module-pdb.html"}]}, {"text": ["--Amit"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Test early and test often."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["This doesn't necessarily mean to jump into the test driven design pool head first (though that's not such a bad idea).", "It just means, test your objects and methods as soon as you have something that works.", "Don't wait until you have a huge pile of code before doing testing. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Invest some time in learning a testing framework.", "If it's trivial for you to type in a test case you'll more likely do it.", "If you don't have any sort of framework testing can be a pain so you'll avoid it.", "So, establish some good habits early on and you'll have fewer problems down the road. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["More often than not, I just use a bunch of print statements."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n page = grabpage(url)\nprint \"Page content:\", page\nprint \"page type():\", type(page)\n</code>\n</pre>\n", "senID": 1}, {"text": ["It's sometimes useful to do something like:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n debug = True\nif debug: print \"page content\", page\n</code>\n</pre>\n", "senID": 3}, {"text": ["..with this you can quickly disable all your debugging print statements by changing the debug variable to False."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["While print-debugging will get you very far in most cases, sometimes it's difficult to debug things like loops, or a series of if/else/try/except/etc.", "For this a debugger that allows stepping though your code, and setting break-points is useful."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["pdb is included with Python.", "Here is a good simple tutorial on it.", "You can even do things like changing variables during run-time (which the tutorial covers).", "A longer tutorial can be found here"], "childNum": 3, "tag": "p", "senID": 6, "childList": [{"text": "pdb", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "Here", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.ferg.org/papers/debugging_in_python.html"}, {"text": "here", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://www.onlamp.com/pub/a/python/2005/09/01/debugger.html"}]}, {"text": ["There is a very nice GUI equivalent pdb - Winpdb"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "Winpdb", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://winpdb.org/"}]}, {"text": ["Basically you run winpdb myscript --arg 4 -b 4 then it loads the command in a terminal, shows you your code on the left, with the current, a list of local/global variables (and their values) and the current call-stack."], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "winpdb myscript --arg 4 -b 4", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Then you can step though the code by clicking the Step (or F6).", "F5 runs the code.", "If you click next to the line numbers, it sets a break point, where the code will automatically step (when you press run)."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["I find it far easier to use, and it has lots of addition enhancements (like remote debugging, so you can run the backend portion (rpdb2) in the to-be-debugged application, and connect Winpdb to it (encrypted).", "It also has support for threading and other useful things not in PDB.", "You have access to a pdb-like console too."], "childNum": 1, "tag": "p", "senID": 10, "childList": [{"text": "rpdb2", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["I set up Python to automatically start the debugger when there's an uncaught exception, using this trick.", "That way, you can easily examine the state of the program without too much logging code.", "(Plus, to send me a Growl notification."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "this trick", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/65287/"}, {"text": "Growl notification", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://blog.mckuhn.de/2007/10/sending-growl-notifications-from-python.html"}]}, {"text": ["Oh, and this way you can just create a break point in the code by adding"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n if answer == 42:\n    1/0\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Using assert statement liberally."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Identifing errors before execution is the domain of static checking/analysis.", "I've had good luck using PyChecker for basic static checking of Python code."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PyChecker", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://pychecker.sourceforge.net/"}]}, {"text": ["The pycheesecake site has a very good summary of testing tools for Python."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "summary of testing tools", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pycheesecake.org/wiki/PythonTestingToolsTaxonomy"}]}], [{"text": ["I am new to python, and have been trying several different debuggers.", "Here are the options I've come across so far:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Memory debugging - To debug memory problems, I've come across a few tools:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Memory debugging", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["This is a very incomplete list, but hopefully it's a good start."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["The PyDev plugin for eclipse is my tool of choice.", "It recognizes simple syntax mistakes and indentation errors and underlines the error with a red line.", "It has a powerful debugger and even has a plugin called PyLint which warns you about dangerous code."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Edit:\nIt also has a user friendly stack trace on runtime errors, partial auto complete and some other nifty features."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Edit again:\nI didn't notice that pydev was mentioned in the top post.", "I hope I brought something else to the table."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["python -m pdb yourcode.py should do it.", "Alternatively you can \"import pdb\" in your code and use pdb.set_trace() to set break points.", "Refer the manual for more info: http://www.python.org/doc/2.5.2/lib/module-pdb.html"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.python.org/doc/2.5.2/lib/module-pdb.html", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.python.org/doc/2.5.2/lib/module-pdb.html"}]}], [{"text": ["There is very nice GUI debugger for Python called Winpdb.", "Try it out.Built on wxWidgets library and multiplatform."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Winpdb", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://winpdb.org/"}]}], [{"text": ["Eric4 IDE also has a great built-in debugger."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Judging from these answers most don't understand what is missing.", "I have multi-process python systems to debug.", "I need remote attach to processes, displaying locals, breakpoints that are dependable, etc.", "You know, the thinks you can get in Java debuggers.", "ducks  Seriously, I have been very disappointed python does not have more full-featured debuggers."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "ducks", "childNum": 0, "tag": "em", "pos": 4, "childList": []}]}, {"text": ["And please no responses that good old print and logger output is all you ever need if you are \"good enough\".", "It isn't and I am but I would rather not waste brain cells attempting to fill in for missing tools."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["The IPython Python shell has a %pdb command that automatically invokes the debugger in case of problem.", "You can then inspect variables, step through the code, etc."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "IPython", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://ipython.scipy.org/doc/manual/html/interactive/tutorial.html"}, {"text": "%pdb", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "automatically invokes the debugger", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://ipython.scipy.org/doc/manual/html/interactive/tutorial.html#debug-a-python-script"}]}, {"text": ["You can run your programs from IPython with the %run command."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "run your programs", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://ipython.scipy.org/doc/manual/html/interactive/tutorial.html#the-run-magic-command"}, {"text": "%run", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["More generally, as as been noted in some other answers, a good Python shell is your friend.", "And IPython is your best friend.", ":)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["For a most integrated experience you can use full blown IDE like PyCharm:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://blog.jetbrains.com/pycharm/files/2011/05/template-debug2.png"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "http://blog.jetbrains.com/pycharm/files/2011/05/template-debug2.png", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://blog.jetbrains.com/pycharm/files/2011/05/template-debug2.png"}, {"text": "", "childNum": 0, "tag": "img", "childList": []}]}]]