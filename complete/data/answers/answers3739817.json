[[{"text": ["The following code is gross, but since 1000 is indeed a small index, it solves your problem in a fraction of a second (and it uses only the primitives you are supposed to know so far):"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "gross", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n primesFound = 0\nnumber = 1\n\nwhile primesFound &lt; 1000:\n    number = number + 1          # start from 2\n\n    # test for primality\n    divisor = 2\n    numberIsPrime = True\n    while divisor*divisor &lt;= number:   # while divisor &lt;= sqrt(number)\n        if number % divisor == 0:\n            numberIsPrime = False\n            break\n        divisor = divisor + 1\n\n    # found one?\n    if numberIsPrime:\n        primesFound = primesFound + 1\n\nprint number\n</code>\n</pre>\n", "senID": 1}, {"text": ["You can test the solution here.", "Now you should find a more efficient solution, optimize and maybe go for the 1000000-th prime..."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://primes.utm.edu/lists/small/1000.txt"}]}], [{"text": ["For one thing, I'm pretty sure that in Python, if you want to have an if statement that tests whether or not A = B, you need to use the == operator, rather then the =."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For another thing, your algorithm would consider the number 143 to be prime, even though 143 = 11 * 13"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["You need keep track of all the prime numbers that you have already computed - add them to an array.", "Use that array to determine whether or not a new number that you are testing is prime."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["It seems to me that you are jumping into the deep-end after deciding the kiddy-pool is too deep.", "The prime number project will be assignment 2 or 3 in most beginning programming classes, just after basic syntax is covered.", "Rather than help you with the algorithm (there are many good ones out there) I'm going to suggest that you attempt to learn syntax with the python shell before you write long programs, since debugging a line is easier than debugging an entire program.", "Here is what you wrote in a way that will actually run: "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "python shell", "childNum": 0, "tag": "strong", "pos": 2, "childList": []}]}, {"code": "<pre>\n<code>\n count = 4\nn = 10                        #I'm starting you at 10 because your method \n                              #says that 2, 3, 5, and 7 are not prime\nd = [2, 3, 4, 5, 6, 7, 8, 9]  #a list containing the ints you were dividing by\n\ndef cycle(n):                 #This is how you define a function\n    for i in d:               #i will be each value in the list d\n        if not n%i:           #this is equal to if n%i == 0\n            return 0          #not prime (well, according to this anyway)\n    return 1                  #prime\n\nwhile count &lt; 1000:\n    count += cycle(n)         #adds the return from cycle to count\n    n += 1\n\nprint n - 1\n</code>\n</pre>\n", "senID": 1}, {"text": ["The answer is still incorrect because that is not how to test for a prime.", "But knowing a little syntax would at least get you that wrong answer, which is better than a lot of tracebacks."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["(Also, I realize lists, for loops, and functions were not in the list of things you say you know."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["To answer your subsequent question, 'How do I keep track of all the prime numbers?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["One way of doing this is to make a list."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n primeList = [] # initializes a list\n</code>\n</pre>\n", "senID": 2}, {"text": ["Then, each time you test a number for whether it is prime or not, add that number to primeList"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "primeList", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["You can do this by using the 'append' function."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n primeList.append( potprime )  # adds each prime number to that list\n</code>\n</pre>\n", "senID": 5}, {"text": ["Then you will see the list filling up with numbers so after the first three primes it looks like this: "], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; primeList\n[11, 13, 17]\n</code>\n</pre>\n", "senID": 7}], [{"text": ["Your math is failing you.", "A prime number is a number that has 2 divisors: 1 and itself.", "You are not testing the numbers for primality."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Looks like I am late"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["It is quite straight forward that if a number is not divisible by any prime number, then that number is itself a prime number.", "You can use this fact to minimize number of divisions."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["For that you need to maintain a list of prime numbers.", "And for each number only try to divide with prime numbers already in the list.", "To optimize further it you can discard all prime numbers more than square root of the number to be tested.", "You will need to import sqrt() function for that."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["For example, if you test on 1001, try to test with 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 93 and 97.", "That should be enough.", "Also never try to find out if an even number is prime.", "So basically if you test an odd number n, then after that test next number: (n + 2)"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Have tested the below code.", "The 1000th prime number is 7919.", "Not a big number!"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Code may be like:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n from math import sqrt\n\nprimeList = [2]\nnum = 3\nisPrime = 1\n\nwhile len(primeList) &lt; 1000:\n    sqrtNum = sqrt(num)\n\n    # test by dividing with only prime numbers\n    for primeNumber in primeList:\n\n        # skip testing with prime numbers greater than square root of number\n        if num % primeNumber == 0:\n            isPrime = 0\n            break\n        if primeNumber &gt; sqrtNum:\n            break\n\n    if isPrime == 1:\n        primeList.append(num)\n    else:\n        isPrime = 1\n\n    #skip even numbers\n    num += 2\n\n# print 1000th prime number\nprint primeList[999]\n</code>\n</pre>\n", "senID": 6}]]