[[{"text": ["Perhaps something like"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n \\b__(\\S+)__\\b\n\n&gt;&gt;&gt; import re\n&gt;&gt;&gt; re.findall(r\"\\b__(\\S+)__\\b\",\"Here __is__ a __test__ sentence\")\n['is', 'test']    \n&gt;&gt;&gt; re.findall(r\"\\b__(\\S+)__\\b\",\"__Here__ is a test __sentence__\")\n['Here', 'sentence']\n&gt;&gt;&gt; re.findall(r\"\\b__(\\S+)__\\b\",\"__Here's__ a test __sentence__\")\n[\"Here's\", 'sentence']\n</code>\n</pre>\n", "senID": 1}, {"text": ["or you can put tags around the word like this"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; print re.sub(r\"\\b(__)(\\S+)(__)\\b\",r\"&lt;b&gt;\\2&lt;\\\\b&gt;\",\"__Here__ is a test __sentence__\")\n&lt;b&gt;Here&lt;\\b&gt; is a test &lt;b&gt;sentence&lt;\\b&gt;\n</code>\n</pre>\n", "senID": 3}, {"text": ["If you need more fine grained control over the legal word characters it's best to be explicit"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n \\b__([a-zA-Z0-9_':])__\\b  ### count \"'\" and \":\" as part of words\n\n&gt;&gt;&gt; re.findall(r\"\\b__([a-zA-Z0-9_']+)__\\b\",\"__Here's__ a test __sentence:__\")\n[\"Here's\"]\n&gt;&gt;&gt; re.findall(r\"\\b__([a-zA-Z0-9_':]+)__\\b\",\"__Here's__ a test __sentence:__\")\n[\"Here's\", 'sentence:']\n</code>\n</pre>\n", "senID": 5}], [{"text": ["Take a squizz here: http://docs.python.org/library/re.html"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://docs.python.org/library/re.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/re.html"}]}, {"text": ["That should show you syntax and examples from which you can build a check for word(s) pre- and post-pended with 2 underscores."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["The simplest regex for this would be"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n __.+__\n</code>\n</pre>\n", "senID": 1}, {"text": ["\nIf you want access to the word itself from your code, you should use"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n __(.+)__\n</code>\n</pre>\n", "senID": 3}], [{"text": ["This will give you a list with all such words"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import re\n&gt;&gt;&gt; m = re.findall(\"(__\\w+__)\", \"What __word__ you search __for__\")\n&gt;&gt;&gt; print m\n['__word__', '__for__']\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n \\b(__\\w+__)\\b\n</code>\n</pre>\n", "senID": 0}, {"text": ["\\b word boundary\n\\w+ one or more word characters - [a-zA-Z0-9_]"], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "\\b", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "\\w+", "childNum": 0, "tag": "code", "childList": []}, {"text": "[a-zA-Z0-9_]", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["simple string functions.", "no regex"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; mystring=\"blah __word__ blah __word2__\"\n&gt;&gt;&gt; for item in mystring.split():\n...     if item.startswith(\"__\") and item.endswith(\"__\"):\n...        print item\n...\n__word__\n__word2__\n</code>\n</pre>\n", "senID": 1}]]