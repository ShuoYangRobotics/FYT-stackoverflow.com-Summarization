[[{"text": ["Found myself facing just the same problem today.", "I wrote a very simple HTML parser to strip incoming content of all markups, returning the remaining text with only a minimum of formatting."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from HTMLParser import HTMLParser\nfrom re import sub\nfrom sys import stderr\nfrom traceback import print_exc\n\nclass _DeHTMLParser(HTMLParser):\n    def __init__(self):\n        HTMLParser.__init__(self)\n        self.__text = []\n\n    def handle_data(self, data):\n        text = data.strip()\n        if len(text) &gt; 0:\n            text = sub('[ \\t\\r\\n]+', ' ', text)\n            self.__text.append(text + ' ')\n\n    def handle_starttag(self, tag, attrs):\n        if tag == 'p':\n            self.__text.append('\\n\\n')\n        elif tag == 'br':\n            self.__text.append('\\n')\n\n    def handle_startendtag(self, tag, attrs):\n        if tag == 'br':\n            self.__text.append('\\n\\n')\n\n    def text(self):\n        return ''.join(self.__text).strip()\n\n\ndef dehtml(text):\n    try:\n        parser = _DeHTMLParser()\n        parser.feed(text)\n        parser.close()\n        return parser.text()\n    except:\n        print_exc(file=stderr)\n        return text\n\n\ndef main():\n    text = r'''\n        &lt;html&gt;\n            &lt;body&gt;\n                &lt;b&gt;Project:&lt;/b&gt; DeHTML&lt;br&gt;\n                &lt;b&gt;Description&lt;/b&gt;:&lt;br&gt;\n                This small script is intended to allow conversion from HTML markup to \n                plain text.\n            &lt;/body&gt;\n        &lt;/html&gt;\n    '''\n    print(dehtml(text))\n\n\nif __name__ == '__main__':\n    main()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["html2text is a Python program that does a pretty good job at this."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "html2text", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.aaronsw.com/2002/html2text/"}]}], [{"text": ["PyParsing does a great job.", "Paul McGuire has several scrips that are easy to adopt for various uses on the pyparsing wiki.", "(http://pyparsing.wikispaces.com/Examples) One reason for investing a little time with pyparsing is that he has also written a very brief very well organized O'Reilly Short Cut manual that is also inexpensive."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://pyparsing.wikispaces.com/Examples", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://pyparsing.wikispaces.com/Examples"}]}, {"text": ["Having said that, I use BeautifulSOup a lot and it is not that hard to deal with the entitites issues, you can convert them before you run BeautifulSoup.  "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Goodluck   "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Use NLTK  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I wasted my 4-5 hours fixing the issues with html2text.", "Luckily i could encounter NLTK.", "It works magically.    "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import nltk   \nfrom urllib import urlopen\n\n\nurl = \"http://news.bbc.co.uk/2/hi/health/2284783.stm\"    \nhtml = urlopen(url).read()    \nraw = nltk.clean_html(html)  \nprint(raw)\n</code>\n</pre>\n", "senID": 2}], [{"text": ["You can use html2text method in the stripogram library also."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from stripogram import html2text\ntext = html2text(your_html_string)\n</code>\n</pre>\n", "senID": 1}, {"text": ["To install stripogram run sudo easy_install stripogram"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["http://pypi.python.org/pypi/webstemmer/0.5.0"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://pypi.python.org/pypi/webstemmer/0.5.0", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/webstemmer/0.5.0"}]}, {"text": ["http://atropine.sourceforge.net/documentation.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://atropine.sourceforge.net/documentation.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://atropine.sourceforge.net/documentation.html"}]}, {"tag": "hr", "senID": 2}, {"text": ["alternatively, i think you can drive lynx from python, search on that"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["@PyNEwbie\nthe entities should be converted after BeautifulSoup else the Document gets a different meaning.", "(For example when &lt;div&gt; was encoded)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Bolierpipe:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Bolierpipe:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Try with this."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["http://ai-depot.com/articles/the-easy-way-to-extract-useful-text-from-arbitrary-html/\nhttp://code.google.com/p/boilerpipe/"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "http://ai-depot.com/articles/the-easy-way-to-extract-useful-text-from-arbitrary-html/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://ai-depot.com/articles/the-easy-way-to-extract-useful-text-from-arbitrary-html/"}, {"href": "http://code.google.com/p/boilerpipe/", "text": "http://code.google.com/p/boilerpipe/", "childNum": 0, "tag": "a", "childList": []}]}]]