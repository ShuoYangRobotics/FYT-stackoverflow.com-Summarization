[[{"text": ["Regex is usally a bad idea, try using BeautifulSoup"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "BeautifulSoup", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.crummy.com/software/BeautifulSoup/"}]}, {"text": ["Quick example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n html = #get html\nsoup = BeautifulSoup(html)\nlinks = soup.findAll('a', attrs={'class': 'myclass'})\nfor link in links:\n    #process link\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Aargh, not regex for parsing HTML!"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "regex for parsing HTML", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454#1732454"}]}, {"text": ["Luckily in Python we have BeautifulSoup or lxml to do that job for us."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "BeautifulSoup", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.crummy.com/software/BeautifulSoup/"}, {"href": "http://codespeak.net/lxml/", "text": "lxml", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["Regex would be a bad choice.", "HTML is not a regular language.", "How about Beautiful Soup?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Beautiful Soup", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.crummy.com/software/BeautifulSoup/"}]}], [{"text": ["Regex should not be used to parse HTML.", "See the first answer to this question for an explanation :)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "the first answer to this question", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags"}]}, {"text": ["+1 for BeautifulSoup."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["read Parsing Html The Cthulhu Way http://www.codinghorror.com/blog/archives/001311.html"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.codinghorror.com/blog/archives/001311.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.codinghorror.com/blog/archives/001311.html"}]}], [{"text": ["The thing is I know the structure of the HTML page, and I just want to find that specific kind of links (where class=\"myclass\").", "BeautifulSoup anyway?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["If your task is just this simple, just use string manipulation (without even regex)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n f=open(\"htmlfile\")\nfor line in f:\n    if \"&lt;a class\" in line and \"myClass\" in line and \"href\" in line:\n        s = line [ line.index(\"href\") + len('href=\"') : ]\n        print s[:s.index('\"&gt;')]\nf.close()\n</code>\n</pre>\n", "senID": 1}, {"text": ["HTML parsers is not a must for such cases."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]