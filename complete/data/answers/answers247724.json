[[{"text": ["While the Popen answers are reasonable for the general case, I would recommend win32api for this specific case, if you want to do something useful with it:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["It goes something like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n from win32com.client import Dispatch\nxl = Dispatch('Excel.Application')\nwb = xl.Workbooks.Open('C:\\\\Documents and Settings\\\\GradeBook.xls')\n</code>\n</pre>\n", "senID": 2}, {"text": ["Taken from a mailing list post but there are plenty of examples around."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "a mailing list post", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://mail.python.org/pipermail/python-list/2005-June/326410.html"}]}], [{"text": ["I like popen2 for the ability to monitor the process."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n excelProcess = popen2.Popen4(\"start excel %s\" % (excelFile))\nstatus = excelProcess.wait()\n</code>\n</pre>\n", "senID": 1}, {"text": ["http://www.python.org/doc/2.5.2/lib/module-popen2.html"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://www.python.org/doc/2.5.2/lib/module-popen2.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/doc/2.5.2/lib/module-popen2.html"}]}, {"text": ["EDIT: be aware that calling wait() will block until the process returns.", "Depending on your script, this may not be your desired behavior."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "EDIT", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["The subprocess module intends to replace several other, older modules and functions, such as:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "subprocess", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"tag": "ul", "num": 5, "lis": [{"text": "os.system", "tag": "none", "senID": 1}, {"text": "os.spawn*", "tag": "none", "senID": 2}, {"text": "os.popen*", "tag": "none", "senID": 3}, {"text": "popen2.*", "tag": "none", "senID": 4}, {"text": "commands.*", "tag": "none", "senID": 5}]}, {"text": [], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n import subprocess\n\nprocess_one = subprocess.Popen(['gqview', '/home/toto/my_images'])\n\nprint process_one.pid\n</code>\n</pre>\n", "senID": 7}], [{"text": ["or "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n os.system(\"start excel.exe &lt;path/to/file&gt;\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["(presuming it's in the path, and you're on windows)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["and also on Windows, just start &lt;filename&gt; works, too - if it's an associated extension already (as xls would be)"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "start &lt;filename&gt;", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["os.system(\"open file.xls\")"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["As others have stated, I would suggest os.system.", "In case anyone is looking for a Mac-compatible solution, here is an example:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import os\nos.system(\"open /Applications/Safari.app\")\n</code>\n</pre>\n", "senID": 1}]]