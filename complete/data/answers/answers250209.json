[[{"text": ["The main overhead here is the multiple individual puts to the datastore.", "If you can, store the links as a single entity, as Andre suggests.", "You can always split the links into an array and store it in a ListProperty."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you do need an entity for each link, try this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n # For each line in the input, add to the database\ngroups = []\nfor x in allLinks:\n     newGroup = LinkGrouping()\n     newGroup.reference = hash\n     newGroup.link = x\n     groups.append(newGroup)\ndb.put(groups)\n</code>\n</pre>\n", "senID": 2}, {"text": ["It will reduce the datastore roundtrips to one, and it's the roundtrips that are really killing your high CPU cap."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Looks pretty tight to me."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I see one thing that may make a small improvement.", "Your calling, \"self.request.get('links')\" twice."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["So adding:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n unsplitlinks = self.request.get('links')\n</code>\n</pre>\n", "senID": 3}, {"text": ["And referencing, \"unsplitlinks\" could help."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Other than that the loop is the only area I see that would be a target for optimization.", "Is it possible to prep the data and then add it to the db at once, instead of doing a db add per link?", "(I assume the .put() command adds the link to the database)"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["You can dramatically reduce the interaction between your app and the database by just storing the complete self.request.get('links') in a text field in the database."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "self.request.get('links')", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"tag": "ul", "num": 2, "lis": [{"text": "only one ", "tag": "none", "senID": 1}, {"text": "the hash isn't stored n-times (for every link, which makes no sense and is really a waste of space)", "tag": "none", "senID": 2}]}, {"text": ["And you save yourself the parsing of the textfield when someone actually calls the page...."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["How frequently is this getting called?", "This doesn't look that bad... especially after removing the duplicate request."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Can I query against the ListProperty?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Something like "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n SELECT * FROM LinkGrouping WHERE links.contains('http://www.google.com')\n</code>\n</pre>\n", "senID": 2}, {"text": ["I have future plans where I would need that functionality."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["I'll definitely implement the single db.put() to reduce usage."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["no/ you can not use something like \"links.contains('http://www.google.com')\"\nGQL not support this"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.google.com", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.google.com"}]}]]