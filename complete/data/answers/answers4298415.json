[[{"code": "<pre>\n<code>\n &gt;&gt;&gt; x = \"first, second, third,\"\n&gt;&gt;&gt; y = [ele for ele in x.split(',') if ele]\n&gt;&gt;&gt; y\n['first', ' second', ' third']\n</code>\n</pre>\n", "senID": 0}, {"text": ["Using the fact that non empty strings return True."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "True", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"code": "<pre>\n<code>\n for tag in tags.split(\",\") if tag.strip()\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Use filter(), like so:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def f(x): return x != ''\n\nfilter( f, tag_list )\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Do you really want to use lstrip() rather than strip() for processing the tags?", "What if the user enters abc , def; do you really want to allow a tag \"abc \" with a trailing space?"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "abc , def", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "\"abc \"", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["If you really want to strip the tags on both sides (which I think you do), then it's a simple matter of doing that and then omitting the empty ones:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n try: # EAFP\n    tags = (tag.strip() for tag in request.POST['tags'].split(','))\n    tag_list = [Tag.objects.get_or_create(name = tag)[0] for tag in tags if tag]\n    # 'if tag' is the operative \"filtering\" bit\nexcept KeyError: pass\n</code>\n</pre>\n", "senID": 2}], [{"code": "<pre>\n<code>\n tag_list = [tag.lstrip() for tag in tags.split(\",\") if len(tag.lstrip())&gt;0]\n</code>\n</pre>\n", "senID": 0}, {"text": ["will generate the tag_list without the empty character."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Rest should be simple. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You could do all your tags processing in once place, so you don't have to\ncall tag.lstrip() inside get_or_create(name = ...):"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "tags", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "tag.lstrip()", "childNum": 0, "tag": "code", "childList": []}, {"text": "get_or_create(name = ...)", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n if \"tags\" in request.POST:\n    tags = request.POST[\"tags\"]\n    tags = (tag.lstrip() for tag in tags.split(',') if tag.strip())\n    tag_list = [Tag.objects.get_or_create(name = tag)[0] for tag in tags]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If your tags are actually set individually in the same variable instead of as a string list you have the option of just writing:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n filter(len, map(str.strip, request.POST.getlist(\"keys\")))\n</code>\n</pre>\n", "senID": 1}, {"text": ["Without having to parse a string list manually."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]