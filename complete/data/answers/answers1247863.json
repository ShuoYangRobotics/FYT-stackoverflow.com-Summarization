[[{"text": ["Your solution is fine, but if you want a stricter simulation of the problem as posed (and somewhat higher-quality Python;-), try:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import random\n\niterations = 100000\n\ndoors = [\"goat\"] * 2 + [\"car\"]\nchange_wins = 0\nchange_loses = 0\n\nfor i in xrange(iterations):\n    random.shuffle(doors)\n    # you pick door n:\n    n = random.randrange(3)\n    # monty picks door k, k!=n and doors[k]!=\"car\"\n    sequence = range(3)\n    random.shuffle(sequence)\n    for k in sequence:\n        if k == n or doors[k] == \"car\":\n            continue\n    # now if you change, you lose iff doors[n]==\"car\"\n    if doors[n] == \"car\":\n        change_loses += 1\n    else:\n        change_wins += 1\n\nprint \"Changing has %s wins and %s losses\" % (change_wins, change_loses)\nperc = (100.0 * change_wins) / (change_wins + change_loses)\nprint \"IOW, by changing you win %.1f%% of the time\" % perc\n</code>\n</pre>\n", "senID": 1}, {"text": ["a typical output is:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n Changing has 66721 wins and 33279 losses\nIOW, by changing you win 66.7% of the time\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You mentioned that all the choices are hardcoded in.", "But if you look closer, you'll notice that what you think are 'choices' are actually not choices at all.", "Monty's decision is without loss of generality since he always chooses the door with the goat behind it.", "Your swapping is always determined by what Monty chooses, and since Monty's \"choice\" was actually not a choice, neither is yours.", "Your simulation gives the correct results.. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I like something like this."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/python                                                                                                            \nimport random\nCAR   = 1\nGOAT  = 0\n\ndef one_trial( doors, switch=False ):\n    \"\"\"One trial of the Monty Hall contest.\"\"\"\n\n    random.shuffle( doors )\n    first_choice = doors.pop( )\n    if switch==False:\n        return first_choice\n    elif doors.__contains__(CAR):\n        return CAR\n    else:\n        return GOAT\n\n\ndef n_trials( switch=False, n=10 ):\n    \"\"\"Play the game N times and return some stats.\"\"\"\n    wins = 0\n    for n in xrange(n):\n        doors = [CAR, GOAT, GOAT]\n        wins += one_trial( doors, switch=switch )\n\n    print \"won:\", wins, \"lost:\", (n-wins), \"avg:\", (float(wins)/float(n))\n\n\nif __name__==\"__main__\":\n    import sys\n    n_trials( switch=eval(sys.argv[1]), n=int(sys.argv[2]) )\n\n$ ./montyhall.py True 10000\nwon: 6744 lost: 3255 avg: 0.674467446745\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I hadn't heard of the Monty Hall Problem before I stumbled across this question.", "I thought it was interesting, so I read about it and created a c# simulation.", "It's kind of goofy since it simulates the game-show and not just the problem."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I published the source and release on codeplex:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["http://montyhall.codeplex.com"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://montyhall.codeplex.com", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://montyhall.codeplex.com"}]}], [{"text": ["Monty never opens the door with the car - that's the whole point of the show (he isn't your friend an has knowledge of what is behind each door)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Here is an interactive version:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from random import shuffle, choice\ncars,goats,iters= 0, 0, 100\nfor i in range(iters):\n    doors = ['goat A', 'goat B', 'car']\n    shuffle(doors)\n    moderator_door = 'car'\n    #Turn 1:\n    selected_door = choice(doors)\n    print selected_door\n    doors.remove(selected_door)\n    print 'You have selected a door with an unknown object'\n    #Turn 2:\n    while moderator_door == 'car':\n        moderator_door = choice(doors)\n    doors.remove(moderator_door)\n    print 'Moderator has opened a door with ', moderator_door\n    #Turn 3:\n    decision=raw_input('Wanna change your door? [yn]')\n    if decision=='y':\n        prise = doors[0]\n        print 'You have a door with ', prise\n    elif decision=='n':\n        prise = selected_door\n        print 'You have a door with ', prise\n    else:\n        prise = 'ERROR'\n        iters += 1\n        print 'ERROR:unknown command'\n    if prise == 'car':\n        cars += 1\n    elif prise != 'ERROR':\n        goats += 1\nprint '==============================='\nprint '          RESULTS              '\nprint '==============================='\nprint 'Goats:', goats\nprint 'Cars :', cars\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Another code sample is available at: http://standardwisdom.com/softwarejournal/code-samples/monty-hall-python/"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://standardwisdom.com/softwarejournal/code-samples/monty-hall-python/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://standardwisdom.com/softwarejournal/code-samples/monty-hall-python/"}]}, {"text": ["The code is a bit longer and may not use some of Python's cool features, but I hope it is nicely readable.", "Used Python precisely because I didn't have any experience in it,  so feedback is appreciated."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]