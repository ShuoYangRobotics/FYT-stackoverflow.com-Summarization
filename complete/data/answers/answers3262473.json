[[{"text": ["I see you mention you are using Prototype.js.", "You can track active requests with Prototype by checking the Ajax.activeRequestCount value.", "You could check this using setTimeout or setInterval to make sure that any requests triggered on page load have completed (if that's what you're looking to do)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Ajax.activeRequestCount", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["You would need to keep track of each XMLHttpRequest and monitor whether it completes or the asynchronous callback is executed."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Assuming you are using prototype.js you could keep track with a counter of all your request objects"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n var ACTIVE_REQUESTS = 0; // GLOBAL\n\nACTIVE_REQUESTS++\nnew Ajax.Request('/your/url', {\n  onSuccess: function(response) {\n    ACTIVE_REQUESTS--;\n    // Handle the response content...\n  }\n}));\n\nconsole.log(\"there are \" + ACTIVE_REQUESTS + \" open AJAX requests pending\");\n</code>\n</pre>\n", "senID": 1}], [{"text": ["i think that will not solve the problem.", "Even if you got the status of an AJAX request, that's just one request, another http/ajax request might follow.", "in between those events, the status for an ajax request is completed so the script i would want to execute will be executed w/c is not what i really wanted.", "what i wanted is to check if there are no pending request."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["i thought something like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n while(1){\n    if( window.status == 'Done'){\n        executeFunction();\n        break;\n    } else {\n        //set time out for a few milliseconds\n    }\n}\n</code>\n</pre>\n", "senID": 2}], [{"text": ["figured it out.", "thanks for the effort guys.", "just plain and simple javascript."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n interValRef = 0;\n\ninterValRef = setInterval(\"checkState();\",100)\n\nfunction checkState(){\n    if(document.readyState == 'complete'){\n        clearInterval(interValRef);\n        myFunc();\n    }\n}\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I think you want to know if the HTML is fully loaded.", "In this case you can use the dom:loaded event.", "Here is an example on how to use it with prototype (but there must be a variant for other JS frameworks):"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "dom:loaded", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.prototypejs.org/api/document/observe"}]}, {"code": "<pre>\n<code>\n document.observe(\"dom:loaded\", function() {\n  // do whatever you want to do\n});\n</code>\n</pre>\n", "senID": 1}, {"text": ["This event will fire as soon as the DOM tree is loaded.", "So even before all the images or external data (including iframe) are loaded."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]