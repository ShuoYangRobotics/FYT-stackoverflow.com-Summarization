[[{"text": ["This is normal (and has nothing to do with Python) because 8.83 cannot be represented exactly as a binary float, just as 1/3 cannot be represented exactly in decimal (0.333333... ad infinitum)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "This is normal", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/floatingpoint.html#tut-fp-issues"}]}, {"text": ["If you want to ensure absolute precision, you need the decimal module:"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "decimal", "tag": "a", "pos": 0, "childList": [{"text": "decimal", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/decimal.html"}, {"text": "decimal", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import decimal\n&gt;&gt;&gt; a = decimal.Decimal(\"8.833333333339\")\n&gt;&gt;&gt; print(round(a,2))\n8.83\n</code>\n</pre>\n", "senID": 2}], [{"text": ["8.833333333339 (or 8.833333333333334) properly rounded to two decimal places is 8.83.", "Mathematically it sounds like what you want is a ceiling function.", "The one in Python's math module is named ceil:"], "childNum": 8, "tag": "p", "senID": 0, "childList": [{"text": "8.833333333339", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "8.833333333333334", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "rounded", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "8.83", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "ceiling function", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Floor_and_ceiling_functions"}, {"text": "math", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"href": "http://docs.python.org/library/math.html?highlight=ceil#math.ceil", "text": "ceil", "childNum": 1, "tag": "a", "childList": [{"text": "ceil", "tag": "code"}]}, {"text": "ceil", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n import math\n\nv = 8.8333333333333339\nprint math.ceil(v*100)/100\n# 8.84\n</code>\n</pre>\n", "senID": 1}, {"text": ["Floor and ceiling functions generally map a real number to the largest previous or the smallest following integer, which has zero decimal places -- so to use them for 2 decimal places the number is first multiplied by 10**2 (or 100) and then divided by it to compensate."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["How this applies to the linked loan and payment calculator problem"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "How this applies to the linked loan and payment calculator problem", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["From the sample output it appears that they rounded up the monthly payment, which is what some people call what the ceiling function does.", "This means that each month a little more the 1/12th of the total amount is being paid.", "That made the final payment a little smaller than usual -- since the remaining unpaid balance was only 8.76."], "childNum": 3, "tag": "p", "senID": 4, "childList": [{"text": "up", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "th", "childNum": 0, "tag": "sup", "pos": 1, "childList": []}, {"text": "8.76", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["It would be equally valid to use normal rounding producing a monthly payment of 8.83 and a slightly higher final payment of 8.87.", "However, in the real world people generally don't like to have their payments go up, so rounding up each payment is the common practice -- it also returns the money to the lender more quickly."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "8.83", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "8.87", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["use the decimal module: http://docs.python.org/library/decimal.html"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "decimal", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://docs.python.org/library/decimal.html", "text": "http://docs.python.org/library/decimal.html", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["If you round 8.8333333333339 to 2 decimals, the correct answer is 8.83, not 8.84.", "The reason you got 8.83000000001 is because 8.83 is a number that cannot be correctly reprecented in binary, and it gives you the closest one.", "If you want to print it without all the zeros, do as VGE says:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n print \"%.2f\" % 8.833333333339   #(Replace number with the variable?)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If you want to round, 8.84 is the incorrect answer.", "8.833333333333 rounded is 8.83 not 8.84.", "If you want to always round up, then you can use math.ceil.", "Do both in a combination with string formatting, because rounding a float number itself doesn't make sense."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n \"%.2f\" % (math.ceil(x * 100) / 100)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You want to use the decimal module but you also need to specify the rounding mode.", "Here's an example:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import decimal\n&gt;&gt;&gt; decimal.Decimal('8.333333').quantize(decimal.Decimal('.01'), rounding=decimal.ROUND_UP)\nDecimal('8.34')\n&gt;&gt;&gt; decimal.Decimal('8.333333').quantize(decimal.Decimal('.01'), rounding=decimal.ROUND_DOWN)\nDecimal('8.33')\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}]]