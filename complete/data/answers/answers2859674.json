[[{"code": "<pre>\n<code>\n import ast\n\nL = [\"hello\", \"3\", \"3.64\", \"-1\"]\n\ndef tryeval(val):\n  try:\n    val = ast.literal_eval(val)\n  except ValueError:\n    pass\n  return val\n\nprint [tryeval(x) for x in L]\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Without using evaluation:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def convert(val):\n    constructors = [int, float, str]\n    for c in constructors:\n        try:\n            return c(val)\n        except ValueError:\n            pass\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n def tryEval(s):\n  try:\n    return eval(s, {}, {})\n  except:\n    return s\n\nmap(tryEval, [\"hello\", \"3\", \"3.64\", \"-1\"])\n</code>\n</pre>\n", "senID": 0}, {"text": ["Only do this if you trust the input.", "Also, be aware that it supports more than just literals; arithmetic expressions will be evaluated as well."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["If the you are truly interested in only strings, floats, and ints, I prefer the more verbose, less-evalful"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def interpret_constant(c):\n    try:\n        if str(int(c)) == c: return int(c)\n    except ValueError:\n        pass\n    try:\n        if str(float(c)) == c: return float(c)\n    except ValueError:\n        return c\n\ntest_list = [\"hello\", \"3\", \"3.64\", \"-1\"]\n\ntyped_list = [interpret_constant(x) for x in test_list]\nprint typed_list\nprint [type(x) for x in typed_list]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This is not really an answer, but I wanted to point out how important this can be when you have a database of parameters with schema ID,  PAR,  VAL.", "For instance:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "ID", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "PAR", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "VAL", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n ID  PAR      VAL\n001 velocity '123.45'\n001 name     'my_name'\n001 date     '18-dec-1978'\n</code>\n</pre>\n", "senID": 1}, {"text": ["This schema is appropriate when you don't know how many parameters you need to store for a certain ID.", "The disadvantage is precisely that the values in VAL are all strings, and need to be converted to the correct data type on demand.", "You can do this by adding a fourth column to the schema, called TYPE, or you can use any of the approaches proposed thus far."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "ID", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "VAL", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "TYPE", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["Good question!"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["PS.", "The database schema is related to one of my previous questions."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "one of my previous questions", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/2725568/how-to-structure-normalize-a-database-of-physical-parameters"}]}], [{"text": ["A variant of ryans's nice solution, for numpy users:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def tonum( x ):\n    \"\"\" -&gt; int(x) / float(x) / None / x as is \"\"\"\n    if np.isscalar(x):  # np.int8 np.float32 ...\n    # if isinstance( x, (int, long, float) ):\n        return x\n    try:\n        return int( x, 0 )  # 0: \"0xhex\" too\n    except ValueError:\n        try:\n            return float( x )  # strings nan, inf and -inf too\n        except ValueError:\n            if x == \"None\":\n                return None\n            return x\n\ndef numsplit( line, sep=None ):\n    \"\"\" line -&gt; [nums or strings ...] \"\"\"\n    return map( tonum, line.split( sep ))  # sep None: whitespace\n</code>\n</pre>\n", "senID": 1}]]