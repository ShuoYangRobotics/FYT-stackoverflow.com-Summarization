[[{"text": ["Cut and paste from the itertools recipes"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "itertools recipes", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/itertools.html#recipes"}]}, {"code": "<pre>\n<code>\n from itertools import ifilterfalse\n\ndef unique_everseen(iterable, key=None):\n    \"List unique elements, preserving order. Remember all elements ever seen.\"\n    # unique_everseen('AAAABBBCCDAABBB') --&gt; A B C D\n    # unique_everseen('ABBCcAD', str.lower) --&gt; A B C D\n    seen = set()\n    seen_add = seen.add\n    if key is None:\n        for element in ifilterfalse(seen.__contains__, iterable):\n            seen_add(element)\n            yield element\n    else:\n        for element in iterable:\n            k = key(element)\n            if k not in seen:\n                seen_add(k)\n                yield element\n</code>\n</pre>\n", "senID": 1}, {"text": ["I really wish they could go ahead and make a module out of those recipes soon.", "I'd very much like to be able to do from itertools_recipes import unique_everseen instead of using cut-and-paste every time I need something."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "from itertools_recipes import unique_everseen", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Use like this:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def unique_words(string, ignore_case=False):\n    key = None\n    if ignore_case:\n        key = str.lower\n    return \" \".join(unique_everseen(string.split(), key=key))\n\nstring2 = unique_words(string1)\n</code>\n</pre>\n", "senID": 4}], [{"code": "<pre>\n<code>\n def unique_list(l):\n    ulist = []\n    [ulist.append(x) for x in l if x not in ulist]\n    return ulist\n\na=\"calvin klein design dress calvin klein\"\na=' '.join(unique_list(a.split()))\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n string1 = \"calvin klein design dress calvin klein\"\nwords = string1.split()\nprint \" \".join(sorted(set(words), key=words.index))\n</code>\n</pre>\n", "senID": 0}, {"text": ["This sorts the set of all the (unique) words in your string by the word's index in the original list of words."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["In Python 2.7+, you could use collections.OrderedDict for this:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "collections.OrderedDict", "tag": "a", "pos": 0, "childList": [{"text": "collections.OrderedDict", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/dev/library/collections.html#collections.OrderedDict"}, {"text": "collections.OrderedDict", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n from collections import OrderedDict\ns = \"calvin klein design dress calvin klein\"\nprint ' '.join(OrderedDict((w,w) for w in s.split()).keys())\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n string = 'calvin klein design dress calvin klein'\n\ndef uniquify(string):\n    output = []\n    seen = set()\n    for word in string.split():\n        if word not in seen:\n            output.append(word)\n            seen.add(word)\n    return ' '.join(output)\n\nprint uniquify(string)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["You can use a set to keep track of already processed words."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n words = set()\nresult = ''\nfor word in string1.split():\n    if word not in words:\n        result = result + word + ' '\n        words.add(word)\nprint result\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Several answers are pretty close to this but haven't quite ended up where I did:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def uniques( your_string ):    \n    seen = set()\n    return ' '.join( seen.add(i) or i for i in your_string.split() if i not in seen )\n</code>\n</pre>\n", "senID": 1}, {"text": ["Of course, if you want it a tiny bit cleaner or faster, we can refactor a bit:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def uniques( your_string ):    \n    words = your_string.split()\n\n    seen = set()\n    seen_add = seen.add\n\n    def add(x):\n        seen_add(x)  \n        return x\n\n    return ' '.join( add(i) for i in words if i not in seen )\n</code>\n</pre>\n", "senID": 3}, {"text": ["I think the second version is about as performant as you can get in a small amount of code.", "(More code could be used to do all the work in a single scan across the input string but for most workloads, this should be sufficient."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]]