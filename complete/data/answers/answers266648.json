[[{"text": ["If you need more than looking at extension, one way would be to read the JPEG header, and check that it matches valid data.", "The format for this is:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n Start Marker  | JFIF Marker | Header Length | Identifier\n0xff, 0xd8    | 0xff, 0xe0  |    2-bytes    | \"JFIF\\0\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["so a quick recogniser would be:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def is_jpg(filename):\n    data = open(filename,'rb').read(11)\n    if data[:4] != '\\xff\\xd8\\xff\\xe0': return False\n    if data[6:] != 'JFIF\\0': return False\n    return True\n</code>\n</pre>\n", "senID": 3}, {"text": ["However this won't catch any bad data in the body.", "If you want a more robust check, you could try loading it with PIL.", "eg:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "PIL", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.pythonware.com/products/pil/"}]}, {"code": "<pre>\n<code>\n from PIL import Image\ndef is_jpg(filename):\n    try:\n        i=Image.open(filename)\n        return i.format =='JPEG'\n    except IOError:\n        return False\n</code>\n</pre>\n", "senID": 5}], [{"text": ["No need to use and install the PIL lybrary for this, there is the imghdr standard module exactly fited for this sort of usage."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["See http://docs.python.org/library/imghdr.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.python.org/library/imghdr.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/imghdr.html"}]}, {"code": "<pre>\n<code>\n import imghdr\n\nimage_type = imghdr.what(filename)\nif not image_type:\n    print \"error\"\nelse:\n    print image_type\n</code>\n</pre>\n", "senID": 2}, {"text": ["As you have an image from a stream you may use the stream option probably like this :"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n image_type = imghdr.what(filename, incomming_image)\n</code>\n</pre>\n", "senID": 4}, {"tag": "hr", "senID": 5}, {"text": ["Actualy this works for me in Pylons (even if i have not finished everything) :\nin the Mako template :"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n ${h.form(h.url_for(action=\"save_image\"), multipart=True)}\nUpload file: ${h.file(\"upload_file\")} &lt;br /&gt;\n${h.submit(\"Submit\", \"Submit\")}\n${h.end_form()}\n</code>\n</pre>\n", "senID": 7}, {"text": ["in the upload controler :"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n def save_image(self):\n    upload_file = request.POST[\"upload_file\"]\n    image_type = imghdr.what(upload_file.filename, upload_file.value)\n    if not image_type:\n        return \"error\"\n    else:\n        return image_type\n</code>\n</pre>\n", "senID": 9}], [{"text": ["You might have to check the bytes of the image http://www.obrador.com/essentialjpeg/headerinfo.htm describes how the jpeg header is set up"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.obrador.com/essentialjpeg/headerinfo.htm", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.obrador.com/essentialjpeg/headerinfo.htm"}]}], [{"text": ["Use PIL.", "If it can open the file, it's an image."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PIL", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.pythonware.com/products/pil/"}]}, {"text": ["From the tutorial..."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import Image\n&gt;&gt;&gt; im = Image.open(\"lena.ppm\")\n&gt;&gt;&gt; print im.format, im.size, im.mode\n</code>\n</pre>\n", "senID": 2}], [{"text": ["also PIL raises a memmory error if you upload some files.", "(FE: i tried to feed it a 8kb xls...)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["A more general solution is to use the Python binding to the Unix \"file\" command.", "For this, install the package python-magic.", "Example:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import magic\n\nms = magic.open(magic.MAGIC_NONE)\nms.load()\ntype =  ms.file(\"/path/to/some/file\")\nprint type\n\nf = file(\"/path/to/some/file\", \"r\")\nbuffer = f.read(4096)\nf.close()\n\ntype = ms.buffer(buffer)\nprint type\n\nms.close()\n</code>\n</pre>\n", "senID": 1}]]