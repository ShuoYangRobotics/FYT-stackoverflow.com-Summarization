[[{"text": ["If your float is always expressed in decimal notation something like"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import re\n&gt;&gt;&gt; re.findall(\"\\d+.\\d+\", \"Current Level: 13.4 db.\")\n['13.4']\n</code>\n</pre>\n", "senID": 1}, {"text": ["may suffice."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["A more robust version would be:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; re.findall(r\"[-+]?\\d*\\.\\d+|\\d+\", \"Current Level: -13.2 db or 14.2 or 3\")\n['-13.2', '14.2', '3']\n</code>\n</pre>\n", "senID": 4}, {"text": ["If you want to validate user input, you could alternatively also check for a float by stepping to it directly:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n user_input = \"Current Level: 1e100 db\"\nfor token in user_input.split():\n    try:\n        # if this succeeds, you have your (first) float\n        print float(token), \"is a float\"\n    except ValueError:\n        print token, \"is something else\"\n\n# =&gt; Would print ...\n#\n# Current is something else\n# Level: is something else\n# 1e+100 is a float\n# db is something else\n</code>\n</pre>\n", "senID": 6}], [{"text": ["You may like to try something like this which covers all the bases, including not relying on whitespace after the number:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import re\n&gt;&gt;&gt; numeric_const_pattern = r\"\"\"\n...     [-+]? # optional sign\n...     (?:\n...         (?: \\d* \\. \\d+ ) # .1 .12 .123 etc 9.1 etc 98.1 etc\n...         |\n...         (?: \\d+ \\.? ) # 1. 12. 123. etc 1 12 123 etc\n...     )\n...     # followed by optional exponent part if desired\n...     (?: [Ee] [+-]? \\d+ ) ?\n...     \"\"\"\n&gt;&gt;&gt; rx = re.compile(numeric_const_pattern, re.VERBOSE)\n&gt;&gt;&gt; rx.findall(\".1 .12 9.1 98.1 1. 12. 1 12\")\n['.1', '.12', '9.1', '98.1', '1.', '12.', '1', '12']\n&gt;&gt;&gt; rx.findall(\"-1 +1 2e9 +2E+09 -2e-9\")\n['-1', '+1', '2e9', '+2E+09', '-2e-9']\n&gt;&gt;&gt; rx.findall(\"current level: -2.03e+99db\")\n['-2.03e+99']\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n re.findall(r\"[-+]?\\d*\\.\\d+|\\d+\", \"Current Level: -13.2 db or 14.2 or 3\")\n</code>\n</pre>\n", "senID": 0}, {"text": ["as described above, works really well!", "One suggestion though:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n re.findall(r\"[-+]?\\d*\\.\\d+|[-+]?\\d+\", \"Current Level: -13.2 db or 14.2 or 3 or -3\")\n</code>\n</pre>\n", "senID": 2}, {"text": ["will also return negative int values (like -3 in the end of this string)"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Something quick and dirty that should work"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n [0-9]*\\.?[0-9]*\n</code>\n</pre>\n", "senID": 1}, {"text": ["Edit:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Edit", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["This actually doesn't work =\\"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Another approach that may be more readable is simple type conversion.", "I've added a replacement function to cover instances where people may enter European decimals:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; for possibility in \"Current Level: -13.2 db or 14,2 or 3\".split():\n...     try:\n...         str(float(possibility.replace(',', '.')))\n...     except ValueError:\n...         pass\n'-13.2'\n'14.2'\n'3.0'\n</code>\n</pre>\n", "senID": 1}, {"text": ["This has disadvantages too however.", "If someone types in \"1,000\", this will be converted to 1.", "Also, it assumes that people will be inputting with whitespace between words.", "This is not the case with other languages, such as Chinese."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I think that you'll find interesting stuff in the following answer of mine that I did for a previous similar question:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://stackoverflow.com/q/5929469/551449"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://stackoverflow.com/q/5929469/551449", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/q/5929469/551449"}]}, {"text": ["In this answer, I proposed a  pattern that allows a regex to catch any kind of number and since I have nothing else to add to it, I think it is fairly complete"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]