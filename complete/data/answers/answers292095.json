[[{"text": ["The standard approach is to use the select module."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "select", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/doc/2.5.2/lib/module-select.html"}]}, {"text": ["However, this doesn't work on Windows.", "For that, you can use the msvcrt module's keyboard polling."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "msvcrt", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.python.org/doc/2.5.2/lib/msvcrt-console.html"}]}, {"text": ["Often, this is done with multiple threads -- one per device being \"watched\" plus the background processes that might need to be interrupted by the device."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You might look at how pygame handles this to steal some ideas."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pygame", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://books.google.com/books?id=W8T2f7F_rs0C&pg=PA147&lpg=PA147&dq=pygame+keyboard+polling&source=web&ots=Chhw92jDrx&sig=lavBFmwAUzB06J5er8T-AHN4eWs&hl=en&sa=X&oi=book_result&resnum=1&ct=result"}]}], [{"text": ["Ok, since my attempt to post my solution in a comment failed, here's what I was trying to say.", "I could do exactly what I wanted from native Python (on Windows, not anywhere else though) with the following code:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import msvcrt \n\ndef kbfunc(): \n   x = msvcrt.kbhit()\n   if x: \n      ret = ord(msvcrt.getch()) \n   else: \n      ret = 0 \n   return ret\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n import sys\nimport select\n\ndef heardEnter():\n    i,o,e = select.select([sys.stdin],[],[],0.0001)\n    for s in i:\n        if s == sys.stdin:\n            input = sys.stdin.readline()\n            return True\n    return False\n</code>\n</pre>\n", "senID": 0}], [{"text": ["A solution using the curses module.", "Printing a numeric value corresponding to each key pressed:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import curses\n\ndef main(stdscr):\n    # do not wait for input when calling getch\n    stdscr.nodelay(1)\n    while True:\n        # get keyboard input, returns -1 if none available\n        c = stdscr.getch()\n        if c != -1:\n            # print numeric value\n            stdscr.addstr(str(c))\n            stdscr.refresh()\n            # return curser to start position\n            stdscr.move(0, 0)\n\nif __name__ == '__main__':\n    curses.wrapper(main)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["From the comments:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import msvcrt # built-in module\n\ndef kbfunc():\n    return ord(msvcrt.getch()) if msvcrt.kbhit() else 0\n</code>\n</pre>\n", "senID": 1}, {"tag": "hr", "senID": 2}, {"text": ["Thanks for the help.", "I ended up writing a C DLL called PyKeyboardAccess.dll and accessing the crt conio functions, exporting this routine:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n #include &lt;conio.h&gt;\n\nint kb_inkey () {\n   int rc;\n   int key;\n\n   key = _kbhit();\n\n   if (key == 0) {\n      rc = 0;\n   } else {\n      rc = _getch();\n   }\n\n   return rc;\n}\n</code>\n</pre>\n", "senID": 4}, {"text": ["And I access it in python using the ctypes module (built into python 2.5):"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n import ctypes\nimport time\n\n#\n# first, load the DLL\n#\n\n\ntry:\n    kblib = ctypes.CDLL(\"PyKeyboardAccess.dll\")\nexcept:\n    raise (\"Error Loading PyKeyboardAccess.dll\")\n\n\n#\n# now, find our function\n#\n\ntry:\n    kbfunc = kblib.kb_inkey\nexcept:\n    raise (\"Could not find the kb_inkey function in the dll!\")\n\n\n#\n# Ok, now let's demo the capability\n#\n\nwhile 1:\n    x = kbfunc()\n\n    if x != 0:\n        print \"Got key: %d\" % x\n    else:\n        time.sleep(.01)\n</code>\n</pre>\n", "senID": 6}]]