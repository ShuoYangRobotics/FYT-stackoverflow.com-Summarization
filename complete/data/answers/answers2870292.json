[[{"text": ["There's no simple answer to that question.", "It takes time for your code to be \"Pythonic\".", "Don't try and recreate Java idioms in Python.", "It will just take time to learn Python idioms."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "\"Pythonic\"", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://faassen.n--tree.net/blog/view/weblog/2005/08/06/0"}]}, {"text": ["Take a look at Code Like a Pythonista: Idiomatic Python, Style Guide for Python Code and Python for Java Programmers."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "Code Like a Pythonista: Idiomatic Python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html"}, {"href": "http://www.python.org/dev/peps/pep-0008/", "text": "Style Guide for Python Code", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://www.squidoo.com/javaToPython", "text": "Python for Java Programmers", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["Jacob Hall\u00e9n once observed that the best Python style follows Tufte's rejection of decoration (though Tufte's field is not programming languages, but visual display of information): don't waste \"ink\" (pixels) or \"paper\" (space) for mere decoration."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Tufte", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Edward_Tufte"}]}, {"text": ["A lot follows from this principle: no redundant parentheses, no semicolons, no silly \"ascii boxes\" in comments and docstrings, no wasted space to \"align\" things on different rows, single quotes unless you specifically need double quotes, no \\ to continue lines except when mandatory, no comments that merely remind the reader of the language's rules (if the reader does not know the language you're in trouble anyway;-), and so forth."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I should point out that some of these consequences of the \"Tufte spirit of Python\" are more controversial than others, within the Python community.", "But the language sure respects \"Tufte's Spirit\" pretty well..."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Moving to \"more controversial\" (but sanctioned by the Zen of Python -- import this at an interpreter prompt): \"flat is better than nested\", so \"get out as soon as sensible\" rather than nesting.", "Let me explain:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "import this", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n if foo:\n  return bar\nelse:\n  baz = fie(fum)\n  return baz + blab\n</code>\n</pre>\n", "senID": 4}, {"text": ["this isn't terrible, but neither is it optimal: since \"return\" ``gets out'', you can save the nesting:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n if foo:\n  return bar\nbaz = fie(fum)\nreturn baz + blab\n</code>\n</pre>\n", "senID": 6}, {"text": ["A sharper example:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n for item in container:\n  if interesting(item):\n    dothis(item)\n    dothat(item)\n    theother(item)\n</code>\n</pre>\n", "senID": 8}, {"text": ["that large block being double-nested is not neat... consider the flatter style:"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n for item in container:\n  if not interesting(item):\n    continue\n  dothis(item)\n  dothat(item)\n  theother(item)\n</code>\n</pre>\n", "senID": 10}, {"text": ["BTW, and an aside that's not specifically of Python-exclusive style -- one of my pet peeves (in any language, but in Python Tufte's Spirit supports me;-):"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"code": "<pre>\n<code>\n if not something:\n  this()\n  that()\n  theother()\nelse:\n  blih()\n  bluh()\n  blah()\n</code>\n</pre>\n", "senID": 12}, {"text": ["\"if not ... else\" is contorted!", "Swap the two halves and lose the not:"], "childNum": 2, "tag": "p", "senID": 13, "childList": [{"text": "contorted", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "not", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n if something:\n  blih()\n  bluh()\n  blah()\nelse:\n  this()\n  that()\n  theother()\n</code>\n</pre>\n", "senID": 14}], [{"text": ["The best place to start is probably PEP-8, which is the official Python style guide.", "It covers a lot of the basics for what is considered standard."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PEP-8", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0008/"}]}], [{"text": ["In addition, some previous stackoverflow questions:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 5, "lis": [{"text": ["What are the important language features idioms of python to learn early on?"], "childNum": 0, "tag": "a", "senID": 1, "childList": []}, {"text": ["What does pythonic mean?"], "childNum": 0, "tag": "a", "senID": 2, "childList": []}, {"text": ["What defines \u201cpythonian\u201d or \u201cpythonic\u201d?"], "childNum": 0, "tag": "a", "senID": 3, "childList": []}, {"text": ["Python: Am I missing something?"], "childNum": 0, "tag": "a", "senID": 4, "childList": []}, {"text": ["Zen of python"], "childNum": 0, "tag": "a", "senID": 5, "childList": []}]}], [{"text": ["\"Everything is a class\" is a Java idiom that's specifically not a Python idiom.", "(Almost) everything can be a class in Python, and if that's more comfortable for you then go for it, but Python doesn't require such a thing.", "Python is not a purely object-oriented language, and in my (limited) experience it's good to take that to heart."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Syntax is only the tip of an iceberg.", "There are a number of different language construct that Java programmers should be aware of, e.g.", "Python do not need to use interface"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Creating an interface and swappable implementations in python - Stack Overflow"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Creating an interface and swappable implementations in python - Stack Overflow", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/2860106/creating-an-interface-and-swappable-implementations-in-python/2860419"}]}, {"text": ["The other really useful idiom is everything can be convert to a boolean value with an intuitive meaning in Python.", "For example, to check for an empty array, you simply do"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n if not my_array:\n  return\n...process my_array...\n</code>\n</pre>\n", "senID": 3}, {"text": ["The first condition is equivalent to Java's"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n if ((my_array == null) || (my_array.length == 0)) {\n  return\n}\n</code>\n</pre>\n", "senID": 5}, {"text": ["This is a godsend in Python.", "Not only is it more concise, it also avoid a Java pitfall where many people do not check for both conditions consistently.", "Countless NullPointerException are averted as a result."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]]