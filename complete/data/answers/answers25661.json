[[{"text": ["I've never attempted it myself, but hearing plenty about other people who've tried, it's not a road you want to go down."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["There is the alternative of putting the gui in pygame itself.", "There are plenty of gui toolkits built specifically for pygame that you could use.", "Most of them are rather unfinished, but there are 2 big, actively maintained ones: PGU and OcempGUI.", "The full list on the pygame site is here."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "PGU", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.pygame.org/project/108/"}, {"text": "OcempGUI", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.pygame.org/project/125/"}, {"text": "here", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://www.pygame.org/tags/gui"}]}], [{"text": ["http://faq.pygtk.org/index.py?file=faq23.042.htp&amp;req=show mentions it all:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://faq.pygtk.org/index.py?file=faq23.042.htp&amp;req=show", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://faq.pygtk.org/index.py?file=faq23.042.htp&req=show"}]}, {"text": ["You need to create a drawing area and set the environment variable SDL_WINDOWID after it's realized:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\nimport os\n\n import gobject\n import gtk\n import pygame\n\n WINX = 400\n WINY = 200\n\n window = gtk.Window()\n window.connect('delete-event', gtk.main_quit)\n window.set_resizable(False)\n area = gtk.DrawingArea()\n area.set_app_paintable(True)\n area.set_size_request(WINX, WINY)\n window.add(area)\n area.realize()\n\n # Force SDL to write on our drawing area\n os.putenv('SDL_WINDOWID', str(area.window.xid))\n\n # We need to flush the XLib event loop otherwise we can't\n # access the XWindow which set_mode() requires\n gtk.gdk.flush()\n\n pygame.init()\n pygame.display.set_mode((WINX, WINY), 0, 0)\n screen = pygame.display.get_surface()\n\n image_surface = pygame.image.load('foo.png')\n screen.blit(image_surface, (0, 0))\n\n gobject.idle_add(pygame.display.update)\n\n window.show_all()\n\n while gtk.event_pending():\n     # pygame/SDL event processing goes here\n     gtk.main_iteration(False)\n</pre>\n", "senID": 2}], [{"text": ["You may be interested in this message thread.", "Looks like they recommend against it."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "this message thread", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.daa.com.au/pipermail/pygtk/2006-September/012888.html"}]}], [{"text": ["PyGame works much better when it can manage its own window, or even better, use the whole screen.", "GTK has flexible enough widgets to allow creation of a drawing area. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["This page may help, though, if you want to try it."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "This page", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://faq.pygtk.org/index.py?req=show&file=faq23.042.htp"}]}], [{"text": ["I tried doing this myself a while ago, and I never got it to work perfectly.", "Actually I never got it to work at all under Windows, as it kept crashing the entire OS and I ran out of patience.", "I continued to use it though as it was only important it ran on Linux, and was only a small project.", "I'd strongly recommend you investigate alternatives.", "It always felt like a nasty hack, and made me feel dirty."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["There's a simple solution that might work for you.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Write the PyGTK stuff and PyGame stuff as separate applications.", "Then from the PyGTK application call the PyGame application, using os.system to call the PyGame application.", "If you need to share data between the two then either use a database, pipes or IPC."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]