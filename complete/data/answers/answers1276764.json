[[{"text": ["I just timed some functions out of curiosity"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n $ python -m timeit -s \\\n     \"import string\" \\\n     \"''.join(ch for ch in string.printable if ch.isalnum())\" \n10000 loops, best of 3: 57.6 usec per loop\n\n$ python -m timeit -s \\\n    \"import string\" \\\n    \"filter(str.isalnum, string.printable)\"                 \n10000 loops, best of 3: 37.9 usec per loop\n\n$ python -m timeit -s \\\n    \"import re, string\" \\\n    \"re.sub('[\\W_]', '', string.printable)\"\n10000 loops, best of 3: 27.5 usec per loop\n\n$ python -m timeit -s \\\n    \"import re, string\" \\\n    \"re.sub('[\\W_]+', '', string.printable)\"                \n100000 loops, best of 3: 15 usec per loop\n\n$ python -m timeit -s \\\n    \"import re, string; pattern = re.compile('[\\W_]+')\" \\\n    \"pattern.sub('', string.printable)\" \n100000 loops, best of 3: 11.2 usec per loop\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Regular expressions to the rescue:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import re\nre.sub(r'\\W+', '', your_string)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Use the str.translate() method."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "str.translate()", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Presuming you will be doing this often:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["(1) Once, create a string containing all the characters you wish to delete:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n delchars = ''.join(c for c in map(chr, range(256)) if not c.isalnum())\n</code>\n</pre>\n", "senID": 3}, {"text": ["(2) Whenever you want to scrunch a string:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n scrunched = s.translate(None, delchars)\n</code>\n</pre>\n", "senID": 5}, {"text": ["The setup cost probably compares favourably with re.compile; the marginal cost is way lower:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n C:\\junk&gt;\\python26\\python -mtimeit -s\"import string;d=''.join(c for c in map(chr,range(256)) if not c.isalnum());s=string.printable\" \"s.translate(None,d)\"\n100000 loops, best of 3: 2.04 usec per loop\n\nC:\\junk&gt;\\python26\\python -mtimeit -s\"import re,string;s=string.printable;r=re.compile(r'[\\W_]+')\" \"r.sub('',s)\"\n100000 loops, best of 3: 7.34 usec per loop\n</code>\n</pre>\n", "senID": 7}, {"text": ["Note: Using string.printable as benchmark data gives the pattern '[\\W_]+' an unfair advantage; all the non-alphanumeric characters are in one bunch ... in typical data there would be more than one substitution to do:"], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "Using string.printable as benchmark data gives the pattern '[\\W_]+' an unfair advantage", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n C:\\junk&gt;\\python26\\python -c \"import string; s = string.printable; print len(s),repr(s)\"\n100 '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\"#$%&amp;\\'()*+,-./:;=&gt;?@[\\\\]^_`{|}~ \\t\\n\\r\\x0b\\x0c'\n</code>\n</pre>\n", "senID": 9}, {"text": ["Here's what happens if you give re.sub a bit more work to do:"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n C:\\junk&gt;\\python26\\python -mtimeit -s\"d=''.join(c for c in map(chr,range(256)) if not c.isalnum());s='foo-'*25\" \"s.translate(None,d)\"\n1000000 loops, best of 3: 1.97 usec per loop\n\nC:\\junk&gt;\\python26\\python -mtimeit -s\"import re;s='foo-'*25;r=re.compile(r'[\\W_]+')\" \"r.sub('',s)\"\n10000 loops, best of 3: 26.4 usec per loop\n</code>\n</pre>\n", "senID": 11}], [{"text": ["You could try:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n print ''.join(ch for ch in some_string if ch.isalnum())\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; import re\n&gt;&gt;&gt; string = \"Kl13@\u00a3$%[};'\\\"\"\n&gt;&gt;&gt; pattern = re.compile('\\W')\n&gt;&gt;&gt; string = re.sub(pattern, '', string)\n&gt;&gt;&gt; print string\nKl13\n</code>\n</pre>\n", "senID": 0}], [{"text": ["How about:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def ExtractAlphanumeric(InputString):\n    from string import ascii_letters, digits\n    return \"\".join([ch for ch in InputString if ch in (ascii_letters + digits)])\n</code>\n</pre>\n", "senID": 1}, {"text": ["This works by using list comprehension to produce a list of the characters in InputString if they are present in the combined ascii_letters and digits strings.", "It then joins the list together into a string."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "InputString", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "ascii_letters", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "digits", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}]]