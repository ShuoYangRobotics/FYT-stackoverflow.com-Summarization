[[{"text": ["Personally I don't see a difference between callbacks, listeners, and delegates."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The observer pattern (a.k.a listeners, a.k.a \"multiple callbacks\") is easy to implement - just hold a list of observers, and add or remove callables from it.", "These callables can be functions, bound methods, or classes with the __call__ magic method.", "All you have to do is define the interface you expect from these - e.g.", "do they receive any parameters."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "observer pattern", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Observer_pattern"}, {"text": "__call__", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n class Foo(object):\n  def __init__(self):\n    self._bar_observers = []\n\n  def add_bar_observer(self, observer):\n    self._bar_observers.append(observer)\n\n  def notify_bar(self, param):\n    for observer in self._bar_observers:\n      observer(param)\n\ndef observer(param):\n  print \"observer(%s)\" % param\n\nclass Baz(object):\n  def observer(self, param):\n    print \"Baz.observer(%s)\" % param\n\nbaz = Baz()\n\nfoo = Foo()\n\nfoo.add_bar_observer(observer) # function\nfoo.add_bar_observer(baz.observer) # bound method\n\nfoo.notify_bar(3)\n</code>\n</pre>\n", "senID": 2}], [{"text": ["I can't speak for common approaches, but this page (actual copy is unavailable) has an implementation of the observer pattern that I like."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "this page", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.suttoncourtenay.org.uk/duncan/accu/pythonpatterns.html"}]}, {"text": ["Here's the Internet Archive link:\nhttp://web.archive.org/web/20060612061259/http://www.suttoncourtenay.org.uk/duncan/accu/pythonpatterns.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://web.archive.org/web/20060612061259/http://www.suttoncourtenay.org.uk/duncan/accu/pythonpatterns.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://web.archive.org/web/20060612061259/http://www.suttoncourtenay.org.uk/duncan/accu/pythonpatterns.html"}]}], [{"text": ["It all depends on the level of complexity your application requires.", "For simple events, callbacks will probably do.", "For more complex patterns and decoupled levels you should use some kind of a publish-subscribe implementation, such as PyDispatcher or wxPython's pubsub."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PyDispatcher", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://pydispatcher.sourceforge.net/"}]}, {"text": ["See also this discussion."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "this discussion", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/115844/recommended-python-publish-subscribe-dispatch-module"}]}], [{"text": ["Most of the Python libraries I have used implement a callback model for their event notifications, which I think suits the language fairly well.", "Pygtk does this by deriving all objects from GObject, which implements callback-based signal handling.", "(Although this is a feature of the underlying C GTK implementation, not something inspired by the language.", ")  However, Pygtkmvc does an interesting job of implementing an observer pattern (and MVC) over the top of Pygtk.", "It uses a very ornate metaclass based implementation, but I have found that it works fairly well for most cases.", "The code is reasonably straightforward to follow, as well, if you are interested in seeing one way in which this has been done."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "Pygtk", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.pygtk.org/"}, {"text": "GObject", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.pygtk.org/docs/pygobject/class-gobject.html"}, {"text": "Pygtkmvc", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://sourceforge.net/projects/pygtkmvc/"}]}], [{"text": ["Personally, I've only seen callbacks used.", "However, I haven't seen that much event driven python code so YMMV."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I have seen listeners and callbacks used.", "But AFAIK there is no Python way.", "They should be equally feasible if the application in question is suitable."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["The matplotlib.cbook module contains a class CallbackRegistry that you might want to have a look at.", "From the documentation:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "matplotlib.cbook", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "CallbackRegistry", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "documentation", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://matplotlib.sourceforge.net/api/cbook_api.html"}]}, {"code": "<pre>\nHandle registering and disconnecting for a set of signals and\ncallbacks:\n\n   signals = 'eat', 'drink', 'be merry'\n\n   def oneat(x):\n       print 'eat', x\n\n   def ondrink(x):\n       print 'drink', x\n\n   callbacks = CallbackRegistry(signals)\n\n   ideat = callbacks.connect('eat', oneat)\n   iddrink = callbacks.connect('drink', ondrink)\n\n   #tmp = callbacks.connect('drunk', ondrink) # this will raise a ValueError\n\n   callbacks.process('drink', 123)    # will call oneat\n   callbacks.process('eat', 456)      # will call ondrink\n   callbacks.process('be merry', 456) # nothing will be called\n   callbacks.disconnect(ideat)        # disconnect oneat\n   callbacks.process('eat', 456)      # nothing will be called\n</pre>\n", "senID": 1}, {"text": ["You probably do not want a dependency to the matplotlib package.", "I suggest you simply copy-paste the class into your own module from the source code."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "source code", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://matplotlib.svn.sourceforge.net/viewvc/matplotlib/trunk/matplotlib/lib/matplotlib/cbook.py?view=markup"}]}], [{"text": ["I'm searching for an implementation to register and handle events in Python.", "My only experience is with Gobject, but have only used it with PyGtk.", "It is flexible, but might be overly complicated for some users.", "I have come across of few other interesting candidates as well, but it's not clear how exactly they compare to one another."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Gobject", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.pygtk.org/docs/pygobject/class-gobject.html"}]}, {"tag": "ul", "num": 2, "lis": [{"text": ["Pyevent"], "childNum": 0, "tag": "a", "senID": 1, "childList": []}, {"text": ["Zope Event"], "childNum": 0, "tag": "a", "senID": 2, "childList": []}]}]]