[[{"text": ["You could always use string.split():"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "string.split()", "tag": "a", "pos": 0, "childList": [{"text": "string.split()", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/string.html#string.split"}, {"text": "string.split()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; print '\\\\' + path.split('\\\\', 2)[-1]\n\\bar\\baz\\text.txt\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I'm not sure what you mean when you say \"top-level parent directory\".", "Your top-level directory is C:\\.", "Parent of what?", "If you're trying to get a relative path that starts with the parent of your current working directory, try this:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "C:\\", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n import os.path\nos.path.relpath(\"C:\\\\foo\\\\bar\\\\baz\\\\text.txt\", os.path.dirname(os.path.realpath('..')))\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n In [44]: path = 'a/b/c'\n\nIn [45]: back = os.path.relpath('.', os.path.join(path, '..'))\n\nIn [46]: back\nOut[46]: '..\\\\..'\n\nIn [47]: tail = os.path.relpath(path, os.path.join(path, back)))\n\nIn [48]: tail\nOut[48]: 'b\\\\c'\n</code>\n</pre>\n", "senID": 0}, {"text": ["Aka no not that I know of."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I would keep it simple.", "Convert both cwd and your input path into absolute paths and then just use startswith and slicing"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n path = os.path.abspath(path)\n#Make sure you finish curDir with a path separator\n#to avoid incorrect partial matches\ncurDir = os.path.abspath(\".\") + os.path.sep\nif path.startswith(curDir):\n    whatYouWant = path[len(curDir) - 1:]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["does this suit your requirement?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; x = r'C:\\foo\\bar\\baz\\text.txt'\n&gt;&gt;&gt; print x.split(':')[-1]\n\\foo\\bar\\baz\\text.txt\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Not sure what you want, but you may be able to use the little known rsplit, which splits from the right side of the string."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "rsplit", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; filepath = r\"C:\\foo\\bar\\baz\\text.txt\"\n&gt;&gt;&gt; directories_deep = 3\n&gt;&gt;&gt; os.path.sep.join(filepath.rsplit(os.path.sep, directories_deep)[-directories_deep:])\n'bar\\\\baz\\\\text.txt'\n</code>\n</pre>\n", "senID": 1}]]