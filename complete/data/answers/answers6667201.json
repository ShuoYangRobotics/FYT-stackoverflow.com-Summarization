[[{"text": ["If you really want a matrix, you might be better off using numpy. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import numpy\n&gt;&gt;&gt; numpy.zeros(25).reshape((5, 5))\narray([[ 0.,  0.,  0.,  0.,  0.],\n       [ 0.,  0.,  0.,  0.,  0.],\n       [ 0.,  0.,  0.,  0.,  0.],\n       [ 0.,  0.,  0.,  0.,  0.],\n       [ 0.,  0.,  0.,  0.,  0.]])\n&gt;&gt;&gt; numpy.matrix([[1, 2],[3, 4]])\nmatrix([[1, 2],\n        [3, 4]])\n</code>\n</pre>\n", "senID": 1}, {"text": ["Other ways (with output removed for compactness):"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; numpy.matrix('1 2; 3 4')\n&gt;&gt;&gt; numpy.arange(25).reshape((5, 5))\n&gt;&gt;&gt; numpy.array(range(25)).reshape((5, 5))\n&gt;&gt;&gt; numpy.ndarray((5, 5))\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You should make a list of lists, the best way is use nested comprehensions:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; matrix = [[0 for i in range(5)] for j in range(5)]\n&gt;&gt;&gt; pprint.pprint(matrix)\n[[0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0]]\n</code>\n</pre>\n", "senID": 1}, {"text": ["On your [5][5] example, you are creating a list with an integer \"5\" inside, and try to access its 5th item, and that naturally raises an IndexError because there is no 5th item."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "[5][5]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; l = [5]\n&gt;&gt;&gt; l[5]\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nIndexError: list index out of range\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You're technically trying to index an uninitialized array.", "You have to first initialize the outer list with lists before adding items:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n # Creates a list containing 5 lists initialized to 0\nMatrix = [[0 for x in xrange(5)] for x in xrange(5)]\n</code>\n</pre>\n", "senID": 1}, {"text": ["You can now add items to the list:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n Matrix[0][0] = 1\nMatrix[4][0] = 5\n\nprint Matrix[0][0] # prints 1\nprint Matrix[4][0] # prints 5\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You can easily simulate a two dimensonal array by nesting list data types like so.."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["matrix = [[ ], [ ]]"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["this would be a 1x2 matrix\nnotice that the two lists inside are null and can be filled up later, each of the nested lists are used as two rows... so by using n number lists with n number of items in each\nwe come to a a array with NxN ,rows x coulmns."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["so finally the code would be like so..."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n n = 5\nmatrix = [ [0 for x in range(n)]] * n\n</code>\n</pre>\n", "senID": 4}], [{"text": ["If you want to create an empty matrix, the correct syntax is"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n matrix = [[]]\n</code>\n</pre>\n", "senID": 1}, {"text": ["And if you want to generate a matrix of size 5 filled with 0, "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n matrix = [[0 for i in xrange(5)] for i in xrange(5)]\n</code>\n</pre>\n", "senID": 3}], [{"text": ["In Python you will be creating a list of lists.", "You do not have to declare the dimensions ahead of time, but you can.", "For example:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n matrix = []\nmatrix.append([])\nmatrix.append([])\nmatrix[0].append(2)\nmatrix[1].append(3)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Now matrix[0][0] == 2 and matrix[1][0] == 3.", "You can also use the list comprehension syntax.", "This example uses it twice over to build a \"two-dimensional list\":"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n from itertools import count, takewhile\nmatrix = [[i for i in takewhile(lambda j: j &lt; (k+1) * 10, count(k*10))] for k in range(10)]\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Here is a shorter notation for initializing a list of lists:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n matrix = [[0]*5 for i in range(5)]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Unfortunately shortening this to something like 5*[5*[0]] doesn't really work because you end up with 5 copies of the same list, so when you modify one of them they all change, for example:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "5*[5*[0]]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; matrix = 5*[5*[0]]\n&gt;&gt;&gt; matrix\n[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]\n&gt;&gt;&gt; matrix[4][4] = 2\n&gt;&gt;&gt; matrix\n[[0, 0, 0, 0, 2], [0, 0, 0, 0, 2], [0, 0, 0, 0, 2], [0, 0, 0, 0, 2], [0, 0, 0, 0, 2]]\n</code>\n</pre>\n", "senID": 3}]]