[[{"text": ["Use re.search(): "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "re.search()", "tag": "a", "pos": 0, "childList": [{"text": "re.search()", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/re.html#re.search"}, {"text": "re.search()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import re\n&gt;&gt;&gt; s1 = \"thishasadigit4here\"\n&gt;&gt;&gt; m = re.search(\"\\d\", s1)\n&gt;&gt;&gt; if m:\n...     print \"Digit found at position %d\" % m.start()\n... else:\n...     print \"No digit in that string\"\n... \nDigit found at position 13\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n import re\nmob = re.search('\\d', 'xdtwkeltjwlkejt7wthwk89lk')\nif mob:\n    print mob.start()\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Seems like a good job for a parser:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from simpleparse.parser import Parser\n&gt;&gt;&gt; s = 'xdtwkeltjwlkejt7wthwk89lk'\n&gt;&gt;&gt; grammar = \"\"\"\n... integer := [0-9]+\n... &lt;alpha&gt; := -integer+\n... all     := (integer/alpha)+\n... \"\"\"\n&gt;&gt;&gt; parser = Parser(grammar, 'all')\n&gt;&gt;&gt; parser.parse(s)\n(1, [('integer', 15, 16, None), ('integer', 21, 23, None)], 25)\n&gt;&gt;&gt; [ int(s[x[1]:x[2]]) for x in parser.parse(s)[1] ]\n[7, 89]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["As the other solutions say, to find the index of the first digit in the string we can use regular expressions:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s = 'xdtwkeltjwlkejt7wthwk89lk'\n&gt;&gt;&gt; match = re.search(r'\\d', s)\n&gt;&gt;&gt; print match.start() if match else 'No digits found'\n15\n&gt;&gt;&gt; s[15] # To show correctness\n'7'\n</code>\n</pre>\n", "senID": 1}, {"text": ["While simple, a regular expression match is going to be overkill for super-long strings.", "A more efficient way is to iterate through the string like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; for i, c in enumerate(s):\n...     if c.isdigit():\n...         print i\n...         break\n... \n15\n</code>\n</pre>\n", "senID": 3}, {"text": ["In case we wanted to extend the question to finding the first integer (not digit) and what it was:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "integer", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s = 'xdtwkeltjwlkejt711wthwk89lk'\n&gt;&gt;&gt; for i, c in enumerate(s):\n...     if c.isdigit():\n...         start = i\n...         while i &lt; len(s) and s[i].isdigit():\n...             i += 1\n...         print 'Integer %d found at position %d' % (int(s[start:i]), start)\n...         break\n... \nInteger 711 found at position 15\n</code>\n</pre>\n", "senID": 5}], [{"text": ["I'm sure there are multiple solutions, but using regular expressions you can do this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import re\n&gt;&gt;&gt; match = re.search(\"\\d\", \"xdtwkeltjwlkejt7wthwk89lk\")\n&gt;&gt;&gt; match.start(0)\n15\n</code>\n</pre>\n", "senID": 1}], [{"text": ["As everybody has answered using regex, here is another way without regex and which may suffice in many cases"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n s='xdtwkeltjwlkejt7wthwk89lk'\n\nfor i, c in enumerate(s):\n    if c.isdigit():\n        print i\n        break\n</code>\n</pre>\n", "senID": 1}, {"text": ["output:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n 15\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Here is another regex-less way, more in a functional style.", "This one finds the position of the first occurrence of each digit that exists in the string, then chooses the lowest.", "A regex is probably going to be more efficient, especially for longer strings (this makes at least 10 full passes through the string and up to 20)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n haystack = \"xdtwkeltjwlkejt7wthwk89lk\"\ndigits   = \"012345689\"\nfound    = [haystack.index(dig) for dig in digits if dig in haystack]\nfirstdig = min(found) if found else None\n</code>\n</pre>\n", "senID": 1}], [{"text": ["you can use regular expression "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import re\ny = \"xdtwkeltjwlkejt7wthwk89lk\"\n\ns = re.search(\"\\d\",y).start()\n</code>\n</pre>\n", "senID": 1}]]