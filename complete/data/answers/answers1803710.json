[[{"text": ["I would add a docstring which explains what it compares, as you did in your question."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Use getattr's third argument to set distinct default values:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "getattr", "tag": "a", "pos": 0, "childList": [{"text": "getattr", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/3.1/library/functions.html#getattr"}, {"text": "getattr", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n def __eq__(self, other):\n    return all(getattr(self, a, Ellipsis) == getattr(other, a, Ellipsis)\n               for a in self.metainfo)\n</code>\n</pre>\n", "senID": 1}, {"text": ["As the default value, set something that will never be an actual value, such as Ellipsis&dagger;.", "Thus the values will match only if both objects contain the same value for a certain attribute or if both do not have said attribute."], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "Ellipsis", "tag": "a", "pos": 0, "childList": [{"text": "Ellipsis", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/3.1/library/stdtypes.html#the-ellipsis-object"}, {"text": "Ellipsis", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "&dagger;", "childNum": 0, "tag": "sup", "pos": -1, "childList": []}, {"text": "or", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["Edit: as Nadia points out, NotImplemented may be a more appropriate constant (unless you're storing the result of rich comparisons...)."], "childNum": 4, "tag": "p", "senID": 3, "childList": [{"text": "Edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"href": "http://stackoverflow.com/users/97828/nadia-alramli", "text": "Nadia", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://docs.python.org/3.1/library/constants.html#NotImplemented", "text": "NotImplemented", "childNum": 1, "tag": "a", "childList": [{"text": "NotImplemented", "tag": "code"}]}, {"text": "NotImplemented", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Edit 2: Indeed, as Lac points out, just using hasattr results in a more readable solution:"], "childNum": 4, "tag": "p", "senID": 4, "childList": [{"text": "Edit 2:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"href": "http://stackoverflow.com/users/151238/lac", "text": "Lac", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://docs.python.org/3.1/library/functions.html#hasattr", "text": "hasattr", "childNum": 1, "tag": "a", "childList": [{"text": "hasattr", "tag": "code"}]}, {"text": "hasattr", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n def __eq__(self, other):\n    return all(hasattr(self, a) == hasattr(other, a) and\n               getattr(self, a) == getattr(other, a) for a in self.metainfo)\n</code>\n</pre>\n", "senID": 5}, {"tag": "hr", "senID": 6}, {"text": ["&nbsp; &dagger;: for extra obscurity you could write ... instead of Ellipsis, thus getattr(self, a, ...) etc.", "No, don't do it :)"], "childNum": 4, "tag": "p", "senID": 7, "childList": [{"text": "&dagger;", "childNum": 0, "tag": "sup", "pos": 0, "childList": []}, {"text": "...", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "Ellipsis", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "getattr(self, a, ...)", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"code": "<pre>\n<code>\n def __eq__(self, other):\n    \"\"\"Returns True if both instances have the same variables from metainfo\n    and they have the same values.\"\"\"\n    for attr in self.metainfo:\n        if attr in self.__dict__:\n            if attr not in other.__dict__:\n                return False\n            if getattr(self, attr) != getattr(other, attr):\n                return False\n            continue\n        else:\n            if attr in other.__dict__:\n                return False\n    return True\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Since it's about to make it easy to understand, not short or very fast :"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Since it's about to make it easy to understand, not short or very fast :", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n class Test(object):\n\n    def __init__(self):\n        self.metainfo = [\"foo\", \"bar\"]\n\n    # adding a docstring helps a lot\n    # adding a doctest even more : you have an example and a unit test\n    # at the same time ! (so I know this snippet works :-))\n    def __eq__(self, other):\n        \"\"\"\n            This method check instances equality and returns True if both of\n            the instances have the same attributs with the same values.\n            However, the check is performed only on the attributs whose name\n            are listed in self.metainfo.\n\n            E.G :\n\n            &gt;&gt;&gt; t1 = Test()\n            &gt;&gt;&gt; t2 = Test()\n            &gt;&gt;&gt; print t1 == t2\n            True\n            &gt;&gt;&gt; t1.foo = True\n            &gt;&gt;&gt; print t1 == t2\n            False\n            &gt;&gt;&gt; t2.foo = True\n            &gt;&gt;&gt; t2.bar = 1\n            &gt;&gt;&gt; print t1 == t2\n            False\n            &gt;&gt;&gt; t1.bar = 1\n            &gt;&gt;&gt; print t1 == t2\n            True\n            &gt;&gt;&gt; t1.new_value = \"test\"\n            &gt;&gt;&gt; print t1 == t2\n            True\n            &gt;&gt;&gt; t1.metainfo.append(\"new_value\")\n            &gt;&gt;&gt; print t1 == t2\n            False\n\n        \"\"\"\n\n        # Then, let's keep the code simple. After all, you are just\n        # comparing lists :\n\n        self_metainfo_val = [getattr(self, info, Ellipsis)\n                             for info in self.metainfo]\n        other_metainfo_val = [getattr(other, info, Ellipsis)\n                              for info in self.metainfo]\n        return self_metainfo_val == other_metainfo_val\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Going with \"Flat is better than nested\" I would remove the nested try statements.", "Instead, getattr should return a sentinel that only equals itself.", "Unlike Stephan202, however, I prefer to keep the for loop.", "I also would create a sentinel by myself, and not re-use some existing Python object.", "This guarantees that there are no false positives, even in the most exotic situations."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "\"Flat is better than nested\"", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def __eq__(self, other):\n    sentinel = object() # sentinel == sentinel &lt;=&gt; sentinel is sentinel\n    for attr in self.metainfo:\n        if getattr(self, attr, sentinel) != getattr(other, attr, sentinel):\n            return False\n    return True\n</code>\n</pre>\n", "senID": 1}, {"text": ["Also, the method should have a doc-string explaining it's eq behavior; same goes for the class which should have a docstring explaining the use of the metainfo attribute."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "eq", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Finally, a unit-test for this equality-behavior should be present as well.", "Some interesting test cases would be:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["I would break the logic up into separate chunks that are easier to understand, each one checking a different condition (and each one assuming the previous thing was checked).", "Easiest just to show the code:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n # First, check if we have the same list of variables.\nmy_vars = [var for var in self.metainf if hasattr(self, var)]\nother_vars = [var for var in other.metainf if hasattr(other, var)]\n\nif my_vars.sorted() != other_vars.sorted():\n  return False # Don't even have the same variables.\n\n# Now, check each variable:\nfor var in my_vars:\n   if self.var != other.var:\n      return False # We found a variable with a different value.\n\n# We're here, which means we haven't found any problems!\nreturn True\n</code>\n</pre>\n", "senID": 1}, {"text": ["Edit: I misunderstood the question, here is an updated version.", "I still think this is a clear way to write this kind of logic, but it's uglier than I intended and not at all efficient, so in this case I'd probably go with a different solution."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["Here is a variant that is pretty easy to read IMO, without using sentinel objects.", "It will first compare if both has or hasnt the attribute, then compare the values."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["It could be done in one line using all() and a generator expression as Stephen did, but I feel this is more readable."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def __eq__(self, other):\n    for a in self.metainfo:\n        if hasattr(self, a) != hasattr(other, a):\n             return False\n        if getattr(self, a, None) != getattr(other, a, None):\n             return False\n    return True\n</code>\n</pre>\n", "senID": 2}], [{"text": ["The try/excepts make your code harder to read.", "I'd use getattr with a default value that is guaranteed not to otherwise be there.", "In the code below I just make a temp object.", "That way if object do not have a given value they'll both return \"NOT_PRESENT\" and thus count as being equal."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def __eq__(self, other):\n    NOT_PRESENT = object()\n    for attr in self.metainfo:\n        ours = getattr(self, attr, NOT_PRESENT) \n        theirs = getattr(other, attr, NOT_PRESENT)\n        if ours != theirs:\n            return False\n    return True\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I like Stephan202's answer, but I think that his code doesn't make equality conditions clear enough.", "Here's my take on it:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def __eq__(self, other):\n    wehave = [attr for attr in self.metainfo if hasattr(self, attr)]\n    theyhave = [attr for attr in self.metainfo if hasattr(other, attr)]\n    if wehave != theyhave:\n        return False\n    return all(getattr(self, attr) == getattr(other, attr) for attr in wehave)\n</code>\n</pre>\n", "senID": 1}]]