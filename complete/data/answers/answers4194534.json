[[{"text": ["Sure you need a regular expression?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n other_number = '111222333'\nsome_text, some_number = line.split(': ')\nnew_line = ': '.join(some_text, other_number)\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n for line in input:\n    key, val = line.split(':')\n    if key == 'particular':\n       val = '111222333'\n</code>\n</pre>\n", "senID": 0}, {"text": ["I'm not sure regex would be of any value in this specific case.", "My guess is they'd be slower.", "That said, it can be done.", "Here's one way: "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n for line in input:\n    re.sub('^particular : .*', 'particular : 111222333')\n</code>\n</pre>\n", "senID": 2}, {"text": ["There are subtleties involved in this, and this is almost certainly not what you'd want in production code.", "You need to check all of the re module constants to make sure the regex is acting the way you expect, etc.", "You might be surprised at the flexibility you find in dealing with problems like this in Python if you try not to use re (of course, this isn't to say re isn't useful) ;-) "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"code": "<pre>\n<code>\n #!/usr/bin/env python\nimport re\n\ntext = '''gfnfgnfgnf: 5656756734\narvervfdsa: 1343453563\nparticular: 4685685685\nerveveersd: 3453454545\nverveversf: 7896789567'''\n\nprint(re.sub('[0-9]+', '111222333', text))\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n input = \"\"\"gfnfgnfgnf: 5656756734\narvervfdsa: 1343453563\nparticular: 4685685685\nerveveersd: 3453454545\nverveversf: 7896789567\"\"\"\n\nentries = re.split(\"\\n+\", input)\n\nfor entry in entries:\n  if entry.startswith(\"particular\"):\n    entry = re.sub(r'[0-9]+', r'111222333', entry)\n</code>\n</pre>\n", "senID": 0}, {"text": ["or with sed:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n sed -e 's/^particular: [0-9].*$/particular: 111222333/g' file\n</code>\n</pre>\n", "senID": 2}], [{"text": ["An important point here is that if you have a lot of lines, you want to process them one by one.", "That is, instead of reading all the lines in replacing them, and writing them out again, you should read in a line at a time and write out a line at a time.", "(This would be inefficient if you were actually reading a line at a time from the disk; however, Python's IO is competent and will buffer the file for you."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n with open(...) as infile, open(...) as outfile:\n    for line in infile:\n        if line.startswith(\"particular\"):\n            outfile.write(\"particular: 111222333\")\n        else:\n            outfile.write(line)\n</code>\n</pre>\n", "senID": 1}, {"text": ["This will be speed- and memory-efficient."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Your sed example forces me to say neat!"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n python -c \"import re, sys; print ''.join(re.sub(r'^(particular:) \\d+', r'\\1 111222333', l) for l in open(sys.argv[1]))\" file\n</code>\n</pre>\n", "senID": 1}]]