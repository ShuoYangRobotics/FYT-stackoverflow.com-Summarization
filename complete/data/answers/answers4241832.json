[[{"text": ["Here you can see the result is promoted to a long"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from sys import maxint\n&gt;&gt;&gt; type(-maxint)\n&lt;type 'int'&gt;\n&gt;&gt;&gt; type(-maxint-1)\n&lt;type 'int'&gt;\n&gt;&gt;&gt; type(-maxint-2)\n&lt;type 'long'&gt;\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["note that the usual convention for signed values is to have one more negative number than positive, so in this case -2147483648 is still an int"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "-2147483648", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["In Python, ints will auto-promote to long (bigint)."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "int", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "long", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Python autopromotes int values that overflow to long, which does not have a limit other than available memory."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "int", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "long", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Python promotes an overflow of int to an arbitrary precision long which is limited only by available memory."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "int", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["You can see the promotion with this code:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import struct\nfrom sys import maxint\nmaximum_int = maxint\nminimum_int = -maxint-1\nbig_minus = -maxint-(maxint*maxint)\nbig_plus=maxint*maxint*maxint\n\ndef platform():\n    return struct.calcsize(\"P\") * 8\n\ndef bit_length(x):\n    s=bin(x)\n    s=s.lstrip('-0b')\n    return len(s)\n\nprint\nprint 'running in   ', platform(), ' bit mode...'   \nprint 'maxint:      ', maximum_int, ' bits: ', bit_length(maximum_int)\nprint 'minint:      ', minimum_int, ' bits: ',  bit_length(minimum_int)\nprint 'a big minus: ', big_minus, ' bits: ', bit_length(big_minus)\nprint 'big_plus:    ', big_plus, ' bits: ', bit_length(big_plus)\nprint\n</code>\n</pre>\n", "senID": 2}, {"text": ["Running under 32 bit Python, here is the return:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n running in    32  bit mode...\nmaxint:       2147483647  bits:  31\nminint:       -2147483648  bits:  32\na big minus:  -4611686016279904256  bits:  62\nbig_plus:     9903520300447984150353281023  bits:  93\n</code>\n</pre>\n", "senID": 4}, {"text": ["Under 64 bit Python:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n running in    64  bit mode...\nmaxint:       9223372036854775807  bits:  63\nminint:       -9223372036854775808  bits:  64\na big minus:  -85070591730234615856620279821087277056  bits:  126\nbig_plus:     784637716923335095224261902710254454442933591094742482943  bits:  189\n</code>\n</pre>\n", "senID": 6}], [{"text": ["Python implements biging concept, the type is called long.", "The size is unlimited virtually."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "long", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html#long"}]}], [{"text": ["If you actually want the most negative value for python, float('-inf') works nicely."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]