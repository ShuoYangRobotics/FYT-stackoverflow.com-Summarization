[[{"text": ["The standard python dict isn't able to do this."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "dict", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["There is a proposal (PEP 372) to add an \"ordered dictionary\" (that keeps track of the order of insertion) to the collections module in the standard library.", "It includes links to various implementations of ordered dictionaries (see also these two recipes in the Python Cookbook)."], "childNum": 9, "tag": "p", "senID": 1, "childList": [{"text": "PEP 372", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0372/"}, {"text": "collections", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "various", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://babel.edgewall.org/browser/trunk/babel/util.py?rev=374#L178"}, {"href": "http://www.xs4all.nl/~anthon/Python/ordereddict/", "text": "implementations", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://code.djangoproject.com/browser/django/trunk/django/utils/datastructures.py?rev=7140#L53", "text": "of", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://pypi.python.org/pypi/StableDict/0.2", "text": "ordered", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://codespeak.net/svn/user/arigo/hack/pyfuse/OrderedDict.py", "text": "dictionaries", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://code.activestate.com/recipes/107747/", "text": "two", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://code.activestate.com/recipes/496761/", "text": "recipes", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["You might want to stick with the reference implementation in the PEP if you want your code to be compatible with the \"official\" version (if the proposal is eventually accepted)."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["EDIT: The PEP was accepted and added in python 2.7 and 3.1.", "See the docs."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "the docs", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/collections.html#ordereddict-objects"}]}], [{"text": ["The other answers are correct; it's not possible, but you could write this yourself.", "However, in case you're unsure how to actually implement something like this, here's a complete and working implementation that subclasses dict which I've just written and tested.", "(Note that the order of values passed to the constructor is undefined but will come before values passed later, and you could always just not allow ordered dicts to be initialized with values."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class ordered_dict(dict):\n    def __init__(self, *args, **kwargs):\n        dict.__init__(self, *args, **kwargs)\n        self._order = self.keys()\n\n    def __setitem__(self, key, value):\n        dict.__setitem__(self, key, value)\n        if key in self._order:\n            self._order.remove(key)\n        self._order.append(key)\n\n    def __delitem__(self, key):\n        dict.__delitem__(self, key)\n        self._order.remove(key)\n\n    def order(self):\n        return self._order[:]\n\n    def ordered_items(self):\n        return [(key,self[key]) for key in self._order]\n\n\nod = ordered_dict()\nod[\"hello\"] = \"world\"\nod[\"goodbye\"] = \"cruel world\"\nprint od.order()            # prints ['hello', 'goodbye']\n\ndel od[\"hello\"]\nod[\"monty\"] = \"python\"\nprint od.order()            # prints ['goodbye', 'monty']\n\nod[\"hello\"] = \"kitty\"\nprint od.order()            # prints ['goodbye', 'monty', 'hello']\n\nprint od.ordered_items()\n# prints [('goodbye','cruel world'), ('monty','python'), ('hello','kitty')]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can't do this with the base dict class -- it's ordered by hash.", "You could build your own dictionary that is really a list of key,value pairs or somesuch, which would be ordered."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I've used StableDict before with good success."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://pypi.python.org/pypi/StableDict/0.2"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://pypi.python.org/pypi/StableDict/0.2", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/StableDict/0.2"}]}], [{"text": ["Or, just make the key a tuple with time.now() as the first field in the tuple."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Then you can retrieve the keys with dictname.keys(), sort, and voila!"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Gerry"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["It's not possible unless you store the keys in a separate list for referencing later."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Or use any of the implementations for the PEP-372 described here, like the odict module from the pythonutils."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "PEP-372", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0372/"}, {"href": "http://www.python.org/dev/peps/pep-0372/#reference-implementation", "text": "here", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://www.voidspace.org.uk/python/odict.html", "text": "odict module", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://www.voidspace.org.uk/python/pythonutils.html", "text": "pythonutils", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["I successfully used the pocoo.org implementation, it is as easy as replacing your"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n my_dict={}\nmy_dict[\"foo\"]=\"bar\"\n</code>\n</pre>\n", "senID": 2}, {"text": ["with"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n my_dict=odict.odict()\nmy_dict[\"foo\"]=\"bar\"\n</code>\n</pre>\n", "senID": 4}, {"text": ["and require just this file"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "this file", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://dev.pocoo.org/hg/sandbox/raw-file/tip/odict.py"}]}], [{"text": ["if you don't need the dict functionality, and only need to return tuples in the order you've inserted them, wouldn't a queue work better?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]