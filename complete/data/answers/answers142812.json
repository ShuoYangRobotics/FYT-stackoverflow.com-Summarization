[[{"text": ["Bitarray was the best answer I found, when I recently had a similar need.", "It's a C extension (so much faster than BitVector, which is pure python) and stores its data in an actual bitfield (so it's eight times more memory efficient than a numpy boolean array, which appears to use a byte per element."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Bitarray", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/bitarray/"}]}], [{"text": ["The BitVector package may be what you need.", "It's not built in to my python installation, but easy to track down on the python site."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://pypi.python.org/pypi/BitVector/1.5.1 is the current version as of today."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://pypi.python.org/pypi/BitVector/1.5.1", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/BitVector/1.5.1"}]}], [{"text": ["You should take a look at the bitstring module, which has recently reached version 2.0.", "The binary data is compactly stored as a byte array and can be easily created, modified and analysed."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "bitstring", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://python-bitstring.googlecode.com"}]}, {"text": ["You can create BitString objects from binary, octal, hex, integers (big or little endian), strings, bytes, floats, files and more."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "BitString", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n a = BitString('0xed44')\nb = BitString('0b11010010')\nc = BitString(int=100, length=14)\nd = BitString('uintle:16=55, 0b110, 0o34')\ne = BitString(bytes='hello')\nf = pack('&lt;2H, bin:3', 5, 17, '001')\n</code>\n</pre>\n", "senID": 2}, {"text": ["You can then analyse and modify them with simple functions or slice notation - no need to worry about bit masks etc."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n a.prepend('0b110')\nif '0b11' in b:\n    c.reverse()\ng = a.join([b, d, e])\ng.replace('0b101', '0x3400ee1')\nif g[14]:\n    del g[14:17]\nelse:\n    g[55:58] = 'uint:11=33, int:9=-1'\n</code>\n</pre>\n", "senID": 4}, {"text": ["There is also a concept of a bit position, so that you can treat it like a file or stream if that's useful to you.", "Properties are used to give different interpretations of the bit data."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n w = g.read(10).uint\nx, y, z = g.readlist('int:4, int:4, hex:32')\nif g.peek(8) == '0x00':\n    g.pos += 10\n</code>\n</pre>\n", "senID": 6}, {"text": ["Plus there's support for the standard bit-wise binary operators, packing, unpacking, endianness and more.", "The latest version is for Python 2.6 to 3.1, and although it's pure Python it is reasonably well optimised in terms of memory and speed."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["NumPy has a array interface module that you can use to make a bitfield."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "array interface", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://numpy.scipy.org/array_interface.shtml"}]}], [{"text": ["If your bitfield is short, you can probably use the struct module.", "Otherwise I'd recommend some sort of a wrapper around the array module."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "the struct module", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/lib/module-struct.html"}, {"text": "the array module", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/lib/module-array.html"}]}, {"text": ["Also, the ctypes module does contain bitfields, but I've never used it myself.", "Caveat emptor."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "bitfields", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/lib/ctypes-bit-fields-in-structures-unions.html"}, {"text": "Caveat emptor", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}], [{"text": ["I use the binary bit-wise operators !, &amp;, |, ^, >>, and &lt;&lt;.", "They work really well and are implemented directly in the underlying C, which is usually directly on the underlying hardware."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Represent each of your values as a power of two:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n testA = 2**0\ntestB = 2**1\ntestC = 2**3\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then to set a value true:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n table = table | testB\n</code>\n</pre>\n", "senID": 3}, {"text": ["To set a value false:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n table = table &amp; (~testC)\n</code>\n</pre>\n", "senID": 5}, {"text": ["To test for a value:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n bitfield_length = 0xff\nif ((table &amp; testB &amp; bitfield_length) != 0):\n    print \"Field B set\"\n</code>\n</pre>\n", "senID": 7}, {"text": ["Dig a little deeper into hexadecimal representation if this doesn't make sense to you.", "This is basically how you keep track of your boolean flags in an embedded C application as well (if you have limitted memory)."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}], [{"text": ["If you want to use ints (or long ints) to represent as arrays of bools (or as sets of integers), take a look at  http://sourceforge.net/projects/pybitop/files/"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://sourceforge.net/projects/pybitop/files/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://sourceforge.net/projects/pybitop/files/"}]}, {"text": ["It provides insert/extract of bitfields into long ints; finding the most-significant, or least-significant '1' bit; counting all the 1's; bit-reversal; stuff like that which is all possible in pure python but much faster in C."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]