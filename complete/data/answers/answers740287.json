[[{"code": "<pre>\n<code>\n &gt;&gt;&gt; L1 = [2,3,4]\n&gt;&gt;&gt; L2 = [1,2]\n&gt;&gt;&gt; [i for i in L1 if i in L2]\n[2]\n\n\n&gt;&gt;&gt; S1 = set(L1)\n&gt;&gt;&gt; S2 = set(L2)\n&gt;&gt;&gt; S1.intersection(S2)\nset([2])\n</code>\n</pre>\n", "senID": 0}, {"text": ["Both empty lists and empty sets are False, so you can use the value directly as a truth value."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Ah, Tobias you beat me to it.", "I was thinking of this slight variation on your solution:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n print any(x in a for x in b)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Think about what the code actually says!"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; (1 or 2)\n1\n&gt;&gt;&gt; (2 or 1)\n2\n</code>\n</pre>\n", "senID": 1}, {"text": ["That should probably explain it.", ":)  Python apparently implements \"lazy or\", which should come as no surprise.", "It performs it something like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def or(x, y):\n    if x: return x\n    if y: return y\n    return False\n</code>\n</pre>\n", "senID": 3}, {"text": ["In the first example, x == 1 and y == 2.", "In the second example, it's vice versa.", "That's why it returns different values depending on the order of them."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "x == 1", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "y == 2", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["This will do it in one line."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a=[2,3,4]\n&gt;&gt;&gt; b=[1,2]\n&gt;&gt;&gt; bool(sum(map(lambda x: x in b, a)))\nTrue\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Best I could come up with:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n any([True for e in (1, 2) if e in a])\n</code>\n</pre>\n", "senID": 1}], [{"text": ["In some cases (e.g.", "unique list elements), set operations can be used."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a=[2,3,4]\n&gt;&gt;&gt; set(a) - set([2,3]) != set(a)\nTrue\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["Or, using set.isdisjoint(),"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "set.isdisjoint()", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#set.isdisjoint"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; not set(a).isdisjoint(set([2,3]))\nTrue\n&gt;&gt;&gt; not set(a).isdisjoint(set([5,6]))\nFalse\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Maybe a bit more lazy:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n a = [1,2,3,4]\nb = [2,7]\n\nprint any((True for x in a if x in b))\n</code>\n</pre>\n", "senID": 1}]]