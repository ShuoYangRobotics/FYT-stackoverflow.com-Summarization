[[{"text": ["Python Dictionaries use Open addressing (reference inside Beautiful code)"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Open addressing", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Hash_table#Open_addressing"}, {"href": "http://books.google.co.in/books?id=gJrmszNHQV4C&lpg=PP1&hl=sv&pg=PA298#v=onepage&q&f=false", "text": "reference inside Beautiful code", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["NB!", "Open addressing, a.k.a closed hashing should, as noted in Wikipedia, not be confused with its opposite open hashing!", "(which we see in the accepted answer)."], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "NB!", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "Open addressing", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "closed hashing", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "open hashing", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}, {"text": ["Open addressing means that the dict uses array slots, and when an object's primary position is taken in the dict, the object's spot is sought at a different index in the same array, using a \"perturbation\" scheme, where the object's hash value plays part."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["It is Open hashing based on a primitive polynomial over Z/2.", "(Old link)"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "It is Open hashing based on a primitive polynomial over Z/2", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://mail.python.org/pipermail/python-list/2000-February/650630.html"}, {"text": "Old link", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://mail.python.org/pipermail/python-list/2000-February/023645.html"}]}, {"text": ["Please refer Beautiful Code By Andy Oram, Greg Wilson.", "There is an excellent chapter titled \"Python's Dictionary Implementation Being All Things to All People\" by Andrew Kuchling."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "Beautiful Code By Andy Oram, Greg Wilson", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://books.google.co.in/books?id=gJrmszNHQV4C"}, {"text": "\"Python's Dictionary Implementation Being All Things to All People\" by Andrew Kuchling", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://books.google.co.in/books?id=gJrmszNHQV4C&pg=RA3-PA293&lpg=RA3-PA293&dq=python+dictionary+implementation+andrew&source=web&ots=rKQ0AxT9tf&sig=oii3ujbcrVzhWQD26DvIEP7Mijs&hl=en&sa=X&oi=book_result&resnum=1&ct=result"}]}], [{"text": ["Here's a link to the actual implementation in the python SVN repository.", "That should be the most definite answer."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "actual implementation", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://svn.python.org/view/python/trunk/Objects/dictobject.c?rev=66801&view=auto"}]}], [{"text": ["Pure Python Dictionary Implementation"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Pure Python Dictionary Implementation", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pybites.blogspot.com/2008/10/pure-python-dictionary-implementation.html"}]}], [{"text": ["It is a hash table.", "You can read about it some in the python wiki.", "Otherwise, the code is well-written and should be easy to understand."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "python wiki", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://wiki.python.org/moin/DictionaryKeys"}]}], [{"text": ["At PyCon 2010, Brandon Craig Rhodes gave an excellent talk about the Python dictionary.", "It provides a great overview of the dictionary implementation with examples and visuals.", "If you have 45 minutes (or even just 15), I would recommend watching the talk before proceeding to the actual implementation."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "excellent talk", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://blip.tv/pycon-us-videos-2009-2010-2011/pycon-2010-the-mighty-dictionary-55-3352147"}]}], [{"text": ["Here is everything about Python dicts that I was able to put together (probably more than anyone would like to know; but the answer is comprehensive). "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 14, "lis": [{"text": "Python dictionaries are implemented as ", "tag": "none", "senID": 1}, {"text": "Hash tables must allow for ", "tag": "none", "senID": 2}, {"text": "Python dict uses ", "tag": "none", "senID": 3}, {"text": "Python hash table is just a continguous block of memory (sort of like an array, so you can do ", "tag": "none", "senID": 4}, {"text": ["Each slot in the table can store one and only one entry."], "childNum": 0, "tag": "strong", "senID": 5, "childList": []}, {"text": "Each ", "tag": "none", "senID": 6}, {"text": ["The figure below is a logical representation of a python hash table.", "In the figure below, 0, 1, ..., i, ... on the left are indices of the slots in the hash table (they are just for illustrative purposes and are not stored along with the table obviously!", ")."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "slots", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"text": ["When a new dict is initialized it starts with 8 slots.", "(see dictobject.h:49)"], "childNum": 2, "tag": "p", "senID": 8, "childList": [{"text": "slots", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "dictobject.h:49", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://hg.python.org/cpython/file/52f68c95e025/Include/dictobject.h"}]}, {"text": "When adding entries to the table, we start with some slot, ", "tag": "none", "senID": 9}, {"text": "If that slot is empty, the entry is added to the slot (by entry, I mean, ", "tag": "none", "senID": 10}, {"text": "If the slot is occupied, CPython (and even PyPy) compares the ", "tag": "none", "senID": 11}, {"text": "Probing just means it searches the slots by slot to find an empty slot. Technically we could just go one by one, i+1, i+2, ... and use the first available one (that's linear probing). But for reasons explained beautifully in the comments (see ", "tag": "none", "senID": 12}, {"text": "The same thing happens for lookups, just starts with the initial slot i (where i depends on the hash of the key). If the hash and the key both don't match the entry in the slot, it starts probing, until it finds a slot with a match. If all slots are exhausted, it reports a fail.", "tag": "none", "senID": 13}, {"text": "BTW, the dict will be resized if it is two-thirds full. This avoids slowing down lookups. (see ", "tag": "none", "senID": 14}]}, {"text": ["NOTE: I did the research on Python Dict implementation in response to my own question about how multiple entries in a dict can have same hash values.", "I posted a slightly edited version of the response here because all the research is very relevant for this question as well."], "childNum": 1, "tag": "p", "senID": 15, "childList": [{"text": "question", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/9010222/"}]}]]