[[{"text": ["No, you cannot create list with gaps.", "But you can create a dictionary with tuple keys:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n tuples = [(1,1), (0,1), (1,0), (0,0), (2,1)]\nl = {}\nfor t in tuples:\n    l[t] = something\n</code>\n</pre>\n", "senID": 1}, {"text": ["Update:\nTry using NumPy, it provides wide range of operations over matrices and array.", "Cite from free pfd on NumPy available on the site (3.4.3 Flat Iterator indexing): \"As mentioned previously, X.flat returns an iterator that will iterate over the entire array (in C-contiguous style with the last index varying the fastest\".", "Looks like what you need."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "Update:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "NumPy", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://numpy.scipy.org/"}, {"text": "\"As mentioned previously, X.flat returns an iterator that will iterate over the entire array (in C-contiguous style with the last index varying the fastest\"", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}], [{"text": ["You should look at dicts for something like that."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for t in tuples:\n  if not l.has_key(t[0]):\n    l[t[0]] = {}\n  l[t[0]][t[1]] = something\n</code>\n</pre>\n", "senID": 1}, {"text": ["Iterating over the dict is a bit different than iterating over a list, though.", "You'll have the keys(), values() and items() functions to help with that."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["EDIT: try something like this for ordering:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n for x in sorted(l.keys()):\n   for y in sorted(l[x].keys()):\n       print l[x][y]\n</code>\n</pre>\n", "senID": 4}], [{"text": ["You create a one-dimensional list l and want to use it as a two-dimensional list.", "Thats why you get an index error."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "l", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["You have the following options:\ncreate a map and use the tuple t as index:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n l = {}\nl[t] = something\n</code>\n</pre>\n", "senID": 2}, {"text": ["and you will get entries in l as:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n {(1, 1): something}\n</code>\n</pre>\n", "senID": 4}, {"text": ["if you want a traditional array structure I'll advise you to look at numpy.", "With numpy you get n-dimensional arrays with \"traditional\" indexing."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "numpy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.numpy.org/"}]}, {"text": ["As I mentioned use numpy,"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["with numpy you can create a 2-dimensional array, filled with zeros or ones or ...\nTha you can fill any desired value with indexing [x,y] as you desire.", "Of course you can iterate over rows and columns or the whole array as a list."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["If you know the size that you before hand,you can make a list of lists like this"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; x = 3\n&gt;&gt;&gt; y = 3\n&gt;&gt;&gt; l = [[None] * x for i in range(y)]\n&gt;&gt;&gt; l\n[[None, None, None], [None, None, None], [None, None, None]]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Which you can then iterate like you originally suggested."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Extending the Nathan's answer, "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Nathan", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/696874/populate-a-list-in-python/696925#696925"}]}, {"code": "<pre>\n<code>\n tuples = [(1,1), (0,1), (1,0), (0,0), (2,1)]\nx = max(tuples, key = lambda z : z[0])[0] + 1\ny = max(tuples, key = lambda z : z[1])[1] + 1\nl = [[None] * y for i in range(x)]\n</code>\n</pre>\n", "senID": 1}, {"text": ["And then you can do whatever you want"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["What do you mean exactly by \"but as far as I know dictionaries cannot be sorted by keys\"?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["While this is not strictly the same as a \"sorted dictionary\", you can easily turn a dictionary into a list, sorted by the key, which seems to be what you're after:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "can", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; tuples = [(1,1), (0,1), (1,0), (0,0), (2,1)]\n&gt;&gt;&gt; l = {}\n&gt;&gt;&gt; for t in tuples:\n...    l[t] = \"something\"\n&gt;&gt;&gt; sorted(l) # equivalent to sorted(l.keys())\n[(0, 0), (0, 1), (1, 0), (1, 1), (2, 1)]\n&gt;&gt;&gt; sorted(l.items()) # make a list of (key, value) tuples, and sort by key\n[((0, 0), 'something'), ((0, 1), 'something'), ((1, 0), 'something'), ((1, 1), 'something'), ((2, 1), 'something')]\n</code>\n</pre>\n", "senID": 2}, {"text": ["(I turned something into the string \"something\" just to make the code work)"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "something", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["To make use of this for your case however (if I understand it correctly, that is), you would still need to fill the dictionary with None values or something for every \"empty\" coordinate tuple)"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["As mentioned earlier, you can't make lists with gaps, and dictionaries may be the better choice here.", "The trick is to makes sure that l[t[0]] exists when you put something in position t[1].", "For this, I'd use a defaultdict."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "l[t[0]]", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "t[1]", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "defaultdict", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/collections.html#collections.defaultdict:"}]}, {"code": "<pre>\n<code>\n import collections\ntuples = [(1,1), (0,1), (1,0), (0,0), (2,1)]\nl = collections.defaultdict(dict)\nfor t in tuples:\n    l[t[0]][t[1]] = something\n</code>\n</pre>\n", "senID": 1}, {"text": ["Since l is a defaultdict, if l[t[0]] doesn't exist, it will create an empty dict for you to put your something in at position t[1]."], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "l", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "l[t[0]]", "childNum": 0, "tag": "code", "childList": []}, {"text": "something", "childNum": 0, "tag": "code", "childList": []}, {"text": "t[1]", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Note: this ends up being the same as @unwesen's answer, without the minor tedium of hand-checking for existence of the inner dict.", "Chalk it up to concurrent answering."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "unwesen", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "#696883"}]}], [{"text": ["The dict solutions given are probably best for most purposes.", "For your issue of iterating over the keys in order, generally you would instead iterate over the coordinate space, not the dict keys, exactly the same way you would have for your list of lists.", "Use .get and you can specify the default value to use for the blank cells, or alternatively use \"collections.defaultdict\" to define a default at dict creation time.", "eg."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "coordinate space", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "collections.defaultdict", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"code": "<pre>\n<code>\n for y in range(10):\n    for x in range(10):\n        value = mydict.get((x,y), some_default_value)\n        # or just \"value = mydict[x,y]\" if used defaultdict\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you do need an actual list of lists, you can construct it directly as below:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n max_x, max_y = map(max, zip(*tuples))\nl=[[something if (x,y) in tuples else 0 for y in range(max_y+1)] \n     for x in xrange(max_x+1)]\n</code>\n</pre>\n", "senID": 3}, {"text": ["If the list of tuples is likely to be long, the for performance reasons, you may want to use a set for the lookup,as \"(x,y) in tuples\" performs a scan of the list, rather than a fast lookup by hash.", "ie, change the second line to:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "(x,y) in tuples", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n tuple_set = set(tuples)\nl=[[something if (x,y) in tuple_set else 0 for y in range(max_y+1)] \n     for x in xrange(max_x+1)]\n</code>\n</pre>\n", "senID": 5}], [{"text": ["I think you have only declared a one dimensional list. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I think you declare it as "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n l = [][]\n</code>\n</pre>\n", "senID": 2}, {"tag": "hr", "senID": 3}, {"text": ["Edit: That's a syntax error"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "Edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; l = [][]\n  File \"&lt;stdin&gt;\", line 1\n    l = [][]\n           ^\nSyntaxError: invalid syntax\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 5}]]