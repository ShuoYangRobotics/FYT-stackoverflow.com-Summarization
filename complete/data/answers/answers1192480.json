[[{"text": ["I use something like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n set list listchars=tab:\u00bb\u00b7,trail:\u00b7,precedes:\u2026,extends:\u2026,nbsp:\u2017\n</code>\n</pre>\n", "senID": 1}, {"text": ["Requires Vim7 and I'm not sure how well this is going to show up in a browser, because it uses some funky Unicode characters.", "It's good to use some oddball characters so that you can distinguish a tab from something you may have typed yourself."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["In addition to showing tabs, showing spaces at the end of lines is useful so you know to remove them (they are annoying)."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Many others have mentioned the 'listchars' and 'list' options, but just to add another interesting alternative:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if &amp;expandtab == 0\n    execute 'syn match MixedIndentationError display \"^\\([\\t]*\\)\\@&lt;=\\( \\{'.&amp;ts.'}\\)\\+\"'\nelse\n    execute 'syn match MixedIndentationError display \"^\\(\\( \\{' . &amp;ts . '}\\)*\\)\\@&lt;=\\t\\+\"'\nendif\nhi link MixedIndentationError Error\n</code>\n</pre>\n", "senID": 1}, {"text": ["This will look at the current setting of 'expandtab' (i.e.", "whether you've got hard tabs or spaces pretending to be tabs) and will highlight anything that would look like correct indentation but be of the wrong form.", "These are designed to work by looking at the tab stops, so tabs used for indentation followed by spaces used for simple alignment (not a multiple of 'tabstop') won't be highlighted as erroneous."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "look", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["Simpler options are available: if you just want to highlight any tabs in the wrong file in bright red (or whatever your Error colour is), you could do:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n syn match TabShouldNotBeThereError display \"\\t\"\nhi link TabShouldNotBeThereError Error\n</code>\n</pre>\n", "senID": 4}, {"text": ["or if you want spaces at the start of a line to be considered an error, you could do:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n syn match SpacesUsedForIndentationError display \"^ +\"\nhi link SpacesUsedForIndentationError Error\n</code>\n</pre>\n", "senID": 6}, {"text": ["Just a few more thoughts to add to the mix... more information here:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n :help 'expandtab'\n:help 'tabstop'\n:help 'listchars'\n:help 'list'\n:help :exe\n:help let-option\n:help :hi-link\n:help :syn-match\n:help :syn-display\n</code>\n</pre>\n", "senID": 8}], [{"text": ["Use the list and listchars options, something like this:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "list", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "listchars", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n :set list\n:set listchars=tab:&gt;-\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If you do the following:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n :set list\n</code>\n</pre>\n", "senID": 1}, {"text": ["then all TAB characters will appear as ^I and all trailing spaces will appear as $."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "^I", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "$", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Using listchars, you can control what characters to use for any whitespace.", "So,"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "listchars", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n :set listchars=tab:...\n</code>\n</pre>\n", "senID": 4}, {"text": ["in conjunction with :set list makes TABs visible as ...."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": ":set list", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "...", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Also, when cutting and pasting text around, it's useful to disable the display of tabs and spaces.", "You can do that with"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n :set list!\n</code>\n</pre>\n", "senID": 1}, {"text": ["And you enable it again with repeating the command."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["glenn jackman asked how to enter the characters (I'm assuming he means characters like \"\u00bb\")."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "glenn jackman", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["Brian Carper suggests a method using the character's Unicode index number.", "Since many of these distinctive-looking characters are digraphs [ :help digraphs ], you can also use the CNTL-k shortcut, which is generally easier to remember."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Brian Carper", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["So, for example, you can generate the \"\u00bb\" in Insert mode by typing CNTL-k and the \">\" character twice."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]