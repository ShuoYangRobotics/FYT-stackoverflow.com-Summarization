[[{"text": ["Probably you shouldn't be checking exception at all? "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n patterns = [\n  \"Case Number:&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span class=\\\"Value\\\"&gt;([^&lt;]*?)&lt;\",\n  \"Citation Number:&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span class=\\\"Value\\\"&gt;([^&lt;]*?)&lt;\",\n  \"Citation Number:&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span class=\\\"Value\\\"&gt;([^&lt;]*?)&lt;\"   # same as #2?\n]\ntext = br.response().read()\ncase_no  = \"N/A\"\nfor pattern in patterns:\n  res = re.search(pattern, text)\n  if res:\n    case_no = res.group(1)\n    break\n</code>\n</pre>\n", "senID": 1}], [{"text": ["A common idiom for the behavior you're looking for is something like:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n try: foo()\nexcept: pass\n\ntry: bar()\nexcept: pass\n</code>\n</pre>\n", "senID": 1}, {"text": ["But you should always catch a specific exception and make sure it makes sense.", "In your case it simply doesn't make sense - to see if the regular expression matched, test the result for None:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "None", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n r = br.response().read()\nPATTERN1=\"...\"\nPATTERN2=\"...\"\nPATTERN3=\"...\"\nmo = re.search(PATTERN1, r) or re.search(PATTERN2, r) or re.search(PATTERN3, r)\ncase_no = mo.group(1) if mo else \"N/A\"\n</code>\n</pre>\n", "senID": 3}, {"text": ["For performance reasons you can precompile your regexes:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n RE1 = re.compile(\"...\")\nRE2 = re.compile(\"...\")\nRE3 = re.compile(\"...\")\nmo = RE1.search(r) or RE2.search(r) or RE3.search(r)\n</code>\n</pre>\n", "senID": 5}, {"text": ["Also, for your specific regex patterns you can easily combine them into one, and using a named group can help readability:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n pat = r\"\"\"(Case|Citation) Number:&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span class=\"Value\"&gt;(?P&lt;case_no&gt;[^&lt;]*?)&lt;\"\"\"\nmo = re.search(pat, r)\ncase_no = mo.group(\"case_no\") if mo else \"N/A\"\n</code>\n</pre>\n", "senID": 7}, {"text": ["And finally, using regular expressions to parse HTML is the road to disaster, consider using HTMLParser from the standard lib or Beautiful Soup."], "childNum": 3, "tag": "p", "senID": 8, "childList": [{"text": "is the road to disaster", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454#1732454"}, {"href": "http://docs.python.org/library/htmlparser.html", "text": "HTMLParser", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://www.crummy.com/software/BeautifulSoup/", "text": "Beautiful Soup", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["No, it is not possible to do what you want.", "the semantics of multiple except clauses covers catching different types of exceptions that may be thrown from the same block of code.", "You must nest the statements or rethink your code to get the desired results."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "except", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "same block of code", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}]}, {"text": ["This might be a case where it would be better to test for the preconditions that you expect to cause an exception."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n if test1():\n    #dox\nelif test2():\n    #doy\nelif test3():\n    #doz\n</code>\n</pre>\n", "senID": 2}, {"text": ["etc."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["I would also recommend against using catchall except: phrases except in very specialized circumstances where you know you need them."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "except:", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Yes, it is posible, as long as you define exception condition..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Like:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n try:\n    f = open('myfile.txt')\n    s = f.readline()\n    i = int(s.strip())\nexcept IOError as (errno, strerror):\n    print \"I/O error({0}): {1}\".format(errno, strerror)\nexcept ValueError:\n    print \"Could not convert data to an integer.\"\nexcept:\n    print \"Unexpected error:\", sys.exc_info()[0]\n    raise\n</code>\n</pre>\n", "senID": 2}, {"text": ["But, you must define the exception type."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["If you're doing the same or a similar thing in every try/except block, you might use a loop"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n case_no = \"N/A\"\nfor _ in range(3):\n    try:\n        case_no  = re.search(\"Case Number:&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span class=\\\"Value\\\"&gt;([^&lt;]*?)&lt;\",br.response().read()).group(1)\n        break\n    except SomeExplicitlyCaughtExceptions:\n        pass\n</code>\n</pre>\n", "senID": 1}, {"text": ["Of course it makes no sense in this form, because trying the same thing three times will yield the same result."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You'd be better off restructuring your code:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n success = False\n\nfor _ in xrange(MAX_ATTEMPTS):\n    try:\n        XYZ\n        success = True\n        break\n    except:\n        pass\n\nif not success:\n   DOXYZ\n</code>\n</pre>\n", "senID": 1}, {"text": ["It's better to explicitly specify the exception, though.", "Do you really want to catch KeyboardInterrupts?"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "KeyboardInterrupt", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["I'd avoid the exceptions if I were doing this: "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n count = 3\ncaseRe = re.compile(\"Case Number:&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span class=\\\"Value\\\"&gt;([^&lt;]*?)&lt;\")\nwhile count &gt; 0:\n   text = br.response().read()\n   mo = caseRe.search(text)\n   if mo is None:\n       count -= 1\n       continue\n   case_no  = mo.group(1)\n   break\n\nif count == 0:\n    case_no = \"N/A\"\n</code>\n</pre>\n", "senID": 1}]]