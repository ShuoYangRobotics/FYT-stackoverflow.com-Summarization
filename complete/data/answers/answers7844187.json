[[{"text": ["You have to create new instances of the Tool for each Student."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class Student(object):\n    def __init__(self, tool):\n        self.tool = tool\n\n    def draw(self):\n        if self.tool.broken != True:\n            print \"I used my tool. Sweet.\"\n        else:\n            print \"My tool is broken. Wah.\"\n\nclass Tool(object):\n    def __init__(self, name):\n        self.name = name\n        self.broken = False\n\n    def break(self):\n        print \"The %s busted.\" % self.name\n        self.broken = True\n\n# Instead of instance, make it a callable that returns a new one\ndef Hammer():\n    return Tool('hammer')\n\n# Pass a new object, instead of the type\nBilly = Student(Hammer())\nTommy = Student(Hammer())\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Lol.", "You even failed to be brief about announcing that you will try to be brief."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["First, we need to be clear about what \"called into being\" means.", "Presumably you want a new hammer every time self.tool = object happens.", "You don't want a new instance every time, for example, you access the tool attribute, or you'd always a get a new, presumably unbroken, hammer every time you check self.tool.broken."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "self.tool = object", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "self.tool.broken", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["A couple approaches."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["One, give Tool a copy method that produces a new object that should equal the original object, but be a different instance.", "For example:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n class Tool:\n\n    def __init__(self, kind):\n        self.kind = kind\n        self.broken = False\n\n    def copy(self):\n        result = Tool(self.kind)\n        result.broken = self.broken\n        return result\n</code>\n</pre>\n", "senID": 4}, {"text": ["Then in Student's init you say"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n self.tool = tool.copy()\n</code>\n</pre>\n", "senID": 6}, {"text": ["Option two, use a factory function."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n def makehammer():\n    return Tool(hammer)\n\nclass Student:\n    def __init__(self, factory):\n        self.tool = factory()\n\nBilly = Student(makehammer)\n</code>\n</pre>\n", "senID": 8}, {"text": ["I can't think any way in Python that you can write the line self.tool = object and have object automagically make a copy, and I don't think you want to.", "One thing I like about Python is WYSIWYG.", "If you want magic use C++.", "I think it makes code hard to understand when you not only can't tell what a line of code is doing, you can't even tell it's doing anything special."], "childNum": 2, "tag": "p", "senID": 9, "childList": [{"text": "self.tool = object", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "anything", "childNum": 0, "tag": "em", "pos": 3, "childList": []}]}, {"text": ["Note you can get even fancier with a factory object.", "For example:"], "childNum": 1, "tag": "p", "senID": 10, "childList": [{"text": "object", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n class RealisticFactory:\n    def __init__(self, kind, failurerate):\n        self.kind = kind\n        self.failurerate = failurerate\n\n    def make(self):\n        result = Tool(self.kind)\n        if random.random() &lt; self.failurerate:\n            result.broken = True\n        if (self.failurerate &lt; 0.01):\n            self.failurerate += 0.0001\n        return result\n\nfactory = RealisticFactory(hammer, 0.0007)\nBilly = Student(factory.make)\nTommy = Student(factory.make) # Tommy's tool is slightly more likely to be broken\n</code>\n</pre>\n", "senID": 11}], [{"text": ["You could change your lines like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n Billy = Student(Tool('hammer'))\nTommy = Student(Tool('hammer'))\n</code>\n</pre>\n", "senID": 1}, {"text": ["That'll produce a distinct instance of your Tool class for each instance of the Student class.", "the trouble with your posted example code is that you haven't \"called the Tool into being\" (to use your words) more than once."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Just call Tool('hammer') every time you want to create a new tool."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n h1 = Tool('hammer')\nh2 = Tool('hammer')\nBilly = Student(h1)\nTommy = Student(h2)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Oh wait, I forgot, Python does have magic."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class Student:\n    def __setattr__(self, attr, value):\n        if attr == 'tool':\n            self.__dict__[attr] = value.copy()\n        else:\n            self.__dict__[attr] = value\n</code>\n</pre>\n", "senID": 1}, {"text": ["But I still say you should use magic sparingly."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["After seeing the tenor of the answers here and remembering the Zen of Python, I'm going to answer my own dang question by saying, \"I probably should have just thought harder about it.", "\"  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I will restate my own question as the answer.", "Suppose I have this tiny program:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class Item(object):\n    def __init__(self):\n        self.broken = False\n\n    def smash(self):\n        print \"This object broke.\"\n        self.broken = True\n\nclass Person(object):\n    def __init__(self, holding):\n        self.holding = holding\n\n    def using(self):\n        if self.holding.broken != True:\n            print \"Pass.\"\n        else:\n            print \"Fail.\"\n\nFoo = Person(Item())\nBar = Person(Item())\n\nFoo.holding.smash()\nFoo.using()\nBar.using()\n</code>\n</pre>\n", "senID": 2}, {"text": ["The program will return \"Fail\" for Foo.using() and \"Pass\" for Bar.using().", "Upon actually thinking about what I'm doing, \"Foo.holding = Item()\" and \"Bar.holding = Item()\" are clearly different instances.", "I even ran this dumpy program to prove it worked as I surmised it did, and no surprises to you pros, it does.", "So I withdraw my question on the basis that I wasn't actually using my brain when I asked it.", "The funny thing is, with the program I've been working on, I was already doing it this way but assuming it was the wrong way to do it.", "So thanks for humoring me."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "actually thinking about what I'm doing", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "wasn't actually using my brain when I asked it", "childNum": 0, "tag": "em", "pos": 3, "childList": []}]}]]