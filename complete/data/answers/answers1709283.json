[[{"text": ["Rather than sorting, you can just \"rebuild\" the rectangle in any order you desire."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["From the original set, collect the min and max latitude and min and max longitude.", "Then construct the rectangle in any order you want."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Northwest corner is max latitude and min longitude.", "Southwest corner is min latitude and min longitude.", "Etc."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["solution seems pretty straightforward:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import math\n&gt;&gt;&gt; mlat = sum(x['lat'] for x in l) / len(l)\n&gt;&gt;&gt; mlng = sum(x['lng'] for x in l) / len(l)\n&gt;&gt;&gt; def algo(x):\n    return (math.atan2(x['lat'] - mlat, x['lng'] - mlng) + 2 * math.pi) % 2*math.pi\n\n&gt;&gt;&gt; l.sort(key=algo)\n</code>\n</pre>\n", "senID": 1}, {"text": ["basically, algo normalises the input into the [0, 2pi] space and it would be naturally sorted \"counter-clockwise\"."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "algo", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "[0, 2pi]", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Assuming that your \"rectangles\" are always parallel to the equator and meridians (that's what your example implies, but it's not stated explicitely), i.e.", "you have just two pairs of different lat and lng values: (lat0, lat1) and (lng0, lng1)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You get following 4 corners:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n NE: (lat = max(lat0, lat1), lng = max(lng0, lng1))\nNW: (lat = max(lat0, lat1), lng = min(lng0, lng1))\nSW: (lat = min(lat0, lat1), lng = min(lng0, lng1))\nSE: (lat = min(lat0, lat1), lng = max(lng0, lng1))\n</code>\n</pre>\n", "senID": 2}, {"text": ["(this is not supposed to be python code)"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["If you take the cross-product of two vectors from a corner then the sign of the result will tell you if it's clockwise or counterclockwise."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Associate an angle with each point (relative to an interior point), and then moving around is trivial."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["To calculate the angle, find a point in the middle of the shape, for example, (average_lat, average_lng) will be in the center.", "Then, atan2(lng - average_lng, lat - average_lat) will be the angle of that point."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "(average_lat, average_lng)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "atan2(lng - average_lng, lat - average_lat)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["It is easy.", "First, we sort the coordinates so we know in which order we have them, then we simply pick them out:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Sort them first by lat then by lng, biggest first.", "Then we swap the last two:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n L = [\n  { \"lat\": 34.495239, \"lng\": -118.127747 }, # north-west\n  { \"lat\": 34.495239, \"lng\": -117.147217 }, # north-east\n  { \"lat\": 34.095174, \"lng\": -117.147217 }, # south-east\n  { \"lat\": 34.095174, \"lng\": -118.127747 }  # south-west\n]\n\n\nL = sorted(L, key=lambda k: (-k[\"lat\"], -k[\"lng\"]))\n\nL[-2], L[-1] = L[-1], L[-2]\nimport pprint\npprint.pprint(L)\n</code>\n</pre>\n", "senID": 2}, {"text": ["output"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n [{'lat': 34.495238999999998, 'lng': -117.147217},\n {'lat': 34.495238999999998, 'lng': -118.127747},\n {'lat': 34.095174, 'lng': -118.127747},\n {'lat': 34.095174, 'lng': -117.147217}]\n</code>\n</pre>\n", "senID": 4}, {"text": ["(The minuses in the key function are there so that bigger values sort before smaller values.", "By sorting we put north before south, then east before west; to get the desired order we simply swap the two last (southern) values."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["So, you have 4 points."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You always start with the NW point."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["You know that the points are sorted, just not in which direction."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["It's a simple test of the first two points whether the list is clockwise or counter clockwise."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["if (pt1.y != pt2.y) then direction = clockwise."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["If you detect that the points are clockwise, simple reverse the last 3 points in the list."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["So."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Counter clockwise points: (0,1), (0,0), (1,0), (1,1)"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["Clockwise points: (0,1), (1,1), (1,0), (0,0)"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["You can see if you reverse pts2-4 your clockwise list becomes counterclockwise."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["EDIT: I had my points starting from the NE, fixt."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}]]