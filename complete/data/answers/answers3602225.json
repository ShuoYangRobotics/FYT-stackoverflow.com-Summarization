[[{"text": ["You don't need to escape meta-characters (*, (, ), ., ...) in character groups (except ], unless it is the first character in the character group; [][]+ would match a sequence of square brackets."], "childNum": 6, "tag": "p", "senID": 0, "childList": [{"text": "*", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "(", "childNum": 0, "tag": "code", "childList": []}, {"text": ")", "childNum": 0, "tag": "code", "childList": []}, {"text": ".", "childNum": 0, "tag": "code", "childList": []}, {"text": "]", "childNum": 0, "tag": "code", "childList": []}, {"text": "[][]+", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Another tip when it comes to Python is to use r'...'-style strings.", "With them, backslashes has no special meaning.", "r'\\\\' would print \\\\, since backslash has no special meaning:"], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "r'...'", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "r'\\\\'", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "\\\\", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n m = re.search(r\"%s.*[([](\\d+\\.\\d+\\.\\d+\\.\\d+)\" % site, r)\n</code>\n</pre>\n", "senID": 2}, {"text": ["In the above string it doesn't make any difference though, since \\d doesn't mean anything in Python, but when it comes to stuff like \\r, \\\\, etc., it makes lives easier."], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "\\d", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "\\r", "childNum": 0, "tag": "code", "childList": []}, {"text": "\\\\", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Use"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n [([]\n</code>\n</pre>\n", "senID": 1}, {"text": ["The characters inside the outer brackets are taken literally.", "You do not need to escape them with a backslash."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["For example:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n import re\nsite = \"prosseek.amer.corp.com \"\nm = re.search(\"%s\\s*[([](\\d+\\.\\d+\\.\\d+\\.\\d+)\" % site, 'prosseek.amer.corp.com (10.0.40.147)')\n</code>\n</pre>\n", "senID": 4}], [{"text": ["I'd like to suggest a few slight refinements to what you have:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n site = \"prosseek.amer.corp.com\"\nm = re.search(r\"%s\\s+[([](\\d+\\.\\d+\\.\\d+\\.\\d+)\" % re.escape(site), r)\nm.group(2)\n</code>\n</pre>\n", "senID": 1}, {"text": ["The changes are:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "Pass ", "tag": "none", "senID": 3}, {"text": "Use ", "tag": "none", "senID": 4}]}], [{"code": "<pre>\n<code>\n re.findall(\"(?:\\d{1,3}\\.){3}\\d{1,3}\", site)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["How about you just ignore the brackets?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n site = \"prosseek.amer.corp.com\"\nm = re.search(\"%s.*(\\d+\\.\\d+\\.\\d+\\.\\d+)\" % site, r)\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n import string    \nsite='prosseek.amer.corp.com (10.0.40.147)'\n''.join([c for c in site if c not in string.ascii_letters+' []()']).strip('.')\n</code>\n</pre>\n", "senID": 0}, {"text": ["For some reason I like this better than regex"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]