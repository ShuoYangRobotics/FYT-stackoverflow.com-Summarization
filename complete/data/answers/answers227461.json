[[{"text": ["Actually an easier way using fileinput is to use the inplace parameter:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import fileinput\nfor line in fileinput.input (filenameToProcess, inplace=1):\n    process (line)\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you use the inplace parameter it will redirect stdout to your file, so that if you do a print it will write back to your file."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["This example adds line numbers to your file:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n import fileinput\n\nfor line in fileinput.input (\"b.txt\",inplace=1):\n    print \"%d: %s\" % (fileinput.lineno(),line),\n</code>\n</pre>\n", "senID": 4}], [{"text": ["I would go for elegance a different way:  implement your file-reading and filtering operations as generators,  You'll write more lines of code, but it will be more flexible, maintainable, and performant code."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["See David M. Beazley's Generator Tricks for Systems Programmers, which is a really important thing for anyone who's writing this kind of code to read."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Generator Tricks for Systems Programmers", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.dabeaz.com/generators/"}]}], [{"text": ["This seems to work:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n with open(filename, \"r+\") as f:\n    new_txt = process(f.read())\n    f.truncate(0)\n    f.write(new_txt)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If you're looking for the python equivalent of \"perl -pi\", here's a pretty good one:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\nimport fileinput\nfor line in fileinput.input():\n   # process line\n</pre>\n", "senID": 1}, {"text": ["See http://www.python.org/doc/2.5.2/lib/module-fileinput.html for more."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://www.python.org/doc/2.5.2/lib/module-fileinput.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/doc/2.5.2/lib/module-fileinput.html"}]}, {"text": ["Done this way, you would use your python script in a pipe to create the new file:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n$ myscript.py infile.txt > outfile.txt\n</pre>\n", "senID": 4}], [{"text": ["To do it in a way which won't eat your data if you crash in the middle:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "eat your data", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.linux.org.au/conf/2007/talk/278.html"}]}, {"code": "<pre>\n<code>\n from twisted.python.filepath import FilePath\np = FilePath(filename)\np.setContent(process(p.getContent()))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["My ugly (but short as stated in the question) solution with generator expressions;"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "generator expressions", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/doc/2.5.2/ref/genexpr.html"}]}, {"code": "<pre>\n<code>\n # Some setup first\nfile('test.txt', 'w').write('\\n'.join('%05d' % i for i in range(100)))\n\n\n# This is the filter function\ndef f(i):\n    return i % 3\n\n\n# This is the main part \nfile('test2.txt', 'w').write('\\n'.join(str(f(int(l))) for l in file('test.txt', 'r').readlines()))\n\n\n# And a wrapper for sanity\ndef filter_file(infile, outfile, filter_function)\n    outfile.write('\\n'.join(filter_function(l) for l in infile.readlines()))\n</code>\n</pre>\n", "senID": 1}]]