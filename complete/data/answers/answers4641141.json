[[{"code": "<pre>\n<code>\n b=LocationV2(t)\n</code>\n</pre>\n", "senID": 0}, {"text": ["The problem is, this returns None and hence a-b gives the error you are getting."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "None", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "a-b", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n def LocationV2(x):\n    x=x*1.0\n    def g(x):\n        return 5*x**2/2\n</code>\n</pre>\n", "senID": 2}, {"text": ["should really be:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def LocationV2(x):\n    x=x*1.0\n    return 5*x**2/2\n</code>\n</pre>\n", "senID": 4}, {"text": ["And this should fix your problem."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["I don't know Python, but your function LocationV2() doesn't seem to be returning anything."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "LocationV2()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["As far as I can see you are doing"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n b = LocationV2(t)\n</code>\n</pre>\n", "senID": 1}, {"text": ["and LocationV2 does not return anything, so it implicitly returns NoneType.", "Then you call"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n if (a-b)&lt;=0.1:\n</code>\n</pre>\n", "senID": 3}, {"text": ["and it is trying to subtract NoneType from an int.", "In fact, I have no idea what LocationV2 actually does.", "It seems to multiply x by 1.", "Return the value from LocationV2 and you should be fine."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["The LocationV2 function does not return explicitly return a value, thus Python runtime make it return None."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "LocationV2", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["LocationV2 does not return anything, therefore b is None."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "LocationV2", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "b", "childNum": 0, "tag": "code", "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["A grossly over-engineered version:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n rng = xrange if xrange else range\n\nclass Polynomial(object):\n    def __init__(self, *args):\n        \"\"\"\n        Args are coefficients of x**0, x**1, x**2, ...\n        ie, Polynomial(3,0,2) is 2*(x**2) + 3\n        \"\"\"\n        self.coeffs = [float(a) for a in args]\n\n    def __call__(self, x):\n        \"Evaluate poly at x\"\n        return sum(a*(x**n) for n,a in enumerate(self.coeffs))\n\n    def integrate(self, yAtZero=0.0):\n        \"Do symbolic integration of poly, return result as new poly\"\n        newCoeffs = [yAtZero] + [a/(n+1.0) for n,a in enumerate(self.coeffs)]\n        return Polynomial(*newCoeffs)\n\nclass TrapezoidIntegrator(object):\n    def __init__(self, fn, steps=1000):\n        self.fn = fn\n        self.steps = int(steps)\n\n    def __call__(self, x):\n        \"Integrate fn from 0 to x in steps pieces\"\n        myfn = self.fn\n        w = float(x)/self.steps\n        return -0.5*w*myfn(0.0) + w*sum(myfn(w*step) for step in rng(self.steps)) + 0.5*w*myfn(x)\n\nclass Car(object):\n    def __init__(self, posFn, speedFn):\n        self.pos = posFn\n        self.speed = speedFn\n\n    def at(self, t):\n        return self.pos(t), self.speed(t)\n\nclass Ahead(object):\n    def __init__(self, fmt, *args):\n        \"\"\"\n        @param fmt,  string:  format-string with one parameter, to report a change in leader\n        @param args, strings: contestant names\n        \"\"\"        \n        self.was_ahead = None\n        self.fmt = fmt\n        self.names = list(args)\n\n    def __call__(self, *args):\n        \"Compare an arbitrary number of racers and report whenever the leader changes\"\n        state = zip(args, self.names)    # we assume that len(args)==len(self.names)\n        state.sort(reverse=True, key=lambda x: x[0])\n        leader = state[0][1]\n\n        if leader==self.was_ahead:\n            return ''\n        else:\n            self.was_ahead = leader\n            return self.fmt.format(leader)\n\ndef niceFloat(val, width, decimals):\n    \"\"\"\n    Really wretchedly annoying - I have not yet found a nice way to do\n    decimal-aligned floats with the new-style string formatting.\n    \"\"\"\n    fmt = \"%{0}.{1}f\".format(width, decimals)\n    return fmt % val\n\ndef main():\n    v1 = Polynomial(0,2,-3,1)    # speed of first car = t^3 - 3t^2 + 2t\n    d1 = TrapezoidIntegrator(v1) # must use trapezoidal numeric integration\n    car1 = Car(d1, v1)\n\n    v2 = Polynomial(0,10)        # speed of second car is 10t\n    d2 = v2.integrate()          # use symbolic integration\n    car2 = Car(d2, v2)\n\n    fmt = \"{0:&gt;4}: {1:&gt;10} {2:&gt;10}{3}\"\n    print(fmt.format('Time','Car1','Car2',''))\n    ahead = Ahead('  Car {0} is in the lead!', 1, 2)\n    log = []\n\n    for t in rng(31):\n        a, da = car1.at(t)\n        b, db = car2.at(t)\n\n        print(fmt.format(t, niceFloat(a,10,2), niceFloat(b,10,2), ahead(a,b)))\n        log.append((t,a,da,b,db))\n\nif __name__==\"__main__\":\n    main()\n</code>\n</pre>\n", "senID": 1}, {"text": ["which results in:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n Time:       Car1       Car2\n   0:       0.00       0.00  Car 1 is in the lead!\n   1:       0.25       5.00  Car 2 is in the lead!\n   2:       0.00      20.00\n   3:       2.25      45.00\n   4:      16.00      80.00\n   5:      56.25     125.00\n   6:     144.00     180.00\n   7:     306.25     245.00  Car 1 is in the lead!\n   8:     576.00     320.00\n   9:     992.25     405.00\n  10:    1600.00     500.00\n  11:    2450.25     605.00\n  12:    3600.00     720.00\n  13:    5112.26     845.00\n  14:    7056.01     980.00\n  15:    9506.26    1125.00\n  16:   12544.01    1280.00\n  17:   16256.27    1445.00\n  18:   20736.02    1620.00\n  19:   26082.28    1805.00\n  20:   32400.04    2000.00\n  21:   39800.29    2205.00\n  22:   48400.05    2420.00\n  23:   58322.31    2645.00\n  24:   69696.08    2880.00\n  25:   82656.34    3125.00\n  26:   97344.11    3380.00\n  27:  113906.37    3645.00\n  28:  132496.14    3920.00\n  29:  153272.41    4205.00\n  30:  176400.19    4500.00\n</code>\n</pre>\n", "senID": 3}]]