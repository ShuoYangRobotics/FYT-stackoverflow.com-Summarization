[[{"text": ["While it may be possible to parse arbitrary HTML with regular expressions, it's often a death trap.", "There are great tools out there for parsing HTML, including BeautifulSoup, which is a Python lib that can handle broken as well as good HTML fairly well."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "BeautifulSoup", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.crummy.com/software/BeautifulSoup/"}, {"text": "broken", "childNum": 0, "tag": "em", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from BeautifulSoup import BeautifulSoup as BSHTML\n&gt;&gt;&gt; BS = BSHTML(\"\"\"\n... &lt;font face=\"ARIAL,HELVETICA\" size=\"-2\"&gt;  \n... JUL 28         &lt;/font&gt;\"\"\"\n... )\n&gt;&gt;&gt; BS.font.contents[0].strip()\nu'JUL 28'\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then you just need to parse the date:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; datetime.strptime(BS.font.contents[0].strip(), '%b %d')\n&gt;&gt;&gt; datetime.datetime(1900, 7, 28, 0, 0)\ndatetime.datetime(1900, 7, 28, 0, 0)\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You have a bunch of options here.", "You could go for an all-out xml parser like lxml, though you seem to want a domain-specific solution.", "I'd go with a multiline regex:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import re\nrex = re.compile(r'&lt;font.*?&gt;(.*?)&lt;/font&gt;',re.S|re.M)\n...\ndata = \"\"\"&lt;font face=\"ARIAL,HELVETICA\" size=\"-2\"&gt;  \nJUL 28         &lt;/font&gt;\"\"\"\n\nmatch = rex.match(data)\nif match:\n    text = match.groups()[0].strip()\n</code>\n</pre>\n", "senID": 1}, {"text": ["Now that you have text, you can turn it into a date pretty easily:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "text", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n from datetime import datetime\ndate = datetime.strptime(text, \"%b %d\")\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Or, you could simply use Beautiful Soup:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Beautiful Soup", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.crummy.com/software/BeautifulSoup/"}]}], [{"text": ["Is grep an option?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n grep \"&lt;[^&gt;]*&gt;(.*)&lt;\\/[^&gt;]*&gt;\" file\n</code>\n</pre>\n", "senID": 1}, {"text": ["The (.", "*) should match your content."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Use Scrapy's XPath selectors as documented at http://doc.scrapy.org/en/0.10.3/topics/selectors.html"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://doc.scrapy.org/en/0.10.3/topics/selectors.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://doc.scrapy.org/en/0.10.3/topics/selectors.html"}]}, {"text": ["Alternatively you can utilize an HTML parser such as BeautifulSoup especially if want to operate on the document in an object oriented manner."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["http://pypi.python.org/pypi/BeautifulSoup/3.2.0"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://pypi.python.org/pypi/BeautifulSoup/3.2.0", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/BeautifulSoup/3.2.0"}]}], [{"text": ["Python has a library called HTMLParser.", "Also see the following question posted in SO which is very similar to what you are looking for:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "HTMLParser", "tag": "a", "pos": 0, "childList": [{"text": "HTMLParser", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/htmlparser.html"}, {"text": "HTMLParser", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["How can I use the python HTMLParser library to extract data from a specific div tag?"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "How can I use the python HTMLParser library to extract data from a specific div tag?", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/3276040/how-can-i-use-the-python-htmlparser-library-to-extract-data-from-a-specific-div"}]}]]