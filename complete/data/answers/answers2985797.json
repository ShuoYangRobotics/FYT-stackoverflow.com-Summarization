[[{"text": ["Probably the biggest improvement you could make would be to use Python (2.6)'s fractions library:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "fractions", "tag": "a", "pos": 0, "childList": [{"text": "fractions", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/fractions.html"}, {"text": "fractions", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import fractions\n&gt;&gt;&gt; fractions.Fraction(1,7) + fractions.Fraction(\"3/5\")\nFraction(26, 35)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I'd create a class containing numerator and denominator fields (both integers) and implementing __add__, __sub__, __mul__, and __div__ methods.", "Then you can simply use ordinary math functions to combine the instances."], "childNum": 6, "tag": "p", "senID": 0, "childList": [{"text": "numerator", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "denominator", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "__add__", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "__sub__", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "__mul__", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "__div__", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["It might be overkill for your purposes, but the code will be a lot cleaner."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["In fact, the class-based approach is exactly how the fractions module is implemented.", "Normally I'd suggest examining the source code of the fractions module to see how it's written, but since this is for homework I'm not sure that would be allowed.", "It might be worth checking out after the assignment is over, just to see how a full-blown fractional-number type is implemented."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "fractions", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["You could factor out the code that reduces the fraction to lowest terms from the individual '+', '-', etc.", "That should make the code a little cleaner and more compact and readable."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["You could use memoization on the euclid function which may help speed up depending on the input data.", "However this will use more memory"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "memoization", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Memoization"}, {"text": "euclid", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["You can also use a tuple assignment in euclid"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "euclid", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def euclid(numA, numB):\n    while numB != 0:\n        numA, numB = numB, numA % numB\n    return numA\n</code>\n</pre>\n", "senID": 2}, {"text": ["map is faster here"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n a, b, c, d = map(int, wyjscie[0].split(\"/\")+wyjscie[2].split(\"/\"))\n</code>\n</pre>\n", "senID": 4}], [{"text": ["Factoring out euclid into a helper function is a good idea.", "I'd suggest trying to further break up your code into more helper functions."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "euclid", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["One idea is to create four functions (add, subtract, multiply, divide) like this one:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def multiply(val1, val2):\n    # Unpack the tuples.\n    numerator1, denominator1 = val1\n    numerator2, denoninator2 = val2\n\n    # Figure out the resulting numerator and denominator here.\n\n    # Return the result as a tuple.\n    return numerator, denominator\n</code>\n</pre>\n", "senID": 2}, {"text": ["Refactor your code to use the helper functions and I think your main code will be cleaner."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["You can also optimize the euclid function .", "Instead of using Euclid's algorithm you can use Binary GCD. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Binary GCD", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Binary_GCD_algorithm"}]}, {"text": ["Two ways to implement the algorithm can be found here, unfortunately the code is in C. Still I don't think is that hard if you translate it to python . "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://andreinc.net/2010/12/12/binary-gcd-steins-algorithm-in-c/"}]}]]