[[{"text": [".keys() provides access to the list of keys in the dictionary, but changes to it are not (necessarily) reflected in the dictionary.", "You need to use del dictionary[key] or dictionary.pop(key) to remove it."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": ".keys()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "del dictionary[key]", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "dictionary.pop(key)", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Because of the behaviour in some version of Python, you need to create a of copy of the list of your keys for things to work right.", "So your code would work if written as:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n for x in list(dict2.keys()):\n    if dict2[x] == []:\n        del dict2[x]\n</code>\n</pre>\n", "senID": 2}], [{"code": "<pre>\n<code>\n for x in dict2.keys():\n    if dict2[x] == []:\n        del dict2[x]\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Newer versions of python support dict comprehensions:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n dic = {i:j for i,j in dic.items() if j != []}\n</code>\n</pre>\n", "senID": 1}, {"text": ["These are much more readable than filter or for loops"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Clean one, but it will create copy of that dict:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n dict(filter(lambda x: x[1] != [], d.iteritems()))\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n for key in [ k for (k,v) in dict2.items() if not v ]:\n  del dict2[key]\n</code>\n</pre>\n", "senID": 0}], [{"text": ["With generator object instead of list:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n a = {'1': [], 'f':[1,2,3]}\ndict((data for data in a.iteritems() if data[1]))\n</code>\n</pre>\n", "senID": 1}]]