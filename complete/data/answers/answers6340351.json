[[{"text": ["Here is part of an answer from a similar question.", "The traverse function can be used to iterate over all the values:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "a similar question", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/6290105/1114#6290211"}, {"text": "traverse", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["It sounds like you need to use recursion.", "Make a function to iterate through a list, and if it hits an item that is also a list, call itself to iterate on the member.", "Here's a link to something similar:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://www.saltycrane.com/blog/2008/08/python-recursion-example-navigate-tree-data/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://www.saltycrane.com/blog/2008/08/python-recursion-example-navigate-tree-data/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.saltycrane.com/blog/2008/08/python-recursion-example-navigate-tree-data/"}]}], [{"text": ["If you wonder to get all values in the same list you can use the following code:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n text = [u'sam', [['Test', [['one', [], []]], [(u'file.txt', ['id', 1, 0])]], ['Test2', [], [(u'file2.txt', ['id', 1, 2])]]], []]\n\ndef get_values(lVals):\n    res = []\n    for val in lVals:\n        if type(val) not in [list, set, tuple]:\n            res.append(val)\n        else:\n            res.extend(get_values(val))\n    return res\n\nget_values(text)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["two nested for loops?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for a in x:\n     print \"--------------\"\n     for b in a:\n             print b\n</code>\n</pre>\n", "senID": 1}, {"text": ["It would help if you gave an example of what you want to do with the lists"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["So wait, this is just a list-within-a-list?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The easiest way is probably just to use nested for loops:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = [[1, 3, 4], [2, 4, 4], [3, 4, 5]]\n&gt;&gt;&gt; a\n[[1, 3, 4], [2, 4, 4], [3, 4, 5]]\n&gt;&gt;&gt; for list in a:\n...     for number in list:\n...         print number\n...\n1\n3\n4\n2\n4\n4\n3\n4\n5\n</code>\n</pre>\n", "senID": 2}, {"text": ["Or is it something more complicated than that?", "Arbitrary nesting or something?", "Let us know if there's something else as well."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Also, for performance reasons, you might want to look at using list comprehensions to do this:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["http://docs.python.org/tutorial/datastructures.html#nested-list-comprehensions"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "http://docs.python.org/tutorial/datastructures.html#nested-list-comprehensions", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/datastructures.html#nested-list-comprehensions"}]}, {"text": ["Cheers,\nVictor"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["if you don't want recursion you could try:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n x = [u'sam', [['Test', [['one', [], []]], [(u'file.txt', ['id', 1, 0])]], ['Test2', [], [(u'file2.txt', ['id', 1, 2])]]], []]\nlayer1=x\nlayer2=[]\nwhile True:\n    for i in layer1:\n        if isinstance(i,list):\n            for j in i:\n                layer2.append(j)\n        else:\n            print i\n    layer1[:]=layer2\n    layer2=[]\n    if len(layer1)==0:\n        break\n</code>\n</pre>\n", "senID": 1}, {"text": ["which gives:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n sam\nTest\nTest2\n(u'file.txt', ['id', 1, 0])\n(u'file2.txt', ['id', 1, 2])\none\n</code>\n</pre>\n", "senID": 3}, {"text": ["(note that it didn't look into the tuples for lists because the tuples aren't lists.", "You can add tuple to the \"isinstance\" method if you want to fix this)"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"code": "<pre>\n<code>\n x = [u'sam', [['Test', [['one', [], []]], [(u'file.txt', ['id', 1, 0])]], ['Test2', [], [(u'file2.txt', ['id', 1, 2])]]], []]\noutput = []\n\ndef lister(l):\n    for item in l:\n        if type(item) in [list, tuple, set]:\n            lister(item)\n        else:\n            output.append(item)\n\nlister(x)\n</code>\n</pre>\n", "senID": 0}]]