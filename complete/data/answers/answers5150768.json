[[{"text": ["Based on line enumeration and assuming a 5-item cycle (display first two items, skip next three items):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for i, line in enumerate(file('myfile.txt')):\n\n   if i % 5 in (0, 1):\n       print line\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I don't know if there's a pattern for this, really.", "You could just file.readlines() the entire thing and use array slicing.", "If you're concerned about memory consumption, iterate over the file handle using itertools.compress() on a pattern generated by itertools.cycle().", "Or, you know, just write a loop or list comprehension."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "file.readlines()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "itertools.compress()", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "itertools.cycle()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["The best that I can come up with is to use the modulo operator.", "Something like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n f = open('filename.txt', 'r')\nfor index, line in enumerate(f.readlines()):\n    if index%5 &lt;= 1:\n       print(line)\n</code>\n</pre>\n", "senID": 1}, {"text": ["This should produce the pattern you are looking for."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Since others beat me to the answer here's the one line version:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n print list(line for lineNum, line in enumerate(open(\"test.txt\", \"r\")) if lineNum % 5 in (0, 1))\n</code>\n</pre>\n", "senID": 1}, {"text": [":-)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\n<code>\n with open(filename) as f:\n    print ''.join( f.readline() for i in xrange(7) if i in (0,1,5,6))\n</code>\n</pre>\n", "senID": 0}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n with open(filename) as f:\n    print ''.join( f.readline() for i in '1100011' if i=='1')\n</code>\n</pre>\n", "senID": 2}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n with open(filename) as f:\n    print ''.join( i*f.readline() for i in (1,1,0,0,0,1,1))\n</code>\n</pre>\n", "senID": 4}], [{"text": ["Building on @pynator's answer, and using the itertoolsmodule,\nhere is the same solution as a ifilter - imap combination."], "childNum": 6, "tag": "p", "senID": 0, "childList": [{"text": "itertoolsmodule", "tag": "a", "pos": 0, "childList": [{"text": "itertools", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/itertools.html"}, {"text": "itertools", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://docs.python.org/library/itertools.html#itertools.ifilter", "text": "ifilter", "childNum": 1, "tag": "a", "childList": [{"text": "ifilter", "tag": "code"}]}, {"text": "ifilter", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://docs.python.org/library/itertools.html#itertools.imap", "text": "imap", "childNum": 1, "tag": "a", "childList": [{"text": "imap", "tag": "code"}]}, {"text": "imap", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["z is an iterable, like file(\"myfile.txt\").", "imap is used to pick the original data item from an enumerated pair."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "z", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "file(\"myfile.txt\")", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "imap", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from itertools import ifilter, imap\n&gt;&gt;&gt; result = imap(lambda x: x[1], ifilter(lambda x: x[0]%5 in (0,1), enumerate(z)))\n&gt;&gt;&gt; for i in result: print i\n... \nline 1\nline 2\nline 6\nline 7\nline 11\nline 12\nline 16\nline 17\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 2}]]