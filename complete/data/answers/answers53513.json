[[{"code": "<pre>\n<code>\n if not a:\n  print \"List is empty\"\n</code>\n</pre>\n", "senID": 0}, {"text": ["Using the implicit booleanness of the empty list is quite pythonic."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["The pythonic way to do it is from the style guide:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "style guide", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0008/"}]}, {"text": ["For sequences, (strings, lists, tuples), use the fact that empty sequences are false."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Yes:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Yes:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n if not seq:\nif seq:\n</code>\n</pre>\n", "senID": 3}, {"text": ["No:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "No:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n if len(seq)\nif not len(seq)\n</code>\n</pre>\n", "senID": 5}], [{"text": ["An empty list is itself considered false in true value testing (see python documentation):"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "python documentation", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/lib/truth.html"}]}, {"code": "<pre>\n<code>\n a = []\nif a:\n     print \"not empty\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["@Daren Thomas"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Your duckCollection should implement __nonzero__ or __len__ so the if a: will work without problems."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "__nonzero__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__len__", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["len() is an O(1) operation for Python lists, strings, dicts, and sets.", "Python internally keeps track of the number of elements in these containers."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "len() is an O(1) operation", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://books.google.com/books?id=vpTAq4dnmuAC&pg=RA1-PA479&lpg=RA1-PA479&dq=Python+len+big+O&source=web&ots=AOM6A1K9Fy&sig=iQo8mV6Xf9KdzuNSa-Jkr8wDEuw&hl=en&sa=X&oi=book_result&resnum=4&ct=result"}]}, {"text": ["JavaScript has a similar notion of truthy/falsy."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "truthy/falsy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.isolani.co.uk/blog/javascript/TruthyFalsyAndTypeCasting"}]}], [{"text": ["I have seen the below as preferred, as it will catch the null list as well:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if not a:\n    print \"The list is empty or null\"\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I prefer the following:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if a == []:\n   print \"The list is empty.\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["Readable and you don't have to worry about calling a function like len() to iterate through the variable.", "Although I'm not entirely sure what the BigO notation of something like this is... but Python's so blazingly fast I doubt it'd matter unless a was gigantic."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "len()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["I prefer it explicitly:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if len(li) == 0:\n    print 'the list is empty'\n</code>\n</pre>\n", "senID": 1}, {"text": ["This way it's 100% clear that li is a sequence (list) and we want to test its size.", "My problem with if not li: ... is that it gives the false impression that li is a boolean variable."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "li", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "if not li: ...", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "li", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["It's silly to compare \nif a==[] because as mentioned, it breaks polymorphism, worse, extra object creation, a sin, even if it's very fast.", "len IS the preferred way, because it's standard and any inherited class should support it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]