[[{"text": ["If you like Django's ORM, it's perfectly simple to use it \"standalone\"; I've written up several techniques for using parts of Django outside of a web context, and you're free to use any of them (or roll your own)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "written up several techniques for using parts of Django outside of a web context", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.b-list.org/weblog/2007/sep/22/standalone-django-scripts/"}]}, {"text": ["Shane above seems to be a bit misinformed on this and a few other points -- for example, Django can do multiple different databases, it just doesn't default to that (you need to do a custom manager on the models which use something other than the \"main\" DB, something that's not too hard and there are recipes floating around for it).", "It's true that Django itself doesn't do connection management/connection pooling, but personally I've always used external tools for that anyway (e.g., pgpool, which rocks harder than anything built in to an ORM ever could)."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "can", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "default", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "pgpool", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["I'd suggest spending some time reading up and possibly trying a few likely Google searches (e.g., the post I linked you to comes up as the top result for \"standalone Django script\") to get a feel for what will actually best suit your needs and tastes -- it may be Django's ORM isn't right for you, and you shouldn't use it if it isn't, but unfortunately there's a lot of misinformation out there which muddies the waters."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Editing to respond to Shane:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Editing to respond to Shane:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Again, you seem to be misinformed: SQLAlchemy needs to be configured (i.e., told what DB to use, how to connect, etc.", ") before you can run queries with it, so how is the fact that Django needs similar configuration (accomplished via your choice of methods -- you do not need to have a full Django settings file) any disadvantage?"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "do not", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"text": ["As for multiple DB support, you seem to be confused: the support is there at a low level.", "The query object -- not QuerySet, but the underlying Query object it will execute knows what DB it's connecting to, and accepts a DB connection as one of its initialization arguments.", "Telling one model to use one DB and another model to use another is as simple as setting up one method on a manager which passes the right connection info down into the Query.", "True, there's no higher-level API for this, but that's not the same as \"no support\" and not the same as \"requires custom code\" (unless you'd argue that configuring multiple DBs explicitly in SQLAlchemy, required if you want multiple DBs, is also \"custom code\")."], "childNum": 3, "tag": "p", "senID": 5, "childList": [{"text": "QuerySet", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "Query", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "Query", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["As for whether you end up indirectly using things that aren't in django.db, well, so what?", "The fact that django.db imports bits of, say, django.utils because there are data structures and other bits of code which are useful for more than just an ORM is fine as far as I'm personally concerned; one might as well complain if something has external dependencies or makes use of standard Python libraries instead of being 100% self-contained."], "childNum": 4, "tag": "p", "senID": 6, "childList": [{"text": "indirectly", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "django.db", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "django.db", "childNum": 0, "tag": "code", "childList": []}, {"text": "django.utils", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["The short answer is: no, you can't use the Django ORM separately from Django."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The long answer is: yes, you can if you are willing to load large parts of Django along with it.", "For example, the database connection that is used by Django is opened when a request to Django occurs.", "This happens when a signal is sent so you could ostensibly send this signal to open the connection without using the specific request mechanism.", "Also, you'd need to setup the various applications and settings for the Django project. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Ultimately, it probably isn't worth your time.", "SQL Alchemy is a relatively well known Python ORM, which is actually more powerful than Django's anyway since it supports multiple database connections and connection pooling and other good stuff."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "SQL Alchemy", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.sqlalchemy.org/"}]}, {"tag": "hr", "senID": 3}, {"text": ["Edit: in response to James' criticism elsewhere, I will clarify what I described in my original post.", "While it is gratifying that a major Django contributor has called me out, I still think I'm right :)"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["First off, consider what needs to be done to use Django's ORM separate from any other part.", "You use one of the methods described by James for doing a basic setup of Django.", "But a number of these methods don't allow for using the syncdb command, which is required to create the tables for your models.", "A settings.py file is needed for this, with variables not just for DATABASE_*, but also INSTALLED_APPLICATIONS with the correct paths to all models.py files."], "childNum": 4, "tag": "p", "senID": 5, "childList": [{"text": "methods", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.b-list.org/weblog/2007/sep/22/standalone-django-scripts/"}, {"text": "syncdb", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "DATABASE_*", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "INSTALLED_APPLICATIONS", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["It is possible to roll your own solution to use syncdb without a settings.py, but it requires some advanced knowledge of Django.", "Of course, you don't need to use syncdb; the tables can be created independently of the models.", "But it is an aspect of the ORM that is not available unless you put some effort into setup."], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "syncdb", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "syncdb", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Secondly, consider how you would create your queries to the DB with the standard Model.objects.filter() call.", "If this is done as part of a view, it's very simple: construct the QuerySet and view the instances.", "For example:"], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "Model.objects.filter()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "QuerySet", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n tag_query = Tag.objects.filter( name='stackoverflow' )\nif( tag_query.count() &gt; 0 ):\n    tag = tag_query[0]\n    tag.name = 'stackoverflowed'\n    tag.save()\n</code>\n</pre>\n", "senID": 8}, {"text": ["Nice, simple and clean.", "Now, without the crutch of Django's request/response chaining system, you need to initialise the database connection, make the query, then close the connection.", "So the above example becomes:"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n from django.db import reset_queries, close_connection, _rollback_on_exception\nreset_queries()\ntry:\n    tag_query = Tag.objects.filter( name='stackoverflow' )\n    if( tag_query.count() &gt; 0 ):\n        tag = tag_query[0]\n        tag.name = 'stackoverflowed'\n        tag.save()\nexcept:\n    _rollback_on_exception()\nfinally:\n    close_connection()\n</code>\n</pre>\n", "senID": 10}, {"text": ["The database connection management can also be done via Django signals.", "All of the above is defined in django/db/init.py.", "Other ORMs also have this sort of connection management, but you don't need to dig into their source to find out how to do it.", "SQL Alchemy's connection management system is documented in the tutorials and elsewhere."], "childNum": 3, "tag": "p", "senID": 11, "childList": [{"text": "django/db/init.py", "tag": "a", "pos": 1, "childList": [{"text": "init", "tag": "strong"}], "childNum": 1, "href": "http://code.djangoproject.com/browser/django/trunk/django/db/%5F%5Finit%5F%5F.py"}, {"text": "init", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}, {"text": "tutorials", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://www.sqlalchemy.org/docs/05/ormtutorial.html"}]}, {"text": ["Finally, you need to keep in mind that the database connection object is local to the current thread at all times, which may or may not limit you depending on your requirements.", "If your application is not stateless, like Django, but persistent, you may hit threading issues."], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"text": ["In conclusion, it is a matter of opinion.", "In my opinion, both the limitations of, and the setup required for, Django's ORM separate from the framework is too much of a liability.", "There are perfectly viable dedicated ORM solutions available elsewhere that are designed for library usage.", "Django's is not. "], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"text": ["Don't think that all of the above shows I dislike Django and all it's workings, I really do like Django a lot!", "But I'm realistic about what it's capabilities are and being an ORM library is not one of them."], "childNum": 0, "tag": "p", "senID": 14, "childList": []}, {"text": ["P.S.", "Multiple database connection support is being worked on.", "But it's not there now."], "childNum": 1, "tag": "p", "senID": 15, "childList": [{"text": "worked", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://code.djangoproject.com/ticket/1142"}]}], [{"text": ["You can certainly use various parts of Django in a stand-alone fashion.", "It is after-all just a collection of Python modules, which you can import to any other code you would like to use them."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I'd also recommend looking at SQL Alchemy if you are only after the ORM side of things."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "SQL Alchemy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.sqlalchemy.org/"}]}], [{"text": ["I recommend SQLAlchemy.", "It should do all the ORM stuff, as well as basic SQL stuff."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "SQLAlchemy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://sqlalchemy.org"}]}], [{"text": ["(I'm reporting my solution because my question said to be a duplicate)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Ah ok I figured it out and will post the solutions for anyone attempting to do the same thing."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["This solution assumes that you want to create new models."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["First create a new folder to store your files.", "We'll call it \"standAlone\".", "Within \"standAlone\", create the following files:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n __init__.py\nmyScript.py\nsettings.py\n</code>\n</pre>\n", "senID": 4}, {"text": ["Obviously \"myScript.py\" can be named whatever. "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Next, create a directory for your models."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["We'll name our model directory \"myApp\", but realize that this is a normal Django application within a project, as such, name it appropriately to the collection of models you are writing. "], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["Within this directory create 2 files: "], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n __init__.py\nmodels.py\n</code>\n</pre>\n", "senID": 9}, {"text": ["Your going to need a copy of manage.py from an either an existing Django project or you can just grab a copy from your Django install path:"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n django\\conf\\project_template\\manage.py\n</code>\n</pre>\n", "senID": 11}, {"text": ["Copy the manage.py to your /standAlone directory.", "Ok so you should now have the following structure:"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"code": "<pre>\n<code>\n \\standAlone\n    __init__.py\n    myScript.py\n    manage.py\n    settings.py\n\\myApp\n    __init__.py\n    models.py\n</code>\n</pre>\n", "senID": 13}, {"text": ["Add the following to your myScript.py file:"], "childNum": 1, "tag": "p", "senID": 14, "childList": [{"text": "Add the following to your myScript.py file:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n # settings.py\nfrom django.conf import settings\n\nsettings.configure(\n    DATABASE_ENGINE    = \"postgresql_psycopg2\",\n    DATABASE_NAME      = \"myDatabase\",\n    DATABASE_USER      = \"myUsername\",\n    DATABASE_PASSWORD  = \"myPassword\",\n    DATABASE_HOST      = \"localhost\",\n    DATABASE_PORT      = \"5432\",\n    INSTALLED_APPS     = (\"myApp\")\n)\n\nfrom django.db import models\nfrom myApp.models import *\n</code>\n</pre>\n", "senID": 15}, {"text": ["and add this to your settings.py file:"], "childNum": 1, "tag": "p", "senID": 16, "childList": [{"text": "and add this to your settings.py file:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n DATABASE_ENGINE    = \"postgresql_psycopg2\"\n    DATABASE_NAME      = \"myDatabase\"\n    DATABASE_USER      = \"myUsername\"\n    DATABASE_PASSWORD  = \"myPassword\"\n    DATABASE_HOST      = \"localhost\"\n    DATABASE_PORT      = \"5432\",\n    INSTALLED_APPS     = (\"myApp\")\n</code>\n</pre>\n", "senID": 17}, {"text": ["and finally your myApp/models.py:"], "childNum": 1, "tag": "p", "senID": 18, "childList": [{"text": "and finally your myApp/models.py:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n # myApp/models.py\nfrom django.db import models\n\nclass MyModel(models.Model):\n     field = models.CharField(max_length=255)\n</code>\n</pre>\n", "senID": 19}, {"text": ["and that's it.", "Now to have Django manage your database, in command prompt navigate to our /standalone directory and run: "], "childNum": 0, "tag": "p", "senID": 20, "childList": []}, {"code": "<pre>\n<code>\n manage.py sql MyApp\n</code>\n</pre>\n", "senID": 21}], [{"text": ["Take a look at django-standalone which makes this setup pretty easy."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "django-standalone", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/django-standalone"}]}, {"text": ["I also found this blog entry quite useful."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "this blog entry", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://jystewart.net/2008/02/18/using-the-django-orm-as-a-standalone-component/"}]}]]