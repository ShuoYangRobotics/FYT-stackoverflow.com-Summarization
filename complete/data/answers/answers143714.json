[[{"text": ["No."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "No.", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/lexical_analysis.html#strings"}]}], [{"text": ["Python is one of the few (?", ") languages where ' and \" have identical functionality.", "The choice for me usually depends on what is inside.", "If I'm going to quote a string that has single quotes within it I'll use double quotes and visa versa, to cut down on having to escape characters in the string."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For example, \"this doesn't require escaping the '\" and 'she said \"quoting is easy in python\"'."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["In some other languages, meta characters are not interpreted if you use single quotes.", "Take this example in Ruby:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n irb(main):001:0&gt; puts \"string1\\nstring2\"\nstring1\nstring2\n=&gt; nil\nirb(main):002:0&gt; puts 'string1\\nstring2'\nstring1\\nstring2\n=&gt; nil\n</code>\n</pre>\n", "senID": 1}, {"text": ["In Python, if you want the string to be taken literally, you can use raw strings (a string preceded by the 'r' character):"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; print 'string1\\nstring2'\nstring1\nstring2\n&gt;&gt;&gt; print r'string1\\nstring2'\nstring1\\nstring2\n</code>\n</pre>\n", "senID": 3}], [{"text": ["There is no difference in Python, and you can really use it to your advantage when generating XML.", "Correct XML syntax requires double-quotes around attribute values, and in many languages, such as Java, this forces you to escape them when creating a string like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n String HtmlInJava = \"&lt;body bgcolor=\\\"Pink\\\"&gt;\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["But in Python, you simply use the other quote and make sure to use the matching end quote like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n html_in_python = '&lt;body bgcolor=\"Pink\"&gt;'\n</code>\n</pre>\n", "senID": 3}, {"text": ["Pretty nice huh?", "You can also use three double quotes to start and end multi-line strings, with the EOL's included like this:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n multiline_python_string = \"\"\"\nThis is a multi-line Python string which contains line breaks in the \nresulting string variable, so this string has a '\\n' after the word\n'resulting' and the first word 'word'.\"\"\"\n</code>\n</pre>\n", "senID": 5}], [{"text": ["There are 3 ways you can qoute strings in python:\n\"string\"\n'string'\n\"\"\"\nstring\nstring\n\"\"\"\nthey all produce the same result."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Single and double quoted strings in Python are identical.", "The only difference is that single-quoted strings can contain unescaped double quote characters, and vice versa.", "For example:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n 'a \"quoted\" word'\n\"another 'quoted' word\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then again, there are triple-quoted strings, which allow both quote chars and newlines to be unescaped."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["You can substitute variables in a string using named specifiers and the locals() builtin:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n name = 'John'\nlastname = 'Smith'\nprint 'My name is %(name)s %(lastname)s' % locals()  # prints 'My name is John Smith'\n</code>\n</pre>\n", "senID": 4}]]