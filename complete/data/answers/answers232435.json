[[{"text": ["I just came across ForeignKey.limit_choices_to in the Django docs.", "Not sure yet how this works, but it might just be the right think here."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "ForeignKey.limit_choices_to", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.ForeignKey.limit_choices_to"}]}, {"text": ["Update: ForeignKey.limit_choices_to allows to specify either a constant, a callable or a Q object to restrict the allowable choices for the key.", "A constant obviously is no use here, since it knows nothing about the objects involved."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Update:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Using a callable (function or class method or any callable object) seem more promising.", "The problem remains how to access the necessary information form the HttpRequest object.", "Using thread local storage may be a solution."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "thread local storage", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/160009/django-model-limitchoicestouser-user"}]}, {"text": ["2.", "Update: Here is what hast worked for me:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "2. Update:", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}]}, {"text": ["I created a middle ware as described in the link above.", "It extracts one or more arguments from the request's GET part, such as \"product=1\" and stores this information in the thread locals."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Next there is a class method in the model that reads the thread local variable and returns a list of ids to limit the choice of a foreign key field."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n @classmethod\ndef _product_list(cls):\n    \"\"\"\n    return a list containing the one product_id contained in the request URL,\n    or a query containing all valid product_ids if not id present in URL\n\n    used to limit the choice of foreign key object to those related to the current product\n    \"\"\"\n    id = threadlocals.get_current_product()\n    if id is not None:\n        return [id]\n    else:\n        return Product.objects.all().values('pk').query\n</code>\n</pre>\n", "senID": 6}, {"text": ["It is important to return a query containing all possible ids if none was selected so the normal admin pages work ok."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["The foreign key field is then declared as:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n product = models.ForeignKey(Product, limit_choices_to=dict(id__in=BaseModel._product_list))\n</code>\n</pre>\n", "senID": 9}, {"text": ["The catch is that you have to provide the information to restrict the choices via the request.", "I don't see a way to access \"self\" here."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}], [{"text": ["This isn't how django works.", "You would only create the relation going one way."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class Parent(models.Model):\n  name = models.CharField(max_length=255)\n\nclass Child(models.Model):\n  name = models.CharField(max_length=255)\n  myparent = models.ForeignKey(Parent)\n</code>\n</pre>\n", "senID": 1}, {"text": ["And if you were trying to access the children from the parent you would do\nparent_object.child_set.all().", "If you set a related_name in the myparent field, then that is what you would refer to it as.", "Ex: related_name='children', then you would do parent_object.children.all()"], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "parent_object.child_set.all()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "related_name='children'", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "parent_object.children.all()", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Read the docs http://docs.djangoproject.com/en/dev/topics/db/models/#many-to-one-relationships for more."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "docs", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/topics/db/models/#many-to-one-relationships"}, {"href": "http://docs.djangoproject.com/en/dev/topics/db/models/#many-to-one-relationships", "text": "http://docs.djangoproject.com/en/dev/topics/db/models/#many-to-one-relationships", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["Do you want to restrict the choices available in the admin interface when creating/editing a model instance?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["One way to do this is validation of the model.", "This lets you raise an error in the admin interface if the foreign field is not the right choice."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Of course, Eric's answer is correct: You only really need one foreign key, from child to parent here."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["@Ber: I have added validation to the model similar to this"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class Parent(models.Model):\n  name = models.CharField(max_length=255)\n  favoritechild = models.ForeignKey(\"Child\", blank=True, null=True)\n  def save(self, force_insert=False, force_update=False):\n    if self.favoritechild is not None and self.favoritechild.myparent.id != self.id:\n      raise Exception(\"You must select one of your own children as your favorite\")\n    super(Parent, self).save(force_insert, force_update)\n</code>\n</pre>\n", "senID": 1}, {"text": ["which works exactly how I want, but it would be really nice if this validation could restrict choices in the dropdown in the admin interface rather than validating after the choice."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I'm trying to do something similar.", "It seems like everyone saying 'you should only have a foreign key one way' has maybe misunderstood what you're trying do."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["It's a shame the limit_choices_to={\"myparent\": \"self\"} you wanted to do doesn't work... that would have been clean and simple.", "Unfortunately the 'self' doesn't get evaluated and goes through as a plain string."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I thought maybe I could do:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n class MyModel(models.Model):\n    def _get_self_pk(self):\n        return self.pk\n    favourite = modles.ForeignKey(limit_choices_to={'myparent__pk':_get_self_pk})\n</code>\n</pre>\n", "senID": 3}, {"text": ["But alas that gives an error because the function doesn't get passed a self arg :("], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["It seems like the only way is to put the logic into all the forms that use this model (ie pass a queryset in to the choices for your formfield).", "Which is easily done, but it'd be more DRY to have this at the model level.", "Your overriding the save method of the model seems a good way to prevent invalid choices getting through."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["I am also looking for an answer to this question--it seems like it should be possible, and that the \"right\" way would be going through either a callable or Q object in the model, but the catch is how to pass the right key to it so that it limits the choices to relevant ones."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["My question on limiting foreign keys in an inline admin form"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "My question on limiting foreign keys in an inline admin form", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1824267/limit-foreign-key-choices-in-select-in-an-inline-form-in-admin"}]}], [{"text": ["An alternative approach would be not to have 'favouritechild' fk as a field on the Parent model."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Instead you could have an is_favourite boolean field on the Child."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["This may help:\nhttps://anentropic.wordpress.com/2009/12/08/snippet-exclusive-boolean-field-for-django-models/"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "https://anentropic.wordpress.com/2009/12/08/snippet-exclusive-boolean-field-for-django-models/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "https://anentropic.wordpress.com/2009/12/08/snippet-exclusive-boolean-field-for-django-models/"}]}, {"text": ["That way you'd sidestep the whole problem of ensuring Children could only be made the favourite of the Parent they belong to."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["The view code would be slightly different but the filtering logic would be straightforward."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["In the admin you could even have an inline for Child models that exposed the is_favourite checkbox (if you only have a few children per parent) otherwise the admin would have to be done from the Child's side."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["The new \"right\" way of doing this, at least since Django 1.1 is by overriding the AdminModel.formfield_for_foreignkey(self, db_field, request, **kwargs).  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["See http://docs.djangoproject.com/en/1.2/ref/contrib/admin/#django.contrib.admin.ModelAdmin.formfield_for_foreignkey"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.djangoproject.com/en/1.2/ref/contrib/admin/#django.contrib.admin.ModelAdmin.formfield_for_foreignkey", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/1.2/ref/contrib/admin/#django.contrib.admin.ModelAdmin.formfield_for_foreignkey"}]}, {"text": ["For those who don't want to follow the link below is an example function that is close for the above questions models."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n class MyModelAdmin(admin.ModelAdmin):\n    def formfield_for_foreignkey(self, db_field, request, **kwargs):\n        if db_field.name == \"favoritechild\":\n            kwargs[\"queryset\"] = Child.objects.filter(myparent=request.object_id)\n        return super(MyModelAdmin, self).formfield_for_manytomany(db_field, request, **kwargs)\n</code>\n</pre>\n", "senID": 3}, {"text": ["I'm only not sure about how to get the current object that is being edited.", "I expect it is actually on the self somewhere but I'm not sure."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]]