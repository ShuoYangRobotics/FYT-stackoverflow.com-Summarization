[[{"text": ["Here is how I finally did : "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class UserProfileForm(forms.ModelForm):\n    first_name = forms.CharField(label=_(u'Pr\u00e9nom'), max_length=30)\n    last_name = forms.CharField(label=_(u'Nom'), max_length=30)\n\n    def __init__(self, *args, **kw):\n        super(UserProfileForm, self).__init__(*args, **kw)\n        self.fields['first_name'].initial = self.instance.user.first_name\n        self.fields['last_name'].initial = self.instance.user.last_name\n\n        self.fields.keyOrder = [\n            'first_name',\n            'last_name',\n            ...some_other...\n            ]\n\n    def save(self, *args, **kw):\n        super(UserProfileForm, self).save(*args, **kw)\n        self.instance.user.first_name = self.cleaned_data.get('first_name')\n        self.instance.user.last_name = self.cleaned_data.get('last_name')\n        self.instance.user.save()\n\n    class Meta:\n        model = UserProfile\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I stumbled across this today and after some googling I found a solution that is a bit cleaner in my opinion: "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #in forms.py\nclass UserForm(forms.ModelForm):\n    class Meta:\n        model = User\n        fields = [\"username\", \"email\"]\n\nclass UserProfileForm(forms.ModelForm):\n    class Meta:\n        model = UserProfile\n\n#in views.py\ndef add_user(request):\n    ...\n    if request.method == \"POST\":\n        uform = UserForm(data = request.POST)\n        pform = UserProfileForm(data = request.POST)\n        if uform.is_valid() and pform.is_valid():\n            user = uform.save()\n            profile = pform.save(commit = False)\n            profile.user = user\n            profile.save()\n            ....\n    ...\n\n#in template\n&lt;form method=\"post\"&gt;\n    {{ uform.as_p }}\n    {{ pform.as_p }}\n    &lt;input type=\"submit\" ...&gt;\n&lt;/form&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["Source"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Source", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://uswaretech.com/blog/2010/01/doing-things-with-django-forms/"}]}], [{"text": ["This is how I did it in the current trunk (Revision: 11804).", "The solution of Natim was not working for me."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In admin.py:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "admin.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n class ProfileAdmin(admin.ModelAdmin):\n    form = ProfileForm\n\n    def save_model(self, request, obj, form, change):\n        obj.user.first_name = form.cleaned_data['first_name']\n        obj.user.last_name = form.cleaned_data['last_name']\n        obj.user.save()\n        obj.save()\n</code>\n</pre>\n", "senID": 2}, {"text": ["In forms.py:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "forms.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n class ProfileForm(forms.ModelForm):\n    first_name = forms.CharField(max_length=256)\n    last_name = forms.CharField(max_length=256)\n\n    def __init__(self, *args, **kwargs):\n        super(ProfileForm, self).__init__(*args, **kwargs)\n        try:\n            self.fields['first_name'].initial = self.instance.user.first_name\n            self.fields['last_name'].initial = self.instance.user.last_name\n        except User.DoesNotExist:\n            pass\n\n    class Meta:\n         fields = ['first_name', 'last_name', ...etc.]\n</code>\n</pre>\n", "senID": 4}], [{"text": ["I take it normal that you don't find any information in the docs as you merge two models into a single form. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Alternatively and maybe very obviously you can: Create two modelforms, one for the user and the other for the userprofile.", "Set the userprofile modelform to display only firstname and lastname.", "Put both forms in the same template within a single &lt;form&gt; tag.", "When it is submitted, call the save methods of each form."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "&lt;form&gt;", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}], [{"text": ["Why not have two model forms on the back-end and just present them as a single form in your template?", "Drop the name fields from your UserProfileForm and create a second model form for the user object?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["You can also try to use the django-basic-apps project which has a profiles app:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://github.com/lincolnloop/django-basic-apps"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://github.com/lincolnloop/django-basic-apps", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://github.com/lincolnloop/django-basic-apps"}]}]]