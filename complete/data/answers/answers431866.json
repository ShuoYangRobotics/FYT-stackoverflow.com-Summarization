[[{"text": ["One common convention is to use a \"_\" as a variable name for the elements of the tuple you wish to ignore.", "For instance:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def f():\n    return 1, 2, 3\n\n_, _, x = f()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can use x = func()[0] to return the first value, x = func()[1] to return the second, and so on."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "x = func()[0]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "x = func()[1]", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["If you're using Python 3, you can you use the star before a variable (on the left side of an assignment) to have it be a list in unpacking."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["# Example 1: a is 1 and b is [2, 3]"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["a, *b = [1, 2, 3]"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["# Example 2: a is 1, b is [2, 3], and c is 4"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["a, *b, c = [1, 2, 3, 4]"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["# Example 3: b is [1, 2] and c is 3"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["*b, c = [1, 2, 3]       "], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["# Example 4: a is 1 and b is []"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["a, *b = [1]"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}], [{"text": ["Three simple choices."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Obvious"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n x, _ = func()\n\nx, junk = func()\n</code>\n</pre>\n", "senID": 2}, {"text": ["Hideous"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n x = func()[0]\n</code>\n</pre>\n", "senID": 4}, {"text": ["And there are ways to do this with a decorator."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n def val0( aFunc ):\n    def pick0( *args, **kw ):\n        return aFunc(*args,**kw)[0]\n    return pick0\n\nfunc0= val0(func)\n</code>\n</pre>\n", "senID": 6}], [{"text": ["Remember, when you return more than one item, you're essentially returning a list-like object.", "So you can do things like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def func():\n    return 1, 2\n\nprint func()[0] # prints 1\nprint func()[1] # prints 2\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This seems like the best choice to me:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n val1, val2, ignored1, ignored2 = some_function()\n</code>\n</pre>\n", "senID": 1}, {"text": ["It's not cryptic or ugly (like the func()[index] method), and clearly states your purpose."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]