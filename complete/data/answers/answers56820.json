[[{"text": ["can't help the way it's stored, but at least formatting works correctly: "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n '%.1f' % round(n, 1) # gives you '5.6'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["round(5.59, 1) is working fine.", "The problem is that 5.6 cannot be represented exactly in binary floating point."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "round(5.59, 1)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; 5.6\n5.5999999999999996\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["As Vinko says, you can use string formatting to do rounding for display."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Python has a module for decimal arithmetic if you need that."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "module for decimal arithmetic", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/lib/module-decimal.html"}]}], [{"text": ["Formatting works correctly even without having to round:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n \"%.1f\" % n\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Floating point math is vulnerable to slight, but annoying, precision inaccuracies.", "If you can work with integer or fixed point, you will be guaranteed precision."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["You get '5.6' if you do str(round(n, 1)) instead of just round(n, 1)."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "str(round(n, 1))", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "round(n, 1)", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Take a look at the Decimal module"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Decimal module", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/decimal.html"}]}, {"text": ["and "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Decimal provides the kind of operations that make it easy to write apps that require floating point operations and also need to present those results in a human readable format, e.g., accounting."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "also", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["You can use the string format operator %, similar to sprintf."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "%", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n mystring = \"%.2f\" % 5.5999\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can switch the data type to a integer:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; n = 5.59\n&gt;&gt;&gt; int(n * 10) / 10.0\n5.5\n&gt;&gt;&gt; int(n * 10 + 0.5) \n56\n</code>\n</pre>\n", "senID": 1}, {"text": ["And then display the number by inserting the locale's decimal separator."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["However, Jimmy's answer is better."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Jimmy's answer", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/56820/round-in-python-doesnt-seem-to-be-rounding-properly#56833"}]}], [{"text": ["printf the sucker."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "printf", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n print '%.1f' % 5.59  # returns 5.6\n</code>\n</pre>\n", "senID": 1}], [{"text": ["What about:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n round(n,1)+epsilon\n</code>\n</pre>\n", "senID": 1}]]