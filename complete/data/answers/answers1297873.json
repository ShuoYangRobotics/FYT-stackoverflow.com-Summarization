[[{"text": ["You might want to consider Simon Willison's library:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 1, "lis": [{"text": ["djng\u2014a Django powered microframework"], "childNum": 0, "tag": "a", "senID": 1, "childList": []}]}, {"text": ["From the readme:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "readme", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://github.com/simonw/djng/tree/master"}]}], [{"text": ["Then what you need is not Django.", "What you need is exactly what micropy does."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "micropy", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://code.google.com/p/micropy/"}]}], [{"text": ["This is a simple CMS implemented in Django, as a single file.", "It was written by Paul Bissex.", "Some of it has been \"golfed\" and could do with a bit of expansion, but it's still relatively easy to read."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Paul Bissex", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://news.e-scribe.com/395"}]}, {"text": ["The source has vanished from his pastebin, but I saved it:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/env python\n\"\"\"\njngo -- The unhealthily compressed Django application.\n\nUsage: ./jngo.py\n\nAssuming a working install of Django (http://djangoproject.com/) and SQLite\n(http://sqlite.org), this script can be executed directly without any other \npreparations -- you don't have to do `setup.py install`, it doesn't \nneed to be on your Python path, you don't need to set DJANGO_SETTINGS_MODULE,\nyou don't need a webserver. You don't even need content -- the first time it's \nrun, it will create a SQLite database in the same directory as the script \nand populate it with sample pages.\n\nFeatures:\n\n* Editable content on all pages\n* Dynamically generated navigation buttons\n* Optional private-access pages\n* Optional per-page comments\n* RSS feed of latest comments, with autodiscovery\n\nAuthor: Paul Bissex &lt;pb@e-scribe.com&gt;\nURL: http://news.e-scribe.com/\nLicense: MIT\n\nFAQS: \n\nQ: Should I use this as an example of excellent Django coding practices?\nA: Um, no. This is pretty much the opposite of excellent Django coding practices.\n\nQ: Why did you do such a terrible thing?\nA: At first, it was just a perverse experiment. It ended up being a\ngood way to refresh my memory on some Django internals, by trying all\nkinds of things that broke in weird ways.\n\"\"\"\n\n#--- Settings ---\nNAME = ROOT_URLCONF = \"jngo\"\nDEBUG = TEMPLATE_DEBUG = True\nSITE_ID = 3000\nHOSTNAME_AND_PORT = \"127.0.0.1:8000\"\nDATABASE_ENGINE = \"sqlite3\"\nDATABASE_NAME = NAME + \".db\"\nINSTALLED_APPS = [\"django.contrib.%s\" % app for app in \"auth admin contenttypes sessions sites flatpages comments\".split()]\nTEMPLATE_LOADERS = ('django.template.loaders.app_directories.load_template_source', NAME + '.template_loader')\nMIDDLEWARE_CLASSES = ('django.contrib.sessions.middleware.SessionMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', \n'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware')\nTEMPLATE_CONTEXT_PROCESSORS = (NAME + '.context_processor', \"django.core.context_processors.auth\", \"django.core.context_processors.request\")\n\n#--- Template loader and templates ---\ndef template_loader(t, _):\n    from django.template import TemplateDoesNotExist\n    try:\n        return {\n            'base.html': \"\"\"&lt;html&gt;&lt;head&gt;&lt;title&gt;{{ flatpage.title }}&lt;/title&gt;&lt;link rel='alternate' type='application/rss+xml' href='/feed/'&gt;&lt;style type=\"text/css\"&gt;body { margin: 15px 50px; background: #eee; color: #343; font-family: sans-serif; } ul { padding: 0; } li { display: inline; background: #383; padding: 4px 8px; margin: 3px; } li:hover { background: #252; } dd { border-bottom: 1px dotted #666; } a { color: #383; text-decoration: none; } li a { color: #fff; } .anav { background: #141; } .rnav a { color: #ff4; } .error { color: #e22; } #footer { border-top: 1px dotted #555; font-size: 80%; color: #555; margin-top: 15px } #comments { background: #ddd; margin-top: 20px; padding: 10px; } dt { font-weight: bold; margin-top: 1em; }&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;ul&gt;{% for nav in navs %}&lt;li class=\"{% ifequal nav.url flatpage.url %}anav {% endifequal %}{% if nav.registration_required %}rnav {% endif %}\"&gt;&lt;a href=\"{{ nav.url }}\"&gt;{{ nav.title }}&lt;/a&gt;&lt;/li&gt;{% endfor %}&lt;/ul&gt;{% block content %}{% endblock %}&lt;div id=\"footer\"&gt;{% if request.user.is_staff %}&lt;a href=\"javascript:(function(){if(typeof%20ActiveXObject!='undefined'){var%20x=new%20ActiveXObject('Microsoft.XMLHTTP')}else%20if(typeof%20XMLHttpRequest!='undefined'){var%20x=new%20XMLHttpRequest()}else{return;}x.open('GET',location.href,false);x.send(null);try{var%20type=x.getResponseHeader('x-object-type');var%20id=x.getResponseHeader('x-object-id');}catch(e){return;}document.location='/admin/'+type.split('.').join('/')+'/'+id+'/';})()\"&gt;Edit this page&lt;/a&gt; (as staff user &lt;a href=\"/admin/\"&gt;{{ request.user }}&lt;/a&gt;)&lt;br&gt;{% endif %}Powered by &lt;a href=\"http://djangoproject.com/\"&gt;Django&lt;/a&gt; {{ version }}&lt;br&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;\"\"\",\n            'flatpages/default.html': \"\"\"{% extends \"base.html\" %}{% load comments %}{% block content %}&lt;h1&gt;{{ flatpage.title }}&lt;/h1&gt;{{ flatpage.content }}{% if flatpage.enable_comments %}&lt;div id=\"comments\"&gt;{% get_free_comment_list for flatpages.flatpage flatpage.id as comments %}&lt;h3&gt;Comments!&lt;/h3&gt;&lt;dl&gt;{% for comment in comments %}{% include \"comment.html\" %}{% endfor %}&lt;/dl&gt;{% free_comment_form for flatpages.flatpage flatpage.id %}&lt;/div&gt;{% endif %}{% endblock %}\"\"\",\n            'comments/free_preview.html': \"\"\"{% extends \"base.html\" %}{% block content %}&lt;h1&gt;Comment preview&lt;/h1&gt;&lt;dl&gt;{% include \"comment.html\" %}&lt;/dl&gt;&lt;form action='.' method='post'&gt;&lt;input type='hidden' name='gonzo' value='{{ hash }}'&gt;&lt;input type='hidden' name='options' value='{{ options }}'&gt;&lt;input type='hidden' name='comment' value='{{ comment.comment }}'&gt;&lt;input type='hidden' name='person_name' value='{{ comment.person_name }}'&gt;&lt;input type='hidden' name='target' value='{{ target }}'&gt;&lt;input type='submit' name='post' value='Post comment'&gt;&lt;/form&gt;{% endblock %}\"\"\", \n            'comments/posted.html': \"\"\"{% extends \"base.html\" %}{% block content %}&lt;h1&gt;Comment posted&lt;/h1&gt;&lt;p&gt;Thanks for posting!&lt;/p&gt; &lt;p&gt;&lt;a href='{{ object.get_absolute_url }}'&gt;Continue&lt;/a&gt;&lt;/p&gt;{% endblock %}\"\"\",\n            'comment.html': \"\"\"&lt;dt&gt;{{ comment.person_name }} said:&lt;/dt&gt; &lt;dd&gt;{{ comment.comment }}&lt;/dd&gt;\"\"\",\n            'registration/login.html': \"\"\"{% extends \"base.html\" %}{% block content %}{% if form.has_errors %}&lt;h2 class=\"error\"&gt;Wrong!&lt;/h2&gt;{% endif %}&lt;p&gt;This page is top secret, so you need to log in.&lt;/p&gt;&lt;form method=\"post\" action=\".\"&gt;Username: {{ form.username }}&lt;br&gt;Password: {{ form.password }}&lt;br&gt;&lt;input type=\"submit\" value=\"login\"&gt;&lt;input type=\"hidden\" name=\"next\" value=\"{{ next }}\"&gt;&lt;/form&gt;{% endblock %}\"\"\"\n            }[t], ''\n    except KeyError:\n        raise TemplateDoesNotExist\ntemplate_loader.is_usable = True\n\n#--- Context processor ---\ndef context_processor(request):\n    from django.contrib.flatpages.models import FlatPage\n    navs = FlatPage.objects.all().values(\"url\", \"title\", \"registration_required\")\n    from django import get_version\n    return { 'navs': navs, 'version': get_version() }\n\n#--- RSS Feed (hacky wrapper function needed because of jngo's one-file setup) ---\ndef feed(*args, **kwargs):\n    from django.contrib.comments.feeds import LatestFreeCommentsFeed\n    return LatestFreeCommentsFeed(*args, **kwargs)\n\n#--- URLconf ---\nfrom django.conf.urls.defaults import *\nurlpatterns = patterns(\"\", \n    (r\"^admin/\", include(\"django.contrib.admin.urls\")), \n    (r\"^comments/\", include(\"django.contrib.comments.urls.comments\")), \n    (r\"^accounts/login/$\", \"django.contrib.auth.views.login\"),\n    (r\"^(feed)/$\", \"django.contrib.syndication.views.feed\", {'feed_dict': {'feed': feed}}),\n    )\n\n#--- Execution ---\nif __name__ == \"__main__\":\n    import os, sys\n    from django.core.management import call_command\n    here = os.path.dirname(__file__)\n    sys.path.append(here)\n    os.environ[\"DJANGO_SETTINGS_MODULE\"] = NAME\n    if not os.path.isfile(os.path.join(here, DATABASE_NAME)):\n        from django.contrib.auth.create_superuser import createsuperuser\n        from django.contrib.flatpages.models import FlatPage\n        from django.contrib.sites.models import Site\n        call_command(\"syncdb\")\n        createsuperuser()\n        site_obj = Site.objects.create(id=SITE_ID, domain=HOSTNAME_AND_PORT)\n        FlatPage.objects.create(url=\"/\", title=\"Home\", content=\"Welcome to %s!\" % NAME).sites.add(site_obj)\n        FlatPage.objects.create(url=\"/stuff/\", enable_comments=True, title=\"Stuff\", content=\"This is a page about stuff.\").sites.add(site_obj)\n        FlatPage.objects.create(url=\"/topsecret/\", title=\"Top Secret\", content=\"Now you know.\", registration_required=True).sites.add(site_obj)\n    call_command(\"runserver\", HOSTNAME_AND_PORT)\n</code>\n</pre>\n", "senID": 2}], [{"text": ["You also may want to take a look at web.py.", "(Tutorial)"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "web.py", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://webpy.org/"}, {"text": "Tutorial", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://webpy.org/tutorial3.en"}]}, {"text": ["It's another compact, but powerful web framework."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Sample from the main page:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import web\n\nurls = ('/(.*)', 'hello')\napp = web.application(urls, globals())\n\nclass hello:        \n    def GET(self, name):\n        if not name: \n            name = 'world'\n        return 'Hello, ' + name + '!'\n\nif __name__ == \"__main__\":\n    app.run()\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Getting started with Django can be pretty easy too.", "Here's a 10-line single-file Django webapp:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import os\nfrom django.conf.urls.defaults import patterns\nfrom django.http import HttpResponse\nfilepath, extension = os.path.splitext(__file__)\nROOT_URLCONF = os.path.basename(filepath)\n\ndef yoohoo(request):\n    return HttpResponse('Yoohoo!')\n\nurlpatterns = patterns('', (r'^hello/$', yoohoo))\n</code>\n</pre>\n", "senID": 1}, {"text": ["Check out my blog post Minimal Django for details."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Minimal Django", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://olifante.blogs.com/covil/2010/04/minimal-django.html"}]}], [{"text": ["Well, the easiest way to do that is to mimic the django project arbo in one file.", "So in one module, assure there is :"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n Root_module :\n    Root_module.settings\n    Root_module.urls\n    Root_module.app_in_the_module\n    Root_module.app_in_the_module.models\n    Root_module.app_in_the_module.views\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then code is as a normal Django project.", "What you must know is that Django does not need anything to be in a specific place.", "Standard names and paths are at beat, convention, at worst, shortcut to prevent you from defining a setting."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["If you know Django very well, you don't even need to mimic the arbo, just write you django app making all the data from the above modules interconnected the way they should be."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]]