[[{"text": ["It's considered good practice to not normally catch the root Exception object, but instead to catch more specific ones - for example IOException."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Consider if an out of memory exception occurred - simply using \"pass\" isn't going to leave your programme in a good state."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Pretty much the only time you should catch Exception is at the top level of your programme, where you can (try to) log it, display an error, and exit as gracefully as you can."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Since Python2.6 catching Exception has become a lot more reasonable, because all the exceptions that you wouldn't want to catch (SystemExit, KeyboardInterrupt) no longer inherit from Exception.", "They instead inherit from a common BaseException instead.", "This has been done deliberately in order to make catching Exception relatively harmless, since it is such a common idiom."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["See PEP 3110 for details &amp; future plans."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "PEP 3110", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-3110/"}]}], [{"text": ["because it thinks that you're catching too much.", "and it's right."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Exception are raised when something... exceptional occurs.", "It's generally a good thing that the program terminates."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You may want to ignore some exceptions, but IMO there's no good reason for catching a base-class like that."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Catching Exception (without re-raising) has 2 really bad side effects: errors get eaten, so you lose the stack trace, but also that ctrl-c (or whatever the break key is on your operating system) also gets handled here."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The typical behavior of programs like this is that either they can't be stopped, or that ctrl-c causes the control flow to skip forward (to the exception handler), and then continue.", "Then either the code can't be interrupted, or you need to hammer on ctrl-c to get it to stop."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["like Greg's answer, 'Exception' is a base class and exceptions should be derived from this class, see also exceptions.Exception."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "exceptions.Exception", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/exceptions.html#exceptions.Exception"}]}, {"text": ["Here a very usefull list of Errors inpydocs"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "list of Errors inpydocs", "childNum": 1, "tag": "b", "pos": 0, "childList": [{"text": "pydocs", "tag": "a"}]}, {"href": "http://docs.python.org/c-api/exceptions.html#standard-exceptions", "text": "pydocs", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Note also the very handy traceback module which allows you to find out where the exception occured.", "Using only 'except: ...' will show you what Error you should best use in your case.", "For example, try this code (toggle the comment), perhaps you'll accept it:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import traceback\n#absent = 'nothing'\ntry:\n    something = absent\nexcept  NameError:\n    traceback.print_exc()\nelse:\n    print(\"you get here only when you uncomment 'absent'\")\n</code>\n</pre>\n", "senID": 3}]]