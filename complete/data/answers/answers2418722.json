[[{"text": ["You can probably type faster than you can clean up images and install OCR engines:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/perl\n(my$d=q[AA                GTCAGTTCCT\n  CGCTATGTA                 ACACACACCA\n    TTTGTGAGT                ATGTAACATA\n      CTCGCTGGC              TATGTCAGAC\n        AGATTGATC          GATCGATAGA\n          ATGATAGATC     GAACGAGTGA\n            TAGATAGAGT GATAGATAGA\n              GAGAGA GATAGAACGA\n                TC GATAGAGAGA\n                 TAGATAGACA G\n               ATCGAGAGAC AGATA\n             GAACGACAGA TAGATAGAT\n           TGAGTGATAG    ACTGAGAGAT\n         AGATAGATTG        ATAGATAGAT\n       AGATAGATAG           ACTGATAGAT\n     AGAGTGATAG             ATAGAATGAG\n   AGATAGACAG               ACAGACAGAT\n  AGATAGACAG               AGAGACAGAT\n  TGATAGATAG             ATAGATAGAT\n  TGATAGATAG           AATGATAGAT\n   AGATTGAGTG        ACAGATCGAT\n     AGAACCTTTCT   CAGTAACAGT\n       CTTTCTCGC TGGCTTGCTT\n         TCTAA CAACCTTACT\n           G ACTGCCTTTC\n           TGAGATAGAT CGA\n         TAGATAGATA GACAGAC\n       AGATAGATAG  ATAGAATGAC\n     AGACAGAGAG      ACAGAATGAT\n   CGAGAGACAG          ATAGATAGAT\n  AGAATGATAG             ACAGATAGAC\n  AGATAGATAG               ACAGACAGAT\n  AGACAGACTG                 ATAGATAGAT\n   AGATAGATAG                 AATGACAGAT\n     CGATTGAATG               ACAGATAGAT\n       CGACAGATAG             ATAGACAGAT\n         AGAGTGATAG          ATTGATCGAC\n           TGATTGATAG      ACTGATTGAT\n             AGACAGATAG  AGTGACAGAT\n               CGACAGA TAGATAGATA\n                 GATA GATAGATAG\n                    ATAGACAGA G\n                  AGATAGATAG ACA\n                GTCGCAAGTTC GCTCACA\n])=~s/\\s+//g;%a=map{chr $_=&gt;$i++}65,84,67,\n71;$p=join$;,keys%a;while($d=~/([$p]{4})/g\n){next if$j++%96&gt;=16;$c=0;for$d(0..3){$c+=\n$a{substr($1,$d,1)}*(4**$d)}$perl.=chr $c}\n             eval $perl;\n</code>\n</pre>\n", "senID": 1}, {"text": ["Edit: typo."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["pre-processing will definitely yield a more workable image. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For example, here is the result of Gimp \"Levels\", \"Difference-of-Gaussians\", and \"Levels\" filters on the image."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"src": "http://www.jkk.us.s3.amazonaws.com/FS7oo.gif", "tag": "img", "senID": 2}], [{"text": ["Just a few small typos in RedDwight code."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/perl\n(my $d=q[AA                GTCAGTTCCT\n  CGCTATGTA                 ACACACACCA\n    TTTGTGAGT                ATGTAACATA\n      CTCGCTGGC              TATGTCAGAC\n        AGATTGATC          GATCGATAGA\n          ATGATAGATC     GAACGAGTGA\n            TAGATAGAGT GATAGATAGA\n              GAGAGA GATAGAACGA\n                TC GATAGAGAGA\n                 TAGATAGACA G\n               ATCGAGAGAC AGATA\n             GAACGACAGA TAGATAGAT\n           TGAGTGATAG    ACTGAGAGAT\n         AGATAGATTG        ATAGATAGAT\n       AGATAGATAG           ACTGATAGAT\n     AGAGTGATAG             ATAGAATGAG\n   AGATAGACAG               ACAGACAGAT\n  AGATAGACAG               AGAGACAGAT\n  TGATAGATAG             ATAGATAGAT\n  TGATAGATAG           AATGATAGAT\n   AGATTGAGTG        ACAGATCGAT\n     AGAACCTTTCT   CAGTAACAGT\n       CTTTCTCGC TGGCTTGCTT\n         TCTAA CAACCTTACT\n           G ACTGCCTTTC\n           TGAGATAGAT CGA\n         TAGATAGATA GACAGAC\n       AGATAGATAG  ATAGAATGAC\n     AGACAGAGAG      ACAGAATGAT\n   CGAGAGACAG          ATAGATAGAT\n  AGAATGATAG             ACAGATAGAC\n  AGATAGATAG               ACAGACAGAT\n  AGACAGACTG                 ATAGATAGAT\n   AGATAGATAG                 AATGACAGAT\n     CGATTGAATG               ACAGATAGAT\n       CGACAGATAG             ATAGACAGAT\n         AGAGTGATAG          ATTGATCGAC\n           TGATTGATAG      ACTGATTGAT\n             AGACAGATAG  AGTGACAGAT\n               CGACAGA TAGATAGATA\n                 GATA GATAGATAG\n                    ATAGACAGA G\n                  AGATAGATAG ACA\n                GTCGCAAGTTC GCTCACA\n])=~s/\\s+//g;%a=map{chr $_=&gt;$i++}65,84,67,\n71;$p=join$;,keys%a;while($d=~/([$p]{4})/g\n){next if$j++%96&gt;=16;$c=0;for$d(0..3){$c+=\n$a{substr($1,$d,1)}*(4**$d)}$perl.=chr $c}\n             eval $perl;\n</code>\n</pre>\n", "senID": 1}, {"text": ["that when executed produces:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n Just another genome hacker.\n</code>\n</pre>\n", "senID": 3}], [{"text": ["If I were you I'd start by cleaning up the image as much as possible, using a picture-manipulation program (GIMP, for example) so that the input for the OCR would be more easily understandable."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If possible, aim for creating a black-and-white only image."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Hmm perhaps you need to process the image, i.e.", "put it though some filters like 'edge detection', emboss/engrave or a noise filter..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Good OCRs are strongly guided by redundancies in natural languages to yield a subset for \"what might be the next character\".", "Perl code gives no such aid to the OCR.", "Type it in by hand."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Try emailing the image to ocr@wisetrend.com - you will get OCR results back by email (btw, a free API for this is also available)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "free API", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.webservius.com/corp/docs/wisetrend.pdf"}]}], [{"text": ["The key for a task like this is to take advantage of the evident constraints.", "Find a library that lets you specify your own character set.", "Require all the characters in the main DNA helices to be one of A T G C.  Require that the whole thing parse as perl.", "Type in the hard parts by hand if necessary."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]