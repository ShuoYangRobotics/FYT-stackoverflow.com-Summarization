[[{"text": ["[v for k,v in mydict.items() if k &gt;= 6]"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "[v for k,v in mydict.items() if k &gt;= 6]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["What do you mean by \"elements\"?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you want a dict of key-value pairs with keys \u22656, Python 2.7+ and 3.x support dict comprehensions."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "dict", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "dict comprehensions", "childNum": 0, "tag": "em", "childList": []}]}, {"code": "<pre>\n<code>\n { k: v for k, v in mydict.items() if k &gt;= 6 }\n</code>\n</pre>\n", "senID": 2}, {"text": ["You can get this in earlier versions of Python"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n dict( (k, v) for k, v in mydict.items() if k &gt;= 6 )  # Python 2.4+\ndict([(k, v) for k, v in mydict.items() if k &gt;= 6])  # Python 2.0+\n</code>\n</pre>\n", "senID": 4}, {"text": ["by using expression generators or list comprehensions."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["If you want a list of keys only,"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n [ k for k in mydict.keys() if k &gt;= 6 ]\nfilter( lambda k: k &gt;= 6, mydict.keys() )\n</code>\n</pre>\n", "senID": 7}, {"text": ["Similarly, if you want a list of values only,"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n [ v for k, v in mydict.items() if k &gt;= 6 ]\n[ mydict[k] for k in mydict.keys() if k &gt;= 6 ]\nmap( mydict.get, filter( lambda k: k &gt;= 6, mydict.keys() ) )\n</code>\n</pre>\n", "senID": 9}], [{"text": ["If you know the largest key and have no missing keys you can also just go through the dictonary directly: [mydict[x] for x in range(6, largest_key+1)].", "That would be the most efficient way."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "[mydict[x] for x in range(6, largest_key+1)]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["You can use a list comprehension:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "list comprehension", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n mydict = {5:\"djdj\", 6:\"8899\", 7:\"998kdj\"}\nprint [k for k in mydict if k &gt;= 6]  # prints \"[6, 7]\"\nprint dict([(k, mydict[k]) for k in mydict if k &gt;= 6])  # prints \"{6:\"8899\", 7:\"998kdj\"}\"\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n [ mydict[k] for k in filter(lambda x : x &gt; 6, mydict) ]\n</code>\n</pre>\n", "senID": 0}], [{"text": ["List comprehension seems to be what you seek but with a list of elements as opposed to keys:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n a = {5:\"djdj\", 6:\"8899\", 7:\"998kdj\"}\n[a[elem] for elem in a if elem &gt;= 6]  #should give you \"['8866', '998kd']\"\n</code>\n</pre>\n", "senID": 1}], [{"text": ["To get a dictionary right away: (works in both python 2 and 3)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n dict( (k,v) for k,v in mydict.items() if k &gt;= 6 )\n</code>\n</pre>\n", "senID": 1}]]