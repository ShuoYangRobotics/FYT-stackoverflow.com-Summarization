[[{"text": ["James,"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I recommend you to just rewrite the module in Python, for several reasons:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I think you should rewrite your code.", "The quality of the results of a parsing effort depends on your Perl coding style.", "I think the quote below sums up the theoretical side very well.", "From Wikipedia:Perl in Wikipedia"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Perl in Wikipedia", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Perl"}]}], [{"text": ["Starting in 5.10, you can compile perl with the experimental Misc Attribute Decoration enabled and set the PERL_XMLDUMP environment variable to a filename to get an XML dump of the parse tree (including comments - very helpful for language translators).", "Though as the doc says, this is a work in progress."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Misc Attribute Decoration", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://perldoc.perl.org/perl5100delta.html#MAD"}]}], [{"text": ["I never tried it and it seems unmaintained, but maybe PyPerl is an option?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PyPerl", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://wiki.python.org/moin/PyPerl"}]}, {"text": ["How big is this API?", "If it really this useful then why don't you rewrite it in python.", "Writing an automatic converter will probably take longer then rewriting the API."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["And even if you manage to automatically rewrite it, the resulting code probably won't be very pythonic anyway."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Be sure to check out the answers by weismat and eliben"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["As much as it might be fun to convert it to or rewrite it in python, I wouldn't make either of those my first choice.", "Then you'd be stuck with a forked code base.", "Any modifications you make will have to be duplicated."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Write some sort of wrapper for your API that you can access from outside of Perl.", "One possibility is a RESTful interface.", "Another, if you don't want to deal with networking issues, is to create a set of command line tools that access the API (possibly passing information as JSON).", "Then you can write an easy python library which accesses the wrapper API using httplib2 or subprocess (depending on how you've implemented the wrapper)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["You'll still have to update the Python API whenever the interface changes, but now it's only for interface changes."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You could try writing a parser with PPI, dump it to some intermediary form and write Python mecanically from there.", "Hard, but doable.", "Useful?", "Er...."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PPI", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://search.cpan.org/~adamk/PPI-1.203/lib/PPI.pm"}]}, {"text": ["Or you could port your code to Perl 6, wait to Pynie  to be ready enough to allow direct call from Python to Perl6 within the same runtime!", "It's not that far away after all.", "Too bad Ponie's dead though."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "Perl 6", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://github.com/rakudo/rakudo"}, {"text": "Pynie", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://code.google.com/p/pynie/"}, {"text": "Ponie", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/PONIE"}]}]]