[[{"text": ["You can give your application a custom name by defining app_label in your model definition.", "But as django builds the admin page it will hash models by their app_label, so if you want them to appear in one application, you have to define this name in all models of your application."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class MyModel(models.Model):\n        pass\n    class Meta:\n        app_label = 'My APP name'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["No, but you can copy admin template and define app name there."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Give them a verbose_name property."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Don't get your hopes up.", "You will also need to copy the index view from django.contrib.admin.sites into your own ProjectAdminSite view and include it in your own custom admin instance:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class ProjectAdminSite(AdminSite):\n    def index(self, request, extra_context=None):\n        copied stuff here...\n\nadmin.site = ProjectAdminSite()\n</code>\n</pre>\n", "senID": 2}, {"text": ["then tweak the copied view so that it uses your verbose_name property as the label for the app."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["I did it by adding something a bit like this to the copied view:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n try:\n            app_name = model_admin.verbose_name\n        except AttributeError:\n            app_name = app_label\n</code>\n</pre>\n", "senID": 5}, {"text": ["While you are tweaking the index view why not add an 'order' property too."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["Well I started an app called todo and have now decided I want it to be named Tasks.", "The problem is that I already have data within my table so my work around was as follows.", "Placed into the models.py:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "todo", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "Tasks", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n class Meta:\n       app_label = 'Tasks'\n       db_table = 'mytodo_todo'\n</code>\n</pre>\n", "senID": 1}, {"text": ["Hope it helps."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["If you have more than one model in the app just create a model with the Meta information and create subclasses of that class for all your models."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class MyAppModel(models.Model):\n    class Meta:\n        app_label = 'My App Label'\n\nclass Category(MyAppModel):\n     name = models.CharField(max_length=50)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I'm using django-admin-tools for that."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "django-admin-tools", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "https://bitbucket.org/izi/django-admin-tools/"}]}], [{"text": ["For Django 1.4 (not yet released, but trunk is pretty stable), you can use the following method.", "It relies on the fact that AdminSite now returns a TemplateResponse, which you can alter before it is rendered."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Here, we do a small bit of monkey patching to insert our behaviour, which can be avoided if you use a custom AdminSite subclass."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n from functools import wraps\ndef rename_app_list(func):\n    m = {'Sites': 'Web sites',\n         'Your_app_label': 'Nicer app label',\n    }\n\n    @wraps(func)\n    def _wrapper(*args, **kwargs):\n        response = func(*args, **kwargs)\n        app_list = response.context_data.get('app_list')\n\n        if app_list is not None:\n            for a in app_list:\n                name = a['name']\n                a['name'] = m.get(name, name)\n        title = response.context_data.get('title')\n        if title is not None:\n            app_label = title.split(' ')[0]\n            if app_label in m:\n                response.context_data['title'] = \"%s administration\" % m[app_label]\n        return response\n    return _wrapper\n\nadmin.site.__class__.index = rename_app_list(admin.site.__class__.index)\nadmin.site.__class__.app_index = rename_app_list(admin.site.__class__.app_index)\n</code>\n</pre>\n", "senID": 2}, {"text": ["This fixes the index and the app_index views.", "It doesn't fix the bread crumbs in all other admin views."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["It would be nice to be able to set the applications verbose_name in either it's init.py or admin.py file.", "So the init.py file in your applications directory could look like:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "init", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "init", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n class Meta:\n    verbose_name = 'My Django App'\n</code>\n</pre>\n", "senID": 1}, {"text": ["Django 1.2 maybe?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You can't give apps a custom name (at the moment at least; I believe this is going to be addressed at some point), but you can give your fields a \n\"display name\" by passing the verbose_name keyword argument to your fields (this is also conveniently the first positonal argument)."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "give your fields a \n\"display name\"", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/topics/db/models/#verbose-field-names"}, {"href": "http://docs.djangoproject.com/en/dev/ref/models/fields/#verbose-name", "text": "verbose_name", "childNum": 1, "tag": "a", "childList": [{"text": "verbose_name", "tag": "code"}]}, {"text": "verbose_name", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["So, you can do either:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n address = models.CharField(blank=False, max_length=250, verbose_name='Address (Line 1)')\n</code>\n</pre>\n", "senID": 2}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n address = models.CharField('Address (Line 1)', blank=False, max_length=250)\n</code>\n</pre>\n", "senID": 4}, {"text": ["\u2026and the admin will display these \"pretty\" versions instead."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["I'm not sure if you're saying you know this already or not, but if not, you can give your models custom names too, also with the verbose_name (and verbose_name_plural) properties in the model'sMetaclass, like:"], "childNum": 6, "tag": "p", "senID": 6, "childList": [{"text": "verbose_name", "tag": "a", "pos": 0, "childList": [{"text": "verbose_name", "tag": "code"}], "childNum": 1, "href": "http://docs.djangoproject.com/en/dev/ref/models/options/#verbose-name"}, {"text": "verbose_name", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://docs.djangoproject.com/en/dev/ref/models/options/#verbose-name-plural", "text": "verbose_name_plural", "childNum": 1, "tag": "a", "childList": [{"text": "verbose_name_plural", "tag": "code"}]}, {"text": "verbose_name_plural", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://docs.djangoproject.com/en/dev/topics/db/models/#meta-options", "text": "the model'sMetaclass", "childNum": 1, "tag": "a", "childList": [{"text": "Meta", "tag": "code"}]}, {"text": "Meta", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n class ModelName(models.Model):\n    # your model definition here\n\n    class Meta:\n        verbose_name = 'verbose model name'\n        verbose_name_plural = 'plural verbose model name'\n</code>\n</pre>\n", "senID": 7}]]