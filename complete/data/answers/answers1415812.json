[[{"text": ["You may want to accept nearly-arbitrary named arguments for a series of reasons -- and that's what the **kw form lets you do."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "**kw", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["The most common reason is to pass the arguments right on to some other function you're wrapping (decorators are one case of this, but FAR from the only one!", ") -- in this case, **kw loosens the coupling between wrapper and wrappee, as the wrapper doesn't have to know or care about all of the wrappee's arguments.", "Here's another, completely different reason:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "**kw", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n d = dict(a=1, b=2, c=3, d=4)\n</code>\n</pre>\n", "senID": 2}, {"text": ["if all the names had to be known in advance, then obviously this approach just couldn't exist, right?", "And btw, when applicable, I much prefer this way of making a dict whose keys are literal strings to:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n d = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n</code>\n</pre>\n", "senID": 4}, {"text": ["simply because the latter is quite punctuation-heavy and hence less readable."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["When none of the excellent reasons for accepting **kwargs applies, then don't accept it: it's as simple as that.", "IOW, if there's no good reason to allow the caller to pass extra named args with arbitrary names, don't allow that to happen -- just avoid putting a **kw form at the end of the function's signature in the def statement."], "childNum": 3, "tag": "p", "senID": 6, "childList": [{"text": "**kwargs", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "**kw", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "def", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["As for using **kw in a call, that lets you put together the exact set of named arguments that you must pass, each with corresponding values, in a dict, independently of a single call point, then use that dict at the single calling point.", "Compare:"], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "using", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "**kw", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n if x: kw['x'] = x\nif y: kw['y'] = y\nf(**kw)\n</code>\n</pre>\n", "senID": 8}, {"text": ["to:"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n if x:\n  if y:\n    f(x=x, y=y)\n  else:\n    f(x=x)\nelse:\n  if y:\n    f(y=y)\n  else:\n    f()\n</code>\n</pre>\n", "senID": 10}, {"text": ["Even with just two possibilities, and of the very simplest kind!!", "!, the lack of **kw is aleady making the second option absolutely untenable and intolerable -- just imagine how it plays out when there half a dozen possibilities, possibly in slightly richer interaction... without **kw, life would be absolute hell under such circumstances!"], "childNum": 2, "tag": "p", "senID": 11, "childList": [{"text": "**kw", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "**kw", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Real-world examples:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Decorators - they're usually generic, so you can't specify the arguments upfront:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def decorator(old):\n    def new(*args, **kwargs):\n        # ...\n        return old(*args, **kwargs)\n    return new\n</code>\n</pre>\n", "senID": 2}, {"text": ["Places where you want to do magic with an unknown number of keyword arguments.", "Django's ORM does that, e.g."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n Model.objects.filter(foo__lt = 4, bar__iexact = 'bar')\n</code>\n</pre>\n", "senID": 4}], [{"text": ["Another reason you might want to use **kwargs (and *args) is if you're extending an existing method in a subclass.", "You want to pass all the existing arguments onto the superclass's method, but want to ensure that your class keeps working even if the signature changes in a future version:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "**kwargs", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "*args", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n class MySubclass(Superclass):\n    def __init__(self, *args, **kwargs):\n        self.myvalue = kwargs.pop('myvalue', None)\n        super(MySubclass, self).__init__(*args, **kwargs)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["There are two common cases:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["First: You are wrapping another function which takes a number of keyword argument, but you are just going to pass them along:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def my_wrapper(a, b, **kwargs):\n    do_something_first(a, b)\n    the_real_function(**kwargs)\n</code>\n</pre>\n", "senID": 2}, {"text": ["Second: You are willing to accept any keyword argument, for example, to set attributes on an object:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n class OpenEndedObject:\n    def __init__(self, **kwargs):\n        for k, v in kwargs.items():\n            setattr(self, k, v)\n\nfoo = OpenEndedObject(a=1, foo='bar')\nassert foo.a == 1\nassert foo.foo == 'bar'\n</code>\n</pre>\n", "senID": 4}], [{"text": ["**kwargs are good if you don't know in advance the name of the parameters.", "For example the dict constructor uses them to initialize the keys of the new dictionary. "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "**kwargs", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "dict", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n In [3]: dict(one=1, two=2)\nOut[3]: {'one': 1, 'two': 2}\n</code>\n</pre>\n", "senID": 1}], [{"text": ["And here's another typical example:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n MESSAGE = \"Lo and behold! A message {message!r} came from {object_} with data {data!r}.\"\n\ndef proclaim(object_, message, data):\n    print(MESSAGE.format(**locals()))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["One example is implementing python-argument-binders, used like this:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "python-argument-binders", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/277922/python-argument-binders"}]}, {"text": ["This is from the functools.partial python docs:  partial is 'relatively equivalent' to this impl:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "functools.partial", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functools.html?highlight=functools#functools.partial"}]}], [{"text": ["Here's an example, I used in CGI Python.", "I created a class that took **kwargs to the __init__ function.", "That allowed me to emulate the DOM on the server-side with classes:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "**kwargs", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "__init__", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n document = Document()\ndocument.add_stylesheet('style.css')\ndocument.append(Div(H1('Imagist\\'s Page Title'), id = 'header'))\ndocument.append(Div(id='body'))\n</code>\n</pre>\n", "senID": 1}, {"text": ["The only problem is that you can't do the following, because class is a Python keyword."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "class", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n Div(class = 'foo')\n</code>\n</pre>\n", "senID": 3}, {"text": ["The solution is to access the underlying dictionary."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n Div(**{'class':'foo'})\n</code>\n</pre>\n", "senID": 5}, {"text": ["I'm not saying that this is a \"correct\" usage of the feature.", "What I'm saying is that there are all kinds of unforseen ways in which features like this can be used."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]]