[[{"text": ["We use the logging module for this."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class SomeTest( unittest.TestCase ):\n    def testSomething( self ):\n        log= logging.getLogger( \"SomeTest.testSomething\" )\n        log.debug( \"this= %r\", self.this )\n        log.debug( \"that= %r\", self.that )\n        # etc.\n        self.assertEquals( 3.14, pi )\n\nif __name__ == \"__main__\":\n    logging.basicConfig( stream=sys.stderr )\n    logging.getLogger( \"SomeTest.testSomething\" ).setLevel( logging.DEBUG )\n    unittest.main()\n</code>\n</pre>\n", "senID": 1}, {"text": ["That allows us to turn on debugging for specific tests which we know are failing and for which we want additional debugging information."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["My preferred method, however, isn't to spent a lot of time on debugging, but spend it writing more fine-grained tests to expose the problem."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["You can use simple print statements, or any other way of writing to stdout.", "You can also invoke the Python debugger anywhere in your tests."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you use nose to run your tests (which I recommend), it will collect the stdout for each test and only show it to you if the test failed, so you don't have to live with the cluttered output when the tests pass."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "nose", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://somethingaboutorange.com/mrl/projects/nose/"}]}, {"text": ["nose also has switches to automatically show variables mentioned in asserts, or to invoke the debugger on failed tests."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I don't think this is quite what your looking for, there's no way to display variable values that don't fail, but this may help you get closer to outputting the results the way you want."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You can use the TestResult object returned by the TestRunner.run() for results analysis and processing.", "Particularly, TestResult.errors and TestResult.failures"], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "TestResult object", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "TestResult object", "tag": "a"}]}, {"text": "TestResult object", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/unittest.html#id3"}, {"text": "TestRunner.run()", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}]}, {"text": ["About the TestResults Object:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["http://docs.python.org/library/unittest.html#id3"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "http://docs.python.org/library/unittest.html#id3", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/unittest.html#id3"}]}, {"text": ["And some code to point you in the right direction:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import random\n&gt;&gt;&gt; import unittest\n&gt;&gt;&gt;\n&gt;&gt;&gt; class TestSequenceFunctions(unittest.TestCase):\n...     def setUp(self):\n...         self.seq = range(5)\n...     def testshuffle(self):\n...         # make sure the shuffled sequence does not lose any elements\n...         random.shuffle(self.seq)\n...         self.seq.sort()\n...         self.assertEqual(self.seq, range(10))\n...     def testchoice(self):\n...         element = random.choice(self.seq)\n...         error_test = 1/0\n...         self.assert_(element in self.seq)\n...     def testsample(self):\n...         self.assertRaises(ValueError, random.sample, self.seq, 20)\n...         for element in random.sample(self.seq, 5):\n...             self.assert_(element in self.seq)\n...\n&gt;&gt;&gt; suite = unittest.TestLoader().loadTestsFromTestCase(TestSequenceFunctions)\n&gt;&gt;&gt; testResult = unittest.TextTestRunner(verbosity=2).run(suite)\ntestchoice (__main__.TestSequenceFunctions) ... ERROR\ntestsample (__main__.TestSequenceFunctions) ... ok\ntestshuffle (__main__.TestSequenceFunctions) ... FAIL\n\n======================================================================\nERROR: testchoice (__main__.TestSequenceFunctions)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 11, in testchoice\nZeroDivisionError: integer division or modulo by zero\n\n======================================================================\nFAIL: testshuffle (__main__.TestSequenceFunctions)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 8, in testshuffle\nAssertionError: [0, 1, 2, 3, 4] != [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n----------------------------------------------------------------------\nRan 3 tests in 0.031s\n\nFAILED (failures=1, errors=1)\n&gt;&gt;&gt;\n&gt;&gt;&gt; testResult.errors\n[(&lt;__main__.TestSequenceFunctions testMethod=testchoice&gt;, 'Traceback (most recent call last):\\n  File \"&lt;stdin&gt;\"\n, line 11, in testchoice\\nZeroDivisionError: integer division or modulo by zero\\n')]\n&gt;&gt;&gt;\n&gt;&gt;&gt; testResult.failures\n[(&lt;__main__.TestSequenceFunctions testMethod=testshuffle&gt;, 'Traceback (most recent call last):\\n  File \"&lt;stdin&gt;\n\", line 8, in testshuffle\\nAssertionError: [0, 1, 2, 3, 4] != [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\\n')]\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 5}], [{"text": ["I think I might have been overthinking this.", "One way I've come up with that does the job, is simply to have a global variable, that accumulates the diagnostic data."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Somthing like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n log1 = dict()\nclass TestBar(unittest.TestCase):\n    def runTest(self):\n        for t1, t2 in testdata:\n            f = Foo(t1) \n            if f.bar(t2) != 2: \n                log1(\"TestBar.runTest\") = (f, t1, t2)\n                self.fail(\"f.bar(t2) != 2\")\n</code>\n</pre>\n", "senID": 2}, {"text": ["Thanks for the resplies.", "They have given me some alternative ideas for how to record information from unit tests.              "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Another option - start a debugger where the test fails."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Try running your tests with Testoob (it will run your unittest suite without changes), and you can use the '--debug' command line switch to open a debugger when a test fails."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Here's a terminal session on windows:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n C:\\work&gt; testoob tests.py --debug\nF\nDebugging for failure in test: test_foo (tests.MyTests.test_foo)\n&gt; c:\\python25\\lib\\unittest.py(334)failUnlessEqual()\n-&gt; (msg or '%r != %r' % (first, second))\n(Pdb) up\n&gt; c:\\work\\tests.py(6)test_foo()\n-&gt; self.assertEqual(x, y)\n(Pdb) l\n  1     from unittest import TestCase\n  2     class MyTests(TestCase):\n  3       def test_foo(self):\n  4         x = 1\n  5         y = 2\n  6  -&gt;     self.assertEqual(x, y)\n[EOF]\n(Pdb)\n</code>\n</pre>\n", "senID": 3}], [{"text": ["How about catching the exception that gets generated from the assertion failure?", "In your catch block you could output the data however you wanted to wherever.", "Then when you were done you could re-throw the exception.", "The test runner probably wouldn't know the difference. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Disclaimer: I haven't tried this with python's unit test framework but have with other unit test frameworks."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]