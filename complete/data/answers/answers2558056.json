[[{"text": ["Lack of documentation is a good reason to avoid a library IMO, no matter how cool it is.", "Are you wedded to using html5lib?", "Have you looked at lxml.html?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "lxml.html", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://codespeak.net/lxml/lxmlhtml.html"}]}, {"text": ["Here is a way to do this with lxml:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n from lxml import html\ntree = html.fromstring(text)\n[td.text for td in tree.xpath(\"//td\")]\n</code>\n</pre>\n", "senID": 2}, {"text": ["Result:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n ['Header', 'Want This']\n</code>\n</pre>\n", "senID": 4}], [{"text": ["I always recommend to try out lxml library.", "It's blazingly fast and has many features."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "lxml", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["It has also support for html5lib parser if you need that: html5parser"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "html5parser", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://codespeak.net/lxml/dev/html5parser.html"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from lxml.html import fromstring, tostring\n\n&gt;&gt;&gt; html = \"\"\"\n... &lt;html&gt;\n...     &lt;table&gt;\n...         &lt;tr&gt;&lt;td&gt;Header&lt;/td&gt;&lt;/tr&gt;\n...         &lt;tr&gt;&lt;td&gt;Want This&lt;/td&gt;&lt;/tr&gt;\n...     &lt;/table&gt;\n... &lt;/html&gt;\n... \"\"\"\n&gt;&gt;&gt; doc = fromstring(html)\n&gt;&gt;&gt; tr = doc.cssselect('table tr')[1]\n&gt;&gt;&gt; print tostring(tr)\n&lt;tr&gt;&lt;td&gt;Want This&lt;/td&gt;&lt;/tr&gt;\n</code>\n</pre>\n", "senID": 2}], [{"text": ["i believe you can do css search on lxml objects.. like so"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n elements = root.cssselect('div.content')\ndata = elements[0].text\n</code>\n</pre>\n", "senID": 1}], [{"text": ["With BeautifulSoup, you can do that with "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "BeautifulSoup", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.crummy.com/software/BeautifulSoup/"}, {"text": "", "childNum": 0, "tag": "br", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; soup = BeautifulSoup.BeautifulSoup('&lt;html&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Header&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Want This&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/html&gt;')\n&gt;&gt;&gt; soup.findAll('td')[1].string\nu'Want This'\n&gt;&gt;&gt; soup.findAll('tr')[1].td.string\nu'Want This'\n</code>\n</pre>\n", "senID": 1}, {"text": ["(Obviously that's a really crude example, but ya."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You can use xml.dom.minidom:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "xml.dom.minidom", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n from xml.dom.minidom import parseString\n\ndoc = parseString('&lt;html&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Header&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Want This&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/html&gt;')\n\ndef parse(node):\n    for node in node.childNodes:\n        print(node)\n        parse(node)\n\nparse(doc)\n</code>\n</pre>\n", "senID": 1}, {"text": ["There are a number of ways to access the 1st column of the 2nd row.", "You can iterate through the document until you come across it, you can jump straight to it via attributes, etc...", "The module is documented very well."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["http://docs.python.org/py3k/library/xml.dom.html"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "http://docs.python.org/py3k/library/xml.dom.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/py3k/library/xml.dom.html"}]}, {"text": ["http://docs.python.org/py3k/library/xml.dom.minidom.html"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "http://docs.python.org/py3k/library/xml.dom.minidom.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/py3k/library/xml.dom.minidom.html"}]}], [{"text": ["What you want to use is the namespaceHTMLElements argument, which for some reason defaults to True."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "namespaceHTMLElements", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n doc = html5lib.parse('''&lt;html&gt;\n    &lt;table&gt;\n        &lt;tr&gt;&lt;td&gt;Header&lt;/td&gt;&lt;/tr&gt;\n        &lt;tr&gt;&lt;td&gt;Want This&lt;/td&gt;&lt;/tr&gt;\n    &lt;/table&gt;\n&lt;/html&gt;\n''', treebuilder='lxml', namespaceHTMLElements=False)\n\nprint lxml.html.tostring(doc)\n</code>\n</pre>\n", "senID": 1}, {"text": ["It's probably still easier to use lxml.html however."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["try using jquery.", "and you can retrieve all  elements.", "alternately, you can put an id on your row and pull it out."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["1)   ...   ...  "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["$(\"td\")[1].innerHTML will be what you want"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["2)   ...   ...  "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["$(\"#blah\").text() will be what you want"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]]