[[{"code": "<pre>\n<code>\n &gt;&gt;&gt; ''.join( \"%\"+i+s[n+1] for n,i in enumerate(s)  if n%2==0 )\n'%e6%b6%93%e6%a0%ab%e6%99%ab'\n</code>\n</pre>\n", "senID": 0}, {"text": ["Or using re"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import re\n&gt;&gt;&gt; re.sub(\"(..)\",\"%\\\\1\",s)\n'%e6%b6%93%e6%a0%ab%e6%99%ab'\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Oh, you mean:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n ''.join([\"%%%s\" % pair for pair in [s[i:i+2] for i in range(0,len(s),2)]])\n</code>\n</pre>\n", "senID": 1}, {"text": ["Though probably if you're doing this for url escaping or some such, there's a library function more appropriate to your use."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Edited to add -- since everyone loves a cute itertools solution:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from itertools import izip, cycle\n&gt;&gt;&gt; its = iter(s)\n&gt;&gt;&gt; tups = izip(cycle('%'), its, its)\n&gt;&gt;&gt; ''.join(''.join(t) for t in tups)\n'%e6%b6%93%e6%a0%ab%e6%99%ab'\n</code>\n</pre>\n", "senID": 4}], [{"text": ["On the off chance that you are doing URL-encoding manually, you might want to read this blog post.", "It explains how to do this using the standard library's urllib module's quote_plus function."], "childNum": 5, "tag": "p", "senID": 0, "childList": [{"text": "blog post", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.saltycrane.com/blog/2008/10/how-escape-percent-encode-url-python/"}, {"text": "urllib", "tag": "a", "pos": 1, "childList": [{"text": "urllib", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/urllib.html"}, {"text": "urllib", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://docs.python.org/library/urllib.html#urllib.quote_plus", "text": "quote_plus", "childNum": 1, "tag": "a", "childList": [{"text": "quote_plus", "tag": "code"}]}, {"text": "quote_plus", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["use a Regex to the effect of /([0-9a-f]{2})/ig and replace with %\\1"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "/([0-9a-f]{2})/ig", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "%\\1", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Just to be academic."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Trying to use as many iterators as possible."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n s = 'e6b693e6a0abe699ab'\n\nfrom itertools import islice, izip, cycle, chain\n\ndef percentEncode(s):\n    percentChars = cycle('%')\n    firstChars = islice(s,0,None, 2)\n    secondChars = islice(s,1,None, 2)\n    return ''.join(chain.from_iterable(izip(percentChars, firstChars, secondChars)))\n\n\nif __name__ == '__main__':\n     print percentEncode(s)\n</code>\n</pre>\n", "senID": 2}, {"text": ["Thanks to @tcarobruce for the reminder to reuse the string iter."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n s = 'e6b693e6a0abe699ab'\n\nfrom itertools import islice, izip, cycle, chain\n\ndef percentEncode(s):\n    iter_s = iter(s)\n    return ''.join(chain.from_iterable(izip(cycle('%'), iter_s, iter_s)))\n\nif __name__ == '__main__':\n     print percentEncode(s)\n</code>\n</pre>\n", "senID": 4}], [{"text": ["Based on a comment of yours in the initial question, if starting from the initial string initial_s before its encoding into hex, you can have the result as:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "initial_s", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def percent_encode(initial_s):\n    return ''.join('%%%02x' % ord(c) for c in initial_s)\n\n&gt;&gt;&gt; percent_encode('hello')\n'%68%65%6c%6c%6f'\n</code>\n</pre>\n", "senID": 1}]]