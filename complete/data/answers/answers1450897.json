[[{"text": ["Use re.sub, like so:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "re.sub", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import re\n&gt;&gt;&gt; re.sub(\"\\D\", \"\", \"aas30dsa20\")\n'3020'\n</code>\n</pre>\n", "senID": 1}, {"text": ["\\D matches any non-digit character so, the code above, is essentially replacing every non-digit character for the empty string."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "\\D", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Or you can use filter, like so (in Python 2k):"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "filter", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; filter(lambda x: x.isdigit(), \"aas30dsa20\")\n'3020'\n</code>\n</pre>\n", "senID": 4}, {"text": ["Since in Python 3k, filter returns an iterator instead of a list, you can use the following instead:"], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "filter", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "list", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; ''.join(filter(lambda x: x.isdigit(), \"aas30dsa20\"))\n'3020'\n</code>\n</pre>\n", "senID": 6}], [{"code": "<pre>\n<code>\n s=''.join(i for i in s if i.isdigit())\n</code>\n</pre>\n", "senID": 0}, {"text": ["Another generator variant."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["In Python 2.", "*, by far the fastest approach is the .translate method."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": ".translate", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["In Python 2.6 and above:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import string\n&gt;&gt;&gt; x='aaa12333bb445bb54b5b52'\n&gt;&gt;&gt; x.translate(None, string.digits)\n'1233344554552'\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 2}, {"text": ["Before Python 2.6:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; x='aaa12333bb445bb54b5b52'\n&gt;&gt;&gt; import string\n&gt;&gt;&gt; all=string.maketrans('','')\n&gt;&gt;&gt; nodigs=all.translate(all, string.digits)\n&gt;&gt;&gt; x.translate(all, nodigs)\n'1233344554552'\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 4}, {"text": ["string.maketrans makes a translation table (a string of length 256) which in this case is the same as ''.join(chr(x) for x in range(256)) (just faster to make;-).", ".translate applies the translation table (which here is irrelevant since all essentially means identity) AND deletes characters present in the second argument -- the key part."], "childNum": 4, "tag": "p", "senID": 5, "childList": [{"text": "string.maketrans", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "''.join(chr(x) for x in range(256))", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": ".translate", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "all", "childNum": 0, "tag": "code", "childList": []}]}, {"text": [".translate works very differently on Unicode strings (and strings in Python 3 -- I do wish questions specified which major-release of Python is of interest!", ") -- not quite this simple, not quite this fast, though still quite usable."], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": ".translate", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "do", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}]}, {"text": ["Back to 2.", "*, the performance difference is impressive...:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n $ python -mtimeit -s'import string; all=string.maketrans(\"\", \"\"); nodig=all.translate(all, string.digits); x=\"aaa12333bb445bb54b5b52\"' 'x.translate(all, nodig)'\n1000000 loops, best of 3: 1.04 usec per loop\n$ python -mtimeit -s'import re;  x=\"aaa12333bb445bb54b5b52\"' 're.sub(r\"\\D\", \"\", x)'100000 loops, best of 3: 7.9 usec per loop\n</code>\n</pre>\n", "senID": 8}, {"text": ["Speeding things up by 7-8 times is hardly peanuts, so the translate method is well worth knowing and using.", "The other popular non-RE approach...:"], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "translate", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n $ python -mtimeit -s'x=\"aaa12333bb445bb54b5b52\"' '\"\".join(i for i in x if i.isdigit())'\n100000 loops, best of 3: 11.5 usec per loop\n</code>\n</pre>\n", "senID": 10}, {"text": ["is 50% slower than RE, so the .translate approach beats it by over an order of magnitude."], "childNum": 1, "tag": "p", "senID": 11, "childList": [{"text": ".translate", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["In Python 3, or for Unicode, you need to pass .translate a mapping (with ordinals, not characters directly, as keys) that returns None for what you want to delete.", "Here's a convenient way to express this for deletion of \"everything but\" a few characters:"], "childNum": 2, "tag": "p", "senID": 12, "childList": [{"text": ".translate", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n import string\n\nclass Del:\n  def __init__(self, keep=string.digits):\n    self.comp = dict((ord(c),c) for c in keep)\n  def __getitem__(self, k):\n    return self.comp.get(k)\n\nDD = Del()\n\nx='aaa12333bb445bb54b5b52'\nx.translate(DD)\n</code>\n</pre>\n", "senID": 13}, {"text": ["also emits '1233344554552'.", "However, putting this in xx.py we have...:"], "childNum": 1, "tag": "p", "senID": 14, "childList": [{"text": "'1233344554552'", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n $ python3.1 -mtimeit -s'import re;  x=\"aaa12333bb445bb54b5b52\"' 're.sub(r\"\\D\", \"\", x)'\n100000 loops, best of 3: 8.43 usec per loop\n$ python3.1 -mtimeit -s'import xx; x=\"aaa12333bb445bb54b5b52\"' 'x.translate(xx.DD)'\n10000 loops, best of 3: 24.3 usec per loop\n</code>\n</pre>\n", "senID": 15}, {"text": ["...which shows the performance advantage disappears, for this kind of \"deletion\" tasks, and becomes a performance decrease."], "childNum": 0, "tag": "p", "senID": 16, "childList": []}], [{"text": ["You can use filter:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n filter(lambda x: x.isdigit(), \"dasdasd2313dsa\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["On python3.0 you have to join this (kinda ugly :( )"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n ''.join(filter(lambda x: x.isdigit(), \"dasdasd2313dsa\"))\n</code>\n</pre>\n", "senID": 3}], [{"text": ["along the lines of bayer's answer:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n ''.join(i for i in s if i.isdigit())\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Use a generator expression:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s = \"foo200bar\"\n&gt;&gt;&gt; new_s = \"\".join(i for i in s if i in \"0123456789\")\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Ugly but works:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s\n'aaa12333bb445bb54b5b52'\n&gt;&gt;&gt; a = ''.join(filter(lambda x : x.isdigit(), s))\n&gt;&gt;&gt; a\n'1233344554552'\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}]]