[[{"text": ["In a word, no..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["No.", "The object could be inside everything and multiple objects at the same time, so it can't know unless you tell it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Just to be pedantic: in general, no...\nbut technically it is possible for some (specific) objects, which are part of some arrays to \"know their position\"..."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "possible", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n class HelpfulClass(object):\n  def __init__(self):\n    self.arr = []\n\n  def add(self, obj):\n    pos = len(self.arr) + 1\n    self.arr.append(obj)\n    obj.pos = pos\n\nclass SmartObj(object):\n  def __init__(self):\n    self.pos = None\n\n  def print_my_element(self):\n    print self.pos\n\nif __name__ == '__main__':\n  s = HelpfulClass()\n  o = SmartObj()\n  s.add(o)\n\n  o.print_my_element()\n</code>\n</pre>\n", "senID": 1}, {"text": ["...technically 'o' is an object...and part of an array (s.arr)...and \"knows\" it's position..."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Not unless you tell it, and telling it leads to very annoying coupling and/or separation of responsibility problems.", "What are you really trying to do?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "really", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}], [{"text": ["No, but you can use the 'enumerate' builtin to iterate over the index and the element at the same time:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; x = ['a','b','c']\n&gt;&gt;&gt; for index,element in enumerate(x):\n...     print index,element\n... \n0 a\n1 b\n2 c\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If the object knows the list it is part of, it could find out by doing the_list.index(self).", "Otherwise, no."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "the_list.index(self)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]]