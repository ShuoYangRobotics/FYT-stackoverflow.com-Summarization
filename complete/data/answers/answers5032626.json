[[{"text": ["I'm going to suggest what I would do, which would be something that tries to avoid using such complex regex's.", "Probably something like:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n while true:\n    line = readline()\n    if line == \"----------\":\n        # Do cleanup stuff\n        continue\n    elif 'country' in line.split():\n        country = line.split()[2]\n    elif 'continent' in line.split():\n        continent = line.split()[2]\n    # etc...\n    # update your list or dict or w/e\n    line = readline()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["try this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n \"\"\"(?mx)\n        ^country\\s:\\s*(.+)\\s\n        (?:^.+\\s)*?\n        ^continent\\s:\\s*(.+)\\s\n        (?:^.+\\s)*?\n        ^planet\\s:\\s*(.+)\\s.*\n\"\"\"\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n # seen this '\\n' can break string into LIST of strings \n\nn_line = output.split('\\n')\n\ntempn_line = n_line[:]\n\n# loop through the new List (without '\\n')\n\nfor n_text in tempn_line:\n    if ':' not in n_text:\n        #print n_text\n        n_line.remove(n_text)\n\n\nfor l_text in n_line:\n    n_split = l_text.split(':')\n    #print n_split\n    if 'country' in n_split[0]:\n        print n_split[1]\n    elif 'continent' in n_split[0]:\n        print n_split[1]\n    elif 'planet' in n_split[0]:\n        print n_split[1]\n</code>\n</pre>\n", "senID": 0}], [{"text": ["I found a pattern that seems to work:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n r\"\"\"(?mx)\n    ^country\\s:\\s*(.+)\\s\n    (?:^.+\\s)*?\n    ^continent\\s:\\s*(.+)\\s\n    (?:^.+\\s)*?\n    (?:^(?:planet\\s:\\s*(.+)\\s|-+\\s|\\Z))\n\"\"\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["Basically, I changed the last part so that it has to match one of the following: the planet stuff, a bunch of -'s, or the end of the string.", "It's kind of ugly, but it was the only way that I could find to ensure that it got the planet stuff.", "One problem with my solution is that there has to be an empty line at the end of the string (as in your example) or it won't get the last match."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["By the way, a partial solution is to fix the last line of the OP's pattern so that it just has a ?", "at the end rather than a *?.", "However, it will only match planet info that is the line following the continent info.", "The reason it wasn't getting anything before is that *?", "is lazy.", "It will avoid matching if possible."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["I strongly agree with everyone else who said that you shouldn't do this with a regexp.", "That said, you can make it work if you use a negative lookahead before consuming each \"junk\" line.", "E.g."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n print re.findall(r\"\"\"(?mx)\n    ^country\\s:\\s*(.+)\\s\n    (?:^.+\\s)*?\n    ^continent\\s:\\s*(.+)\\s\n    (?:(?:(?!(?:planet|country|continent)\\s:)^.+\\s)*\n       (?:^planet\\s:\\s*(.+)\\s))?\n\"\"\",output)\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n import re\n\npat = re.compile('country : (.+)\\n.+\\ncontinent : (.+)(?:\\n.*)*?(?:\\nplanet : (.+)|\\n-+|\\n?\\Z)')\n\noutput1 = \"\"\"\ncountry : USA\nzzzzzzz\ncontinent : Americ\neeeeeee\n------\ncountry : China\nzziiiiiiiiiiiizz\ncontinent : Asia\nplanet : Earth\n-------\ncountry : Izbud\nzzuuuuuuuuuuuuz\ncontinent : Gladiora\nzzzzzzz\nuyututuug\nplanet : Mars \"\"\"\n\noutput2 = \"\"\"\ncountry : USA\nzzzzzzz\ncontinent : Americ\neeeeeee\n------\ncountry : Izbud\nzzuuuuuuuuuuuuz\ncontinent : Gladiora\nzzzzzzz\nuyututuug\n\"\"\"\n\noutput3 = \"\"\"\ncountry : USA\nzzzzzzz\ncontinent : Americ\neeeeeee\n-------\ncountry : Izbud\nzzuuuuuuuuuuuuz\ncontinent : Gladiora\nzzzzzzz\nuyututuug\"\"\"\n\noutput4 = \"\"\"\ncountry : USA\nzzzzzzz\ncontinent : Americ\neeeeeee\n-------\ncountry : Izbud\nzzuuuuuuuuuuuuz\ncontinent : Gladiora\n\"\"\"\n\noutput5 = \"\"\"\ncountry : USA\nzzzzzzz\ncontinent : Americ\neeeeeee\n-------\ncountry : Izbud\nzzuuuuuuuuuuuuz\ncontinent : Gladiora\"\"\"\n\nfor ch in (output1,output2,output3,output4,output5):\n    print ch\n    print\n    print repr(ch)\n    print\n    print '\\n'.join(repr(u) for u in pat.findall(ch))\n    print '======================================================================'\n</code>\n</pre>\n", "senID": 0}, {"text": ["Result:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n country : USA\nzzzzzzz\ncontinent : Americ\neeeeeee\n------\ncountry : China\nzziiiiiiiiiiiizz\ncontinent : Asia\nplanet : Earth\n-------\ncountry : Izbud\nzzuuuuuuuuuuuuz\ncontinent : Gladiora\nzzzzzzz\nuyututuug\nplanet : Mars \n\n'\\ncountry : USA\\nzzzzzzz\\ncontinent : Americ\\neeeeeee\\n------\\ncountry : China\\nzziiiiiiiiiiiizz\\ncontinent : Asia\\nplanet : Earth\\n-------\\ncountry : Izbud\\nzzuuuuuuuuuuuuz\\ncontinent : Gladiora\\nzzzzzzz\\nuyututuug\\nplanet : Mars '\n\n('USA', 'Americ', '')\n('China', 'Asia', 'Earth')\n('Izbud', 'Gladiora', 'Mars ')\n======================================================================\n\ncountry : USA\nzzzzzzz\ncontinent : Americ\neeeeeee\n------\ncountry : Izbud\nzzuuuuuuuuuuuuz\ncontinent : Gladiora\nzzzzzzz\nuyututuug\n\n\n'\\ncountry : USA\\nzzzzzzz\\ncontinent : Americ\\neeeeeee\\n------\\ncountry : Izbud\\nzzuuuuuuuuuuuuz\\ncontinent : Gladiora\\nzzzzzzz\\nuyututuug\\n'\n\n('USA', 'Americ', '')\n('Izbud', 'Gladiora', '')\n======================================================================\n\ncountry : USA\nzzzzzzz\ncontinent : Americ\neeeeeee\n-------\ncountry : Izbud\nzzuuuuuuuuuuuuz\ncontinent : Gladiora\nzzzzzzz\nuyututuug\n\n'\\ncountry : USA\\nzzzzzzz\\ncontinent : Americ\\neeeeeee\\n-------\\ncountry : Izbud\\nzzuuuuuuuuuuuuz\\ncontinent : Gladiora\\nzzzzzzz\\nuyututuug'\n\n('USA', 'Americ', '')\n('Izbud', 'Gladiora', '')\n======================================================================\n\ncountry : USA\nzzzzzzz\ncontinent : Americ\neeeeeee\n-------\ncountry : Izbud\nzzuuuuuuuuuuuuz\ncontinent : Gladiora\n\n\n'\\ncountry : USA\\nzzzzzzz\\ncontinent : Americ\\neeeeeee\\n-------\\ncountry : Izbud\\nzzuuuuuuuuuuuuz\\ncontinent : Gladiora\\n'\n\n('USA', 'Americ', '')\n('Izbud', 'Gladiora', '')\n======================================================================\n\ncountry : USA\nzzzzzzz\ncontinent : Americ\neeeeeee\n-------\ncountry : Izbud\nzzuuuuuuuuuuuuz\ncontinent : Gladiora\n\n'\\ncountry : USA\\nzzzzzzz\\ncontinent : Americ\\neeeeeee\\n-------\\ncountry : Izbud\\nzzuuuuuuuuuuuuz\\ncontinent : Gladiora'\n\n('USA', 'Americ', '')\n('Izbud', 'Gladiora', '')\n======================================================================\n</code>\n</pre>\n", "senID": 2}]]