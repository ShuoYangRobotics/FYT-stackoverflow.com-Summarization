[[{"text": ["Try computing x from the product of z and y rather than checking every number from 1 to a million.", "Think about it: if you were asked to calculate 500*240, which is more efficient - multiplying them, or counting up from 1 until you find the right answer?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Some efficiency issues:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Here's some general optimizations to keep in mind.", "The posted code handles all of this, but these are general rules to learn that might help with future problems:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["1) if you've already checked z = 995, y = 990, you don't need to check z = 990, y = 995.", "Greg Lind handles this properly"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["2) You calculate the product of z*y and then you run x over a huge range and compare that value to y*z.", "For instance, you just calculated 900*950, and then you run x from 1000 to 1M and see if x = 900*950.", "DO you see the problem with this?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["3) Also, what happens to the following code?", "(this is why your code is returning nothing, but you shouldn't be doing this anyway)"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n x = str(100)\ny = 100\nprint x == y\n</code>\n</pre>\n", "senID": 4}, {"text": ["4) If you figure out (3), you're going to be printing a lot of information there.", "You need to figure out a way to store the max value, and only return that value at the end. "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["5) Here's a nice way to time your Euler problems:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n if __name__ == \"__main__\":\n    import time\n    tStart = time.time()\n    print \"Answer = \" + main()\n    print \"Run time = \" + str(time.time() - tStart)\n</code>\n</pre>\n", "senID": 7}], [{"text": ["comparing string with an integer in"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n x == z*y\n</code>\n</pre>\n", "senID": 1}, {"text": ["there are also logical errors"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["start in reverse order range(999, 99, -1).", "that'll be more efficient.", "remove third loop and second comparison altogether."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "range(999, 99, -1)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["rather than enumerating all products of 3-digit numbers (~900^2 iterations),\nenumerate all 6- and 5-digit palyndromes (this takes ~1000 iterations);\nthen for each palyndrome decide whether it can be represented by a product\nof two 3-digit numbers (if it can't, it should have a 4-digit prime factor,\nso this is kind of easy to test)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["also, you are asking about problem #4, not #3."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["The other advice here is great.", "This code also works.", "I start with 999 because we know the largest combination possible is 999*999.", "Not python, but some quickly done pseudo code. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n public static int problem4()\n    {       \n    int biggestSoFar=0;\n        for(int i = 999; i&gt;99;i--){\n            for(int j=999; j&gt;99;j--){\n                if(isPaladrome(i*j))\n                   if(i*j&gt;biggestSoFar)\n                        biggestSoFar=i*j;\n            }\n        }\n        return biggestSoFar;    \n    }\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Here is my solution:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n polindroms = [(x, y, x * y) for x in range(100, 999) for y in range(100, 999) if str(x * y) == str(x * y)[::-1]]\nprint max(polindroms, key = lambda item : item[2])\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I removed my solution to pastebin so my crappy solution isn't immediatly visible...http://pastebin.com/f107ef4e0"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "I removed my solution to pastebin so my crappy solution isn't immediatly visible...http://pastebin.com/f107ef4e0", "childNum": 1, "tag": "em", "pos": 0, "childList": [{"text": "http://pastebin.com/f107ef4e0", "tag": "a"}]}, {"href": "http://pastebin.com/f107ef4e0", "text": "http://pastebin.com/f107ef4e0", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["EDIT: Looking back at this now, I'm kinda ashamed =P."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "EDIT", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["EDIT 2: I'll actually try to address your question..."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "EDIT 2", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["You don't have to do the x iteration at all.", "You can simply compute x as y * z.", "That will then print out all of the palindromes.", "Then you need to pick out the largest."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Good luck!"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["The question states:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n What is the largest prime factor of the number 600851475143?\n</code>\n</pre>\n", "senID": 1}, {"text": ["I solved this using C#, but the algorithm itself is language-agnostic."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "hr", "senID": 3}, {"code": "<pre>\n<code>\n private static long IsPrime(long input)\n        {\n            if ((input % 2) == 0)\n            {\n                return 2;\n            }\n            else if ((input == 1))\n            {\n                return 1;\n            }\n            else\n            {\n                long threshold = (Convert.ToInt64(Math.Sqrt(input)));\n                long tryDivide = 3;\n                while (tryDivide &lt; threshold)\n                {\n                    if ((input % tryDivide) == 0)\n                    {\n                        Console.WriteLine(\"Found a factor: \" + tryDivide);\n                        return tryDivide;\n                    }\n                    tryDivide += 2;\n                }\n                Console.WriteLine(\"Found a factor: \" + input);\n                return -1;\n            }\n        }\n</code>\n</pre>\n", "senID": 4}, {"tag": "hr", "senID": 5}, {"code": "<pre>\n<code>\n private static long HighestPrimeFactor(long input)\n{\n    bool searching = true;\n    long highestFactor = 0;\n    while (searching)\n    {\n        long factor = IsPrime(input);\n        if (factor != -1)\n        {\n            theFactors.Add(factor);\n            input = input / factor; \n        }\n        if (factor == -1)\n        {\n            theFactors.Add(input);\n            highestFactor = theFactors.Max();\n            searching = false;\n        }\n    }\n    return highestFactor;\n}\n</code>\n</pre>\n", "senID": 6}, {"text": ["I hope this helps without giving too much away."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["I will assume you actually mean Euler #4:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Euler #4", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://projecteuler.net/index.php?section=problems&id=4"}]}, {"text": ["See my discussion solution in C# here.", "This may point you in the right direction for a Python implementation."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.chrisballance.com/Blog/2009/02/10/FindingTheLargestPallindromeProductOfTwoThreeDigitIntegers.aspx"}]}], [{"text": ["If your program is running slow, and you have nested loops like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for z in range(100, 1000):\n    for y in range(100, 1000):\n        for x in range(1, 1000000):\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then a question you should ask yourself is: \"How many times will the body of the innermost loop execute?", "\"  (the body of your innermost loop is the code that starts with: x = str(x))"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "x = str(x)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["In this case, it's easy to figure out.", "The outer loop will execute 900 times.", "For each iteration the middle loop will also execute 900 times \u2013 that makes 900\u00d7900, or 810,000, times.", "Then, for each of those 810,000 iterations, the inner loop will itself execute 999,999 times.", "I think I need a long to calculate that:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "For each iteration", "childNum": 0, "tag": "em", "pos": 2, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; 900*900*999999\n809999190000L\n</code>\n</pre>\n", "senID": 4}, {"text": ["In other words, you're doing your palindrome check almost 810 billion times.", "If you want to make it into the Project Euler recommended limit of 1 minute per problem, you might want to optimise a little :-) (see David's comment)"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "810 billion", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["This is what I did in Java:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n public class Euler0004\n{\n    //assumes positive int\n    static boolean palindrome(int p)\n    {\n    \t//if there's only one char, then it's\n    \t//  automagically a palindrome\n    \tif(p &lt; 10)\n    \t\treturn true;\n\n    \tchar[] c = String.valueOf(p).toCharArray();\n\n    \t//loop over the char array to check that\n    \t//  the chars are an in a palindromic manner\n    \tfor(int i = 0; i &lt; c.length / 2; i++)\n    \t\tif(c[i] != c[c.length-1 - i])\n    \t\t\treturn false;\n\n    \treturn true;\n    }\n\n\n    public static void main(String args[]) throws Exception\n    {\n    \tint num;\n    \tint max = 0;\n\n    \t//testing all multiples of two 3 digit numbers.\n    \t// we want the biggest palindrome, so we\n    \t// iterate backwards\n    \tfor(int i = 999; i &gt; 99; i--)\n    \t{\n    \t\t// start at j == i, so that we\n    \t\t//  don't calc 999 * 998 as well as\n    \t\t//  998 * 999...\n    \t\tfor(int j = i; j &gt; 99; j--)\n    \t\t{\n    \t\t\tnum = i*j;\n\n    \t\t\t//if the number we calculate is smaller\n    \t\t\t//  than the current max, then it can't\n    \t\t\t//  be a solution, so we start again\n    \t\t\tif(num &lt; max)\n    \t\t\t\tbreak;\n\n    \t\t\t//if the number is a palindrome, and it's\n    \t\t\t//  bigger than our previous max, it\n    \t\t\t//  could be the answer\n    \t\t\tif(palindrome(num) &amp;&amp; num &gt; max)\n    \t\t\t\tmax = num;\n    \t\t}\n    \t}\n\n    \t//once we've gone over all of the numbers\n    \t//  the number remaining is our answer\n    \tSystem.out.println(max);\n\n    }\n}\n</code>\n</pre>\n", "senID": 1}]]