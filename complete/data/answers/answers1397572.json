[[{"text": ["Michael Feathers' \"Working Effectively with Legacy Code\" is a superb starting point for such endeavors -- not particularly language-dependent (his examples are in several non-python languages, but the techniques and mindset DO extend pretty well to Python and just about any other language)."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Michael Feathers", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.objectmentor.com/omTeam/feathers%5Fm.html"}, {"href": "http://www.informit.com/store/product.aspx?isbn=0131177052", "text": "Working Effectively with Legacy Code", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["The key focus is, that you want to understand the code for a reason -- modifying it and/or porting it.", "So, instrumenting the legacy code -- with batteries and scaffolding of tests and tracing/logging -- is the crucial path on the long, hard slog to understanding and modifying safely and responsibly."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "for a reason", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Feathers suggests heuristics and techniques for where to focus your efforts and how to get started when the code is a total mess (hence \"legacy\") - no docs, or misleading docs (describing something quite different, maybe in subtle ways, from what the code actually DOES), no tests, an untestable-without-refactoring tangle of spaghetti dependencies.", "This may seem an extreme case but anybody who's spent a long-ish career in programming knows it's actually more common than anyone would like;-)."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "misleading", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"tag": "ul", "num": 3, "lis": [{"text": "In past I have used ", "tag": "none", "senID": 0}, {"text": "Use a debugger e.g. pdb to wak thru\nthe code.", "tag": "none", "senID": 1}, {"text": "Try to read code again after one day\nbreak, that also helps", "tag": "none", "senID": 2}]}], [{"text": ["I would recommend to generate some documentation with epydoc http://epydoc.sourceforge.net/ .", "For sure, if no docstring exists, the result will be poor but it will give you at least one view of your application and you'lle be able to navigate in the classes more easily."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://epydoc.sourceforge.net/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://epydoc.sourceforge.net/"}]}, {"text": ["Then you can try to document by yourself when you understand something new and then regenerate the docs again.", "It is never too late to start something."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I hope it helps"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I have had to do a lot of this in my job.", "What works for me may be different to what works for you, but I'll share my experience."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I start by trying to identify the data structures being used and draw diagrams showing the relationships between them.", "Not necessarily something formal like UML, but a sketch on paper which you understand which allows you to see the overall structure of the data being manipulated by the program.", "Only once I have some view of the data structures being used do I start to try to understand how the data is being manipulated."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "you", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "how", "childNum": 0, "tag": "em", "pos": 2, "childList": []}]}, {"text": ["Secondly, for a large body of software, sometimes you need to just attack bite sized pieces at first.", "You won't get an overall understanding straight away, but if you understand small parts in detail and keep chipping away, eventually all the pieces fall together."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["I combine these two approaches, switching between them when I am getting overly frustrated or bored.", "Regular walks around the block are recommended :) I find this gets me good results in the end."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Good luck!"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["You are lucky it's in Python which is easy to read.", "But it is of course possible to write tricky hard to understand code in Python as well."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The steps are:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["There are tools that can help you.", "As Stephen C says, an IDE is a good idea.", "I'll explain why:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Many editors analyses the code.", "This typically gives you code completion, but more importantly in this case, it makes it possible to just just ctrl-click on a variable to see where it comes from.", "This really speeds things up when you want to understand otehr peoples code."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Also, you need to learn a debugger.", "You will, in tricky parts of the code, have to step through them in a debugger to see what the code actually do.", "Pythons pdb works, but many IDE's have integrated debuggers, which make debugging easier."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["That's it.", "Good luck."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["I'd start with a good python IDE.", "See the answers for this question."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "this question", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/81584/what-ide-to-use-for-python"}]}], [{"text": ["Enterprise Architect by Sparx Systems is very good at processing a source directory and generating class diagrams.", "It is not free, but very reasonably priced for what you get.", "(I am not associated with this company in any way, I've just been a satisfied user of their product for several years."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Enterprise Architect", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.sparxsystems.com.au/"}]}], [{"text": ["pyreverse from Logilab and PyNSource from Andy Bulka are helpful too for UML diagram generation."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]