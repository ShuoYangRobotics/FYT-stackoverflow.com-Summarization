[[{"text": ["Quotes are only used for string literals, you wouldn't enclose a variable or parameter name in quotes to indicate that it will be a string.", "The function definition would look like:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def is_true(n):\n</code>\n</pre>\n", "senID": 1}, {"text": ["And then in the body of the function you use n to reference the value that is passed in by the caller."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "n", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["To call the function on a specific value, you do:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n is_true(\"3884892993\")\n</code>\n</pre>\n", "senID": 4}, {"text": ["Side suggestion:  Think of more explanatory names for your functions and variables.", "For instance, it seems like your function might be reasonably called is_valid_card_number."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "is_valid_card_number", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["I am not sure what is your question, but if you are trying to:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "correctly define the function:\n", "tag": "none", "senID": 1}, {"text": ["convert a string variable into integer, you can do this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["read the value of the variable, based on its name:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]}, {"text": ["Did any of the above solve your problem?"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["EDIT (based on the clarification):"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "EDIT (based on the clarification):", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["This should solve your problem:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n def is_true(my_variable):\n    # Here the variable named \"my_variable\" is accessible\n</code>\n</pre>\n", "senID": 7}, {"text": ["If you want to do something \"in-place\" on the passed variable, I have a bad news: strings and integers are immutable in Python, thus you are not able to simply change them - you should probably return them as a result of the function (there are at least two workarounds, but I do not recommend them if you are a novice in Python)."], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "strings and integers are immutable in Python", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["EDIT (for proper code styling):"], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "EDIT (for proper code styling):", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["You should probably read PEP 8 to get familiar with what is the coding standard for Python scripts - this is commonly used across Python community and you should follow that (at some point you should appreciate it)."], "childNum": 1, "tag": "p", "senID": 10, "childList": [{"text": "PEP 8", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0008/"}]}], [{"text": ["I have no idea what your function is supposed to do, but here are some remarks."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["First of all, if you define the function then you use the following syntax"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def is_true(n):\n    # do something\n</code>\n</pre>\n", "senID": 2}, {"text": ["you can call this function like this is_true(\"3884892993\"), i.e.", "you can pass string as n. Your function now need to treat variable n as a string.", "So you can use"], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "is_true(\"3884892993\")", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "n", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "n", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"code": "<pre>\n<code>\n number = [int(d) for d in n]\n</code>\n</pre>\n", "senID": 4}, {"text": ["which will result in converting string into a list of digits."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["One more remark: you used a return statement inside your is_true function.", "This statement will stop executing the function and return the value.", "Every code below return will never be executed."], "childNum": 3, "tag": "p", "senID": 6, "childList": [{"text": "return", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "is_true", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "return", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["From the Wikipedia article on the Luhn algorithm:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Wikipedia article on the Luhn algorithm", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Luhn_algorithm"}]}, {"code": "<pre>\n<code>\n def is_luhn_valid(cc):\n    num = map(int, str(cc))\n    return sum(num[::-2] + [sum(divmod(d * 2, 10)) for d in num[-2::-2]]) % 10 == 0\n</code>\n</pre>\n", "senID": 1}], [{"text": ["May be like this.", "I leave your comments"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def is_valid(n): #n is the number to be checked.\n    numbers = [int(y) for y in n] #converts the string into a list of useable digits.\n    double_alt = [sum([int(i) for i in str(x*2)]) for x in numbers[-2::-2]]   #doubles      and sum if more than 10each element of the list altern1.\n    sum1 = sum(double_alt) # adds together all the doubled items of the list.\n    sum2 = sum(numbers[-1::-2]) #sums the other set of alternating digits.\n    sumtotal = sum1 + sum2 #works out the total sum to be worked with.\n    return not sumtotal % 10\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Here an implementation of the luhn algorithm that I had to make recently."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def is_valid_luhn(cc):\n    return not sum([sum(divmod(int(d) * 2, 10)) for d in cc[-2::-2]] + [int(d) for d in cc[-1::-2]]) % 10\n    #                          | double |       |--- every -2th --|            |--- every -1th --|\n    #                          |--------- step 1 -----------------|\n    #              |------------- sum doubled digits --------------|   |-- sum undoubled digits --|\n    #          |---------------------- step 2: sum doubled/undoubled digits -----------------------|\n    #      |-------------------------- step 3: sum % 10 == 0 --&gt; not sum % 10 --------------------------|\n</code>\n</pre>\n", "senID": 1}, {"text": ["Or if you'd like a more verbose version:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def is_valid_luhn(cc):\n    total = 0\n    # Double and sum every 2nd digit starting at -2.\n    for d in cc[-2::-2]:\n        # divmod(d*2, 10) returns (d*2 // 10, d*2 % 10)\n        # sum(divmod) return (d*2 // 10) + (d*2 % 10)\n        total += sum(divmod(int(d) * 2, 10))\n    # Sum every 2nd digit starting at -1.\n    for d in cc[-1::-2]:\n        total += int(d)\n    # Check module 10 of total: total % 10 == 0 --&gt; not total % 10\n    return not total % 10\n</code>\n</pre>\n", "senID": 3}]]