[[{"text": ["That's how dictionaries get converted to sequences."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["tuple(dictionary) = tuple(dictionary.keys())"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["for a similar reason"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n for x in dictionary:\n</code>\n</pre>\n", "senID": 3}, {"text": ["assigns keys, not pairs, to x"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["When you're calling a function, using an asterisk before a list or dict will pass it in as positional parameters."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "list", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "dict", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["For example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a(*('test', 'testing'))\n('test', 'testing')\n\n&gt;&gt;&gt; a(*{'a': 'b', 'c': 'd'})\n('a', 'c')\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Using * in front of an expression in a function call iterates over the value of the expression (your dict, in this case) and makes each item in the iteration another parameter to the function invocation.", "Iterating over a dict in Python yields the keys (for better or worse)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "*", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"code": "<pre>\n<code>\n a(*{'q' : 'qqq'})\n</code>\n</pre>\n", "senID": 0}, {"text": ["will try to expand your dict ({'q':'qqq'}) into an itemized list of arguments for the function. "], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "dict", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "{'q':'qqq'}", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Note that: "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n tuple({'q' : 'qqq'})\n</code>\n</pre>\n", "senID": 3}, {"text": ["returns ('q',), which is exactly what you're seeing.", "When you coerce a dictionary to a list/tuple, you only get the list of keys."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "('q',)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Iterating a dictionary will yield its keys."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n d = {'a': 1, 'b': 2, 'c': 3 }\n\nfor x in d:\n    print x  # prints a, b, c but not necessarily in that order\n\nsorted(d): # Gives a, b, c in that order. No 1/2/3.\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you want to get both keys and values from a dictionary, you can use .items() or .iteritems()"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n sorted(d.items()) # [('a,' 1), ('b', 2), ('c', 3)]\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You are asking for a list of arguments, and then telling python to send a dict as a sequence of arguments.", "When a dict is converted to a sequence, it uses the keys."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I guess you are really looking for **, not *."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "really", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "**", "childNum": 0, "tag": "code", "childList": []}, {"text": "*", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Probably because that's what a dictionary returns when you do a standard iteration over it.", "It gets converted to a sequence containing it's keys.", "This example exhibits the same behaviour:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; for i in {\"a\": \"1\", \"b\": \"2\"}:\n...     print i\n...\na\nb\n</code>\n</pre>\n", "senID": 1}, {"text": ["To get what I assume you expect you would pass it as variable keyword arguments instead, like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; def a(**kwargs):\n...     print kwargs\n...\n&gt;&gt;&gt; a(**{\"a\": \"1\", \"b\": \"2\"})\n{'a': '1', 'b': '2'}\n</code>\n</pre>\n", "senID": 3}, {"text": ["Note that you are now basically back where you began and have gained nothing."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]]