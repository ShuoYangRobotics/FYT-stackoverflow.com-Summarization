[[{"text": ["A straight-forward implementation that doesn't involve calculating the factorial (so that it works with big numbers, ie 2000000!", ") (edited):"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "(edited)", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n fives = 0\ntwos = 0\nfor i in range(10, 201):\n   while i % 5 == 0:\n      fives = fives + 1\n      i /= 5\n   while i % 2 == 0:\n      twos = twos + 1\n      i /= 2\nprint(min(fives, twos))\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n import math\n\nanswer = str(math.factorial(200) / math.factorial(9))\ncount = len(answer) - len(answer.rstrip('0'))\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n import itertools\nmul = reduce(lambda x,y: x*y, range(10, 200+1))\nzeros = itertools.takewhile(lambda s: s == \"0\", reversed(str(mul)))\nprint len(list(zeros))\n</code>\n</pre>\n", "senID": 0}, {"text": ["The second line calculates the product, the third gets an iterator of all trailing zeros in that number, the last prints the number of that zeros."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"code": "<pre>\n<code>\n len(re.search('0*$', str(reduce(lambda x, y: x*y, range(10, 200 + 1),1))).group(0))\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n print sum(1 + (not i%25) + (not i%125) for i in xrange(10,201,5))\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Do you mean zeroes?", "What is null otherwise?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Total 5s = 49"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["200!", "= 5^49 * 2 ^49 * (other numbers not divisible by 2 or 5)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["So there are 49 zeroes"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"code": "<pre>\n<code>\n mul = str(reduce(lambda x,y: x*y, xrange(10, 201)))\ncount = len(mul) - len(mul.rstrip(\"0\"))\n</code>\n</pre>\n", "senID": 0}]]