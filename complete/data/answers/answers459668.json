[[{"code": "<pre>\n<code>\n use Data::Dumper;\nlocal $Data::Dumper::Terse = 1;\nmy $str = Dumper({a =&gt; 1, b =&gt; 2, c =&gt; 3});\n</code>\n</pre>\n", "senID": 0}], [{"text": ["See also JSON:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "JSON", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://search.cpan.org/~makamaka/JSON-2.12/lib/JSON.pm"}]}, {"code": "<pre>\n<code>\n #!/usr/bin/perl\nuse warnings; use strict;\nuse JSON;\n\nmy $data = {a =&gt; 1, b=&gt; 2, c =&gt; 3};\n\nprint to_json($data);\n</code>\n</pre>\n", "senID": 1}, {"text": ["This produces:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n {\"c\":3,\"a\":1,\"b\":2}\n</code>\n</pre>\n", "senID": 3}], [{"text": ["There is the Data::Dumper module which one way to do this sort of transformation."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Data::Dumper", "tag": "a", "pos": 0, "childList": [{"text": "Data::Dumper", "tag": "code"}], "childNum": 1, "href": "http://search.cpan.org/dist/Data-Dumper/"}, {"text": "Data::Dumper", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Use Data::Dump instead of Data::Dumper.", "It's basically the same, except without that annoying $VAR1 = ... cruft:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Data::Dump", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://search.cpan.org/dist/Data-Dump/"}, {"text": "$VAR1 = ...", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n use Data::Dump \"pp\";\nprint pp({a =&gt; 1, b =&gt; 2, c =&gt; 3});\n</code>\n</pre>\n", "senID": 1}, {"text": ["Produces:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n { a =&gt; 1, b =&gt; 2, c =&gt; 3 }\n</code>\n</pre>\n", "senID": 3}, {"text": ["If you're on Windows, Data::Dump has come pre-installed with ActivePerl since version 5.8."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "ActivePerl", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://aspn.activestate.com/ASPN/Downloads/ActivePerl/"}]}], [{"text": ["Yet Another Swallow Solution:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n sub pp {\n  my $h = shift();\n  qq[{${\\(join',',map\"$_=&gt;$h-&gt;{$_}\",keys%$h)}}]\n}\nprint pp({a =&gt; 1, b =&gt; 2, c =&gt; 3});\n</code>\n</pre>\n", "senID": 1}, {"text": ["But use Data::Dumper instead."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "Data::Dumper", "tag": "a", "pos": 0, "childList": [{"text": "Data::Dumper", "tag": "code"}], "childNum": 1, "href": "http://search.cpan.org/dist/Data-Dumper/Dumper.pm"}, {"text": "Data::Dumper", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["For very fancy output you can use also:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n use Data::Dumper;\nuse Perl::Tidy;\nsub pp {\n        local $Data::Dumper::Terse    = 1;\n        local $Data::Dumper::Indent   = 0;\n        my $source = Dumper(@_);\n        my $result;\n        Perl::Tidy::perltidy(\n                source      =&gt; \\$source,\n                destination =&gt; \\$result,\n                argv        =&gt; [qw(-pbp -nst)]\n        );\n        return $result;\n}\n</code>\n</pre>\n", "senID": 4}, {"text": ["If you prefer some keys should be first than you can use this approach (i want type first and position second):"], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "type", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "position", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n local $Data::Dumper::Sortkeys = sub {\n            [   sort {\n                            if    ( $b eq 'type' )     {1}\n                            elsif ( $a eq 'type' )     {-1}\n                            elsif ( $b eq 'position' ) {1}\n                            elsif ( $a eq 'position' ) {-1}\n                            else                       { $a cmp $b }\n                            } keys %{ $_[0] }\n            ];\n    };\n</code>\n</pre>\n", "senID": 6}], [{"text": ["Several of the above solutions have a problem if you have the potential for multi-level structures."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Specifically this flag:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n $Data::Dumper::Terse    = 1;\n</code>\n</pre>\n", "senID": 2}, {"text": ["As noted on the perldoc page for Data::Dumper, the \"terse\" flag could general not perl parseable output."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["If you possibly are going to have multi-depth structures the proper thing to do would be to instead use:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n $Data::Dumper::Indent = 0;\n</code>\n</pre>\n", "senID": 5}, {"text": ["Which is guaranteed to be perl parseable by eval, which makes for a very very easy way of doing serialization to plaintext..."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]]