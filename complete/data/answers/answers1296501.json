[[{"text": ["This will print the directory in which the script lives (as opposed to the working directory):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import os\ndirname, filename = os.path.split(os.path.abspath(__file__))\nprint \"running from\", dirname\nprint \"file is\", filename\n</code>\n</pre>\n", "senID": 1}, {"text": ["Here's how it behaves, when I put it in c:\\src:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "c:\\src", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt; cd c:\\src\n&gt; python so-where.py\nrunning from C:\\src\nfile is so-where.py\n\n&gt; cd c:\\\n&gt; python src\\so-where.py\nrunning from C:\\src\nfile is so-where.py\n</code>\n</pre>\n", "senID": 3}], [{"text": ["__file__is NOT what you are looking for.", "Don't use accidental side-effects"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "__file__is NOT what you are looking for.", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "__file__", "tag": "code"}]}, {"text": "__file__", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["sys.argv[0] is always the path to the script (if in fact a script has been invoked) -- see http://docs.python.org/library/sys.html#sys.argv"], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "sys.argv[0]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "always", "childNum": 0, "tag": "strong", "childList": []}, {"href": "http://docs.python.org/library/sys.html#sys.argv", "text": "http://docs.python.org/library/sys.html#sys.argv", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["__file__ is the path of the currently executing file (script or module).", "This is accidentally the same as the script if it is accessed from the script!", "If you want to put useful things like locating resource files relative to the script location into a library, then you must use sys.argv[0]."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "__file__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "currently executing", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "accidentally", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"text": ["Example:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n C:\\junk\\so&gt;type \\junk\\so\\scriptpath\\script1.py\nimport sys, os\nprint \"script: sys.argv[0] is\", repr(sys.argv[0])\nprint \"script: __file__ is\", repr(__file__)\nprint \"script: cwd is\", repr(os.getcwd())\nimport whereutils\nwhereutils.show_where()\n\nC:\\junk\\so&gt;type \\python26\\lib\\site-packages\\whereutils.py\nimport sys, os\ndef show_where():\n    print \"show_where: sys.argv[0] is\", repr(sys.argv[0])\n    print \"show_where: __file__ is\", repr(__file__)\n    print \"show_where: cwd is\", repr(os.getcwd())\n\nC:\\junk\\so&gt;\\python26\\python scriptpath\\script1.py\nscript: sys.argv[0] is 'scriptpath\\\\script1.py'\nscript: __file__ is 'scriptpath\\\\script1.py'\nscript: cwd is 'C:\\\\junk\\\\so'\nshow_where: sys.argv[0] is 'scriptpath\\\\script1.py'\nshow_where: __file__ is 'C:\\\\python26\\\\lib\\\\site-packages\\\\whereutils.pyc'\nshow_where: cwd is 'C:\\\\junk\\\\so'\n</code>\n</pre>\n", "senID": 4}], [{"code": "<pre>\n<code>\n import sys, os\n\nfile = sys.argv[0]\npathname = os.path.dirname(file)\nprint 'running from %s' % os.path.abspath(pathname)\nprint 'file is %s' % file\n</code>\n</pre>\n", "senID": 0}, {"text": ["Check os.getcwd() (docs)"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "docs", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/os.html"}]}], [{"text": ["The running file is always __file__."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "__file__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Here's a demo script, named identify.py"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "identify.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n print __file__\n</code>\n</pre>\n", "senID": 2}, {"text": ["Here's the results"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n MacBook-5:Projects slott$ python StackOverflow/identify.py \nStackOverflow/identify.py\nMacBook-5:Projects slott$ cd StackOverflow/\nMacBook-5:StackOverflow slott$ python identify.py \nidentify.py\n</code>\n</pre>\n", "senID": 4}], [{"text": ["I would suggest"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import os, sys\nprint os.path.split(os.path.abspath(os.path.realpath(sys.argv[0])))[0]\n</code>\n</pre>\n", "senID": 1}, {"text": ["This way you can safely create symbolic links to the script executable and it will still find the correct directory."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["The script name will (always?", ") be the first index of sys.argv:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import sys\nprint sys.argv[0]\n</code>\n</pre>\n", "senID": 1}, {"text": ["EDIT: just found an even easier way to find the path of your running script:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n os.path.basename(sys.argv[0]\n</code>\n</pre>\n", "senID": 3}]]