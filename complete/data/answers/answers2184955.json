[[{"text": ["Document the argument as needing to be a sequence, and use it as a sequence.", "Don't check the type."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["There's nothing wrong with using isinstance as long as it's not redundant.", "If a variable should only be a list/tuple then document the interface and just use it as such.", "Otherwise a check is perfectly reasonable:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "isinstance", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n if isinstance(a, collections.Iterable):\n    # use as a container\nelse:\n    # not a container!\n</code>\n</pre>\n", "senID": 1}, {"text": ["This type of check does have some good use-cases, such as with the standard string startswith / endswith methods (although to be accurate these are implemented in C in CPython using an explicit check to see if it's a tuple - there's more than one way to solve this problem, as mentioned in the article you link to)."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "startswith", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#str.startswith"}, {"href": "http://docs.python.org/library/stdtypes.html#str.endswith", "text": "endswith", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["An explicit check is often better than trying to use the object as a container and handling the exception - that can cause all sorts of problems with code being run partially or unnecessarily."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Go ahead and use isinstance if you need it.", "It is somewhat evil, as it excludes custom sequences, iterators, and other things that you might actually need.", "However, sometimes you need to behave differently if someone, for instance, passes a string.", "My preference there would be to explicitly check for str or unicode like so:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "isinstance", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "str", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "unicode", "childNum": 0, "tag": "code", "pos": 3, "childList": []}]}, {"code": "<pre>\n<code>\n import types\nisinstance(var, types.StringTypes)\n</code>\n</pre>\n", "senID": 1}, {"text": ["N.B.", "Don't mistake types.StringType for types.StringTypes.", "The latter incorporates str and unicode objects."], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "types.StringType", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "types.StringTypes", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "str", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "unicode", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["The types module is considered by many to be obsolete in favor of just checking directly against the object's type, so if you'd rather not use the above, you can alternatively check explicitly against str and unicode, like this:"], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "types", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "str", "childNum": 0, "tag": "code", "childList": []}, {"text": "unicode", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n isinstance(var, (str, unicode)):\n</code>\n</pre>\n", "senID": 4}, {"text": ["After either of these, you can fall back to behaving as if you're getting a normal sequence, letting non-sequences raise appropriate exceptions."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["See the thing that's \"evil\" about type checking is not that you might want to behave differently for a certain type of object, it's that you artificially restrict your function from doing the right thing with unexpected object types that would otherwise do the right thing.", "If you have a final fallback that is not type-checked, you remove this restriction.", "It should be noted that too much type checking is a code smell that indicates that you might want to do some refactoring, but that doesn't necessarily mean you should avoid it from the getgo."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["Python uses \"Duck typing\", i.e.", "if a variable kwaks like a duck, it must be a duck.", "In your case, you probably want it to be iterable, or you want to access the item at a certain index.", "You should just do this: i.e.", "use the object in for var: or var[idx] inside a try block, and if you get an exception it wasn't a duck..."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "for var:", "childNum": 0, "tag": "code", "pos": 4, "childList": []}, {"text": "var[idx]", "childNum": 0, "tag": "code", "childList": []}, {"text": "try", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["If you just need to know if you can use the foo[123] notation with the variable, you can check for the existence of a __getitem__ attribute (which is what python calls when you access by index) with hasattr(foo, '__getitem__')"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "foo[123]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__getitem__", "childNum": 0, "tag": "code", "childList": []}, {"text": "hasattr(foo, '__getitem__')", "childNum": 0, "tag": "code", "childList": []}]}], [{"code": "<pre>\n<code>\n if type(x) is list:\n    print 'a list'\nelif type(x) is tuple:\n    print 'a tuple'\nelse:\n    print 'neither a tuple or a list'\n</code>\n</pre>\n", "senID": 0}], [{"text": ["In principle, I agree with Ignacio, above, but you can also use type to check if something is a tuple or a list."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "type", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = (1,)\n&gt;&gt;&gt; type(a)\n(type 'tuple')\n&gt;&gt;&gt; a = [1]\n&gt;&gt;&gt; type(a)\n(type 'list')\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; l = []\n&gt;&gt;&gt; l.__class__.__name__ in ('list', 'tuple')\nTrue\n</code>\n</pre>\n", "senID": 0}]]