[[{"text": ["Try:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; for row in table:\n...     row[1:]=map(int,row[1:])\n... \n&gt;&gt;&gt; table\n[['donkey', 2, 1, 0], ['goat', 5, 3, 2]]\n</code>\n</pre>\n", "senID": 1}, {"text": ["AFAIK, assigning to a list slice forces the operation to be done in place instead of creating a new list."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "list", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "list", "childNum": 0, "tag": "code", "childList": []}]}], [{"code": "<pre>\n<code>\n for row in table:\n    row[1:] = [int(c) for c in row[1:]]\n</code>\n</pre>\n", "senID": 0}, {"text": ["Does above look more pythonic?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I like Shekhar answer a lot. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["As a general rule, when writing Python code, if you find yourself writing for i in range(len(somelist)), you're doing it wrong:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "or i in range(len(somelist))", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"tag": "ul", "num": 2, "lis": [{"text": "try ", "tag": "none", "senID": 2}, {"text": "try ", "tag": "none", "senID": 3}]}, {"text": ["In your case, the first column is different so you cannot elegantly use enumerate:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n for row in table:\n    for i, val in enumerate(row):\n        if i == 0: continue\n        row[i] = int(val)\n</code>\n</pre>\n", "senID": 5}], [{"text": ["Use list comprehensions:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n table = [row[0] + [int(col) for col in row[1:]] for row in table]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Your \"ugly\" code can be improved just by calling range with two arguments:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "range", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n for row in table:\n    for i in range(1, len(row)):\n        row[i] = int(row[i])\n</code>\n</pre>\n", "senID": 1}, {"text": ["This is probably the best you can do if you insist on changing the items in place without allocating new temporary lists (either by using a list comprehension, map, and/or slicing).", "See Is there an in-place equivalent to &#39;map&#39; in python?"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "map", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "Is there an in-place equivalent to &#39;map&#39; in python?", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/4148375/is-there-an-in-place-equivalent-to-map-in-python"}]}, {"text": ["Although I don't recommend it, you can also make this code more general by introducing your own in-place map function:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def inplacemap(f, items, start=0, end=None):\n    \"\"\"Applies ``f`` to each item in the iterable ``items`` between the range\n    ``start`` and ``end``.\"\"\"\n    # If end was not specified, make it the length of the iterable\n    # We avoid setting end in the parameter list to force it to be evaluated on\n    # each invocation\n    if end is None:\n        end = len(items)\n    for i in range(start, end):\n        items[i] = f(items[i])\n\nfor row in table:\n    inplacemap(int, row, 1)\n</code>\n</pre>\n", "senID": 4}, {"text": ["Personally, I find this less Pythonic.", "There is preferably only one obvious way to do it, and this isn't it."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "less", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["This will work:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n table = [[row[0]] + [int(v) for v in row[1:]] for row in table]\n</code>\n</pre>\n", "senID": 1}, {"text": ["However you might want to think about doing the conversion at the point where the list is first created."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["This accomplishes what you are looking for.", "It is a readable solution.", "You can go for similar one using listcomp too."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; for row in table:\n...     for i, elem in enumerate(row):\n...             try:\n...                     int(elem)\n...             except ValueError:\n...                     pass\n...             else:\n...                     row[i] = int(elem)\n...\n</code>\n</pre>\n", "senID": 1}]]