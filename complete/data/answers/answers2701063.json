[[{"text": ["You can achieve this using re.sub() with a callback:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "re.sub()", "tag": "a", "pos": 0, "childList": [{"text": "re.sub()", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/re.html#re.sub"}, {"text": "re.sub()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n import re\n\ndef repl(matchobj):\n  i = int(matchobj.group(0))\n  return str(i * 2)\n\nprint re.sub(r'\\d+', repl, '1 a20 300c')\n</code>\n</pre>\n", "senID": 1}, {"text": ["Output:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n 2 a40 600c\n</code>\n</pre>\n", "senID": 3}, {"text": ["From the docs:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["In perl you can do this with the /e modifier.", "This causes the substitution part of the expression be evaluated.", "Assuming $line contains a line of the file   "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n my $scalar= 4;\n $line =~ s/([\\d]+)/$1*$scalar/ge;\n</code>\n</pre>\n", "senID": 1}, {"text": ["Applying this to every line will do the job for you.", "For example applying this to a \n$line containing \"foo2 bar25 baz\", transforms it to \"foo8 bar100 baz\""], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I prepared a small script which uses re.finditer to find all the integers (you can change the regexp so that it can deal with floats or scientific notation) and then use map to return a list of scaled numbers."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "re.finditer", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "map", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n import re\n\ndef scale(fact):\n    \"\"\"This function returns a lambda which will scale a number by a                           \n    factor 'fact'\"\"\"\n    return lambda val: fact * val\n\ndef find_and_scale(file, fact):\n    \"\"\"This function will find all the numbers (integers) in a file and                        \n    return a list of all such numbers scaled by a factor 'fact'\"\"\"\n    num = re.compile('(\\d+)')\n    scaling = scale(fact)\n    f = open(file, 'r').read()\n    numbers = [int(m.group(1)) for m in num.finditer(f)]\n    return map(scaling, numbers)\n\nif __name__ == \"__main__\":\n    import sys\n    if len(sys.argv) != 3:\n        print \"usage: %s file factor\" % sys.argv[0]\n        sys.exit(-1)\n    numbers = find_and_scale(sys.argv[1], int(sys.argv[2]))\n    for number in numbers:\n        print \"%d \" % number\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you have a file whose numbers you want to scale by a factor fact, you call the script from the command line as python script.py file fact and it will print to STDOUT all the scaled numbers.", "Of course, you can do something more useful if you wanted..."], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "file", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "fact", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "python script.py file fact", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "STDOUT", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["Regular expressions themselves can't - they're all about text - so sed can't directly.", "It's easy enough to do something like that in a full scripting language like python or perl, though."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["To those of you who doubt that sed can do arithmetic I offer this counter-example.", "This one is even wilder."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "counter-example", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.delorie.com/gnu/docs/sed/sed_15.html"}, {"text": "This one", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://en.literateprograms.org/Fibonacci_numbers_%28Sed%29"}]}], [{"text": ["Ayman Hourieh's answer can be reduced to be a little bit simpler, and imo more readable:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import re\n&gt;&gt;&gt; repl = lambda m: str(int(m.group(0)) * 2)\n&gt;&gt;&gt; print re.sub(r'\\d+', repl, '1 a20 300c')\n2 a40 600c\n</code>\n</pre>\n", "senID": 1}]]