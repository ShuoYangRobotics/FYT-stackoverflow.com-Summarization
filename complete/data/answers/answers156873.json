[[{"text": ["If command-line arguments are not in sys.argv or a similar list but in a string then (as ironfroggy suggested) use shlex.split()."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "shlex.split()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n parser.parse_args([\"--\"+p if \"=\" in p else p for p in shlex.split(argsline)])\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You could split them up with shlex.split(), which can handle the quoted values you have, and pretty easily parse this with a very simple regular expression.", "Or, you can just use regular expressions for both splitting and parsing.", "Or simply use split()."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n args = {}\nfor arg in shlex.split(cmdln_args):\n    key, value = arg.split('=', 1)\n    args[key] = value\n</code>\n</pre>\n", "senID": 1}], [{"text": ["A small pythonic variation on Ironforggy's shlex answer:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n args = dict( arg.split('=', 1) for arg in shlex.split(cmdln_args) )\n</code>\n</pre>\n", "senID": 1}, {"text": ["oops... - corrected."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["thanks,  J.F.", "Sebastian \n (got to remember those single argument generator expressions)."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["What about optmatch (http://www.coderazzi.net/python/optmatch/index.htm)?", "Is not standard, but takes a different approach to options parsing, and it supports any prefix:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.coderazzi.net/python/optmatch/index.htm", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.coderazzi.net/python/optmatch/index.htm"}]}, {"text": ["OptionMatcher.setMode(optionPrefix='-')"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Without fairly intensive surgery on optparse or getopt, I don't believe you can sensibly make them parse your format.", "You can easily parse your own format, though, or translate it into something optparse could handle:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n parser = optparse.OptionParser()\nparser.add_option(\"--ARG1\", dest=\"arg1\", help=\"....\")\nparser.add_option(...)\n...\nnewargs = sys.argv[:1]\nfor idx, arg in enumerate(sys.argv[1:])\n    parts = arg.split('=', 1)\n    if len(parts) &lt; 2:\n        # End of options, don't translate the rest. \n        newargs.extend(sys.argv[idx+1:])\n        break\n    argname, argvalue = parts\n    newargs.extend([\"--%s\" % argname, argvalue])\n\nparser.parse_args(newargs)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Little late to the party... but PEP 389 allows for this and much more."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PEP 389", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0389/"}]}, {"text": ["Here's a little nice library should your version of Python need it code.google.com/p/argparse"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Enjoy."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You may be interested in a little Python module I wrote to make handling of command line arguments even easier (open source and free to use) - http://freshmeat.net/projects/commando"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://freshmeat.net/projects/commando", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://freshmeat.net/projects/commando"}]}]]