[[{"text": ["you can use the UserString module:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import UserString\n... s = UserString.MutableString('Python')\n... print s\nPython\n&gt;&gt;&gt; s[0] = 'c'\n&gt;&gt;&gt; print s\ncython\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The Python analog of your C:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for(int i = 0; i &lt; strlen(s); i++)\n{\n   s[i] = F(s[i]);\n}\n</code>\n</pre>\n", "senID": 1}, {"text": ["would be:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n s = \"\".join(F(c) for c in s)\n</code>\n</pre>\n", "senID": 3}, {"text": ["which is also very expressive.", "It says exactly what is happening, but in a functional style rather than a procedural style."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Don't use a string, use something mutable like bytearray:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/python\n\ns = bytearray(\"my dog has fleas\")\nfor n in xrange(len(s)):\n    s[n] = chr(s[n]).upper()\nprint s\n</code>\n</pre>\n", "senID": 1}, {"text": ["Results in:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n MY DOG HAS FLEAS\n</code>\n</pre>\n", "senID": 3}, {"text": ["Edit:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Since this is a bytearray, you aren't (necessarily) working with characters.", "You're working with bytes.", "So this works too:"], "childNum": 3, "tag": "p", "senID": 5, "childList": [{"text": "bytearray", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "characters", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "bytes", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n s = bytearray(\"\\x81\\x82\\x83\")\nfor n in xrange(len(s)):\n    s[n] = s[n] + 1\nprint repr(s)\n</code>\n</pre>\n", "senID": 6}, {"text": ["gives:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n bytearray(b'\\x82\\x83\\x84')\n</code>\n</pre>\n", "senID": 8}, {"text": ["If you want to modify characters in a Unicode string, you'd maybe want to work with memoryview, though that doesn't support Unicode directly."], "childNum": 2, "tag": "p", "senID": 9, "childList": [{"text": "memoryview", "tag": "a", "pos": 0, "childList": [{"text": "memoryview", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/stdtypes.html#memoryview-type"}, {"text": "memoryview", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["I'd say the most Pythonic way is to use map():"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "map()", "tag": "a", "pos": 0, "childList": [{"text": "map()", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/functions.html#map"}, {"text": "map()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n s = map(func, s) # func has been applied to every character in s\n</code>\n</pre>\n", "senID": 1}, {"text": ["This is the equivalent of writing:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n s = \"\".join(func(c) for c in s)\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Strings are iterable and can be walked through like lists.", "Strings also have a number of basic methods such as .replace() that might be what you're looking for.", "All string methods return a new string.", "So instead of modifying the string in place you can simply replace its existing value."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": ".replace()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; mystring = 'robot drama'\n&gt;&gt;&gt; mystring = mystring.replace('r', 'g')\n&gt;&gt;&gt; mystring\n'gobot dgama'\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; mystring = \"Th1s 1s my str1ng\"\n&gt;&gt;&gt; mystring.replace(\"1\", \"i\")\n'This is my string'\n</code>\n</pre>\n", "senID": 0}, {"text": ["If you want to store this new string you'll have to mystring = mystring.replace(\"1\", \"i\").", "This is because in Python strings are immutable."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "new", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "mystring = mystring.replace(\"1\", \"i\")", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["string.translate is probably the closest function to what you're after."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "string.translate", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Assigning a particular character to a particular index in a string is not a particularly common operation, so if you find yourself needing to do it, think about whether there may be a better way to accomplish the task.", "But if you do need to, probably the most standard way would be to convert the string to a list, make your modifications, and then convert it back to a string."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n s = 'abcdefgh'\nl = list(s)\nl[3] = 'r'\ns2 = ''.join(l)\n</code>\n</pre>\n", "senID": 1}, {"text": ["EDIT: As posted in bstpierre's answer, bytearray is probably even better for this task than list, as long as you're not working with Unicode strings."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "EDIT:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "bytearray", "childNum": 0, "tag": "code", "childList": []}, {"text": "list", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n s = 'abcdefgh'\nb = bytearray(s)\nb[3] = 'r'\ns2 = str(b)\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n def modifyIdx(s, idx, newchar):\n    return s[:idx] + newchar + s[idx+1:]\n</code>\n</pre>\n", "senID": 0}], [{"text": ["If I ever need to do something like that I just convert it to a mutable list"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For example... (though it would be easier to use sort (see second example) )"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s = \"abcdfe\"\n&gt;&gt;&gt; s = list(s)\n&gt;&gt;&gt; s[4] = \"e\"\n&gt;&gt;&gt; s[5] = \"f\"\n&gt;&gt;&gt; s = ''.join(s)\n&gt;&gt;&gt; print s\nabcdef\n&gt;&gt;&gt;\n# second example\n&gt;&gt;&gt; s.sort()\n&gt;&gt;&gt; s = ''.join(s)\n</code>\n</pre>\n", "senID": 2}], [{"text": ["You can use StringIO or cStringIO classes to receive file-like mutable interface of string. "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "StringIO", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stringio.html"}, {"href": "http://docs.python.org/library/stringio.html#module-cStringIO", "text": "cStringIO", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["Here is an example using translate to switch \"-\" with \".", "\" and uppercase \"a\"s"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from string import maketrans\n&gt;&gt;&gt; trans_table = maketrans(\".-a\",\"-.A\")\n&gt;&gt;&gt; \"foo-bar.\".translate(trans_table)\n'foo.bAr-'\n</code>\n</pre>\n", "senID": 1}, {"text": ["This is much more efficient that flipping to byte array and back if you just need to do single char replacements"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]