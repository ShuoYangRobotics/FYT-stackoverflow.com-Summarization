[[{"text": ["For the first one you can use split then a list comprehension to trim the extra whitespace:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n result = [x.strip() for x in i.split(',')]\n</code>\n</pre>\n", "senID": 1}, {"text": ["And to remove the empty strings from the list:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n result = [x for x in result if x]\n</code>\n</pre>\n", "senID": 3}], [{"text": ["To clean HTML use lxml.html"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "lxml.html", "tag": "a", "pos": 0, "childList": [{"text": "lxml.html", "tag": "strong"}], "childNum": 1, "href": "http://codespeak.net/lxml/lxmlhtml.html"}, {"text": "lxml.html", "childNum": 0, "tag": "strong", "childList": []}]}, {"code": "<pre>\n<code>\n import lxml.html\ntext = lxml.html.fromstring(\"...\")\ntext.text_content()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I am somewhat of a beginner at python web development, but for cleaning/sanitizing html I have found that the markdown2 library has some very nice features.", "You can use it with the MarkItUp!", "jQuery-based editor.", "They may not solve all your problems but might help you do a lot of work in a short time."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "markdown2", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/python-markdown2/"}, {"text": "MarkItUp!", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://markitup.jaysalvat.com/examples/markdown/"}]}], [{"text": ["1) you can use the strip method"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["2) you can use sanitize , http://wonko.com/post/sanitize"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://wonko.com/post/sanitize", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://wonko.com/post/sanitize"}]}, {"text": ["3) some unicode tips here: http://blog.trydionel.com/2010/03/23/some-unicode-tips-for-ruby/"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://blog.trydionel.com/2010/03/23/some-unicode-tips-for-ruby/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://blog.trydionel.com/2010/03/23/some-unicode-tips-for-ruby/"}]}], [{"text": ["1) [j.strip() for j in a.split(',') if j.strip()]"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "[j.strip() for j in a.split(',') if j.strip()]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["2) check tidy "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "tidy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://countergram.com/open-source/pytidylib/docs/index.html"}]}], [{"text": ["I tend to write multiple cascading generators, particularly if I want to some output to be part of a test:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n stripped_iter = (x.strip() for x in l.split(','))\nnon_empty_iter = (x for x in stripped_iter if x)\n</code>\n</pre>\n", "senID": 1}, {"text": ["The inspiration is Beazley's presentation on coroutines."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "presentation on coroutines", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.dabeaz.com/coroutines/"}]}]]