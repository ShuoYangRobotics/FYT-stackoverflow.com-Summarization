Question (ID-6039103): Counting "deepness" or the deepest level a nested list goes to A have a real problem (and a headache) with an assigment... 

 I'm in an introductory programming class, and I have to write a function that, given a list, will return the "maximum" deepness it goes to...
For example: [1,2,3] will return 1, [1,[2,3]] will return 2... 

 I've written this piece of code (it's the best I could get T_T) 

 def flat(l):
 count=0
 for item in l:
  if isinstance(item,list):
   count+= flat(item)
 return count+1
 

 However, It obviously doens't work like it should, because if there are lists that do not count for the maximum deepness, it still raises the counter... 

 For example: when I use the function with [1,2,[3,4],5,[6],7] it should return 2, but it returns 3... 

 Any ideas or help would be greatly appreciated ^^ thanks a lot!! I've been strugling with this for weeks now... 
 Answers (Total-6): #0 Here is one way to write the function 

 depth = lambda L: isinstance(L, list) and max(map(depth, L))+1
 

 I think the idea you are missing is to use max() 
 #1 easy with recursion 

 def flat(l):
 depths = []
 for item in l:
  if isinstance(item, list):
   depths.append(flat(item))
 if len(depths) &gt; 0:
  return 1 + max(depths)
 return 1
 
 #2 Let's first rephrase your requirements slightly. 

 
 The depth of a list is one more than the maximum depth of its sub-lists. 
 

 Now, this can be translated directly to code: 

 def depth(l):
 if isinstance(l, list):
  return 1 + max(depth(item) for item in l)
 else:
  return 0
 
 #3 Abusive way:
Say your list is called mylist 
 mybrackets = map(lambda x: 1 if x=='[' else -1, [x for x in str(mylist) if x=='[' or x==']']) 
maxdepth = max([sum(mybrackets[:i+1]) for i in range(len(mybrackets))]) 

 This converts your list to a list of opening and closing brackets, then finds the largest number of opening brackets that occur before the corresponding closing bracket occurs. 
 #4 Did it in one line of python :) 

 enjoy 

 def f(g,count=0): return count if not isinstance(g,list) else max([f(x,count+1) for x in g])
 
 #5 Breadth-first, without recursion, and it also works with other sequence types: 

 from collections import Sequence
from itertools import chain, count

def depth(seq):
 for level in count():
  if not seq:
   return level
  seq = list(chain.from_iterable(s for s in seq if isinstance(s, Sequence)))
 

 The same idea, but with much less memory consumption: 

 from collections import Sequence
from itertools import chain, count

def depth(seq):
 seq = iter(seq)
 try:
  for level in count():
   seq = chain([next(seq)], seq)
   seq = chain.from_iterable(s for s in seq if isinstance(s, Sequence))
 except StopIteration:
  return level