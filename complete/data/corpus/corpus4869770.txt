Question (ID-4869770): Why does Python assignment not return a value? Why is Python assignment a statement rather than an expression? If it was an expression which returns the value of the right hand side in the assignment, it would have allowed for much less verbose code in some cases. Are there any issues I can't see? 

 For example: 

 # lst is some sequence
# X is come class
x = X()
lst.append(x)
 

 could have been rewritten as: 

 # incorrect: append is an assignment to a slice, so has no value
lst.append(x = X())
 
 Answers (Total-6): #0 There are many who feel that having assignments be expressions, especially in languages like Python where any value is allowable in a condition (not just values of some boolean type), is error-prone. Presumably Guido is/was among those who feel that way. The classic error is: 

 if x = y: # oops! meant to say ==
 

 The situation is also a bit more complicated in Python than it is in a language like C, since in Python the first assignment to a variable is also its declaration. For example: 

 def f():
 print x

def g():
 x = h()
 print x
 

 In these two functions the " print x " lines do different things: one refers to the global variable x , and the other refers to the local variable x . The x in g is local because of the assignment. This could be even more confusing (than it already is) if it was possible to bury the assignment inside some larger expression/statement. 
 #1 I believe this was deliberate on Guido's part in order to prevent certain classic errors. E.g. 

 if x = 3: print x 

 when you actually meant to say 

 if x == 3: ... 

 I do agree there are times I wished it would work, but I also miss { and } around a block of code, and that sure isn't going to change. 
 #2 The real-world answer: it's not needed. 

 Most of the cases you see this in C are because of the fact that error handling is done manually: 

 if((fd = open("file", O_RDONLY)) == -1)
{
 // error handling
}
 

 Similarly for the way many loops are written: 

 while(i++ &lt; 10)
 ;
 

 These common cases are done differently in Python. Error handling typically uses exception handling; loops typically use iterators. 

 The arguments against it aren't necessarily earth-shattering, but they're weighed against the fact that it simply isn't that important in Python. 
 #3 I actually like this behavior. I don't like code that produces a value AND has side effects. It should be one or the other, or it can get really confusing, really fast. 
 #4 
 it would have allowed for much less
 verbose code in some cases 
 

 That's the point 
 #5 
 Python's syntax is much less verbose than C's syntax. 
 It has much more sophisticated scope rules than C. 
 To use parentheses in every single expression reduces the code readability and python avoids that. 
 

 If assigments were expressions, these and many other features would have to be re-worked. For me it is like a deal you have to make in order to have such readable code and useful features.
In order to have 

 if a and (h not in b): ...
 

 rather than 

 if (a &amp;&amp; !(h in b)) { ... }
 

 [not talking about the classic (if a = b:) kind of error.]