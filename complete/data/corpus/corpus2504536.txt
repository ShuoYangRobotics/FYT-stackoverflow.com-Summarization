Question (ID-2504536): Why allow concatenation of string literals? I was recently bitten by a subtle bug. 

 char ** int2str = {
 "zero", // 0
 "one", // 1
 "two" // 2
 "three",// 3
 nullptr };

assert( int2str[1] == std::string("one") ); // passes
assert( int2str[2] == std::string("two") ); // fails
 

 If you have godlike code review powers you'll notice I forgot the , after "two" . 

 After the considerable effort to find that bug I've got to ask why would anyone ever want this behavior? 

 I can see how this might be useful for macro magic, but then why is this a "feature" in a modern language like python? 

 Have you ever used string literal concatenation in production code? 
 Answers (Total-8): #0 Sure, it's the easy way to make your code look good: 

 char *someGlobalString = "very long "
       "so broken "
       "onto multiple "
       "lines";
 

 The best reason, though, is for weird printf formats, like type forcing: 

 uint64_t num = 5;
printf("Here is a number: %"PRIX64", what do you think of that?", num);
 

 There are a bunch of those defined, and they can come in handy if you have type size requirements. Check them all out at this link . A few examples: 

 PRIo8 PRIoLEAST16 PRIoFAST32 PRIoMAX PRIoPTR
 
 #1 It's a great feature that allows you to combine preprocessor strings with your strings. 

 // Here we define the correct printf modifier for time_t
#ifdef TIME_T_LONG
 #define TIME_T_MOD "l"
#elif defined(TIME_T_LONG_LONG)
 #define TIME_T_MOD "ll"
#else
 #define TIME_T_MOD ""
#endif

// And he we merge the modifier into the rest of our format string
printf("time is %" TIME_T_MOD "u\n", time(0));
 
 #2 Cases where this can be useful: 

 
 Generating strings including components defined by the preprocessor (this is perhaps the largest use case in C, and it's one I see very, very frequently). 
 Splitting string constants over multiple lines 
 

 To provide a more concrete example for the former: 

 // in version.h
#define MYPROG_NAME "FOO"
#define MYPROG_VERSION "0.1.2"

// in main.c
puts("Welcome to " MYPROG_NAME " version " MYPROG_VERSION ".");
 
 #3 From the python lexical analysis reference, section 2.4.2: 

 
 This feature can be used to reduce the
 number of backslashes needed, to split
 long strings conveniently across long
 lines, or even to add comments to
 parts of strings 
 

 http://docs.python.org/reference/lexical_analysis.html 
 #4 So that you can split long string literals across lines. 

 And yes, I've seen it in production code. 
 #5 I'm not sure about other programming languages, but for example C# doesn't allow you to do this (and I think this is a good thing). As far as I can tell, most of the examples that show why this is useful in C++ would still work if you could use some special operator for string concatenation: 

 string someGlobalString = "very long " +
       "so broken " +
       "onto multiple " +
       "lines"; 
 

 This may not be as comfortable, but it is certainly safer. In your motivating example, the code would be invalid unless you added either , to separate elements or + to concatenate strings... 
 #6 I certainly have in both C and C++. Offhand, I don't see much relationship between its utility and how "modern" the language is. 
 #7 While people have taken the words out of my mouth about the practical uses of the feature, nobody has so far tried to defend the choice of syntax. 

 For all I know, the typo that can slip through as a result was probably just overlooked. After all, it seems robustness against typos wasn't at the front of Dennis's mind, as shown further by: 

 if (a = b);
{
 printf("%d", a);
}
 

 Furthermore, there's the possible view that it wasn't worth using up an extra symbol for concatenation of string literals - after all, there isn't much else that can be done with two of them, and having a symbol there might create temptation to try to use it for runtime string concatenation, which is above the level of C's built-in features. 

 Some modern, higher-level languages based on C syntax have discarded this notation presumably because it is typo-prone. But these languages have an operator for string concatenation, such as + (JS, C#), . (Perl, PHP), ~ (D, though this has also kept C's juxtaposition syntax), and constant folding (in compiled languages, anyway) means that there is no runtime performance overhead.