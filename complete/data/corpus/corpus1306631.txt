Question (ID-1306631): Python: Add list to set? Tested on Python 2.6 interpreter: 

 &gt;&gt;&gt; a=set('abcde')
&gt;&gt;&gt; a
set(['a', 'c', 'b', 'e', 'd'])
&gt;&gt;&gt; l=['f','g']
&gt;&gt;&gt; l
['f', 'g']
&gt;&gt;&gt; a.add(l)
Traceback (most recent call last):
 File "&lt;pyshell#35&gt;", line 1, in &lt;module&gt;
 a.add(l)
TypeError: list objects are unhashable
 

 I think that I can't add the list to the set because there's no way Python can tell If I have added the same list twice. Is there a workaround? 

 EDIT: I want to add the list itself, not its elements. 
 Answers (Total-7): #0 You can't add a list to a set because lists are mutable, meaning that you can change the contents of the list after adding it to the set. 

 You can however add tuples to the set, because you cannot change the contents of a tuple: 

 &gt;&gt;&gt; a.add(('f', 'g'))
&gt;&gt;&gt; print a
set(['a', 'c', 'b', 'e', 'd', ('f', 'g')])
 

 

 Edit : some explanation: The documentation defines a set as an unordered collection of distinct hashable objects. The objects have to be hashable so that finding, adding and removing elements can be done faster than looking at each individual element every time you perform these operations. The specific algorithms used are explained in the Wikipedia article . Pythons hashing algorithms are explained on effbot.org and pythons __hash__ function in the python reference . 

 Some facts: 

 
 Set elements as well as dictionary keys have to be hashable 
 Some unhashable datatypes:
 
 list : use tuple instead 
 set : use frozenset instead 
 dict : has no official counterpart, but there are some 
 recipes 
 
 Object instances are hashable by default with each instance having a unique hash. You can override this behavior as explained in the python reference. 
 
 #1 &gt;&gt;&gt; a=set('abcde')
&gt;&gt;&gt; l=['f','g']
&gt;&gt;&gt; a|=set(l)
&gt;&gt;&gt; a
set(['a', 'c', 'b', 'e', 'd', 'g', 'f'])
 

 The union operator is much faster than add anyway. 

 edit: If you want the list itself and not its members, then you must use a tuple, unfortunately. Set members must be hashable. 
 #2 list objects are unhashable . you might want to turn them in to tuples though. 
 #3 You want to add a tuple, not a list: 

 &gt;&gt;&gt; a=set('abcde')
&gt;&gt;&gt; a
set(['a', 'c', 'b', 'e', 'd'])
&gt;&gt;&gt; l=['f','g']
&gt;&gt;&gt; l
['f', 'g']
&gt;&gt;&gt; t = tuple(l)
&gt;&gt;&gt; t
('f', 'g')
&gt;&gt;&gt; a.add(t)
&gt;&gt;&gt; a
set(['a', 'c', 'b', 'e', 'd', ('f', 'g')])
 

 If you have a list, you can convert to the tuple, as shown above. A tuple is immutable, so it can be added to the set. 
 #4 Sets can't have mutable (changeable) elements/members. A list, being mutable, cannot be a member of a set. 

 As sets are mutable, you cannot have a set of sets!
You can have a set of frozensets though. 

 (The same kind of "mutability requirement" applies to the keys of a dict.) 

 Other answers have already given you code, I hope this gives a bit of insight.
I'm hoping Alex Martelli will answer with even more details. 
 #5 You'll want to use tuples, which are hashable (you can't hash a mutable object like a list). 

 &gt;&gt;&gt; a = set("abcde")
&gt;&gt;&gt; a
set(['a', 'c', 'b', 'e', 'd'])
&gt;&gt;&gt; t = ('f', 'g')
&gt;&gt;&gt; a.add(t)
&gt;&gt;&gt; a
set(['a', 'c', 'b', 'e', 'd', ('f', 'g')])
 
 #6 I found I needed to do something similar today. The algorithm knew when it was creating a new list that needed to added to the set, but not when it would have finished operating on the list. 

 Anyway, the behaviour I wanted was for set to use id rather than hash . As such I found mydict[id(mylist)] = mylist instead of myset.add(mylist) to offer the behaviour I wanted.