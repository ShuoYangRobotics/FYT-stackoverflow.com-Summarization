Question (ID-8843640): Python - Searching Dictionary Sample data: 

 {
 10116079620: {'ip.dst': ['10.1.1.5'], 'ip.src': ['1.2.3.4'], 'category': ['Misc']}, 
 10116882439: {'ip.dst': ['1.2.3.4'], 'ip.src': ['10.1.1.5'], 'category': ['Misc']}, 
 10116080136: {'ip.dst': ['10.10.10.99'], 'ip.src': ['1.2.3.4'], 'category': ['Misc']}, 
 10116884490: {'ip.dst': ['10.10.10.99'], 'ip.src': ['2.3.4.5'], 'alias': ['www.example.com'], 'category': ['Misc']}, 
 10117039635: {'ip.dst': ['2.3.4.5'], 'ip.src': ['10.11.11.50'], 'alias': ['google.com'], 'category': ['Misc']}, 
 10118099993: {'ip.dst': ['1.2.3.4'], 'ip.src': ['10.11.11.49'], 'alias': ['www.google.com'], 'category': ['Misc']},
 10118083243: {'ip.dst': ['10.11.11.49'], 'ip.src': ['4.3.2.1'], 'alias': ['www.google.com'], 'category': ['Misc']}}
}
 

 Goal: 

 My goal is to search the sample dictionary with a value (IP address) that is known to exist though it is not known if it will appear in ip.dst or ip.src. Once found I want to write the "opposite" (other) IP address to a new list... if the searched address was found in ip.src I want to capture ip.dst and vice versa. 

 A searched address can be found more than once - the resulting list does not need to reflect duplicates. 

 If 1.2.3.4 is searched then the following would be captured: 
* 10.1.1.5 
* 10.10.10.99 
* 10.11.11.49 

 Searching on 10.10.10.99 would capture: 
* 1.2.3.4 
* 2.3.4.5 

 This I'm sure is simple yet I am stuck with nasty, nested loops and need a concise routine clearer than my mud. 

 Your assistance is appreciated. 

 Thanks. 
 Answers (Total-6): #0 Step 1. Invert the dictionary. 

 dst= collections.defaultdict( list )
src= collections.defaultdict( list )
for k in original:
 for addr in original[k]['ip.dst']:
  dst[addr].append( k )
 for addr in original[k]['ip.src']:
  src[addr].append( k )
 

 Step 2. Don't search, just get the value. 

 You do two nearly instant checks into dst[addr] and src[addr] and you know all the keys in the original dictionary where it occurred. 

 Inverting the dictionary takes time. 

 Building better dictionaries in the first place (i.e., indexed by ip.dst and ip.src) saves the cost of inverting the dictionary you already have. 
 #1 Just for fun, here's how you can do it in a one-liner comprehension! 

 set([v['ip.dst'][0] for v in my_dict.values() if v['ip.src'] == [search_ip]] + [v['ip.src'][0] for v in my_dict.values() if v['ip.dst'] == [search_ip]])
 

 Output: 

 &gt;&gt;&gt;search_ip = '1.2.3.4'
&gt;&gt;&gt;my_dict = {10116079620: {'ip.dst': ['10.1.1.5'], 'ip.src': ['1.2.3.4'], 'category': ['Misc']}, 10116882439: {'ip.dst': ['1.2.3.4'], 'ip.src': ['10.1.1.5'], 'category': ['Misc']}, 10116080136: {'ip.dst': ['10.10.10.99'], 'ip.src': ['1.2.3.4'], 'category': ['Misc']}, 10116884490: {'ip.dst': ['10.10.10.99'], 'ip.src': ['2.3.4.5'], 'alias': ['www.example.com'], 'category': ['Misc']}, 10117039635: {'ip.dst': ['2.3.4.5'], 'ip.src': ['10.11.11.50'], 'alias': ['google.com'], 'category': ['Misc']}, 10118099993: {'ip.dst': ['1.2.3.4'], 'ip.src': ['10.11.11.49'], 'alias': ['www.google.com'], 'category': ['Misc']}, 10118083243: {'ip.dst': ['10.11.11.49'], 'ip.src': ['4.3.2.1'], 'alias': ['www.google.com'], 'category': ['Misc']}}
&gt;&gt;&gt;set([v['ip.dst'][0] for v in my_dict.values() if v['ip.src'] == [search_ip]] + [v['ip.src'][0] for v in my_dict.values() if v['ip.dst'] == [search_ip]])
set(['10.1.1.5', '10.10.10.99', '10.11.11.49'])

&gt;&gt;&gt;search_ip = '10.10.10.99'
&gt;&gt;&gt;set([v['ip.dst'][0] for v in my_dict.values() if v['ip.src'] == [search_ip]] + [v['ip.src'][0] for v in my_dict.values() if v['ip.dst'] == [search_ip]])
set(['1.2.3.4', '2.3.4.5'])
 
 #2 I built on S.Lott's answer with some differences. I used sets to remove duplicates, and I kept the search indices together to better match the answers you suggested you wanted. 

 import collections

# data = your example data dictionary

index = collections.defaultdict(set)
for key in data:
 datum = data[key]
 for ip in datum['ip.dst']:
  index[ip].update(datum['ip.src'])
 for ip in datum['ip.src']:
  index[ip].update(datum['ip.dst'])

print index['1.2.3.4']
print index['10.10.10.99']
 

 returns: 

 set(['10.10.10.99', '10.1.1.5', '10.11.11.49'])
set(['1.2.3.4', '2.3.4.5'])
 
 #3 Here's a list comprehension where data is your dictionary and ip is what you are searching for: 

 set(ips[ips[0]==ip] for ips in ((v['ip.dst'][0],v['ip.src'][0]) for v in data.itervalues()) if ip in ips) 
 #4 from functools import partial

def search_row(results, ip, row):
 if row['ip.dst'][0] == ip:
  results.add(row['ip.src'][0])
 if row['ip.src'][0] == ip:
  results.add(row['ip.dst'][0])

def search(ip, data):
 results = set()
 aggregator = partial(search_row, results, ip)
 map(aggregator, data.values()) 
 return results

print search('1.2.3.4', data)

print search('10.10.10.99', data)
 
 #5 Without any libraries (But S.Lott solution is shorter,better and I loved it lol): 

 x={
 10116079620: {'ip.dst': ['10.1.1.5'], 'ip.src': ['1.2.3.4'], 'category': ['Misc']}, 
 10116882439: {'ip.dst': ['1.2.3.4'], 'ip.src': ['10.1.1.5'], 'category': ['Misc']}, 
 10116080136: {'ip.dst': ['10.10.10.99'], 'ip.src': ['1.2.3.4'], 'category': ['Misc']}, 
 10116884490: {'ip.dst': ['10.10.10.99'], 'ip.src': ['2.3.4.5'], 'alias': ['www.example.com'], 'category': ['Misc']}, 
 10117039635: {'ip.dst': ['2.3.4.5'], 'ip.src': ['10.11.11.50'], 'alias': ['google.com'], 'category': ['Misc']}, 
 10118099993: {'ip.dst': ['1.2.3.4'], 'ip.src': ['10.11.11.49'], 'alias': ['www.google.com'], 'category': ['Misc']},
 10118083243: {'ip.dst': ['10.11.11.49'], 'ip.src': ['4.3.2.1'], 'alias': ['www.google.com'], 'category': ['Misc']}
}

y=[(i['ip.dst'],i['ip.src']) for i in x.values()]

a,b=zip(*y)

#Looking for
lf=['1.2.3.4']
ips=[]


i=0
for ipsrc in a:
 if ipsrc == lf:
  ips.append(b[i])
 i+=1

i=0
for ipdst in b:
 if ipdst == lf:
  ips.append(a[i])
 i+=1

ips=set(ips)
print(ips)