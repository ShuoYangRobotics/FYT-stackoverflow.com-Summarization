Question (ID-8344917): modify a dictionary I need to modify a dictionary. I have a dictionary with interger values and want to replace each value with the fraction of the total of all values, eg.:
 census={a:4, b:1, c:3}; turnIntoFractions(census) , should then print {a:0.5, b:0,125 ,c:0,375 } 

 I was thinking something like: 

 def turnIntoFractions:
 L=d.keys()
 total=sum(L)
 F=[]
 for count in L:
  f.append(float(count/float(total))
 return F
 

 I'm kind of stuck, and it isn't working.. 
 Answers (Total-6): #0 You can use dictionary comprehension. 

 def turnIntoFractions(d):
 total = float(sum(d.values()))
 return {key:(value/total) for key,value in d.items()}
 
 #1 Your first problem is that you are doing the sum of the keys, not the values: 

 total = sum(d.values())
 

 Now, you can just modify the dictionary inline, instead of putting it into a new list: 

 for key in d.keys():
 d[key] /= total # or d[key] = d[key] / total
 

 My previous code goes through each key, retrieves the value, then divides by total, and then finally stores it back into d[key] . 

 

 If you want a new dictionary returned, instead of just modifying the existing one, you can just start out with e = d.copy() , then use e instead. 
 #2 You seem to want to edit the dict in place, but your code returns a new object, which is actually better practice. 

 def turnIntoFractions(mydict):
 values=d.values()
 total=float(sum(values))
 result = {}
 for key, val in mydict.items():
  result[key] = val/total
 return result
 
 #3 Use dictionary comprehension 

 sum = float(sum(census.itervalues()))

newDict = {k : (v / sum) for k,v in census.iteritems()}
 

 for python 2.6: 

 newDict = dict((k,v /sum) for (k,v) in census.iteritems())
 
 #4 def turnIntoFractions(mydict):
 total = sum(mydict.values())
 for key in mydict:
 mydict[key] = float(mydict[key]) / total
 
 #5 your code has the right idea, but also a few small mistakes.
here's a working code: 

 def turnIntoFractions(d):
 L=d.values()
 total=sum(L)
 f=[]
 for count in L:
  f.append(float(count/float(total)))
 return f

census={'a':4, 'b':1, 'c':3}

print(turnIntoFractions(census))
 

 note that python is case sensitive so f is not the same as F, and also keys that are strings need to be quoted