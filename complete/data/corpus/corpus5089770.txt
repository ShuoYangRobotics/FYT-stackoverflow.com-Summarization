Question (ID-5089770): applying a filter on a string in python I have a user typing in his username and I only want valid strings to pass through, meaning only characters in [a-zA-Z0-9]. I am pretty new to python and unsure of the syntax. 

 Here's an example of what I want in code, which is to check through the username and return false upon a illegal character.: 

 def _checkInput(input):
  for char in input:
   if !(char in [a-zA-Z0-9]):
    return False
  return True
 

 Thanks! 
 Answers (Total-7): #0 There is a method in string called isalnum . It does what you are trying to achieve. 

 In [7]: 'ab123fd'.isalnum()
Out[7]: True

In [8]: 'ab123fd **'.isalnum()
Out[8]: False
 
 #1 You need isalnum : 

 &gt;&gt;&gt; name = raw_input('Enter your name: ')
Enter your name: foo_bar
&gt;&gt;&gt; name.isalnum()
False
&gt;&gt;&gt; name = raw_input('Enter your name: ')
Enter your name: foobar
&gt;&gt;&gt; name.isalnum()
True
 
 #2 Python strings have lots of useful methods for doing this sort of check, such as: 

 
 str.isalnum() 
 str.isalpha() 
 str.isdigit() 
 str.islower() 
 str.istitle() 
 str.isupper() 
 

 What you need is str.isalnum() which returns true if all characters in the string are alphanumeric and there is at least one character. 

 &gt;&gt;&gt; 'hello1'.isalnum()
True
&gt;&gt;&gt; 'hello 1'.isalnum()
False
&gt;&gt;&gt; 'hello!'.isalnum()
False
&gt;&gt;&gt; ''.isalnum()
False
 

 As the example above shows, letters and numbers are considered alphanumeric, but spaces and punctuation marks are not. 

 Also note that contrary to what would be mathematically pure, the empty string is not considered alphanumeric. However in most cases this actually what you need and certainly what you need in your case, as a user name of length zero does not make much sense. 
 #3 That's very close to being Python: 

 def _checkInput(input):
  for c in input:
   if not (c in string.ascii_letters or c in string.digits):
    return False
  return True
 

 This can also be solved with regular expressions, but the above is perhaps clearer and less complex. 
 #4 You can easily check input strings using regular expressions : 

 &gt;&gt;&gt; import re
&gt;&gt;&gt; s = getinput()
&gt;&gt;&gt; if not re.match(r'^[a-zA-Z0-9]+$', s)
...  print "bad input"
 

 Use * instead of + if the empty string is valid input too. 

 Using isalnum , as suggested in other answers, is a nice approach too, but with regular expressions you can easily adjust your check in case the requirements for input get more complex. 
 #5 One way to achieve this is to use the regular expression module of Python. It is a standard library. 

 import re

_pmatcher = re.compile(r'[0-9a-zA-Z]*$')
def _checkInput(input):
 return _pmatcher.match(input)
 

 The r in front of the string is not a typo, it is to treat the string as raw, which you may want rather than typing escape characters. 

 You can refer to this Python 2.7 Documents (or your chosen version of Python) 
 #6 You may need in the future to verify that all the characters of a string are present in a particular list. 

 Without regex, it is possible like that: 

 ch = 'becdi30!&amp;'

okchars = 'abcdefghijk012345,;:!&amp;-'

print all(c in okchars for c in ch)
 

 result 

 True