Question (ID-357997): Does Python have something like anonymous inner classes of Java? In Java you can define a new class inline using anonymous inner classes. This is useful when you need to rewrite only a single method of the class. 

 Suppose that you want create a subclass of OptionParser that overrides only a single method (for example exit() ). In Java you can write something like this: 

 new OptionParser () {

 public void exit() {
  // body of the method
 }
};
 

 This piece of code creates a anonymous class that extends OptionParser and override only the exit() method. 

 There is a similar idiom in Python? Which idiom is used in these circumstances? 
 Answers (Total-8): #0 Java uses anonymous classes mostly to imitate closures or simply code blocks. Since in Python you can easily pass around methods there's no need for a construct as clunky as anonymous inner classes: 

 def printStuff():
 print "hello"

def doit(what):
 what()

doit(printStuff)
 

 Edit: I'm aware that this is not what is needed in this special case. I just described the most common python solution to the problem most commonly by anonymous inner classes in Java. 
 #1 You can accomplish this in three ways: 

 
 Proper subclass (of course) 
 a custom method that you invoke with the object as an argument 
 (what you probably want) -- adding a new method to an object (or replacing an existing one). 
 

 Example of option 3 (edited to remove use of "new" module -- It's deprecated, I did not know ): 

 import types
class someclass(object):
 val = "Value"
 def some_method(self):
  print self.val

def some_method_upper(self):
 print self.val.upper()

obj = someclass()
obj.some_method()

obj.some_method = types.MethodType(some_method_upper, obj)
obj.some_method()
 
 #2 Well, classes are first class objects, so you can create them in methods if you want. e.g. 

 from optparse import OptionParser
def make_custom_op(i):
 class MyOP(OptionParser):
 def exit(self):
  print 'custom exit called', i
 return MyOP

custom_op_class = make_custom_op(3)
custom_op = custom_op_class()

custom_op.exit()   # prints 'custom exit called 3'
dir(custom_op)   # shows all the regular attributes of an OptionParser
 

 But, really, why not just define the class at the normal level? If you need to customise it, put the customisation in as arguments to __init__ . 

 (edit: fixed typing errors in code) 
 #3 Python doesn't support this directly (anonymous classes) but because of its terse syntax it isn't really necessary: 

 class MyOptionParser(OptionParser):
 def exit(self, status=0, msg=None):
  # body of method

p = MyOptionParser()
 

 The only downside is you add MyOptionParser to your namespace, but as John Fouhy pointed out, you can hide that inside a function if you are going to do it multiple times. 
 #4 Python probably has better ways to solve your problem. If you could provide more specific details of what you want to do it would help. 

 For example, if you need to change the method being called in a specific point in code, you can do this by passing the function as a parameter (functions are first class objects in python, you can pass them to functions, etc). You can also create anonymous lambda functions (but they're restricted to a single expression). 

 Also, since python is very dynamic, you can change methods of an object after it's been created object.method1 = alternative_impl1 , although it's actually a bit more complicated, see gnud's answer 
 #5 You can use the type(name, bases, dict) builtin function to create classes on the fly. For example: 

 op = type("MyOptionParser", (OptionParser,object), {"foo": lambda self: "foo" })
op().foo()
 

 Since OptionParser isn't a new-style class, you have to explicitly include object in the list of base classes. 
 #6 In python you have anonymous functions, declared using lambda statement. I do not like them very much - they are not so readable, and have limited functionality. 

 However, what you are talking about may be implemented in python with a completely different approach: 

 class a(object):
 def meth_a(self):
 print "a"

def meth_b(obj):
 print "b"

b = a()
b.__class__.meth_a = meth_b
 
 #7 You can always hide class by variables: 

 class var(...):
  pass
 var = var()
 

 instead of 

 var = new ...() {};