Question (ID-5542257): Python: Splitting a string into words, saving separators I have a string: 

 'Specified, if char, else 10 (default).'
 

 I want to split it into two tuples 

 words=('Specified', 'if', 'char', 'else', '10', 'default')

separators=(',', ' ', ',', ' ', ' (', ').')
 

 Does anyone have a quick solution of this? 

 PS: this symbol '-' is a word separator, not part of the word 
 Answers (Total-6): #0 import re
line = 'Specified, if char, else 10 (default).'
words = re.split(r'\)?[, .]\(?', line)
# words = ['Specified', '', 'if', 'char', '', 'else', '10', 'default', '']
separators = re.findall(r'\)?[, .]\(?', line)
# separators = [',', ' ', ' ', ',', ' ', ' ', ' (', ').']
 

 If you really want tuples pass the results in tuple() , if you do not want words to have the empty entries (from between the commas and spaces), use the following: 

 words = [x for x in re.split(r'\)?[, .]\(?', line) if x]
 

 or 

 words = tuple(x for x in re.split(r'\)?[, .]\(?', line) if x)
 
 #1 You can use regex for that. 

 &gt;&gt;&gt; a='Specified, if char, else 10 (default).'
&gt;&gt;&gt; from re import split
&gt;&gt;&gt; split(",? ?\(?\)?\.?",a)
['Specified', 'if', 'char', 'else', '10', 'default', '']
 

 But in this solution you should write that pattern yourself. If you want to use that tuple, you should convert it contents to regex pattern for that in this solution. 
 #2 Regex to find all separators (assumed anything that's not alpha numeric 

 import re
re.findall('[^\w]', string)
 
 #3 I probably would first .split() on spaces into a list, then iterate through the list, using a regex to check for a character after the word boundary. 

 import re
s = 'Specified, if char, else 10 (default).'
w = s.split()
seperators = []
finalwords = []
for word in words:
 match = re.search(r'(\w+)\b(.*)', word)
 sep = '' if match is None else match.group(2)
 finalwords.append(match.group(1))
 seperators.append(sep)
 
 #4 In pass to get both separators and words you could use findall as follows: 

 import re
line = 'Specified, if char, else 10 (default).'
words = []
seps = []
for w,s in re.findall("(\w*)([), .(]+)", line):
 words.append(w)
 seps.append(s)
 
 #5 Here's my crack at it: 

 &gt;&gt;&gt; p = re.compile(r'(\)? *[,.]? *\(?)')
&gt;&gt;&gt; tmp = p.split('Specified, char, else 10 (default).')
&gt;&gt;&gt; words = tmp[::2]
&gt;&gt;&gt; separators = tmp[1::2]
&gt;&gt;&gt; print words
['Specified', 'char', 'else', '10', 'default', '']
&gt;&gt;&gt; print separators
[', ', ', ', ' ', ' (', ').']
 

 The only problem is you can have a '' at the end or the beginning of words if there is a separator at the beginning/end of the sentence without anything before/after it. However, that is easily checked for and eliminated.