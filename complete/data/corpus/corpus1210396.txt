Question (ID-1210396): How do I iterate over the tuples of the items of two or more lists in Python? Specifically, I have two lists of strings that I'd like to combine into a string where each line is the next two strings from the lists, separated by spaces: 

 a = ['foo1', 'foo2', 'foo3']
b = ['bar1', 'bar2', 'bar3']
 

 I want a function combine_to_lines() that would return: 

 """foo1 bar1
foo2 bar2
foo3 bar3"""
 

 I admit I've already solved this problem, so I'm going to post the answer. But perhaps someone else has a better one or sees a flaw in mine. 

 Update : I over-simplified my example above. In my real-world problem the lines were formatted in a more complicated manner that required the tuples returned from zip() to be unpacked. But kudos to mhawke for coming up to the simplest solution to this example. 
 Answers (Total-7): #0 It's not necessary to unpack and repack the tuples returned by zip: 

 '\n'.join(' '.join(x) for x in zip(a, b))
 
 #1 &gt;&gt;&gt; a = ['foo1', 'foo2', 'foo3']
&gt;&gt;&gt; b = ['bar1', 'bar2', 'bar3']
&gt;&gt;&gt; for i in zip(a,b):
... print ' '.join(i)
...
foo1 bar1
foo2 bar2
foo3 bar3
 
 #2 The zip function "returns a list of tuples, where the i-th tuple contains the i-th element from each of the argument sequences or iterables." 

 def combine_to_lines(list1, list2):
 return '\n'.join([' '.join((a, b)) for a, b in zip(list1, list2)])
 
 #3 Are you asking about the zip function? 
 #4 Here's a one-liner. Could do x + ' ' + y if you were so inclined, not sure if it would be slower or not. 

 &gt;&gt;&gt; a = ['foo1', 'foo2' , 'foo3']
&gt;&gt;&gt; b = ['bar1', 'bar2', 'bar3']
&gt;&gt;&gt; '\n'.join(' '.join([x,y]) for (x,y) in zip(a,b))
'foo1 bar1\nfoo2 bar2\nfoo3 bar3'
&gt;&gt;&gt; print _
foo1 bar1
foo2 bar2
foo3 bar3
 
 #5 '\n'.join(((str(x) + ' ' + str(y)) for (x, y) in zip(a, b)))
 
 #6 Simple as: 

 " ".join([a[x] + " " + b[x] for x in range(len(a))])