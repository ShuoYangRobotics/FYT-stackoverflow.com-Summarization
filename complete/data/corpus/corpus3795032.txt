Question (ID-3795032): Finding a Value within a Range in a List of Tuple Values in Python I'm trying to get the Body Mass Index (BMI) classification for a BMI value that falls within a standard BMI range - for instance, if someone's BMI were 26.2, they'd be in the "Overweight" range. 

 I made a list of tuples of the values (see below), although of course I'm open to any other data structure. This would be easy to do with SQL's BETWEEN but I'd like to do it in pure Python, mostly because it means one fewer DB connections but also as an exercise in doing more in "pure" Python. 

 bmi_ranges = []
bmi_ranges.append((u'Underweight', u'Severe Thinness', 0, 15.99))
bmi_ranges.append((u'Underweight', u'Moderate Thinness', 16.00, 16.99))
bmi_ranges.append((u'Underweight', u'Mild Thinness', 17.00, 18.49))
bmi_ranges.append((u'Normal Range', u'Normal Range', 18.50, 24.99))
bmi_ranges.append((u'Overweight', u'Overweight', 25.00, 29.99))
bmi_ranges.append((u'Obese', u'Obese Class I', 30.00, 34.99))
bmi_ranges.append((u'Obese', u'Obese Class II', 35.00, 39.99))
bmi_ranges.append((u'Obese', u'Obese Class III', 40.00, 1000.00))
 

 If a range is exactly in the list of tuples it's easy enough to just iterate through with a listcomp, but how do I find that a value is within the range of any of the other values? 
 Answers (Total-7): #0 # bmi = &lt;whatever&gt;
found_bmi_range = [bmi_range for bmi_range
     in bmi_ranges
     if bmi_ranges[2] &lt;= bmi &lt;= bmi_ranges[3]
     ][0]
 

 You can add if clauses to list comprehensions that filter what items are included in the result. 

 Note: you may want to adjust your range specifications to use a non-inclusive upper bound (i.e. [a,b) + [b,c) + [c,d) et cetera), and then change the conditional to a &lt;= b &lt; c , that way you don't have issues with edge cases. 
 #1 You can do this with a list comprehension: 

 &gt;&gt;&gt; result = [r for r in bmi_ranges if r[2] &lt;= 32 &lt;= r[3]]
&gt;&gt;&gt; print result
[(u'Obese', u'Obese Class I', 30.0, 34.99)]
 

 However it would probably be faster to request the database to do this for you as otherwise you are requesting more data than you need. I don't understand how using a BETWEEN requires using one more data connection. If you could expand on that it would be useful. Are you talking about the pros and cons of caching data versus always asking for live data? 

 You may also want to create a class for your data so that you don't have to refer to fields as x[2], but instead can use more meaningful names. You could also look at namedtuples. 
 #2 I'm not sure if I understand why you can't do this just by iterating over the list (I know there are more efficient datastructures, but this is very short and iteration would be more understandable). What's wrong with 

 def check_bmi(bmi, bmi_range):
 for cls, name, a, b in bmi_range:
  if a &lt;= bmi &lt;= b:
   return cls # or name or whatever you need.
 
 #3  
bmi = 26.2 

 bmi_ranges = []
bmi_ranges.append((u'Underweight', u'Severe Thinness', 0, 15.99))
bmi_ranges.append((u'Underweight', u'Moderate Thinness', 16.00, 16.99))
bmi_ranges.append((u'Underweight', u'Mild Thinness', 17.00, 18.49))
bmi_ranges.append((u'Normal Range', u'Normal Range', 18.50, 24.99))
bmi_ranges.append((u'Overweight', u'Overweight', 25.00, 29.99))
bmi_ranges.append((u'Obese', u'Obese Class I', 30.00, 34.99))
bmi_ranges.append((u'Obese', u'Obese Class II', 35.00, 39.99))
bmi_ranges.append((u'Obese', u'Obese Class III', 40.00, 1000.00)) 

 print filter(lambda x: x[2] &lt;= bmi &lt;= x[3], bmi_ranges)
 
 #4 The builtin filter function exists for this purpose: 

 bmi = 26.2
answer = filter(lambda T, : T[2]&lt;=bmi&lt;=T[3], bmi_ranges)[0]
print answer
&gt;&gt;&gt; (u'Overweight', u'Overweight', 25.0, 29.989999999999998)
 

 Hope this helps 
 #5 This is how I would deal with it: 

 import random

bmi_ranges = [(u'Underweight', u'Severe Thinness', 16.0),
    (u'Underweight', u'Moderate Thinness', 17.0),
    (u'Underweight', u'Mild Thinness', 18.5),
    (u'Normal Range', u'Normal Range', 25.0),
    (u'Overweight', u'Overweight', 30.0),
    (u'Obese', u'Obese Class I', 35.0),
    (u'Obese', u'Obese Class II', 40.0),
    (u'Obese', u'Obese Class III', 1000.0)]

def bmi_lookup(bmi_value):
 return next((classification, description, lessthan)
   for classification, description, lessthan in bmi_ranges
   if bmi_value &lt; lessthan)

for bmi in range(20):
 random_bmi = random.random()*50
 print random_bmi, bmi_lookup(random_bmi)
 
 #6 If you like a lighter original data structure and one import from standard library: 

 import bisect

bmi_ranges = []
bmi_ranges.append((u'Underweight', u'Severe Thinness', 0, 15.99))
bmi_ranges.append((u'Underweight', u'Moderate Thinness', 16.00, 16.99))
bmi_ranges.append((u'Underweight', u'Mild Thinness', 17.00, 18.49))
bmi_ranges.append((u'Normal Range', u'Normal Range', 18.50, 24.99))
bmi_ranges.append((u'Overweight', u'Overweight', 25.00, 29.99))
bmi_ranges.append((u'Obese', u'Obese Class I', 30.00, 34.99))
bmi_ranges.append((u'Obese', u'Obese Class II', 35.00, 39.99))
bmi_ranges.append((u'Obese', u'Obese Class III', 40.00, 1000.00))

# we take just the minimal value for BMI for each class
# find the limit values between ranges:

limitValues = [line[2] for line in bmi_range][1:]
# limitValues = [16.0, 17.0, 18.5, 25.0, 30.0, 35.0, 40.0]

# bisect.bisect(list, value) returns the range
#in the list, in which value belongs
bmi_range = bmi_ranges[bisect.bisect(limitValues, bmi)]
 

 More information: bisect