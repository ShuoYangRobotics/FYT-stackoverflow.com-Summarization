Question (ID-1835756): Using try vs if in python Is there a rationale to decide which one of try or if constructs to use, when testing variable to have a value? 

 For example, there is a function that returns either a list or doesn't return a value. I want to check result before processing it. Which of the following would be more preferable and why? 

 result = function();
if (result):
 for r in result:
  #process items
 

 or 

 result = function();
try:
 for r in result:
  #process items
except TypeError:
 pass;
 

 Related discussion: 

 Checking for member existence in Python 
 Answers (Total-9): #0 You often hear that Python encourages EAFP style ("it's easier to ask for forgiveness than permission") over LBYL style ("look before you leap"). To me, it's a matter of efficiency and readability. 

 In your example (say that instead of returning a list or an empty string, the function were to return a list or None ), if you expect that 99 % of the time result will actually contain something iterable, I'd use the try/except approach. It will be faster if exceptions really are exceptional. If result is None more than 50 % of the time, then using if is probably better. 

 From the Python docs: 

 
 EAFP 
 
 Easier to ask for forgiveness than
 permission. This common Python coding
 style assumes the existence of valid
 keys or attributes and catches
 exceptions if the assumption proves
 false. This clean and fast style is
 characterized by the presence of many
 try and except statements. The
 technique contrasts with the LBYL 
 style common to many other languages
 such as C. 
 
 #1 Your function should not return mixed types (i.e. list or empty string). It should return a list of values or just an empty list. Then you wouldn't need to test for anything, i.e. your code collapses to: 

 for r in function():
 # process items
 
 #2 Generally, the impression I've gotten is that exceptions should be reserved for exceptional circumstances. If the result is expected never to be empty (but might be, if, for instance, a disk crashed, etc), the second approach makes sense. If, on the other hand, an empty result is perfectly reasonable under normal conditions, testing for it with an if statement makes more sense. 

 I had in mind the (more common) scenario: 

 # keep access counts for different files
file_counts={}
...
# got a filename somehow
if filename not in file_counts:
 file_counts[filename]=0
file_counts[filename]+=1
 

 instead of the equivalent: 

 ...
try:
 file_counts[filename]+=1
except KeyError:
 file_counts[filename]=1
 
 #3 
 Which of the following would be more preferable and why? 
 

 Look Before You Leap is preferable in this case. With the exception approach, a TypeError could occur anywhere in your loop body and it'd get caught and thrown away, which is not what you want and will make debugging tricky. 

 (I agree with Brandon Corfman though: returning None for ‘no items’ instead of an empty list is broken. It's an unpleasant habit of Java coders that should not be seen in Python. Or Java.) 
 #4 Your second example is broken - the code will never throw a TypeError exception since you can iterate through both strings and lists. Iterating through an empty string or list is also valid - it will execute the body of the loop zero times. 
 #5 Please ignore my solution if the code I provide is not obvious at first glance and you have to read the explanation after the code sample. 

 Can I assume that the "no value returned" means the return value is None? If yes, or if the "no value" is False boolean-wise, you can do the following, since your code essentially treats "no value" as "do not iterate": 

 for r in function() or ():
 # process items
 

 If function() returns something that's not True, you iterate over the empty tuple, i.e. you don't run any iterations. This is essentially LBYL. 
 #6 bobince wisely points out that wrapping the second case can also catch TypeErrors in the loop, which is not what you want. If you do really want to use a try though, you can test if it's iterable before the loop 

 result = function();
try:
 it = iter(result)
except TypeError:
 pass
else:
 for r in it:
  #process items
 

 As you can see, it's rather ugly. I don't suggest it, but it should be mentioned for completeness. 
 #7 As far as the performance is concerned, using try block for code that normally
doesn’t raise exceptions is faster than using if statement everytime. So, the decision depends on the probability of excetional cases. 
 #8 As a general rule of thumb, you should never use try/catch or any exception handling stuff to control flow. Even though behind the scenes iteration is controlled via the raising of StopIteration exceptions, you still should prefer your first code snippet to the second.