Question (ID-2936834): Python - counting sign changes I have a list of numbers I am reading left to right. Anytime I encounter a sign change when reading the sequence I want to count it. 

 X = [-3,2,7,-4,1,-1,1,6,-1,0,-2,1] 
X = [-, +, +, -, +, -, +, +, -, -,-,+]
 

 So, in this list there are 8 sign changes. 

 When Item [0] (in this case -3) is negative it is considered a sign change. Also, any 0 in the list is considered [-] . 

 Any help would be greatly appreciated. 
 Answers (Total-6): #0 You can use itertools.groupby to count the groups of positive and non-positive numbers: 

 &gt;&gt;&gt; x = [-3,2,7,-4,1,-1,1,6,-1,0,-2,1] 

&gt;&gt;&gt; import itertools
&gt;&gt;&gt; len(list(itertools.groupby(x, lambda x: x &gt; 0)))
 

 Result: 

 8
 

 In your question you state that you want: 

 
 to count the changes, not the groups 
 to count an extra change if the first element is not positive. 
 

 You can do this either by testing the first element directly and adjusting the result: 

 &gt;&gt;&gt; len(list(itertools.groupby(x, lambda x: x &gt; 0))) - (x[0] &gt; 0)
 

 or by prepending a positive number to the input before doing the grouping then subtracting 1 from the result: 

 &gt;&gt;&gt; len(list(itertools.groupby(itertools.chain([1], x), lambda x: x &gt; 0))) - 1
 

 Watch out if your input list could by empty - the former solution will raise an exception. 
 #1 X = [-3,2,7,-4,1,-1,1,6,-1,0,-2,1]

last_sign = 1
sign_changes = 0

for x in X:
 if x == 0:
  sign = -1
 else:
  sign = x / abs(x)

 if sign == -last_sign:
  sign_changes = sign_changes + 1
  last_sign = sign

print sign_changes
 
 #2 numbers = [-3,2,7,-4,1,-1,1,6,-1,0,-2,1]
# could be replaced by  signs = [x &gt; 0 for x in numbers]
# but this methods gives us nice minus and plus signs
signs = map(lambda x: "+" if x &gt; 0 else "-", numbers)

# zip(…) creates the pairs, each pair that has different signs
# adds one to "count"
count = sum(1 for x,y in zip(signs[:-1], signs[1:]) if x != y)
 

 -> 7 

 For your additional requirement, that a negative number at the start of the list should be considered another change, just add a positive number to your list. 

 If you're dealing with huge lists, consider using generators. (izip, tee, …) 
 #3 Here is a solution using fold, have fun figuring it out: 

 def lolwut((x,c), y):
 return (y, c+(x^y))

print reduce( lolwut ,(x &gt; 0 for x in X), (True,0)) # 8
print reduce( lolwut ,(x &gt; 0 for x in X), (False,0)) # 7
 
 #4 If you haven't been convinced to read the itertools documentation yet: 

 def pairs(iterable):
 'iter -&gt; (iter0, iter1), (iter1, iter2), (iter3, iter4), ...'
 from itertools import izip, tee
 first, second = tee(iterable)
 second.next()
 return izip(first, second)

def sign_changes(l):
 result = 0
 if l and l[0]&lt;=0: result += 1
 result += sum(1 for a,b in pairs(l) if b*a&lt;=0 and (a!=0 or b!=0))
 return result
 
 #5 For integers, (a^b) &lt; 0 if signs of a and b are different. 

 def countSignChanges(seq):
 # make sure 0's are treated as negative
 seq = [-1 if not x else x for x in seq]

 # zip with leading 1, so that opening negative value is 
 # treated as sign change
 return sum((a^b)&lt;0 for a,b in zip([1]+seq, seq))


X = [-3,2,7,-4,1,-1,1,6,-1,0,-2,1]
print countSignChanges(X)
 

 gives the desired answer, 8 .