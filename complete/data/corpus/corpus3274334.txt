Question (ID-3274334): How can I "watch" a file for modification / change? I would like to invoke my chrome or firefox browser when a file that I specify is modified. How could I "watch" that file to do something when it gets modified? 

 Programmatically it seems the steps are.. basically set a never ending interval every second or so and cache the initial modification date, then compare the date every second, when it changes invoke X. 
 Answers (Total-7): #0 As noted, you can use pyinotify : 

 E.g.: 

 import webbrowser
import pyinotify

class ModHandler(pyinotify.ProcessEvent):
 # evt has useful properties, including pathname
 def process_IN_CLOSE_WRITE(self, evt):
   webbrowser.open(URL)

handler = ModHandler()
wm = pyinotify.WatchManager()
notifier = pyinotify.Notifier(wm, handler)
wdd = wm.add_watch(FILE, pyinotify.IN_CLOSE_WRITE)
notifier.loop()
 

 This is more efficient than polling. The kernel tells you when it does the operation, without you having to constantly ask. 
 #1 The Linux Kernel has a file monitoring API called inotify. A python binding is pyinotify . 

 With it, you can build what you want. 
 #2 Use FAM to put a monitor on the file. 
 #3 The other option is to use a checksum. You can use a pattern similar to nose's nosy.py. I use the one from dingus to check my directory for modifications and run the test suite. 
 #4 use a quick hash function, a cron job, and off you go! 

 Also, this looks relevant: http://en.wikipedia.org/wiki/Inotify 
 #5 Install inotify-tools and write a simple shell script to watch a file. 
 #6 Follow this tutorial on using inotify Inotify Example: Introduction to Inotify with a C Program Example