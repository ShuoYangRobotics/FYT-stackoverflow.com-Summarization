Question (ID-912526): How do I pass lots of variables to and from a function in Python? I do scientific programming, and often want to show users prompts and variable pairs, let them edit the variables, and then do the calulations with the new variables. I do this so often, that I wrote a wxPython class to move this code out of the main program. You set up a list for each variable with the type of the variable (string, float, int), the prompt, and the variable's current value. You then place all of these lists in one big list, and my utility creates a neatly formated wxPython panel with prompts and the current values which can be edited. 

 When I started, I only had a few variables, so I would write out each variable. 

 s='this is a string'; i=1; f=3.14
my_list=[ ['s','your string here',s], ['i','your int here',i], ['f','your float here'],]
input_panel = Input(my_list)

 # the rest of the window is created, the input_panel is added to the window, the user is
 # allowed to make choices, and control returns when the user hits the calculate button

s,i,f = input_panel.results()  # the .results() function returns the values in a list
 

 Now I want to use this routine for a lot of variables (10-30), and this approach is breaking down. I can create the input list to the function over multiple lines using the list.append() statements. When the code returns from the function, though, I get this huge list that needs to be unpacked into the right variables. This is difficult to manage, and it looks like it will be easy to get the input list and output list out of sync. And worse than that, it looks kludgy. 

 What is the best way to pass lots of variables to a function in Python with extra information so that they can be edited, and then get the variables back so that I can use them in the rest of the program? 

 If I could pass the variables by reference into the function, then users could change them or not, and I would use the values once the program returned from the function. I would only need to build the input list over multiple lines, and there wouldn't be any possiblity of the input list getting out of sync with the output list. But Python doesn't allow this. 

 Should I break the big lists into smaller lists that then get combined into big lists for passing into and out of the functions? Or does this just add more places to make errors? 
 Answers (Total-6): #0 The simplest thing to do would be to create a class. Instead of dealing with a list of variables, the class will have attributes. Then you just use a single instance of the class. 
 #1 There are two decent options that come to mind. 

 The first is to use a dictionary to gather all the variables in one place: 

 d = {}
d['var1'] = [1,2,3]
d['var2'] = 'asdf'
foo(d)
 

 The second is to use a class to bundle all the arguments. This could be something as simple as: 

 class Foo(object):
 pass
f = Foo()
f.var1 = [1,2,3]
f.var2 = 'asdf'
foo(f)
 

 In this case I would prefer the class over the dictionary, simply because you could eventually provide a definition for the class to make its use clearer or to provide methods that handle some of the packing and unpacking work. 
 #2 To me, the ideal solution is to use a class like this: 

 &gt;&gt;&gt; class Vars(object):
...  def __init__(self, **argd):
...    self.__dict__.update(argd)
...
&gt;&gt;&gt; x = Vars(x=1, y=2)
&gt;&gt;&gt; x.x
1
&gt;&gt;&gt; x.y
2
 

 You can also build a dictionary and pass it like this: 

 &gt;&gt;&gt; some_dict = {'x' : 1, 'y' : 2}
&gt;&gt;&gt; #the two stars below mean to pass the dict as keyword arguments
&gt;&gt;&gt; x = Vars(**some_dict) 
&gt;&gt;&gt; x.x
1
&gt;&gt;&gt; x.y
2
 

 You may then get data or alter it as need be when passing it to a function: 

 &gt;&gt;&gt; def foo(some_vars):
...  some_vars.z = 3 #note that we're creating the member z
...
&gt;&gt;&gt; foo(x)
&gt;&gt;&gt; x.z
3
 
 #3 
 If I could pass the variables by reference into the function, then users could change them or not, and I would use the values once the program returned from the function. 
 

 You can obtain much the same effect as "pass by reference" by passing a dict (or for syntactic convenience a Bunch , see http://code.activestate.com/recipes/52308/ ). 
 #4 if you have a finite set of these cases, you could write specific wrapper functions for each one. Each wrapper would do the work of building and unpacking lists taht are passed to the internal function. 
 #5 
 I would recommend using a dictionary
or a class to accumulate all details
about your variables
 
 value 
 prompt text 
 
 A list to store the order in which you want them to be displayed 
 Then use good old iteration to prepare input and collect output 
 

 This way you will only be modifying a small manageable section of the code time and again.
Of course you should encapsulate all this into a class if your comfortable working with classes. 

 """Store all variables
"""
vars = {}
"""Store the order of display
"""
order = []

"""Define a function that will store details and order of the variable definitions
"""
def makeVar(parent, order, name, value, prompt):
 parent[name] = dict(zip(('value', 'prompt'), (value, prompt)))
 order.append(name)

"""Create your variable definitions in order
"""
makeVar(vars, order, 's', 'this is a string', 'your string here')
makeVar(vars, order, 'i', 1, 'your int here')
makeVar(vars, order, 'f', 3.14, 'your float here')

"""Use a list comprehension to prepare your input
"""
my_list = [[name, vars[name]['prompt'], vars[name]['value']] for name in order]
input_panel = Input(my_list)

out_list = input_panel.results();
"""Collect your output
"""
for i in range(0, len(order)):
 vars[order[i]]['value'] = out_list[i];