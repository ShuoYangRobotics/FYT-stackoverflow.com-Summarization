Question (ID-3344115): Obfuscating Python code? I am looking for how to hide my Python source code. 

 print "hello World !" 
 

 How can I encode this example so that it isn't human-readable? I've been told to use base64 but I'm not sure how… Can anyone tell me how to hide Python code? (I want to encode around 30 lines.) 
 Answers (Total-7): #0 
 so that it isn't human-readable? 
 
 i mean all the file is encoded !! when you open it you can't understand anything .. ! that what i want 
 

 As maximum, you can compile your sources into bytecode and then distribute only bytecode. But even this is reversible. Bytecode can be decompiled into semi-readable sources. 

 Base64 is trivial to decode for anyone, so it cannot serve as actual protection and will 'hide' sources only from complete PC illiterates. Moreover, if you plan to actually run that code by any means, you would have to include decoder right into the script (or another script in your distribution, which would needed to be run by legitimate user), and that would immediately give away your encoding/encryption. 

 Obfuscation techniques usually involve comments/docs stripping, name mangling, trash code insertion, and so on, so even if you decompile bytecode, you get not very readable sources. But they will be python sources nevertheless and python is not good at becoming unreadable mess. 

 If you absolutely need to protect some functionality, I'd suggest going with compiled languages, like C or C++, compiling and distributing .so/.dll, and then using python bindings to protected code. 
 #1 You can use the base64 module to encode strings to stop shoulder surfing , but it's not going to stop someone finding your code if they have access to your files. 

 You can then use the compile() function and the eval() function to execute your code once you've decoded it. 

 &gt;&gt;&gt; import base64
&gt;&gt;&gt; mycode = "print 'Hello World!'"
&gt;&gt;&gt; secret = base64.b64encode(mycode)
&gt;&gt;&gt; secret
'cHJpbnQgJ2hlbGxvIFdvcmxkICEn'
&gt;&gt;&gt; mydecode = base64.b64decode(secret)
&gt;&gt;&gt; eval(compile(mydecode,'&lt;string&gt;','exec'))
Hello World!
 

 So if you have 30 lines of code you'll probably want to encrypt it doing something like this: 

 &gt;&gt;&gt; f = open('myscript.py')
&gt;&gt;&gt; encoded = base64.b64encode(f.read())
 

 You'd then need to write a second script that does the compile() and eval() which would probably include the encoded script as a string literal encased in triple quotes . So it would look something like this: 

 import base64
myscript = """IyBUaGlzIGlzIGEgc2FtcGxlIFB5d
    GhvbiBzY3JpcHQKcHJpbnQgIkhlbG
    xvIiwKcHJpbnQgIldvcmxkISIK"""
eval(compile(base64.b64decode(myscript),'&lt;string&gt;','exec'))
 
 #2 As other answers have stated, there really just isn't a way that's any good. Base64 can be decoded. Bytecode can be decompiled. Python was initially just interpreted, and most interpreted languages try to speed up machine interpretation more than make it difficult for human interpretation. 

 Python was made to be readable and shareable, not obfuscated. The language decisions about how code has to be formatted were to promote readability across different authors. 

 Obfuscating python code just doesn't really mesh with the language. Re-evaluate your reasons for obfuscating the code. 
 #3 Python has a built-in compiler (to byte-code): 

 python -OO -m py_compile &lt;your program.py&gt;
 

 produces a .pyo file that contains byte-code, and where docstrings are removed, etc. You can rename the .pyo file with a .py extension, and python &lt;your program.py&gt; runs like your program but does not contain your source code. 

 PS : If your program imports modules obfuscated like this, then you need to rename them with a .pyc suffix instead (I'm not sure this won't break), or you can work with the .pyo and run them with python -O ….pyo (the imports should work). This will allow Python to find your modules (otherwise, Python looks for .py modules). 
 #4 This is (as has been posted previously) almost completely useless, but if you really want to, you can use alternate encoding, like say ROT13 . 
 #5 Maybe you should look into using something simple like a truecrypt volume for source code storage as that seems to be a concern of yours. You can create an encrypted file on a usb key or just encrypt the whole volume (provided the code will fit) so you can simply take the key with you at the end of the day. 

 To compile, you could then use something like PyInstaller or py2exe in order to create a stand-alone executable. If you really wanted to go the extra mile, look into a packer or compression utility in order to add more obfuscation. If none of these are an option, you could at least compile the script into bytecode so it isn't immediately readable. Keep in mind that these methods will merely slow someone trying to debug or decompile your program. 
 #6 I'll write my answer in a didactic manner... 

 First type into your Python interpreter: 

 import this
 

 then, go and take a look to the file this.py in your Lib directory within your Python distribution and try to understand what it does. 

 After that, take a look to the eval function in the documentation: 

 help(eval)
 

 Now you should have found a funny way to protect your code. But beware, because that only works for people that are less intelligent than you! (and I'm not trying to be offensive, anyone smart enough to understand what you did could reverse it).