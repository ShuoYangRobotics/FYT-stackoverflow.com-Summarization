Question (ID-399022): Why can't I subclass datetime.date? Why doesn't the following work (Python 2.5.2)? 

 &gt;&gt;&gt; import datetime
&gt;&gt;&gt; class D(datetime.date):
  def __init__(self, year):
   datetime.date.__init__(self, year, 1, 1)
&gt;&gt;&gt; D(2008)
Traceback (most recent call last):
 File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: function takes exactly 3 arguments (1 given)
 

 I wanted to create a class that was just like datetime.date , but with a different __init__ function. Apparently my function never gets called. Instead the original datetime.date.__init__ is called and fails because that expects 3 arguments and I am passing in one. 

 What's going on here? And is this a clue? 

 &gt;&gt;&gt; datetime.date.__init__
&lt;slot wrapper '__init__' of 'object' objects&gt;
 

 Thanks! 
 Answers (Total-6): #0 Regarding several other answers, this doesn't have anything to do with dates being implemented in C per se. The __init__ method does nothing because they are immutable objects, therefore the constructor ( __new__ ) should do all the work. You would see the same behavior subclassing int, str, etc. 

 &gt;&gt;&gt; import datetime
&gt;&gt;&gt; class D(datetime.date):
  def __new__(cls, year):
   return datetime.date.__new__(cls, year, 1, 1)


&gt;&gt;&gt; D(2008)
D(2008, 1, 1)
 
 #1 Please read the Python reference on Data model , especially about the __new__ special method . 

 Excerpt from that page (my italics): 

 
 __new__() is intended mainly to allow subclasses of immutable types (like int, str, or tuple) to customize instance creation . It is also commonly overridden in custom metaclasses in order to customize class creation. 
 

 datetime.datetime is also an immutable type. 

 PS If you think that: 

 
 an object implemented in C cannot be subclassed, or 
 __init__ doesn't get called for C implemented objects, only __new__ 
 

 then please try it: 

 &gt;&gt;&gt; import array
&gt;&gt;&gt; array
&lt;module 'array' (built-in)&gt;
&gt;&gt;&gt; class A(array.array):
 def __init__(self, *args):
 	super(array.array, self).__init__(*args)
 	print "init is fine for objects implemented in C"

&gt;&gt;&gt; a=A('c')
init is fine for objects implemented in C
&gt;&gt;&gt;
 
 #2 Here's the answer, and a possible solution (use a function or strptime instead of subclassing) 

 http://www.mail-archive.com/python-list@python.org/msg192783.html 
 #3 You're function isn't being bypassed; Python just never gets to the point where it would call it. Since datetime is implemented in C, it does its initialization in datetime.__new__ not datetime.__init__ . This is because datetime is immutable. You could presumably get around this by overriding __new__ instead of __init__ . But as other people have suggested, the best way is probably not subclassing datetime at all. 
 #4 You should probably use a factory function instead of creating a subclass: 

 def first_day_of_the_year(year):
 return datetime.date(year, 1, 1)
 
 #5 You can wrap it and add extended functionality to your wrapper. 

 Here is an example: 

 class D2(object):
 def __init__(self, *args, **kwargs):
  self.date_object = datetime.date(*args, **kwargs)

 def __getattr__(self, name):
  return getattr(self.date_object, name)
 

 And here is how it works: 

 &gt;&gt;&gt; d = D2(2005, 10, 20)
&gt;&gt;&gt; d.weekday()
3
&gt;&gt;&gt; dir(d)
['__class__', '__delattr__', '__dict__', '__doc__', '__getattr__',
 '__getattribute__', '__hash__', '__init__', '__module__', '__new__',
 '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__str__',
 '__weakref__', 'date_object']
&gt;&gt;&gt; d.strftime('%d.%m.%Y')
'20.10.2005'
&gt;&gt;&gt;
 

 Note that dir() doesn't list datetime.date s attributes.