Question (ID-6584871): Remove last character if it's a backslash Is there a function to chomp last character in the string if it's some special character? For example, I need to remove backslash if it's there, and do nothing, if not. I know I can do it with regex easily, but wonder if there something like a small built-in function for that. 
 Answers (Total-7): #0 Use rstrip to strip the specified character(s) from the right side of the string. 

 my_string = my_string.rstrip('\\')
 

 See: http://docs.python.org/library/stdtypes.html#str.rstrip 
 #1 If you don't mind all trailing backslashes being removed, you can use string.rstrip() 

 For example: 

 x = '\\abc\\'
print x.rstrip('\\')
 

 prints: 

 \abc
 

 But there is a slight problem with this (based on how your question is worded): This will strip ALL trailing backslashes. If you really only want the LAST character to be stripped, you can do something like this: 

 if x[-1] == '\\': x = x[:-1]
 
 #2 If you only want to remove one backslash in the case of multiple, do something like: 

 s = s[:-1] if s.endswith('\\') else s
 
 #3 Since everyone else is doing it... 

 If you just want to remove a single backslash, here's a somewhat clean one-line method. 

 &gt;&gt;&gt; 'foo\\\\'.rsplit('\\', 1)[0]
'foo\\'
 
 #4 if s.endswith('\\'):
 s = s[:-1]
 
 #5 The rstrip function will remove more than just the last character, though. It will remove all backslashes from the end of the string. Here's a simple if statement that will remove just the last character: 

 if s[-1] == '\\':
 s = s[:-1]
 
 #6 Or not so beautiful(don't beat me) but also works: 

 stripSlash = lambda strVal: strVal[:-1] if strVal.endswith('\\') else strVal
stripSlash('sample string with slash\\')
 

 And yes - rstrip is better. Just want to try.