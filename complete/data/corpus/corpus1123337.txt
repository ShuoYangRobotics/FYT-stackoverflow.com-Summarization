Question (ID-1123337): Django: Converting an entire set of a Model's objects into a single dictionary If you came here from Google looking for model to dict, skip my question, and just jump down to the first answer. My question will only confuse you. 

 Is there a good way in Django to entire set of a Model's objects into a single dictionary? I mean, like this: 

 class DictModel(models.Model):
 key = models.CharField(20)
 value = models.CharField(200)


DictModel.objects.all().to_dict()
 

 ... with the result being a dictionary with the key/value pairs made up of records in the Model? Has anyone else seen this as being useful for them? 

 Thanks. 
 
 Update 
I just wanted to add is that my ultimate goal is to be able to do a simple variable lookup inside a Template. Something like: 

 {{ DictModel.exampleKey }}
 

 With a result of DictModel.objects.get(key__exact=exampleKey).value 

 Overall, though, you guys have really surprised me with how helpful allof your responses are, and how different the ways to approach it can be. Thanks a lot.
 
 
 Update October 2011: 
This question is the top result if you Google "django model_to_dict", which is actually pretty awful given that it solves a different problem than what I was asking. 
 
What I wanted was to be able to map all of the instances in a queryset into a single dictionary with a specified model field as the key. 
model_to_dict, on the other hand converts a single model instance into a dictionary. 
 
Now, my needs at the time were pretty darn specific, and probably extremely rare (I can't even remember the project I needed it for, or why). So I would be pretty surprised that anyone looking for information about model_to_dict is going to find my question actually useful. Sorry. 
 
model_to_dict seems to be a much more common usage case than I had.
 
 
 Update Dec 2011: 
I changed the title to hopefully better reflect my original intent. 
 Answers (Total-9): #0 You can also rely on django code already written ;). 

 from django.forms.models import model_to_dict
model_to_dict(intance, fields=[], exclude=[])
 

 Regards
Arthur 
 #1 You want the in_bulk queryset method which, according to the docs: 

 
 Takes a list of primary-key values and
 returns a dictionary mapping each
 primary-key value to an instance of
 the object with the given ID. 
 

 It takes a list of IDs, so you'll need to get that first via the values_list method: 

 ids = MyModel.objects.values_list('id', flat=True)
model_dict = MyModel.objects.in_bulk(ids)
 
 #2 You are looking for the Values member of QuerySet which allows you to get a list of dictionaries from your query 

 
 Returns a ValuesQuerySet -- a QuerySet
 that evaluates to a list of
 dictionaries instead of model-instance
 objects. Each of those dictionaries represents
 an object, with the keys corresponding
 to the attribute names of model
 objects. 
 

 &gt;&gt;&gt; Blog.objects.values()
[{'id': 1, 'name': 'Beatles Blog', 'tagline': 'All the latest Beatles news.'}],
&gt;&gt;&gt; Blog.objects.values('id', 'name')
[{'id': 1, 'name': 'Beatles Blog'}]
 
 #3 use 

 dict(((m.key, m.value) for m in DictModel.objects.all())
 

 As suggested by Tom Leys, we do not need to get whole object, we can get only those values we need e.g. 

 dict(((m['key'], m['value']) for m in DictModel.objects.values('key', 'value')))
 

 and if you need all values, it is better to keep whole object in dict e.g. 

 dict(((m.key, m) for m in DictModel.objects.all())
 
 #4 Does this need to create an actual dict? could you get by with only something that looked like a dict? 

 class DictModelAdaptor():
 def __init__(self, model):
  self.model = model

 def __getitem__(self, key):
  return self.model.objects.get(key=key)

 def __setitem__(self, key, item):
  pair = self.model()
  pair.key = key
  pair.value = item
  pair.save()

 def __contains__(self, key):
  ...
 

 You could then wrap a model in this way: 

 modelDict = DictModelAdaptor(DictModel)
modelDict["name"] = "Bob Jones"
 

 etc... 
 #5 You can use the python serializer : 

 from django.core import serializers
data = serializers.serialize('python', DictModel.objects.all())
 
 #6 dict((x.name, getattr(o, x.name)) for x in o._meta.fields) 
 #7 Or were you trying to do something like: 

 def someview(req):
 models = MyModel.objects.all()
 toTuple = lambda field: (getattr(field, 'someatt'), getattr(field, 'someotheratt')) 
 data = dict(map(toTuple,models))
 return render_to_response(template, data)
 
 #8 Perhaps I'm missing something, but Django objects have a dict attribute which seems be what you want.