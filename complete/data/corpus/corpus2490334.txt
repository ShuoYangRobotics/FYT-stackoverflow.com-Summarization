Question (ID-2490334): Simple way to encode a string according to a password? Does Python have a built-in, simple way of encoding/decoding strings using a password? 

 Something like this: 

 &gt;&gt;&gt; encode('John Doe', password = 'mypass')
'sjkl28cn2sx0'
&gt;&gt;&gt; decode('sjkl28cn2sx0', password = 'mypass')
'John Doe'
 

 So the string "John Doe" gets encrypted as 'sjkl28cn2sx0'. To get the original string, I would "unlock" that string with the key 'mypass', which is a password in my source code. I'd like this to be the way I can encrypt/decrypt a Word document with a password. 

 I would like to use these encrypted strings as URL parameters. My goal is obfuscation, not strong security; nothing mission critical is being encoded. I realize I could use a database table to store keys and values, but am trying to be minimalist. 
 Answers (Total-6): #0 As you explicitly state that you want obscurity not security, we'll avoid reprimanding you for the weakness of what you suggest :) 

 So, using PyCrypto: 

 from Crypto.Cipher import AES
import base64

cipher = AES.new(secret_key,AES.MODE_ECB) # never use ECB in strong systems obviously
encoded = base64.b64encode(cipher.encrypt(msg_text))
# ...
decoded = cipher.decrypt(baes64.b64decode(msg_text))
 
 #1 Assuming you are only looking for simple obfuscation that will obscure things from the very casual observer, and you aren't looking to use third party libraries. I'd recommend something like the Vigenere cipher. It is one of the strongest of the simple ancient ciphers. 

 http://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher 

 It's quick and easy to implement. Something like: 

 def encode(key, string):
 encoded_chars = []
 for i in xrange(string):
  key_c = key[i % len(key)]
  encoded_c = chr(ord(string[i]) + ord(encoded_c) % 256)
  encoded_chars.append(encoded_c)
 encoded_string = "".join(encoded_chars)
 return base64.urlsafe_b64encode(encoded_string)
 

 Decode is pretty much the same, except you subtract the key. 

 It is much harder to break if the strings you are encoding are short, and/or if it is hard to guess the length of the passphrase used. 

 If you are looking for something cryptographic, PyCrypto is probably your best bet, though previous answers overlook some details: ECB mode in PyCyrpto requires your message to be a multiple of 16 characters in length. So, you must pad. Also, if you want to use them as URL parameters, use base64.urlsafe_b64_encode(), rather than the standard one. This replaces a few of the characters in the base64 alphabet with URL-safe ones (as it's name suggests). 

 However, you should be ABSOLUTELY certain that this very thin layer of obfuscation suffices for your needs before using this. The Wikipedia article I linked to provides detailed instructions for breaking the cipher, so anyone with a moderate amount of determination could easily break it. 
 #2 Simple way is using the library, and PyCrypto is the good one. 
 #3 If you are using passwords, it's best to do it right (especially if you are dealing with user passwords). 

 What you want to do is "encrypt" the password, not encode. 

 You have two choices on how you can do this, depending on who is doign the encrypting. 

 If its a trusted thirdparty, use Public/Private key encryption. RSA is a good choice. You give the public key to your trusted thirdparty, and keep the private key safe. 

 If you're doing the encrypting yourself, and noone will have access to your code, then Symmetric key encryption is good. I recommend AES with a sufficiently strong key (256bit). 

 There are libraries for python that do either of these encryption schemes. 

 You can 1/2 ass security, but don't. It's not a good idea. Ever. 

 You can use AES to encrypt your string with a password. Though, you'll want to chose a strong enough password so people can't easily guess what it is (sorry I can't help it. I'm a wannabe security weenie). 

 AES is strong with a good key size, but it's also easy to use with PyCrypto. 
 #4 External libraries provide secret-key encryption algorithms. 

 For example, the Cypher module in PyCrypto offers a selection of many encryption algorithms: 

 
 Crypto.Cipher.AES 
 Crypto.Cipher.ARC2 
 Crypto.Cipher.ARC4 
 Crypto.Cipher.Blowfish 
 Crypto.Cipher.CAST 
 Crypto.Cipher.DES 
 Crypto.Cipher.DES3 
 Crypto.Cipher.IDEA 
 Crypto.Cipher.RC5 
 Crypto.Cipher.XOR 
 

 MeTooCrypto is a Python wrapper for OpenSSL , and provides (among other functions) a full-strength general purpose cryptography library. Included are symmetric ciphers (like AES). 
 #5 This works but password length should be exactly 8 . This is simple and requires pyDes . 

 from pyDes import *

def encode(data,password):
 k = des(password, CBC, "\0\0\0\0\0\0\0\0", pad=None, padmode=PAD_PKCS5)
 d = k.encrypt(data)
 return d

def decode(data,password):
 k = des(password, CBC, "\0\0\0\0\0\0\0\0", pad=None, padmode=PAD_PKCS5)
 d = k.decrypt(data)
 return d

x = encode('John Doe', 'mypass12')
y = decode(x,'mypass12')

print x
print y
 

 OUTPUT: 

 ³.\Þ\åS¾+æÅ`;Ê
John Doe