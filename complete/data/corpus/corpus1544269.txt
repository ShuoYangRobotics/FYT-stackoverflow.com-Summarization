Question (ID-1544269): Best language for introductory "higher level" programming course My CS department is currently considering a new introductory "high level" programming course. It is partly aimed at non-majors or those with other primary majors that will find it useful to build programs, including biocomputation, etc. 

 I have a PhD in programming languages, but I'm finding it hard to say exactly what languages currently would best fit this situation. The current contenders from my point of view are Python, Boo, Ruby, F# and C#. 

 Personally F# wins for me, but I think Python will be more acceptable to other people, and Boo to me is better than Python just because of the instant feedback you get with an IDE than understands the types of things which really helps in teaching introductory programming. 

 C# with type inference and lambdas is increasingly getting close to Python in expressability, from what I can see, and LINQ does things Python can't easily, hence it is a contender. 

 What advice for this situation? 
 Answers (Total-17): #0 MIT has switched from Scheme to Python for their EECS introductory course . I agree with Brian Agnew that functional languages are too difficult to comprehend, compared to imperative programming. 
 #1 Personally I think that functional languages will work well for beginners. I think that most programmers learn imperative languages first, then functional languages, which gives functional languages a reputation for being hard to learn. 

 In my opinion, a course that begins with functional languages might be less confusing. It would allow students to focus on the idea that a program is composed in distinct parts that fit together like a machine, which I think would visualize very well for non-majors. I'd certainly hate to be stuck explaining memory allocation, pointers, classes, and many other imperative features, when a non-major student really just wants to build something useful. 

 That said, there's a lot of arguments for using an imperative language, such as readily available teaching material and prevalence in most systems. In the end I think it depends on if you're aiming to send these students off into the world creating computer systems on a team, or just giving them enough knowledge to get things done. 
 #2 As a recent CS grad, it's worth noting that while learning Lisp, SML, and Haskell was very influential, Ruby was the first language that made me really excited to throw around functions as first class objects. (I had learned Python before, but I found Ruby much more intuitive.) Part of the reason is that Ruby was instantly usable and made me more productive within a few days, plus there were jobs in Ruby within a couple blocks. I can't say the same thing about SML or Haskell (esp. in the jobs category), although they're definitely attractive because they're purely functional languages. (There is something mind-bendingly cool about learning that paradigm.) 

 From what I understand, F# is starting to change the functional language landscape. I'm not sure what implementations are out there, but keep your OS X and Linux users in mind if that's what you go with. 
 #3 If you're looking at non-majors, I would be tempted to shy away from functional languages, and look at something imperative like C# (which has advanced features like lambdas, which may go some way to address any functional requirements). 

 Have you considered Java combined with BlueJ ? BlueJ is an IDE geared towards novices, and that may well address your needs. 
 #4 I find that non-CS-majors who dabble into programming generally gravitate towards scripting languages (makes it easy to automate tasks) or specialized scientific languages (eg: MATLAB, statistical analysis languages, etc...) 

 If you want a general-purpose language, I'd tend to go with Python, which also has a simple syntax, is easily available on many platforms, and can work decently both as a general-purpose number-crunching tool AND a scripting tool. 

 Otherwise, for scientists and engineers, you can do worse than teach them MATLAB (which is what my undergrad school did with mechanical engineering majors). It's not a very elegant language, but it shows the basic concepts, and that's what they're most likely to use throughout their career. 

 These might not be the "best" languages to learn, but IMHO, the best language is the one they'll keep using to solve their problems once the class is over, and these two fit the bill. 
 #5 Python magazine had an article about using Python for the Introductory course, with excellent results: 

 http://pymag.phparch.com/c/issue/view/105 (Costs, money, sorry). 

 Basically the conclusion is that Python is just as good as C in preparing you for a programming course where you need to use C (which is a bit of a surprise) and more positively, even those who did not go on to major in CS continued to use Python after the course ended to solve their real world problems. 

 So there is no doubt in my mind: Python. 
 #6 Java or C# - both have lots of good books and tutorials available, wide acceptance in the industry and look good on a resume. Also, both allow you to quickly produce something that is usable without having to deal with a lot of the lower level details. It's a good way for people to be able to see what writing their own programs can enable them to do. 
 #7 What's the goal of the class? To do straightforward procedural programming (which includes the skills of breaking a task into small steps and implementing those steps in code) or to try to seriously reshape their thinking? 

 In either case, you probably don't want to give intro students LINQ or use lambda heavy code. You need to crawl before you walk. 

 F# is probably not a good choice either since it can't decide whether or not it is functional or procedural (yes, I understand the reasons and the distinction). 

 An ideal intro language should be straight forward, easy to use, and especially have a low barrier to entry to doing something interesting (ie, get the student hooked). 

 I would argue that of the list you offer, Python or C# fit nicely. Outside of your list, I would put LISP/Scheme if you want to take the Little Lisper approach to learning to write code and solve problems. 
 #8 python is very nice language for what you are trying to do . 
 #9 IMO, a statically typed language is the best way to start teaching high-level programming. I'd therefore suggest C# or F#, or even good old OCaml. 

 Dynamically typed languages are advanced material; it's really important for new students to understand the issues involved in typing first , IMO. Once the fundamentals are learned, the students are ready to move on to dynamically typed languages, and for that I prefer Python. 

 Edit: Based on another comment and a re-read of your description, it looks like you're aiming this class at "Programming For Math and Science Majors" or something like that. 

 In that case, I still stick by my statically typed suggestion. Go with F#. 
 #10 Look at Processing . It starts out simple, but you can do quite complex things with it. The focus is on creating a visual of data and it targets non-programmers. 
 #11 Except for the fact that its documentation isn't terribly good (yet), I would recommend Boo. It gives you the easy syntax of Python and the ability to explore functional approaches (like Python), together with the great standard library of .NET. 

 Your point about tools being better able to understand types is a strong vote in favor of Boo, IMHO. 

 However, as a second choice, F# is definitely a strong contender as well, for similar reasons. 
 #12 The first two-thirds of the course should be imperative language with the last third being functional. I would choose C# for the imperative segment and can't recommend a functional language since I do not use them regularly. F# seems practical to me because you could use the same Microsoft free tools for both segments. You wouldn't have to spend two weeks of the semester dealing with student's lame setup issues. 
 #13 From my experience learning Ruby myself, I would lodge another vote for it. I suspect that the expressive, sugary syntax will work well for novices simply because "say what you mean" will make it relatively easy to pick up the language and feel like things are getting done. 
 #14 
 Personally F# wins for me, but I think
 Python will be more acceptable to
 other people 
 

 Go with F# / OCaml. Here, in France, OCaml is the most used language for teaching programming in universities or classes préparatoires aux grandes écoles. 
 #15 I would use C# , C and the other languages are too hard when starting. Pascal used to be used first year , C and Lisp 2nd year . Avoid functional UNLESS there are lots of maths /science majors. 

 Ben 

 http://www.shanghai-software.com/blog 
 #16 Boo is a great language to learn on, based on your above criteria. The compiler does its best to get out of your way and it has some really crazy, advanced features like syntactic macros and an extensible compiler pipeline (which don't really apply in the context of this course, but are nice, nonethless). 

 If you wanted .NET stdlib access (read: not python's crazy stdlibs naming scheme) and static typing with a less-cumbersome syntax (read: c#), then Boo fits that mold pretty well. 

 As for Mono support, Boo supports it very well. Several of the core developers on the Boo team are loonix users and, as such, are very quick to address build issues that arise as a result of Mono incompatibilities. Also, compared to C#/F#/etc, Boo is a pretty fast moving project in terms of getting changes into the src repo as a traditional Open Source project. This could also be viewed as a drawback, depending on your POV (relative lack of good docs, lots of people are using it but few are actively "pimping" Boo in the community). 

 But in the criteria spelled out above, I think Boo is a great candidate. It has adequate tooling (SharpDevelop in windows and MonoDevelop in windows/linux/osx) with things like intellisense but is not so entangled in its syntax that you can easily work in a "lower level" approach (vim, etc) if that's your cup of tea. 

 Plus, unlike C# (but like F#), Boo ships with an interactive shell, booish.exe, which is a valuable exploration/teaching tool. 

 The one warning I can give about Boo is that you can get into trouble with things like the pervasive compiler inference (it will infer types of locals based on instantiation.. you can skip typing method args (they will be a System.Object, which is a Bad Thing IMO due to boxing (but who cares for an intro class?)), the compiler will try and infer return type if you omit it in the method sig.. so if you have multiple return statements with different types, then your method will be a System.Object, once again.. or that the compiler will stub out unimplemented methods on interfaces that your custom types implement (unlike C# which will cause a build error) .. things like this can get you into trouble if you aren't aware of them and act accordingly.. but these are more issues for application developers and not the problems of students in an introduction to programming languages course. 

 Best of luck, regardless of which language you pick!