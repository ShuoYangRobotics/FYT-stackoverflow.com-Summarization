Question (ID-5056064): element that appear more that once in the list in Python Please help (I know that it's a silly question): 

 I have a list d = [' ABA', ' AAB', ' BAA', ' BAA', ' AAB', ' ABA'] . How can I exclude elements that appear more than once? 
 Answers (Total-6): #0 Convert to a set then back again: 

 list(set(d))
 

 If order matters, you can pass the values through a dict that remembers the original indices. This approach, while expressible as a single expression, is considerably more complicated: 

 [x for (i, x) in sorted((i, x) for (x, i) in dict((x, i) for (i, x) in reversed(list(enumerate(d)))).iteritems())]
 

 Of course, you don't have to use comprehensions. For this problem, a fairly simple solution is available: 

 a = []
for x in d:
 if x not in a:
  a.append(x)
 

 Note that both the order-preserving solutions assume that you want to keep the first occurrence of each duplicated element. 
 #1 To exclude items from the list that appear more than once: 

 d = [x for x in d if d.count(x) == 1]
 

 For the example provided above, d will bind to an empty list. 

 Others have posted good solutions to remove duplicates . 
 #2 Lets say you got a list named Words and a list UniqueWords , start a loop on Words , on each iteration you check if the list UniqueWords contains the iterated element, if so then continue , if not then add it to the UniqueWords. In the end you will have a list without duplicates. Another way you could do is a loop in a loop and instead of adding you'd remove it if it was found more than once :) 

 I bet there are far more efficient ways though. 
 #3 If you're not worried about the order, d = list(set(d))) . 
 #4 If you shouldn't have done that already, make sure to read the python docs on itertools , especially product(), permutations() and combinations(). 
 #5 If order matters check out the unique_everseen function in the itertools recpies documentation. It give a relatively clean iterator-based solution. 

 If order doesn't matter, convert to a set.