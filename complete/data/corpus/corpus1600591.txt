Question (ID-1600591): Using a Python Dictionary as a Key (Non-nested) Python doesn't allow dictionaries to be used as keys in other dictionaries. Is there a workaround for using non-nested dictionaries as keys? 

 The general problem with more complicated non-hashable objects and my specific use case has been moved here . My original description of my use case was incorrect. 
 Answers (Total-7): #0 If you have a really immutable dictionary (although it isn't clear to me why you don't use just a list of pairs: e. g. [('content-type': 'text/plain'), ('host', 'example.com')] ), then you may convert your dict into: 

 
 A tuple of pairs. You've already done that in your question. A tuple is required instead of list because the results rely on the ordering an immutability of the elements. 

 &gt;&gt;&gt; tuple(sorted(a.items()))
 
 A frozen set. It is a more suitable approach from the mathematical point of view, as it requires only the equality relation on the elements of your immutable dict , while the first approach requires the ordering relation besides equality. 

 &gt;&gt;&gt;&gt; frozenset(a.items())
 
 
 #1 If I needed to use dictionaries as keys, I would flatten the dictionary into a tuple of tuples. 

 You might find this SO question useful: http://stackoverflow.com/questions/635483/what-is-the-best-way-to-implement-nested-dictionaries-in-python 

 And here is an example of a flatten module that will flatten dictionaries: http://yawpycrypto.sourceforge.net/html/public/Flatten.Flatten-module.html 

 I don't fully understand your use case and I suspect that you are trying to prematurely optimize something that doesn't need optimization. 
 #2 One way to do this would be to subclass the dict and provide a hash method. ie: 

 class HashableDict(dict):
 def __hash__(self):
  return hash(tuple(sorted(self.iteritems())))

&gt;&gt;&gt; d = HashableDict(a=1, b=2)
&gt;&gt;&gt; d2 = { d : "foo"}
&gt;&gt;&gt; d2[HashableDict(a=1, b=2)]
"foo"
 

 However, bear in mind the reasons why dicts (or any mutable types) don't do this: mutating the object after it has been added to a hashtable will change the hash, which means the dict will now have it in the wrong bucket, and so incorrect results will be returned. 

 If you go this route, either be very sure that dicts will never change after they have been put in the other dictionary, or actively prevent them (eg. check that the hash never changes after the first call to __hash__ , and throw an exception if not.) 
 #3 Hmm, isn't your use case just memoizing function calls? Using a decorator, you will have easy support for arbitrary functions. And yes, they often pickle the arguments, and using circular reasoning, this works for non-standard types as long as they can be pickled. 

 See e.g. this memoization sample 
 #4 To turn a someDictionary into a key, do this 

 key = tuple(sorted(someDictionary .items())
 

 You can easily reverse this with dict( key ) 
 #5 I don't see why you'd ever want to do this, but if you really really do need to, you could try pickling the dictionary: 

 mydict = {"a":1, "b":{"c":10}}
import pickle
key = pickle.dumps(mydict)

d[key] = value
 
 #6 I don't know whether I understand your question correctly, but i'll give it a try 

  d[repr(a)]=value
 

 You can interate over the dictionary like this 

 for el1 in d:
  for el2 in eval(el1):
    print el2,eval(el1)[el2]