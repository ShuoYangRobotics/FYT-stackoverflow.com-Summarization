Question (ID-4094382): python re - split a string before a character how to split a string at positions before a character? 

 
 split a string before 'a' 
 input: "fffagggahhh" 
 output: ["fff", "aggg", "ahhh"] 
 

 the obvious way doesn't work: 

 &gt;&gt;&gt; h=re.compile("(?=a)")

&gt;&gt;&gt; h.split("fffagggahhh")

['fffagggahhh']

&gt;&gt;&gt;
 
 Answers (Total-7): #0 &gt;&gt;&gt; r=re.compile("(a?[^a]+)")
&gt;&gt;&gt; r.findall("fffagggahhh")
['fff', 'aggg', 'ahhh']
 

 EDIT: 

 This won't handle correctly double a s in the string: 

 &gt;&gt;&gt; r.findall("fffagggaahhh")
['fff', 'aggg', 'ahhh']
 

 KennyTM's re seems better suited. 
 #1 Ok, not exactly the solution you want but I thought it will be a useful addition to problem here. 

 
 Solution without re 
 

 Without re: 

 &gt;&gt;&gt; x = "fffagggahhh"
&gt;&gt;&gt; k = x.split('a')
&gt;&gt;&gt; j = [k[0]] + ['a'+l for l in k[1:]]
&gt;&gt;&gt; j
['fff', 'aggg', 'ahhh']
&gt;&gt;&gt; 
 
 #2 &gt;&gt;&gt; rx = re.compile("(?:a|^)[^a]*")
&gt;&gt;&gt; rx.findall("fffagggahhh")
['fff', 'aggg', 'ahhh']
&gt;&gt;&gt; rx.findall("aaa")
['a', 'a', 'a']
&gt;&gt;&gt; rx.findall("fgh")
['fgh']
&gt;&gt;&gt; rx.findall("")
['']
 
 #3 import re

def split_before(pattern,text):
 prev = 0
 for m in re.finditer(pattern,text):
  yield text[prev:m.start()]
  prev = m.start()
 yield text[prev:]


if __name__ == '__main__':
 print list(split_before("a","fffagggahhh"))
 

 re.split treats the pattern as a delimiter. 

 &gt;&gt;&gt; print list(split_before("a","afffagggahhhaab"))
['', 'afff', 'aggg', 'ahhh', 'a', 'ab']
&gt;&gt;&gt; print list(split_before("a","ffaabcaaa"))
['ff', 'a', 'abc', 'a', 'a', 'a']
&gt;&gt;&gt; print list(split_before("a","aaaaa"))
['', 'a', 'a', 'a', 'a', 'a']
&gt;&gt;&gt; print list(split_before("a","bbbb"))
['bbbb']
&gt;&gt;&gt; print list(split_before("a",""))
['']
 
 #4 split() takes an argument for the character to split on: 

 &gt;&gt;&gt; "fffagggahhh".split('a')
['fff', 'ggg', 'hhh']
 
 #5 &gt;&gt;&gt; foo = "abbcaaaabbbbcaaab"
&gt;&gt;&gt; bar = foo.split("c")
&gt;&gt;&gt; baz = [bar[0]] + ["c"+x for x in bar[1:]]
&gt;&gt;&gt; baz
['abb', 'caaaabbbb', 'caaab']
 

 Due to how slicing works, this will work properly even if there are no occurrences of c in foo . 
 #6 This one works on repeated a 's 

 &gt;&gt;&gt; re.findall("a[^a]*|^[^a]*", "aaaaa")
 ['a', 'a', 'a', 'a', 'a']
 &gt;&gt;&gt; re.findall("a[^a]*|[^a]+", "ffaabcaaa")
 ['ff', 'a', 'abc', 'a', 'a', 'a']
 

 Approach: the main chunks that you are looking for are an a followed by zero or more not- a . That covers all possibilities except for zero or more not- a . That can happen only at the start of the input string.