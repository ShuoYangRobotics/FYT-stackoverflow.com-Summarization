Question (ID-6981717): Pythonic way to combine FOR loop and IF statement I know how to use both for loops and if statements on separate lines, such as: 

 a = [2,3,4,5,6,7,8,9,0]
xyz = [0,12,4,6,242,7,9]
for x in xyz:
 if x in a:
  print x
&gt;&gt;&gt; 0,4,6,7,9
 

 And I know I can use a list comprehension to combine these when the statements are simple, such as: 

 print [x for x in xyz if x in a]
 

 But what I can't find is a good example anywhere (to copy and learn from) demonstrating a complex set of commands (not just "print x") that occur following a combination of a for loop and some if statements. Something that I would expect looks like: 

 for x in xyz if x not in a:
 print x...
 

 Is this just not the way python is supposed to work? 
 Answers (Total-6): #0 You can use generator expressions like this: 

 gen = (x for x in xyz if x not in a)

for x in gen:
 print x
 
 #1 As per The Zen of Python (if you are wondering whether your code is "Pythonic", that's the place to go): 

 
 Beautiful is better than ugly. 
 Explicit is better than implicit. 
 Simple is better than complex. 
 Flat is better than nested. 
 Readability counts. 
 

 The Pythonic way of getting the sorted  intersection of two set s is: 

 &gt;&gt;&gt; sorted(set(a).intersection(xyz))
[0, 4, 6, 7, 9]
 

 Or those elements that are xyz but not in a : 

 &gt;&gt;&gt; sorted(set(xyz).difference(a))
[12, 242]
 

 But for a more complicated loop you may want to flatten it by iterating over a well-named generator expression and/or calling out to a well-named function. Trying to fit everything on one line is rarely "Pythonic". 

 

 Update following additional comments on your question and the accepted answer 

 I'm not sure what you are trying to do with enumerate , but if a is a dictionary, you probably want to use the keys, like this: 

 &gt;&gt;&gt; a = {
...  2: 'Turtle Doves',
...  3: 'French Hens',
...  4: 'Colly Birds',
...  5: 'Gold Rings',
...  6: 'Geese-a-Laying',
...  7: 'Swans-a-Swimming',
...  8: 'Maids-a-Milking',
...  9: 'Ladies Dancing',
...  0: 'Camel Books',
... }
&gt;&gt;&gt;
&gt;&gt;&gt; xyz = [0, 12, 4, 6, 242, 7, 9]
&gt;&gt;&gt;
&gt;&gt;&gt; known_things = sorted(set(a.iterkeys()).intersection(xyz))
&gt;&gt;&gt; unknown_things = sorted(set(xyz).difference(a.iterkeys()))
&gt;&gt;&gt;
&gt;&gt;&gt; for thing in known_things:
...  print 'I know about', a[thing]
...
I know about Camel Books
I know about Colly Birds
I know about Geese-a-Laying
I know about Swans-a-Swimming
I know about Ladies Dancing
&gt;&gt;&gt; print '...but...'
...but...
&gt;&gt;&gt;
&gt;&gt;&gt; for thing in unknown_things:
...  print "I don't know what happened on the {0}th day of Christmas".format(thing)
...
I don't know what happened on the 12th day of Christmas
I don't know what happened on the 242th day of Christmas
 
 #2 How about building a string and printing it at once? 

 res = ','.join(n for n in xyz 
     if n in a)
print(res) 
 
 #3 a = [2,3,4,5,6,7,8,9,0] 
 xyz = [0,12,4,6,242,7,9] 
set(a) &amp; set(xyz) 
set([0, 9, 4, 6, 7]) 
 #4 You can use generators too, if generator expressions become too involved or complex: 

 def gen():
 for x in xyz:
  if x in a:
   yield x

for x in gen():
 print x
 
 #5 I personally think this is the prettiest version: 

 a = [2,3,4,5,6,7,8,9,0]
xyz = [0,12,4,6,242,7,9]
for x in filter(lambda w: w in a, xyz):
 print x