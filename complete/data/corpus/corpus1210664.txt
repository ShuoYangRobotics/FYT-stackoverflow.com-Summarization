Question (ID-1210664): No module named _sqlite3 I am trying to run a Django app on my VPS running Debian 5. When I run a demo app, it comes back with this error: 

 File "/usr/local/lib/python2.5/site-packages/django/utils/importlib.py", line 35, in  import_module
 __import__(name)

 File "/usr/local/lib/python2.5/site-packages/django/db/backends/sqlite3/base.py", line 30, in &lt;module&gt;
 raise ImproperlyConfigured, "Error loading %s: %s" % (module, exc)

ImproperlyConfigured: Error loading either pysqlite2 or sqlite3 modules (tried in that  order): No module named _sqlite3
 

 Looking at the Python install, it gives the same error: 

 Python 2.5.2 (r252:60911, May 12 2009, 07:46:31) 
[GCC 4.1.2 20061115 (prerelease) (Debian 4.1.1-21)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import sqlite3
Traceback (most recent call last):
 File "&lt;stdin&gt;", line 1, in &lt;module&gt;
 File "/usr/local/lib/python2.5/sqlite3/__init__.py", line 24, in &lt;module&gt;
 from dbapi2 import *
 File "/usr/local/lib/python2.5/sqlite3/dbapi2.py", line 27, in &lt;module&gt;
 from _sqlite3 import *
ImportError: No module named _sqlite3
&gt;&gt;&gt;
 

 Reading on the web, I learn that Python 2.5 should come with all the necessary SQLite wrappers included. Do I need to reinstall Python, or is there another way to get this module up and running? 
 Answers (Total-6): #0 I had the same problem (building python2.5 from source on Ubuntu Lucid), and import sqlite3 threw this same exception. I've installed libsqlite3-dev from the package manager, recompiled python2.5, and then the import worked. 
 #1 My _sqlite3.so is in /usr/lib/python2.5/lib-dynload/_sqlite3.so. Judging from your paths, you should have the file /usr/local/lib/python2.5/lib-dynload/_sqlite3.so. 

 Try the following: 

 find /usr/local -name _sqlite3.so
 

 If the file isn't found, something may be wrong with your Python installation. If it is, make sure the path it's installed to is in the Python path. In the Python shell, 

 import sys
print sys.path
 

 In my case, /usr/lib/python2.5/lib-dynload is in the list, so it's able to find /usr/lib/python2.5/lib-dynload/_sqlite3.so. 
 #2 Checking your settings.py file.
Did you not just write "sqlite" instead of "sqlite3" for the database engine? 
 #3 Is the python-pysqlite2 package installed? 

 sudo apt-get install python-pysqlite2
 
 #4 I recently tried installing python 2.6.7 on my Ubuntu 11.04 desktop for some dev work. Came across similar problems to this thread. I mamaged to fix it by: 

 
 Adjusting the setup.py file to include the correct sqlite dev path. Code snippet from setup.py: 

 def sqlite_incdir:
sqlite_dirs_to_check = [
os.path.join(sqlite_incdir, '..', 'lib64'),
os.path.join(sqlite_incdir, '..', 'lib'),
os.path.join(sqlite_incdir, '..', '..', 'lib64'),
os.path.join(sqlite_incdir, '..', '..', 'lib'),
'/usr/lib/x86_64-linux-gnu/'
]
 

 With the bit that I added being '/usr/lib/x86_64-linux-gnu/'. 
 After running make I did not get any warnings saying the sqlite support was not built (i.e., it built correctly :P ), but after running make install , sqlite3 still did not import with the same " ImportError: No module named _sqlite3" whe running "import sqlite3 ". 

 So, the library was compiled, but not moved to the correct installation path, so I copied the .so file ( cp /usr/src/python/Python-2.6.7/build/lib.linux-x86_64-2.6/_sqlite3.so /usr/local/python-2.6.7/lib/python2.6/sqlite3/ â€” these are my build paths, you will probably need to adjust them to your setup). 
 

 Voila! SQLite3 support now works. 
 #5 I have the problem in FreeBSD 8.1: 

 - No module named _sqlite3 -
 

 It is solved by stand the port ---------- 

 /usr/ports/databases/py-sqlite3
 

 after this one can see: 

 OK ----------
'&gt;&gt;&gt;' import sqlite3 -----
'&gt;&gt;&gt;' sqlite3.apilevel -----
'2.0'