Question (ID-7169348): while loop multiple conditions Python Hello, I have the following function: 

 def width(input,output,attr):
 import re
 input = input.strip()
 if re.search(attr, input):
  k = input.find(attr)
  for i in input:
   if i == attr[0]:
    j = k + len(attr)+1
    while ((j &lt;= len(input)) | (j != ' ') | (input[j+1] != "'")):
     j = j + 1
     #print j, output, input[j], len(input), k
     output = output+input[j]
    break
   k = k + 1
 return output

print width('a=\'100px\'','','a')
 

 I get always get the following error: 

 Traceback (most recent call last):
 File "table.py", line 45, in &lt;module&gt;
 print width(split_attributes(w,'','&lt;table.*?&gt;'),'','width')
 File "table.py", line 24, in width
 while ((j &lt;= len(input)) | (j != ' ') | (input[j+1] != "'")):
IndexError: string index out of range
 

 I have tried using or instead | but it didn't work! 
 Answers (Total-6): #0 while ((j &lt;= len(input)) | (j != ' ') | (input[j+1] != "'")):
 

 0) You should be using or . 

 1) You should not use input as a variable name; it hides a built-in function. 

 2) j is an integer, so it can never be equal to ' ' , so that test is useless. 

 3) j &lt;= len(input) passes when j == len(input) . The length of a string is not a valid index into the string; indices into a string of length N range from 0 to (N - 1) (you can also use negative numbers from -1 to -N, to count from the end). Certainly j+1 doesn't work either. 

 4) I can't tell what the heck you are actually trying to do. Could you explain it in words? As stated, this isn't a very good question; making the code stop throwing exceptions doesn't mean it's any closer to working correctly, and certainly doesn't mean it's any closer to being good code. 
 #1 It looks like j+1 is a number greater than or equal to the length of the string you have ( input ). Make sure you structure your while loop so that j &lt; (len(input) - 1) is always true and you won't end up with the string index out of range error. 
 #2 if j &gt;= len(input) - 1 then j+1 will most certainly be out of bounds. Also, use or and not | . 
 #3 You get an error IndexError: string index out of range . The only index reference is in part input[j+1] . Situation when j = len(input) will cause an error, as the following code demonstrates: 

 &gt;&gt;&gt; input = "test string"
&gt;&gt;&gt; len(input)
11
&gt;&gt;&gt; input[11]
Traceback (most recent call last):
 File "&lt;stdin&gt;", line 1, in &lt;module&gt;
IndexError: string index out of range
&gt;&gt;&gt; input[10]
'g'
 

 If you try to reference element number j+1 , then condition j &lt; ( len(input) - 1 ) needs to be satisfied. 
 #4 When using != in if statements, make sure that or is actually what you need. Here's an example: 

 import random
a = random.randint(1, 10)
b = random.randint(1, 10)
c = random.randint(1, 10)
if a != 1 or b != 1 or c != 1:
 print "None of the values should equal 1"
 # The interpreter sees `a != 1`.
 # If `a` is not equal to 1 the condition is true, and this code gets excecuted.
 # This if statement will return true if ANY of the values are not equal to 1.
if a != 1 and b != 1 and c != 1:
 print "None of the values are equal to 1" # True
 # This if statement will return true if ALL of the values are not equal to 1.
 

 This is a hard thing to understand at first (I made this mistake all the time), but if you practise it a bit, it will make perfect sense. 

 So, to get your code working, replace those | s with and , and it will work (and stick with the keywords or and and unless you specifically need boolean or or and ( | / &amp; ): 

 while ((j &lt;= len(input)) and (j != ' ') and (input[j+1] != "'")):
 

 and the output is: 

 100px
 
 #5 Not the solution to your problem. Code that probably does what you are aiming for. 

 Just use a single regular expression: 

 import re

def width(input, attr):
 """
 &gt;&gt;&gt; width("a='100px'", 'a')
 '100px'
 """
 regex = re.compile(attr + r""".*?'(?P&lt;quoted_string&gt;[^']+)'""")
 m = regex.match(input.strip())
 return m.group("quoted_string") if m else ''

if __name__ == '__main__':
 import doctest
 doctest.testmod()
 

 This code skips attr and searches for a quoted string that follows. (?P&lt;quoted_string&gt;[^']+) captures the quoted string. m.group("quoted_string") recovers the quoted string.