Question (ID-6448742): Does garbage collection make python slower? OK, so we are developing an network related application where the user can upload their own python scripts to decide for an algorithm. Our code contains c and cython and python modules. 

 Since avoiding latency, memory footprint and minimal processing is critical for us, we were wondering if it's a wise and effective (performance wise) to turn off garbage collection and handle memory deallocation ourselves. 
 Answers (Total-6): #0 Just let the language do what it wants to do, and if you find you have an actual problem, come on back and post about it. Otherwise it's premature optimization. 
 #1 gc.disable only turns off the cyclic garbage collector. Objects will still be collected when the refcount drops to zero anyway. So unless you have a lot of cyclic references, it will make no difference. 

 Are you are talking about doing a customised Python build and disabling the ref counting GC? 
 #2 Just develop the application so that it is functionally correct. Once you've got a correct application fire up the profiler and determine where the slow bits are. If you're worried about user script performance, you're probably focussing on the wrong thing. 

 A shorter answer is that it is probably unwise and ineffective to try to optimize before initial development is complete. 
 #3 Garbage collection makes everything slower. It also makes everything much less error-prone. Especially if the point is to run user-uploaded scripts, I have a hard time believing the trade-off will work out well; if you have any leaks or double frees, you now have a DoS vulnerability if someone can figure out how to trigger it. 
 #4 CPython (the original and most used Python) uses a ref counting approach for garbage collection: objects which are no longer referenced are immediately freed. Therefore if you don't create any cycles then the garbage collector, which only exists to detect cycles, shouldn't be getting invoked much. 
 #5 I've spent quite a bit of time working in languages with automatic garbage collection and I can say almost unilaterally that trusting the native garbage collection will be faster and more reliable than a custom solution.