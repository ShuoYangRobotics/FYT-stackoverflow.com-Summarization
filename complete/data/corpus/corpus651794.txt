Question (ID-651794): What's the best way to initialize a dict of dicts in Python? A lot of times in Perl, I'll do something like this: 

 $myhash{foo}{bar}{baz} = 1
 

 How would I translate this to Python? So far I have: 

 if not 'foo' in myhash:
 myhash['foo'] = {}
if not 'bar' in myhash['foo']:
 myhash['foo']['bar'] = {}
myhash['foo']['bar']['baz'] = 1
 

 Is there a better way? 
 Answers (Total-6): #0 class AutoVivification(dict):
 """Implementation of perl's autovivification feature."""
 def __getitem__(self, item):
  try:
   return dict.__getitem__(self, item)
  except KeyError:
   value = self[item] = type(self)()
   return value
 

 Testing: 

 a = AutoVivification()

a[1][2][3] = 4
a[1][3][3] = 5
a[1][2]['test'] = 6

print a
 

 Output: 

 {1: {2: {'test': 6, 3: 4}, 3: {3: 5}}}
 
 #1 If the amount of nesting you need is fixed, collections.defaultdict is wonderful. 

 e.g. nesting two deep: 

 myhash = collections.defaultdict(dict)
myhash[1][2] = 3
myhash[1][3] = 13
myhash[2][4] = 9
 

 If you want to go another level of nesting, you'll need to do something like: 

 myhash = collections.defaultdict(lambda : collections.defaultdict(dict))
myhash[1][2][3] = 4
myhash[1][3][3] = 5
myhash[1][2]['test'] = 6
 

 edit: MizardX points out that we can get full genericity with a simple function: 

 def makehash():
 return collections.defaultdict(makehash)
 

 Now we can do: 

 myhash = makehash()
myhash[1][2] = 4
myhash[1][3] = 8
myhash[2][5][8] = 17
# etc
 
 #2 Is there a reason it needs to be a dict of dicts? If there's no compelling reason for that particular structure, you could simply index the dict with a tuple: 

 mydict = {('foo', 'bar', 'baz'):1} # Initializes dict with a key/value pair
mydict[('foo', 'bar', 'baz')]  # Returns 1

mydict[('foo', 'unbar')] = 2  # Sets a value for a new key
 

 The parentheses are required if you initialize the dict with a tuple key, but you can omit them when setting/getting values using []: 

 mydict = {}      # Initialized the dict
mydict['foo', 'bar', 'baz'] = 1 # Sets a value
mydict['foo', 'bar', 'baz']  # Returns 1
 
 #3 I guess the literal translation would be: 

 mydict = {'foo' : { 'bar' : { 'baz':1}}}
 

 Calling: 

 &gt;&gt;&gt; mydict['foo']['bar']['baz']
 

 gives you 1. 

 That looks a little gross to me, though. 

 (I'm no perl guy, though, so I'm guessing at what your perl does) 
 #4 Nested dictionaries like that are (often) called a poor mans objects. 
Yes, there is an implication and it might correlate with pythons object oriented nature. 
 #5 Wasn't this question just asked? See What is the best way to implement nested dictionaries in Python? , specifically my answer ;-)