Question (ID-783897): Truncating floats in Python Basically to remove digits from a float to have a fixed number of digits after the dot, like: 

 1.923328437452 -> 1.923 

 EDIT: I need to output as a string to another function, not print. 

 Also I want to ignore the lost digits, not round them. 
 Answers (Total-9): #0 I would convert to a string at full precision and then just chop off everything but the first so many characters. 

 def trunc(f, n):
 '''Truncates/pads a float f to n decimal places without rounding'''
 slen = len('%.*f' % (n, f))
 return str(f)[:slen]
 

 (edited to fix bugs) 

 In response to your comment: the version above doesn't include the zeros, but here's my old version that did: 

 def trunc(f, n):
 '''Truncates/pads a float f to n decimal places without rounding'''
 return ('%.*f' % (n + 1, f))[:-1]
 

 The latter does fail on some corner cases, though, like trunc(11.999999, 3) 
 #1 round(1.923328437452, 3)
 

 Python standard types , you'll need to scroll down a bit to get to the round function. Essentially the second number says how many decimal places to round it to. 
 #2 The result of round is a float, so watch out: 

 &gt;&gt;&gt; round(1.923328437452, 3)
1.923
&gt;&gt;&gt; round(1.23456, 3)
1.2350000000000001
 

 You will be better off when using a formatted string: 

 &gt;&gt;&gt; "%.3f" % 1.923328437452
'1.923'
&gt;&gt;&gt; "%.3f" % 1.23456
'1.235'
 
 #3 def trunc(num, digits):
 sp = str(num).split('.')
 return '.'.join([sp[0], sp[:digits]])
 

 This should work. It should give you the truncation you are looking for. 
 #4 n = 1.923328437452
str(n)[:4]
 
 #5 def trunc(f,n):
 return ('%.16f' % f)[:(n-16)] 
 #6 Just wanted to mention that the old "make round() with floor()" trick of 

 round(f) = floor(f+0.5)
 

 can be turned around to make floor() from round() 

 floor(f) = round(f-0.5)
 

 Although both these rules break around negative numbers, so using it is less than ideal: 

 def trunc(f, n):
 if f &gt; 0:
  return "%.*f" % (n, (f - 0.5*10**-n))
 elif f == 0:
  return "%.*f" % (n, f)
 elif f &lt; 0:
  return "%.*f" % (n, (f + 0.5*10**-n))
 
 #7 int(16.5);
this will give an integer value of 16, i.e. trunc, won't be able to specify decimals, but guess you can do that by 

 import math;

def trunc(invalue, digits):
 return int(invalue*math.pow(10,digits))/math.pow(10,digits);
 
 #8 If you mean when printing, then the following should work: 

 print '%.3f' % number