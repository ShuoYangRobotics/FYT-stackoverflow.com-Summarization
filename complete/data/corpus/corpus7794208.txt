Question (ID-7794208): Python - Remove duplicate words in string Following example: 

 string1 = "calvin klein design dress calvin klein"
 

 how can I remove the second two duplicates "calvin" and "klein" ? 

 result should look like -> string2 = "calvin klein design dress" 

 only the second duplicates should be removed and the sequence of the words should not be changed! 
 Answers (Total-7): #0 Cut and paste from the itertools recipes 

 from itertools import ifilterfalse

def unique_everseen(iterable, key=None):
 "List unique elements, preserving order. Remember all elements ever seen."
 # unique_everseen('AAAABBBCCDAABBB') --&gt; A B C D
 # unique_everseen('ABBCcAD', str.lower) --&gt; A B C D
 seen = set()
 seen_add = seen.add
 if key is None:
  for element in ifilterfalse(seen.__contains__, iterable):
   seen_add(element)
   yield element
 else:
  for element in iterable:
   k = key(element)
   if k not in seen:
    seen_add(k)
    yield element
 

 I really wish they could go ahead and make a module out of those recipes soon. I'd very much like to be able to do from itertools_recipes import unique_everseen instead of using cut-and-paste every time I need something. 

 Use like this: 

 def unique_words(string, ignore_case=False):
 key = None
 if ignore_case:
  key = str.lower
 return " ".join(unique_everseen(string.split(), key=key))

string2 = unique_words(string1)
 
 #1 def unique_list(l):
 ulist = []
 [ulist.append(x) for x in l if x not in ulist]
 return ulist

a="calvin klein design dress calvin klein"
a=' '.join(unique_list(a.split()))
 
 #2 string1 = "calvin klein design dress calvin klein"
words = string1.split()
print " ".join(sorted(set(words), key=words.index))
 

 This sorts the set of all the (unique) words in your string by the word's index in the original list of words. 
 #3 In Python 2.7+, you could use collections.OrderedDict for this: 

 from collections import OrderedDict
s = "calvin klein design dress calvin klein"
print ' '.join(OrderedDict((w,w) for w in s.split()).keys())
 
 #4 string = 'calvin klein design dress calvin klein'

def uniquify(string):
 output = []
 seen = set()
 for word in string.split():
  if word not in seen:
   output.append(word)
   seen.add(word)
 return ' '.join(output)

print uniquify(string)
 
 #5 You can use a set to keep track of already processed words. 

 words = set()
result = ''
for word in string1.split():
 if word not in words:
  result = result + word + ' '
  words.add(word)
print result
 
 #6 Several answers are pretty close to this but haven't quite ended up where I did: 

 def uniques( your_string ): 
 seen = set()
 return ' '.join( seen.add(i) or i for i in your_string.split() if i not in seen )
 

 Of course, if you want it a tiny bit cleaner or faster, we can refactor a bit: 

 def uniques( your_string ): 
 words = your_string.split()

 seen = set()
 seen_add = seen.add

 def add(x):
  seen_add(x) 
  return x

 return ' '.join( add(i) for i in words if i not in seen )
 

 I think the second version is about as performant as you can get in a small amount of code. (More code could be used to do all the work in a single scan across the input string but for most workloads, this should be sufficient.)