Question (ID-664219): Uninitialized value in Python? What's the uninitialized value in Python, so I can compare if something is initialized, like: 

 val

if val == undefined ?
 

 EDIT: added a pseudo keyword. 

 EDIT2: I think I didn't make it clear, but say val is already there, but nothing is assigned to it. 

 Duplicate: Just declaring a variable in Python? 
 Answers (Total-9): #0 Will throw a NameError exception: 

 &gt;&gt;&gt; val
Traceback (most recent call last):
 File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'val' is not defined
 

 You can either catch that or use 'val' in dir() , i.e.: 

 try:
 val
except NameError:
 print("val not set")
 

 or 

 if 'val' in dir():
 print('val set')
else:
 print('val not set')
 
 #1 A name does not exist unless a value is assigned to it. There is None, which generally represents no usable value, but it is a value in its own right. 
 #2 In python, variables either refer to an object, or they don't exist. If they don't exist, you will get a NameError. Of course, one of the objects they might refer to is None . 

 try:
 val
except NameError:
 print "val is not set"


if val is None:
 print "val is None"
 
 #3 In Python, for a variable to exist, something must have been assigned to it. You can think of your variable name as a dictionary key that must have some value associated with it (even if that value is None). 
 #4 try:
 print val
except NameError:
 print "val wasn't set."
 
 #5 To add to phihag's answer : you can use dir() to get a list of all of the variables in the current scope, so if you want to test if var is in the current scope without using exceptions, you can do: 

 if 'var' in dir():
 # var is in scope
 
 #6 Q: How do I discover if a variable is defined at a point in my code? 

 A: Read up in the source file until you see a line where that variable is defined. 
 #7 This question leads on to some fun diversions concerning the nature of python objects and it's garbage collector: 

 It's probably helpful to understand that all variables in python are really pointers, that is they are names in a namespace (implemented as a hash-table) whch point to an address in memory where the object actually resides. 

 Asking for the value of an uninitialized variable is the same as asking for the value of the thing a pointer points to when the pointer has not yet been created yet... it's obviously nonsense which is why the most sensible thing Python can do is throw a meaningful NameError. 

 Another oddity of the python language is that it's possible that an object exists long before you execute an assignment statement. Consider: 

 a = 1
 

 Did you magically create an int(1) object here? Nope - it already existed. Since int(1) is an immutable singleton there are already a few hundred pointers to it: 

 &gt;&gt;&gt; sys.getrefcount(a)
592
&gt;&gt;&gt;
 

 Fun, eh? 

 EDIT: commment by JFS (posted here to show the code) 

 &gt;&gt;&gt; a = 1 + 1
&gt;&gt;&gt; sys.getrefcount(a) # integers less than 256 (or so) are cached
145
&gt;&gt;&gt; b = 1000 + 1000
&gt;&gt;&gt; sys.getrefcount(b) 
2
&gt;&gt;&gt; sys.getrefcount(2000)
3
&gt;&gt;&gt; sys.getrefcount(1000+1000)
2
 
 #8 Usually a value of None is used to mark something as "declared but not yet initialized; I would consider an uninitialized variable a defekt in the code