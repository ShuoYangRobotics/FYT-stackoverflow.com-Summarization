Question (ID-5106228): getting every possible combination in a list suppose I had something like this: 

 L1=['cat', 'dog', 'fish', 'rabbit', 'horse', 'bird', 'frog', 'mouse'...]

for x in L1:
 input1= open('file_%s'%(x), 'r')
 file1= pickle.load(input1)
 for x in L1:
  input2= open('file_%s'%(x), 'r')
  file2= pickle.load(input2)
 

 and I wanted to get every combination of files without repeating combinations that have already been done (once cat_dog is done do not do dog_cat again). Is there a way I could do this? My real list is in alphabetical order, if that makes any difference. 
 Answers (Total-6): #0 This will give you the names: 

 L1=['cat', 'dog', 'fish', 'rabbit', 'horse', 'bird', 'frog', 'mouse']

from itertools import combinations

for combo in combinations(L1, 2):
 print '_'.join(combo)
 

 Output: 

 cat_dog
cat_fish
cat_rabbit
cat_horse
cat_bird
cat_frog
cat_mouse
dog_fish
dog_rabbit
dog_horse
dog_bird
dog_frog
dog_mouse
fish_rabbit
fish_horse
fish_bird
fish_frog
fish_mouse
rabbit_horse
rabbit_bird
rabbit_frog
rabbit_mouse
horse_bird
horse_frog
horse_mouse
bird_frog
bird_mouse
frog_mouse
 
 #1 How about itertools.combinations ? 

 Usage example: 

 &gt;&gt;&gt; list(itertools.combinations([1, 2, 3, 4, 5, 6], 2))
[(1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (2, 3), (2, 4), (2, 5), (2, 6), (3, 4),
(3, 5), (3, 6), (4, 5), (4, 6), (5, 6)]
 

 First argument is an iterable, second is r , length of subsequences returned. 

 You can then concatenate the results with ease using map or a comprehension: 

 map(lambda x: x[0] + "_" + x[1], itertools.combinations(["cat", "dog", "fish"], 2)))
 

 x in the lambda is a r -sized tuple. 

 Result of the above would be: 

 ['cat_dog', 'cat_fish', 'dog_fish']
 
 #2 There's itertools that can perform combinations and permutations (you'd want the former). As far as I can tell, you can't really specify the output format, so you'd get "catdog" as output, but the doc page gives you an idea of how the combinations function works, so you can adapt it to build what you need. 
 #3 you can also do it as a generator: 

 L1=['cat', 'dog', 'fish', 'rabbit', 'horse', 'bird', 'frog', 'mouse']
tuples = [(x,y) for x in L1 for y in L1 if x != y]
for entry in tuples:
 if (entry[1], entry[0]) in tuples:
  tuples.remove((entry[1],entry[0]))
for pair in tuples:
 input1= open('file_%s'%(pair[0]), 'r')
 file1= pickle.load(input1)
 input2= open('file_%s'%(pair[1]), 'r')
 file2= pickle.load(input2)
 

 After the first loop, the contents of tuples is: 

 ('cat', 'dog')
('cat', 'fish')
('cat', 'rabbit')
('cat', 'horse')
('cat', 'bird')
('cat', 'frog')
('cat', 'mouse')
('dog', 'fish')
('dog', 'rabbit')
('dog', 'horse')
('dog', 'bird')
('dog', 'frog')
('dog', 'mouse')
('fish', 'rabbit')
('fish', 'horse')
('fish', 'bird')
('fish', 'frog')
('fish', 'mouse')
('rabbit', 'horse')
('rabbit', 'bird')
('rabbit', 'frog')
('rabbit', 'mouse')
('horse', 'bird')
('horse', 'frog')
('horse', 'mouse')
('bird', 'frog')
('bird', 'mouse')
('frog', 'mouse')
 
 #4 import itertools
import cPickle

def unique_pairs(lst):
 return itertools.combinations(lst, 2)

FNAME = "file_{0}".format
def load_pickle(fname):
 with open(fname) as inf:
  return cPickle.load(inf)

def naive_method(lst):
 # load each file every time it is requested
 for x,y in unique_pairs(lst):
  input1 = load_pickle(FNAME(x))
  input2 = load_pickle(FNAME(y))
  # do something with input1 and input2

def better_method(lst):
 # if you have enough memory for it!
 dat = [load_pickle(FNAME(i)) for i in lst]
 for x,y in unique_pairs(range(len(lst))):
  input1 = dat[x]
  input2 = dat[y]
  # do something with input1 and input2
 
 #5 Or everyone could give you the answer anyways. 

 If you're more interested in the actual logic as opposed to a built in function that does it for you (which if it's homework, is probably what your teacher is looking for)... 

  L1=['cat', 'dog', 'snake', 'hippo']
 for i in range(len(L1)):
  n=i+1
  while n &lt; len(L1):
   print L1[i] + '_' + L1[n]
   n+=1