Question (ID-1398164): Initialize a string variable in Python: "" or None? Suppose I have a class with a string instance attribute.
Should I initialize this attribute with "" value, or None is OK either? 

 def __init__(self, mystr = "")
 self.mystr = mystr
 

 or 

 def __init__(self, mystr = None)
 self.mystr = mystr
 

 Thanks 

 Edit : What I thought is that if I use "" as an initial value, I " declare " a variable to be of string type. And then I won't be able to assign any other type to it later. Am I right? 

 Edit : I think it's important to note here, that my suggestion was WRONG. And there is no problem to assign another type to a variable. I liked a comment of S.Lott : " Since nothing in Python is "declared", you're not thinking about this the right way. " 
 Answers (Total-7): #0 If not having a value has a meaning in your program (e.g. an optional value), you should use None. That's its purpose anyway. 

 If the value must be provided by the caller of __init__, I would recommend not to initialize it. 

 If "" makes sense as a default value, use it. 

 In Python the type is deduced from the usage. Hence, you can change the type by just assigning a value of another type. 

 &gt;&gt;&gt; x = None
&gt;&gt;&gt; print type(x)
&lt;type 'NoneType'&gt;
&gt;&gt;&gt; x = "text"
&gt;&gt;&gt; print type(x)
&lt;type 'str'&gt;
&gt;&gt;&gt; x = 42
&gt;&gt;&gt; print type(x)
&lt;type 'int'&gt;
 
 #1 It depends. If you want to distinguish between no parameter passed in at all, and an empty string passed in, you could use None. 
 #2 Either is fine, though None is more common as a convention - None indicates that no value was passed for the optional parameter. 

 There will be times when "" is the correct default value to use - in my experience, those times occur less often. 
 #3 Since both None and "" are false, you can do both. See 6.1. Truth Value Testing . 

 Edit 

 To answer the question in your edit: No, you can assign a different type. 

 &gt;&gt;&gt; a = ""
&gt;&gt;&gt; type(a)
&lt;type 'str'&gt;
&gt;&gt;&gt; a = 1
&gt;&gt;&gt; type(a)
&lt;type 'int'&gt;
 
 #4 Either might be fine, but I don't think there is a definite answer. 

 
 If you want to indicate that the value has not been set, comparing with None is better than comparing with "" , since "" might be a valid value, 
 If you just want a default value, "" is probably better, because its actually a string, and you can call string methods on it. If you went with None , these would lead to exceptions. 
 If you wish to indicate to future maintainers that a string is required here, "" can help with that. 
 

 Complete side note: 

 If you have a loop, say: 

 def myfunc (self, mystr = ""):
 for other in self.strs:
  mystr = self.otherfunc (mystr, other)
 

 then a potential future optimizer would know that str is always a string. If you used None , then it might not be a string until the first iteration, which would require loop unrolling to get the same effects. While this isn't a hypothetical (it comes up a lot in my PHP compiler) you should certainly never write your code to take this into account. I just thought it might be interesting :) 
 #5 For lists or dicts, the answer is more clear,
according to http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html#default-parameter-values 
use None as default parameter. 

 But also for strings, a (empty) string object is instanciated at runtime for
the keyword parameter. 

 The cleanest way is probably: 

 def myfunc(self, my_string=None):
 self.my_string = my_string or "" # or a if-else-branch, ...
 
 #6 None is used to indicate "not set", whereas any other value is used to indicate a "default" value. 

 Hence, if your class copes with empty strings and you like it as a default value, use "". If your class needs to check if the variable was set at all, use None. 

 Notice that it doesn't matter if your variable is a string initially. You can change it to any other type/value at any other moment.