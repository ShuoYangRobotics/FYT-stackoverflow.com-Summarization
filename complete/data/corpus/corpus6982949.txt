Question (ID-6982949): Output formatting in Python: replacing several %s with the same variable I'm trying to maintain/update/rewrite/fix a bit of Python that looks a bit like this: 

 variable = """My name is %s and it has been %s since I was born.
    My parents decided to call me %s because they thought %s was a nice name.
    %s is the same as %s.""" % (name, name, name, name, name, name)
 

 There are little snippets that look like this all over the script, and I was wondering whether there's a simpler (more Pythonic?) way to write this code. I've found one instance of this that replaces the same variable about 30 times, and it just feels ugly. 

 Is the only way around the (in my opinion) ugliness to split it up into lots of little bits? 

 variable = """My name is %s and it has been %s since I was born.""" % (name, name)
variable += """My parents decided to call me %s because they thought %s was a nice name.""" % (name, name)
variable += """%s is the same as %s.""" % (name, name)
 
 Answers (Total-7): #0 Use a dictionary instead. 

 var = '%(foo)s %(foo)s %(foo)s' % { 'foo': 'look_at_me_three_times' }
 

 Or format with explicit numbering. 

 var = '{0} {0} {0}'.format('look_at_meeee')
 

 Well, or format with named parameters. 

 var = '{foo} {foo} {foo}'.format(foo = 'python you so crazy')
 
 #1 &gt;&gt;&gt; "%(name)s %(name)s hello!" % dict(name='foo')
'foo foo hello!'
 
 #2 You could use named parameters. See examples here 
 #3 Use the new string.format : 

 name = 'Alex'
variable = """My name is {0} and it has been {0} since I was born.
   My parents decided to call me {0} because they thought {0} was a nice name.
   {0} is the same as {0}.""".format(name)
 
 #4 variable = """My name is {0} and it has been {0} since I was born.
    My parents decided to call me {0} because they thought {0} was a nice name.
    {0} is the same as {0}.""".format(name)
 
 #5 Use formatting strings: 

 &gt;&gt;&gt; variable = """My name is {name} and it has been {name} since..."""
&gt;&gt;&gt; n = "alex"
&gt;&gt;&gt;
&gt;&gt;&gt; variable.format(name=n)
'My name is alex and it has been alex since...'
 

 The text within the {} can be a descriptor or an index value. 

 Another fancy trick is to use a dictionary to define multiple variables in combination with the ** operator. 

 &gt;&gt;&gt; values = {"name": "alex", "color": "red"}
&gt;&gt;&gt; """My name is {name} and my favorite color is {color}""".format(**values)
'My name is alex and my favorite color is red'
&gt;&gt;&gt;
 
 #6 have a look at Template Strings