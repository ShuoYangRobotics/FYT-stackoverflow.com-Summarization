Question (ID-2466401): How to generate SSH key pairs with Python I'm attempting to write a script to generate SSH Identity key pairs for me. 

 from M2Crypto import RSA
key = RSA.gen_key(1024, 65337)
key.save_key("/tmp/my.key", cipher=None)
 

 The file /tmp/my.key looks great now. 

 By running ssh-keygen -y -f /tmp/my.key &gt; /tmp/my.key.pub I can extract the public key. 

 My question is how can I extract the public key from python? Using key.save_pub_key("/tmp/my.key.pub") saves something like: 

 -----BEGIN PUBLIC KEY-----
MFwwDQYJKoZIhvcNAQEBBQADASDASDASDASDBarYRsmMazM1hd7a+u3QeMP
...
FZQ7Ic+BmmeWHvvVP4Yjyu1t6vAut7mKkaDeKbT3yiGVUgAEUaWMXqECAwEAAQ==
-----END PUBLIC KEY-----
 

 When I'm looking for something like: 

 ssh-rsa AAAABCASDDBM$%3WEAv/3%$F ..... OSDFKJSL43$%^DFg==
 
 Answers (Total-7): #0 How about using subprocess to invoke ssh-keygen ? 

 from subprocess import Popen, PIPE
import shlex

def get_pub_key(path):
 args = shlex.split('ssh-keygen -y -f')
 args.append(path)
 p = Popen(args, stdout=PIPE)
 stdout = p.communicate()[0]
 if p.returncode != 0:
  raise Exception("Error handling would be nice, eh?")
 return stdout.strip()

print get_pub_key('/tmp/my.key')
 

 The above little program will produce an output like this: 

 ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA ... 9Jbn6D74JOKpaOU050ltyNRw==
 
 #1 The key used by ssh is just base64 encoded, i don't know M2Crypto very much, but after a quick overview it seems you could do what you want this way: 

 import os
from base64 import b64encode
from M2Crypto import RSA   

key = RSA.gen_key(1024, 65537)
raw_key = key.pub()[1]
b64key = b64encode(raw_key)

username = os.getlogin()
hostname = os.uname()[1]
keystring = 'ssh-rsa %s %s@%s' % (b64key, username, hostname)

with open(os.getenv('HOME')+'/.ssh/id_rsa.pub') as keyfile:
 keyfile.write(keystring)
 

 I didn't test the generated key with SSH, so please let me know if it works (it should i think) 
 #2 I don't know the specifics of the SSH pubkey file, but comparing the base64 decoded version of ssh-keygen output to the contents of key.pub() the format of the keyfile is 

 b64encode('\x00\x00\x00\x07ssh-rsa%s%s' % (key.pub()[0], key.pub()[1]))
 
 #3 Can you get the AAAA...Dfg== string out of it while it's an object? If so, you could simply open a file yourself and save that instead of using the built in save_pub_key function. 
 #4 Just guessing... but have you tried something like this?: 

 print "ssh-rsa " + "".join([ l.strip() for l in open('/tmp/my.key.pub') if not l.startswith('-----')])
 
 #5 I don't know of such a library in Python. 

 You might find the paramiko library useful (also available from PyPI ). It implements the SSH protocol, and has functionality for handling existing keys, but not generating them. 

 Generation of keys might be a useful addition to that library (you could work with the developers to incorporate it into the library), and an easier start than doing it from scratch. 
 #6 This code works for me: 

 import os
from Crypto.PublicKey import RSA

key = RSA.generate(2048, os.urandom)

# Create public key.                                    
ssh_rsa = '00000007' + base64.b16encode('ssh-rsa')

# Exponent.                                      
exponent = '%x' % (key.e, )
if len(exponent) % 2:
 exponent = '0' + exponent

ssh_rsa += '%08x' % (len(exponent) / 2, )
ssh_rsa += exponent

modulus = '%x' % (key.n, )
if len(modulus) % 2:
 modulus = '0' + modulus

if modulus[0] in '89abcdef':
 modulus = '00' + modulus

ssh_rsa += '%08x' % (len(modulus) / 2, )
ssh_rsa += modulus

public_key = 'ssh-rsa %s' % (
 base64.b64encode(base64.b16decode(ssh_rsa.upper())), )