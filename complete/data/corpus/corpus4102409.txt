Question (ID-4102409): 8 Character Random Code I've been through answers to a few similar questions asked on SO, but could not find what I was looking for. 

 Is there a more efficient way to generate 8 character unique IDs, base 36 (0-9A-Z), than generating a unique ID and querying the DB to see if it already exists and repeating until you get a unique ID that has not been used? 

 Other solutions I found use time, but this is perhaps too easy to guess and may not work well in distributed systems. Consider these IDs to be promo codes. 
 Answers (Total-9): #0 One option is to do it the other way round: generate a huge number of them in the database whenever you need to, then either fetch a single one from the DB when you need one, or reserve a whole bunch of them for your particular process (i.e. mark them as "potentially used" in the database) and then dole them out from memory. 
 #1 I question that your "inefficient" approach is actually inefficient. Consider this: 

 
 There are 36^8 == 2,821,109,907,456 (2.8 Trillion) possible IDs. 
 If you have N existing IDs, the chance of a new randomly generated ID colliding is N in ~2.8 trillion. 
 Unless N is in the hundreds of billions, you "generate a unique ID and querying the DB to see if it already exists" algorithm will almost always terminate in one cycle. 
 

 With careful design, you should be able to generate a guaranteed unique ID in one database request, almost all of the time ... unless you have an awfully large number of existing IDs. (And if you do, just add another couple of characters to the ID and the problem goes away again.) 

 If you want to, you can reduce the average number of database operations to less than one per ID by generating the IDs in batches, but their are potential complications, especially if you need to record the number of IDs that are actually in use. 

 But, if you have at most 150,000 IDs (I assume, generated over a long period of time) then creating the IDs in batches is not worth the effort ... unless you are doing a bulk upload operation. 
 #2 the answer is YES you simply have to generate them randomly, and then, check that you have not used that one already. 

 This is exactly how your bank account number, and the like, is created. (But see below.) 

 (Of course there is only a tiny chance you will get a collision, but you have to check. On systems like this, I always have it email the admin or make a note somewhere, if there is a collision. Indeed, the fact that there is a collision (or many collisions!) is your signal that something has gone wrong.) 

 Note that there is absolutely nothing "inefficient" about this. In the course of establishing a new user you will be doing 10s of 100s of big database lookups ("that username already exists" "your cousin is already a member" "that branch ID does not exist" etc etc). It is utterly no big deal to check that the Human-Known-User-Id is unique. 

 Note that of course you have to lock up the relevant table (or whatever you're working with) while you create one and check that it's unique. On a huge world-wide commercial system with multiple access and creation that is a bit of a hassle. 

 Here's a probably BETTER APPROACH , Bradford. This is what is usually done in large commercial systems. Just make up a big list of them (ie, generate millions of them randomly, beforehand, and check that they are all unique as you generate). Then have a little server that shoots them out (being careful to lock up, etc etc). That's the actual answer to how it's done on a large commercial system. 

 (Really, having gotten a supposedly-not-yet-used new ID from such a server, I would still just check that it has not been used already, as a failsafe. It would be crazy not to - it's only one DB call, and you're making 10s/100s DB calls to set up a new account.) 

 By the way, normally Human-Readable-Ids are NOT SO RANDOM. You would almost certainly not have zeros at the start. And many companies don't like zeros at the end. Personally I think you should never have three of anything in a row, and most large commercial systems enforce that for IDs (even two in a row is perhaps no good - it's your choice). If you are using letters ("your code is XMJUYTD") you will almost certainly simply leave out problem letters (I, O, etc). If you are mixing letters and numbers, you would probably leave out number zero. So, it's not so easy to construct a tasteful human-side-userID that makes you and customers happy! 

 In summary 

 (1) Almost certainly in practice, premake a big list of them and use that. 

 (2) Don't forget to lock up and so on. 

 (3) There is nothing whatsoever "inefficient" about what you describe; you describe how it is actually done in real life on big systems. 
 #3 Unfortunately, 8 base 36 digits is a bit small. It's only 2 million million possible IDs, so if you generate 1.4 million randomly you have about a half chance of a collision. 

 You could possibly use a PRNG with a large period, and map its current state to your ID space via some bijection. A 41 bit LFSR wouldn't be uncrackable, but might be reasonably OK if the thing you're protecting isn't all that valuable. You could distribute somewhat without having to access the DB all the time, by providing different nodes with a different position to start the cycle. 

 The trouble with any such deterministic method, of course, is that once it's broken it's completely broken, and you can no longer trust any IDs. So doling numbers out of a database is probably the way to go, and distribute by doling them out in batches of a thousand or whatever. 

 If you had a larger ID space, then you could use more secure techniques, for example the ID could consist of something to identify the source, an incrementing serial number for that source, and an HMAC using a key unique to the source. 
 #4 If there is only one source of IDs (that is: you don't need to coordinate multiple independent sources on different machines) you can do the following: 

 
 Calculate the maximum number of bits that a number may have so that it doesn't exceed the information contained in an 8-symbol string of 0-9A-Z. This would be floor(log2(36^8)) = 41 bits. 
 Have a counter (with 41 bits) start at zero 
 Return transform(counter++) for each ID request 
 

 The transform function has to be bijective and can be an arbitrarily long sequence of the following operations (which are all bijective themselves when they are calculated modulo 2^41 ): 

 
 xor with a fixed value 
 rotate left or right by a fixed value 
 reorder the bits by a fixed mapping (a generalization of the rotation above) 
 add or subtract a fixed value 
 

 When you are finished with that, you only need another function encode(number) to transform the number to base36. 
 #5 Here's some python code for generating random, base36 IDs. 

 import random

def base36encode(number, alphabet='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'):
 '''
 Convert positive integer to a base36 string.

 Source: http://en.wikipedia.org/wiki/Base_36#Python_Conversion_Code
 '''
 if not isinstance(number, (int, long)):
  raise TypeError('number must be an integer')

 # Special case for zero
 if number == 0:
  return '0'

 base36 = ''

 sign = ""
 if number &lt; 0:
  sign ='-'
  number=-number

 while number != 0:
  number, i = divmod(number, len(alphabet))
  base36 = alphabet[i] + base36

 return sign + base36

def generateID(length=8):
 '''Generates a base36 ID.'''

 random.seed()
 id = base36encode(random.randint(0, (36**length)-1))

 # append 0s to ensure desired length
 while len(id) &lt; length:
  id = '0' + id

 return id

def generateMultipleIDs(n):
 '''Generate n number of unique, base36 IDs.'''

 output = set()

 while len(output) &lt; n:
  output.add(generateID())

 return output
 
 #6 I once solved a similar problem using C++ involving a smaller number of possible IDs, but there might be useful to consider some ways to scale it up. Basically I created a big bitmap for all the possible IDs and would just lookup whether one was in use by testing the proper bit for it. 

 To minimize RAM requirements, I stored the bitmap in a raw binary file and used random-access file i/o to seek to the byte with the corresponding bit in it I needed to check and/or set. 

 Your much larger ID space would require a 328 GB bitmap, which is likely out of the question. On the other hand, a Python set of the used IDs might be acceptable, depending on how many IDs you think might actually end up being used. Other alternatives might be some sort of sparse file or sparse matrix technique, such as those in scipy.sparse . 

 Hope this helps. 
 #7 I do something similar to generate activation codes: 8-letter lowercase strings that are single-use. They are intended to be used within a short time of being generated (usually within minutes, but possibly not for up to a week), but must be unique. When they have been used, they are removed from the database. 

 I just generate a value and see if it is in use in the database. This works for now, because there are not heaps of unused codes sitting in the database, but are still not easy to guess, even if you have been provided with one. 

 As for the generation code: 

 def _generate_code(self, length):
 random.seed()
 candidates = string.lowercase[:26]
 result = ""
 for i in range(length):
  result += random.choice(candidates)
 return result
 
 #8 Does it need to be cryptographically secure? 

 If not, pc(n) = a + bn, where b is prime relative to 36^8 will do. Use an array of byte. 

 foo(int n, byte[] a, byte[] b) {
 byte[] r = new byte[8];
 int carry=0;
 for(int i = 0; i&lt;8;i++) {
 int x = carry + a[i] + n*b[i];
 r[i] = x % 36;
 carry = x / 36;  
 }
}