Question (ID-3742580): Python, why elif keyword? I just started python programming! 
There's one thing I wondered about, the "elif" keyword. 

 Any other programming languages I used before use simply the "else if" syntax. 
Does anyone have an idea why the python developers add the additional "elif" keyword? 

 Why not: 

 if a:
 print("a")
else if b:
 print("b")
else:
 print("c")
 
 Answers (Total-8): #0 Far as I know, it's there to avoid excessive indentation. You could write 

 if x &lt; 0:
 print 'Negative'
else:
 if x == 0:
  print 'Zero'
 else:
  print 'Positive'
 

 but 

 if x &lt; 0:
 print 'Negative'
elif x == 0:
 print 'Zero'
else:
 print 'Positive'
 

 is just so much nicer. 
 #1 To avoid brace^H^H^H^H^Helse if war. 

 In C/C++ where you have an else if , you can structure your code in many different styles: 

 if (...) {
 ...
} else if (...) {
 ...
}


if (...) {
 ...
} 
else if (...) {
 ...
}

if (...) {
 ...
} else 
if (...) {
 ...
}

// and so on
 

 by having an elif instead, such war would never happen since there is only one way to write an elif . Also, elif is much shorter than else if . 
 #2 Most likely its syntactic sugar. Like the Wend of Visual Basic. 
 #3 That's just the way it is. Javascript uses else if , php uses elseif , perl uses elsif , the C preprocessor and python use elif . None of them are wrong, they just choose slightly different syntax to do the same thing. :D 
 #4 Python inherits this from Perl, where it's called elsif . 

 In Python's case, else if as two separate constructs like it is in C-like languages would be quite ugly as you'd have to have else: if: with two indenting levels. 

 It's arguable whether special-casing the two keywords together would be better (so making else if a single construct, like the not in operator. 

 PL/SQL also has elsif , and the C preprocessor has it spelled elif . 
 #5 elif is some sort of replacement for switch in other languages but with more power 

 for example in C you write 

 
switch (number){
 case 1:
 doA()
 break;
 case 2:
 doB()
 break;
 case N:
 doN()
 break;
 default:
 doSomethingElse()
 break;
}
 

 in Python you write 

 
if number == 1: doA()
elif number == 2: doB()
elif number == N: doC()
else: doSomethingElse()
 

 As you see elif is more powerful since you can put more complex statements than in a switch, plus avoid nesting if/else statements 
 #6 I find them helpful to help differentiate the "else-if"s from the "final else". 
 #7 else if in python called elif 

 if a:
 print "a" 
elif b:
 print "b" 
else:
 print "c"