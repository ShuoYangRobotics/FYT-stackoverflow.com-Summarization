Question (ID-4961017): Clojure style function "threading" in Python Clojure has a "->" macro which inserts each expression recursively as the first argument of the next expression. 

 This means that I could write: 

 (-&gt; arg f1 f2 f3)
 

 and it behaves like (shell piping): 

 f3(f2(f1(arg)))
 

 I would like to do this in Python; however, searching seems to be a nightmare! I couldn't search for "->", and neither could I search for Python function threading ! 

 Is there a way to overload, say, the | operator so that I could write this in Python? 

 arg | f1 | f2 | f3
 

 Thanks! 
 Answers (Total-6): #0 You can easily implement something like this yourself. 

 def compose(current_value, *args):
 for func in args:
  current_value = func(current_value)
 return current_value

def double(n):
 return 2*n

print compose(5, double, double) # prints 20
 
 #1 Or possibly use the reduce function in the following way: 

 reduce(lambda x,f : f(x), [f1,f2,f3], arg)
 
 #2 Building on Howard's solution: 

 def T(*args):
 return reduce(lambda l, r: r(l), args)

def dbl(n):
 return 2*n

T(5,dbl,dbl)
#=&gt; 20

T(5,dbl,dbl,lambda x: 3*x)
#=&gt; 60
 
 #3 While I sympathize with the desire to create cool new language constructs (Ã  la Lisp macros), it is not really the Python philosophy to do this: 

 &gt;&gt;&gt; import this
[...]
There should be one-- and preferably only one --obvious way to do it.
 

 But as the respondents have said, you can do your function chaining in a variety of ways. Here is one that's perhaps more explicitly Lisp-like, if that suits your fancy: 

 a = lambda x: x*2
b = lambda x: x+1

def chain(first, *args):
 if len(args) == 0:
  return first
 else:
  return first(chain(*args))

print chain(b, a, 1)
 
 #4 No, there is not (at least sanely). Nor would you want to. Why not just write f3(f2(f1(arg))) ? Or better yet, model your problem in a way that doesn't require recursion. 

 You might be able to overload | by wrapping expressions in a class and defining __or__ in that class, but please, for the love of Guido, don't do that. 

 You could also do what btilly wrote, but I wouldn't recommend that either. Work within what the language provides you. 
 #5 Or try http://dev-tricks.net/pipe-infix-syntax-for-python 
A module that provide a syntax like : 

 fib() | take_while(lambda x: x &lt; 1000000)
  | where(lambda x: x % 2)
  | select(lambda x: x * x)
  | sum()