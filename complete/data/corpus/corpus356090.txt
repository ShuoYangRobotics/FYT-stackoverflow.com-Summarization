Question (ID-356090): How to compute the nth root of a very big integer in python I need a way to compute the nth root of a long integer in python. 

 I tried pow(n, 1.0/3), but obviously it doesn't work any ideas ? 

 UPDATE: 

 By long integer i mean REALLY long ints like: 

 11968003966030964356885611480383408833172346450467339251
196093144141045683463085291115677488411620264826942334897996389
485046262847265769280883237649461122479734279424416861834396522
819159219215308460065265520143082728303864638821979329804885526
557893649662037092457130509980883789368448042961108430809620626
059287437887495827369474189818588006905358793385574832590121472
680866521970802708379837148646191567765584039175249171110593159
305029014037881475265618958103073425958633163441030267478942720
703134493880117805010891574606323700178176718412858948243785754
898788359757528163558061136758276299059029113119763557411729353
915848889261125855717014320045292143759177464380434854573300054
940683350937992500211758727939459249163046465047204851616590276
724564411037216844005877918224201569391107769029955591465502737
961776799311859881060956465198859727495735498887960494256488224
613682478900505821893815926193600121890632 

 OverflowError: long int too large to convert to float 
 Answers (Total-9): #0 If it's a REALLY big number. You could use a binary search. 

 def find_invpow(x,n):
 """Finds the integer component of the n'th root of x,
 an integer such that y ** n &lt;= x &lt; (y + 1) ** n.
 """
 high = 1
 while high ** n &lt; x:
  high *= 2
 low = high/2
 while low &lt; high:
  mid = (low + high) // 2
  if low &lt; mid and mid**n &lt; x:
   low = mid
  elif high &gt; mid and mid**n &gt; x:
   high = mid
  else:
   return mid
 return mid + 1
 

 For example: 

 &gt;&gt;&gt; x = 237734537465873465
&gt;&gt;&gt; n = 5
&gt;&gt;&gt; y = find_invpow(x,n)
&gt;&gt;&gt; y
2986
&gt;&gt;&gt; y**n &lt;= x &lt;= (y+1)**n
True
&gt;&gt;&gt;
&gt;&gt;&gt; x = 119680039660309643568856114803834088331723464504673392511960931441&gt;
&gt;&gt;&gt; n = 45
&gt;&gt;&gt; y = find_invpow(x,n)
&gt;&gt;&gt; y
227661383982863143360L
&gt;&gt;&gt; y**n &lt;= x &lt; (y+1)**n
True
&gt;&gt;&gt; find_invpow(y**n,n) == y
True
&gt;&gt;&gt;
 
 #1 Gmpy is a C-coded Python extension module that wraps the GMP library to provide to Python code fast multiprecision arithmetic (integer, rational, and float), random number generation, advanced number-theoretical functions, and more. 

 Includes a root function: 

 
 x.root(n): returns a 2-element tuple (y,m), such that y is the
 (possibly truncated) n-th root of x; m, an ordinary Python int,
 is 1 if the root is exact (x==y**n), else 0. n must be an ordinary
 Python int, >=0. 
 

 For example, 20th root: 

 &gt;&gt;&gt; import gmpy
&gt;&gt;&gt; i0=11968003966030964356885611480383408833172346450467339251 
&gt;&gt;&gt; m0=gmpy.mpz(i0)
&gt;&gt;&gt; m0
mpz(11968003966030964356885611480383408833172346450467339251L)
&gt;&gt;&gt; m0.root(20)
(mpz(567), 0)
 
 #2 Oh, for numbers that big, you would use the decimal module. 

 ns: your number as a string 

 ns = "11968003966030964356885611480383408833172346450467339251196093144141045683463085291115677488411620264826942334897996389485046262847265769280883237649461122479734279424416861834396522819159219215308460065265520143082728303864638821979329804885526557893649662037092457130509980883789368448042961108430809620626059287437887495827369474189818588006905358793385574832590121472680866521970802708379837148646191567765584039175249171110593159305029014037881475265618958103073425958633163441030267478942720703134493880117805010891574606323700178176718412858948243785754898788359757528163558061136758276299059029113119763557411729353915848889261125855717014320045292143759177464380434854573300054940683350937992500211758727939459249163046465047204851616590276724564411037216844005877918224201569391107769029955591465502737961776799311859881060956465198859727495735498887960494256488224613682478900505821893815926193600121890632"
from decimal import Decimal
d = Decimal(ns)
one_third = Decimal("0.3333333333333333")
print d ** one_third
 

 and the answer is: 2.287391878618402702753613056E+305 

 TZ pointed out that this isn't accurate... and he's right. Here's my test. 

 from decimal import Decimal

def nth_root(num_decimal, n_integer):
 exponent = Decimal("1.0") / Decimal(n_integer)
 return num_decimal ** exponent

def test():
 ns = "11968003966030964356885611480383408833172346450467339251196093144141045683463085291115677488411620264826942334897996389485046262847265769280883237649461122479734279424416861834396522819159219215308460065265520143082728303864638821979329804885526557893649662037092457130509980883789368448042961108430809620626059287437887495827369474189818588006905358793385574832590121472680866521970802708379837148646191567765584039175249171110593159305029014037881475265618958103073425958633163441030267478942720703134493880117805010891574606323700178176718412858948243785754898788359757528163558061136758276299059029113119763557411729353915848889261125855717014320045292143759177464380434854573300054940683350937992500211758727939459249163046465047204851616590276724564411037216844005877918224201569391107769029955591465502737961776799311859881060956465198859727495735498887960494256488224613682478900505821893815926193600121890632"
 nd = Decimal(ns)
 cube_root = nth_root(nd, 3)
 print (cube_root ** Decimal("3.0")) - nd

if __name__ == "__main__":
 test()
 

 It's off by about 10**891 
 #3 You can make it run slightly faster by avoiding the while loops in favor of setting low to 10 ** (len(str(x)) / n) and high to low * 10. Probably better is to replace the len(str(x)) with the bitwise length and using a bit shift. Based on my tests, I estimate a 5% speedup from the first and a 25% speedup from the second. If the ints are big enough, this might matter (and the speedups may vary). Don't trust my code without testing it carefully. I did some basic testing but may have missed an edge case. Also, these speedups vary with the number chosen. 

 If the actual data you're using is much bigger than what you posted here, this change may be worthwhile. 

 from timeit import Timer

def find_invpow(x,n):
 """Finds the integer component of the n'th root of x,
 an integer such that y ** n &lt;= x &lt; (y + 1) ** n.
 """
 high = 1
 while high ** n &lt; x:
  high *= 2
 low = high/2
 while low &lt; high:
  mid = (low + high) // 2
  if low &lt; mid and mid**n &lt; x:
   low = mid
  elif high &gt; mid and mid**n &gt; x:
   high = mid
  else:
   return mid
 return mid + 1

def find_invpowAlt(x,n):
 """Finds the integer component of the n'th root of x,
 an integer such that y ** n &lt;= x &lt; (y + 1) ** n.
 """
 low = 10 ** (len(str(x)) / n)
 high = low * 10

 while low &lt; high:
  mid = (low + high) // 2
  if low &lt; mid and mid**n &lt; x:
   low = mid
  elif high &gt; mid and mid**n &gt; x:
   high = mid
  else:
   return mid
 return mid + 1

x = 237734537465873465
n = 5
tests = 10000

print "Norm", Timer('find_invpow(x,n)', 'from __main__ import find_invpow, x,n').timeit(number=tests)
print "Alt", Timer('find_invpowAlt(x,n)', 'from __main__ import find_invpowAlt, x,n').timeit(number=tests)
 

 Norm 0.626754999161 

 Alt 0.566340923309 
 #4 Try converting the exponent to a floating number, as the default behaviour of / in Python is integer division 

 n**(1/float(3)) 
 #5 In older versions of Python, 1/3 is equal to 0. In Python 3.0, 1/3 is equal to 0.33333333333 (and 1//3 is equal to 0). 

 So, either change your code to use 1/3.0 or switch to Python 3.0 . 
 #6 Well, if you're not particularly worried about precision, you could convert it to a sting, chop off some digits, use the exponent function, and then multiply the result by the root of how much you chopped off. 

 E.g. 32123 is about equal to 32 * 1000, the cubic root is about equak to cubic root of 32 * cubic root of 1000. The latter can be calculated by dividing the number of 0s by 3. 

 This avoids the need for the use of extension modules. 
 #7 Possibly for your curiosity: 

 http://en.wikipedia.org/wiki/Hensel_Lifting 

 This could be the technique that Maple would use to actually find the nth root of large numbers. 

 Pose the fact that x^n - 11968003.... = 0 mod p , and go from there... 
 #8 If you are looking for something standard, fast to write with high precision. I would use decimal and adjust the precision (getcontext().prec) to at least the length of x. 

 Code (Python 3.0) 

 from decimal import *

x = '11968003966030964356885611480383408833172346450467339251\
196093144141045683463085291115677488411620264826942334897996389\
485046262847265769280883237649461122479734279424416861834396522\
819159219215308460065265520143082728303864638821979329804885526\
557893649662037092457130509980883789368448042961108430809620626\
059287437887495827369474189818588006905358793385574832590121472\
680866521970802708379837148646191567765584039175249171110593159\
305029014037881475265618958103073425958633163441030267478942720\
703134493880117805010891574606323700178176718412858948243785754\
898788359757528163558061136758276299059029113119763557411729353\
915848889261125855717014320045292143759177464380434854573300054\
940683350937992500211758727939459249163046465047204851616590276\
724564411037216844005877918224201569391107769029955591465502737\
961776799311859881060956465198859727495735498887960494256488224\
613682478900505821893815926193600121890632'

minprec = 27
if len(x) &gt; minprec: getcontext().prec = len(x)
else:    getcontext().prec = minprec

x = Decimal(x)
power = Decimal(1)/Decimal(3)

answer = x**power
ranswer = answer.quantize(Decimal('1.'), rounding=ROUND_UP)

diff = x - ranswer**Decimal(3)
if diff == Decimal(0):
 print("x is the cubic number of", ranswer)
else:
 print("x has a cubic root of ", answer)
 

 Answer 

 x is the cubic number of 22873918786185635329056863961725521583023133411
451452349318109627653540670761962215971994403670045614485973722724603798
107719978813658857014190047742680490088532895666963698551709978502745901
704433723567548799463129652706705873694274209728785041817619032774248488
2965377218610139128882473918261696612098418