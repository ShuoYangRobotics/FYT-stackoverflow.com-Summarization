Question (ID-4392176): Escape for str in Python Wow, this should be so simple, but it' just not working.
I need to inset a "\" into a string (for a Bash command), but escaping just doesn't work. 

 &gt;&gt;&gt; a = 'testing'
&gt;&gt;&gt; b = a[:3] + '\' + a[3:]
 &gt;&gt;&gt; File "&lt;stdin&gt;", line 1
 &gt;&gt;&gt; b = a[:3] + '\' + a[3:]
        ^
 &gt;&gt;&gt;SyntaxError: EOL while scanning string literal
&gt;&gt;&gt; b = a[:3] + '\\' + a[3:]
&gt;&gt;&gt; b
'tes\\ting'
&gt;&gt;&gt; sys.version
'2.7 (r27:82500, Sep 16 2010, 18:02:00) \n[GCC 4.5.1 20100907 (Red Hat 4.5.1-3)]' 
 

 The first error is understandable and expexted. The end quote is being eaten, and the interpreter barfs. 
However, the second example should work. Why is there two slashes? 

 Python 2.7 

 Thanks, 

 Edit: Thanks Greg. It was a problem with working at the interpreter and not using repr(b). Python was working correctly, but I wasn't looking at the correct version of the output. 
 Answers (Total-7): #0 You are being misled by Python's output. Try: 

 &gt;&gt;&gt; a = "test\\ing"
&gt;&gt;&gt; print(a)
test\ing
&gt;&gt;&gt; print(repr(a))
'test\\ing'
&gt;&gt;&gt; a
'test\\ing'
 
 #1 You can do a couple of things. The first is to escape the backslash with another backslash, so: 

 a = 'test\\ing'
 

 You can also declare it as a Raw String like this: 

 a = r'test\ing'
 

 And you should end up with the back slash. 
 #2 If you want double slashes because the shell will escape \ again, use a raw string: 

 b = a[:3] + r'\\' + a[3:]
 
 #3 'tes\\ting' is correct, but you are viewing the repr output for the string, which will always show escape characters. 

 &gt;&gt;&gt; print 'tes\\ting'
tes\ting
 
 #4 The second example is correct. There are two slashes because you are printing the Python representation of the string. 

 If you want to see the actual string, call print a . 
 #5 b is fine in the second example, you see two slashes because you're printing the representation of b, so slashes are escaped in it too. 

 &gt;&gt;&gt; b
'tes\\ting'
&gt;&gt;&gt; print b
tes\ting
&gt;&gt;&gt; 
 
 #6 Python's quoting the backslash again when it shows you the representation of the string (in such a way that you could paste it in and get the string with an escaped backslash). 

 If you print the string, you'll see there's only one. 

 
 
  
  print "hello\world"
  hello\world