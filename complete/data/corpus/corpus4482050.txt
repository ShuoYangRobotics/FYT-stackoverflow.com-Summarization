Question (ID-4482050): Python: Converting ('Monday', 'Tuesday', 'Wednesday') to 'Monday to Wednesday' I'm getting a sequence of day of the week. Python code of what I want to do: 

 def week_days_to_string(week_days):
 """
 &gt;&gt;&gt; week_days_to_string(('Sunday', 'Monday', 'Tuesday'))
 'Sunday to Tuesday'
 &gt;&gt;&gt; week_days_to_string(('Monday', 'Wednesday'))
 'Monday and Wednesday'
 &gt;&gt;&gt; week_days_to_string(('Sunday', 'Wednesday', 'Thursday'))
 'Sunday, Wednesday, Thursday'
 """
 if len(week_days) == 2:
  return '%s and %s' % weekdays
 elif week_days_consecutive(week_days):
  return '%s to %s' % (week_days[0], week_days[-1])
 return ', '.join(week_days)
 

 I just need the week_days_consecutive function (the hard part heh). 

 Any ideas how I could make this happen? 

 Clarification: 

 My wording and examples caused some confusion. I do not only want to limit this function to the work week. I want to consider all days of the week (S, M, T, W, T, F). My apologies for not being clear about that last night. Edited the body of the question to make it clearer. 

 Edit: Throwing some wrenches into it 

 Wraparound sequence: 

 &gt;&gt;&gt; week_days_to_string(('Sunday', 'Monday', 'Tuesday', 'Saturday'))
'Saturday to Tuesday'
 

 And, per @user470379 and optional: 

 &gt;&gt;&gt; week_days_to_string(('Monday, 'Wednesday', 'Thursday', 'Friday'))
'Monday, Wednesday to Friday'
 
 Answers (Total-7): #0 I would approach this problem by: 

 
 Creating a dict mapping day names to their sequential index 
 Converting my input day names to their sequential indices 
 Looking at the resulting input indices and asking if they are sequential 
 

 Here's how you can do that, using calendar.day_name , range and some for comprehensions: 

 day_indexes = {name:i for i, name in enumerate(calendar.day_name)}
def weekdays_consecutive(days):
 indexes = [day_indexes[d] for d in days]
 expected = range(indexes[0], indexes[-1] + 1)
 return indexes == expected
 

 A few other options, depending on what you need: 

 
 If you need Python &lt; 2.7, instead of the dict comprehension, you can use: 

 day_indexes = dict((name, i) for i, name in enumerate(calendar.day_name))
 
 If you don't want to allow Saturday and Sunday, just trim off the last two days: 

 day_indexes = ... calendar.day_name[:-2] ...
 
 If you need to wrap around after Sunday, it's probably easiest to just check that each item is one more than the previous item, but working in modulo 7: 

 def weekdays_consecutive(days):
 indexes = [day_indexes[d] for d in days]
 return all(indexes[i + 1] % 7 == (indexes[i] + 1) % 7
    for i in range(len(indexes) - 1))
 
 

 Update: For the extended problem, I would still stick with they day-to-index dict, but instead I would: 

 
 Find all the indexes where a run of sequential days stops 
 Wrap the days around if necessary to get the longest possible sequence of days 
 Group the days into their sequential spans 
 

 Here's code to do this: 

 def weekdays_to_string(days):
 # convert days to indexes
 day_indexes = {name:i for i, name in enumerate(calendar.day_name)}
 indexes = [day_indexes[d] for d in days]

 # find the places where sequential days end
 ends = [i + 1
   for i in range(len(indexes))
   if (indexes[(i + 1) % len(indexes)]) % 7 !=
    (indexes[(i) % len(indexes)] + 1) % 7]

 # wrap the days if necessary to get longest possible sequences
 split = ends[-1]
 if split != len(days):
  days = days[split:] + days[:split]
  ends = [len(days) - split + end for end in ends]

 # group the days in sequential spans
 spans = [days[begin:end] for begin, end in zip([0] + ends, ends)]

 # format as requested, with "to", "and", commas, etc.
 words = []
 for span in spans:
  if len(span) &lt; 3:
   words.extend(span)
  else:
   words.append("%s to %s" % (span[0], span[-1]))
 if len(days) == 1:
  return words[0]
 elif len(days) == 2:
  return "%s and %s" % tuple(words)
 else:
  return ", ".join(words)
 

 You might also try the following instead of that last if/elif/else block to get an "and" between the last two items and commas between everything else: 

  if len(words) == 1:
  return words[0]
 else:
  return "%s and %s" % (", ".join(words[:-1]), words[-1])
 

 That's a little different from the spec, but prettier in my eyes. 
 #1 def weekdays_consecutive(inp):
 days = { 'Monday': 0,
    'Tuesday': 1,
    'Wednesday': 2,
    'Thursday': 3,
    'Friday': 4 }

 return [days[x] for x in inp] == range(days[inp[0]], days[inp[-1]] + 1)
 

 As you have already checked for other cases, I think this will be good enough. 
 #2 Here's my complete solution, you can use it however you want; (the code is being put into the public domain, but I won't accept any liability if anything happens to you or your computer as a consequence of using it and there's no warranty yadda yadda ya). 

 week_days = {
 'monday':0,
 'tuesday':1,
 'wednesday':2,
 'thursday':3,
 'friday':4,
 'saturday':5,
 'sunday':6
}
week_days_reverse = dict(zip(week_days.values(), week_days.keys()))

def days_str_to_int(days):
 '''
 Converts a list of days into a list of day numbers.
 It is case ignorant.
 ['Monday', 'tuesday'] -&gt; [0, 1]
 '''
 return map(lambda day: week_days[day.lower()], days)

def day_int_to_str(day):
 '''
 Converts a day number into a string.
 0 -&gt; 'Monday' etc
 '''
 return week_days_reverse[day].capitalize()

def consecutive(days):
 '''
 Returns the number of consecutive days after the first given a sequence of 
 day numbers.
 [0, 1, 2, 5] -&gt; 2
 [6, 0, 1] -&gt; 2
 '''
 j = days[0]
 n = 0
 for i in days[1:]:
  j = (j + 1) % 7
  if j != i:
   break
  n += 1
 return n

def days_to_ranges(days):
 '''
 Turns a sequence of day numbers into a list of ranges.
 The days can be in any order
 (n, m) means n to m
 (n,) means just n
 [0, 1, 2] -&gt; [(0, 2)]
 [0, 1, 2, 4, 6] -&gt; [(0, 2), (4,), (6,)] 
 '''
 days = sorted(set(days))
 while days:
  n = consecutive(days)
  if n == 0:
   yield (days[0],)
  else:
   assert n &lt; 7
   yield days[0], days[n]
  days = days[n+1:]

def wrap_ranges(ranges):
 '''
 Given a list of ranges in sequential order, this function will modify it in 
 place if the first and last range can be put together.
 [(0, 3), (4,), (6,)] -&gt; [(6, 3), (4,)]
 '''
 if len(ranges) &gt; 1:
  if ranges[0][0] == 0 and ranges[-1][-1] == 6:
   ranges[0] = ranges[-1][0], ranges[0][-1]
   del ranges[-1]

def range_to_str(r):
 '''
 Converts a single range into a string.
 (0, 2) -&gt; "Monday to Wednesday"
 '''
 if len(r) == 1:
  return day_int_to_str(r[0])
 if r[1] == (r[0] + 1) % 7:
  return day_int_to_str(r[0]) + ', ' + day_int_to_str(r[1])
 return day_int_to_str(r[0]) + ' to ' + day_int_to_str(r[1])

def ranges_to_str(ranges):
 '''
 Converts a list of ranges into a string.
 [(0, 2), (4, 5)] -&gt; "Monday to Wednesday, Friday, Saturday"
 '''
 if len(ranges) == 1 and ranges[0] == (0, 6):
  return 'all week'
 return ', '.join(map(range_to_str, ranges))

def week_days_to_string(days):
 '''
 Converts a list of days in string form to a stringed list of ranges.
 ['saturday', 'monday', 'wednesday', 'friday', 'sunday'] -&gt; 
  'Friday to Monday, Wednesday'
 '''
 ranges = list(days_to_ranges(days_str_to_int(days)))
 wrap_ranges(ranges)
 return ranges_to_str(ranges)
 

 Features: 

 
 It supports more than one range, 
 You can enter in the days in any order, 
 It will wrap around, 
 

 Add comments if you find any problems and I'll do my best to fix them. 
 #3 You would have to check the first date given, then have a list with all of the weekdays in it, check if the next given day is at the next index in the list, and repeat. 

 This can easily be done with a few loops, assuming the given days are in order. 
 #4 This would either take some intricate case-by-case logic, or a hard-coded storage of all days sequentially. I'd prefer the latter. 

 def weekdays_consecutive(x):
 allDays = { 'Monday':1, 'Tuesday':2, 'Wednesday':3, 'Thursday':4, 'Friday':5, 'Saturday' : 6, 'Sunday' : 7}
 mostRecent = x[0]
 for i in x[1:]:
  if allDays[i] % 7 != allDays[mostRecent] % 7 + 1: return False
  mostRecent = i
 return True
 

 And this can sort the input : x.sort(lambda x, y: allDays[x] - allDays[y]) . I don't know which function you'd prefer to use it in 

 &gt;&gt;&gt;x = ['Tuesday', 'Thursday', 'Monday', 'Friday']
&gt;&gt;&gt;x.sort(lambda x, y: allDays[x] - allDays[y]) 
&gt;&gt;&gt;x
['Monday', 'Tuesday', 'Thursday', 'Friday']
 

 This relies on no non-days being present. I imagine you'd want to deal with this in the weekdays_to_string function rather than here in weekdays_consecutive. 

 i also think you want to change the first case of your other function to 'and' instead of 'to' and add case for single-day inputs. 

 EDIT: had a pretty dumb mistake i just fixed, should work now! 
 #5 I didn't test I must say. 

 def test(days):
 days = list(days)
 if len(days) == 1:
 return days[0]
 elif len(days) == 2:
 return ' to '.join(days)
 else:
 return ''.join(days[:1] + [' to ' + days[-1]])
 
 #6 import itertools

#probably a better way to obtain this like with the datetime library
WEEKDAYS = (('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'))

def weekdays_consecutive(days):
 #assumes that days only contains valid weekdays

 if len(days) == 0:
  return True #or False?
 iter = itertools.cycle(WEEKDAYS)
 while iter.next() != days[0]: pass
 for day in days[1:]:
  if day != iter.next(): return False
 return True

#...

&gt;&gt;&gt; weekdays_consecutive(('Friday', 'Monday'))
True
&gt;&gt;&gt; weekdays_consecutive(('Friday', 'Monday', 'Tuesday'))
True
&gt;&gt;&gt; weekdays_consecutive(('Friday', 'Monday', 'Tuesday', 'Thursday'))
False