Question (ID-4981444): What's the best way to handle output redirection? I want my program by default to stdout, but give the option of writing it to a file. Should I create my own print function and call that testing that there is an output file or is there a better way? That seems inefficient to me, but every way I can think of calls an additional if test for every print call. I know this really doesn't matter in the long run probably, at least of this script, but I'm just trying to learn good habits. 
 Answers (Total-6): #0 Just write to standard out using print. If the user wants to redirect the output to a file they can do that: 

 python foo.py &gt; output.txt
 
 #1 Write to a file object, and when the program starts either have that object point to sys.stdout or to a file specified by the user. 

 Mark Byers' answer is more unix-like, where most command line tools just use stdin and stdout and let the user do redirection as they see fit. 
 #2 No, you don't need to create separate print function. In Python 2.6 you have this syntax: 

 # suppose f is an open file
print &gt;&gt; f, "hello"

# now sys.stdout is file too
print &gt;&gt; sys.stdout, "hello"
 

 In Python 3.x: 

 print("hello", file=f)
# or
print("hello", file=sys.stdout)
 

 So you really don't have to differentiate files and stdout. They are the same. 

 A toy example, which outputs "hello" the way you want: 

 #!/usr/bin/env python3
import sys

def produce_output(fobj):
 print("hello", file=fobj)
 # this can also be
 # fobj.write("hello\n")

if __name__=="__main__":
 if len(sys.argv) &gt; 2:
  print("Too many arguments", file=sys.stderr)
  exit(1)

 f = open(argv[1], "a") if len(argv)==2 else sys.stdout
 produce_output(f)
 

 Note that the printing procedure is abstracted of whether it is working with stdout or a file. 
 #3 I recommend you using the logging module and logging.handlers... stream, output files, etc.. 
 #4 If you using subprocess module, then based on an option you take from your command line, you can have the stdout option to an open file object. This way, from within the program you can redirect to a file. 

 import subprocess
with open('somefile','w') as f:
 proc = subprocess.Popen(['myprog'],stdout=f,stderr=subprocess.PIPE)
 out,err = proc.communicate()
 print 'output redirected to somefile'
 
 #5 My reaction would be to output to a temp file, then either dump that to stdio, or move it to where they requested.