Question (ID-1966591): hasNext in Python iterators? Haven't Python iterators got a hasNext method? 
 Answers (Total-8): #0 No, there is no such method. The end of iteration is indicated by an exception. See the documentation . 
 #1 If you really need a has-next functionality (because you're just faithfully transcribing an algorithm from a reference implementation in Java, say, or because you're writing a prototype that will need to be easily transcribed to Java when it's finished), it's easy to obtain it with a little wrapper class. For example: 

 class hn_wrapper(object):
 def __init__(self, it):
 self.it = iter(it)
 self._hasnext = None
 def __iter__(self): return self
 def next(self):
 if self._hasnext:
  result = self._thenext
 else:
  result = next(self.it)
 self._hasnext = None
 return result
 def hasnext(self):
 if self._hasnext is None:
  try: self._thenext = next(self.it)
  except StopIteration: self._hasnext = False
  else: self._hasnext = True
 return self._hasnext
 

 now something like 

 x = hn_wrapper('ciao')
while x.hasnext(): print next(x)
 

 emits 

 c
i
a
o
 

 as required. 

 Note that the use of next(sel.it) as a built-in requires Python 2.6 or better; if you're using an older version of Python, use self.it.next() instead (and similarly for next(x) in the example usage). [[You might reasonably think this note is redundant, since Python 2.6 has been around for over a year now -- but more often than not when I use Python 2.6 features in a response, some commenter or other feels duty-bound to point out that they are 2.6 features, thus I'm trying to forestall such comments for once;-)]] 
 #2 No. The most similar concept is most likely a StopIteration exception. 
 #3 hasNext somewhat translates to the StopIteration exception, e.g.: 

 &gt;&gt;&gt; it = iter("hello")
&gt;&gt;&gt; it.next()
'h'
&gt;&gt;&gt; it.next()
'e'
&gt;&gt;&gt; it.next()
'l'
&gt;&gt;&gt; it.next()
'l'
&gt;&gt;&gt; it.next()
'o'
&gt;&gt;&gt; it.next()
Traceback (most recent call last):
 File "&lt;stdin&gt;", line 1, in &lt;module&gt;
StopIteration
 

 
 StopIteration docs: http://docs.python.org/library/exceptions.html#exceptions.StopIteration 
 Some article about iterators and generator in python: http://www.ibm.com/developerworks/library/l-pycon.html 
 
 #4 I believe python just has next() and according to the doc, it throws an exception is there are no more elements. 

 http://docs.python.org/library/stdtypes.html#iterator-types 
 #5 In addition to all the mentions of StopIteration, the Python "for" loop simply does what you want: 

 &gt;&gt;&gt; it = iter("hello")
&gt;&gt;&gt; for i in it:
...  print i
...
h
e
l
l
o
 
 #6 You can tee the iterator using, itertools.tee , and check for StopIteration on the teed iterator. 
 #7 Try the __length_hint__() method from any iterator object: 

 iter(...).__length_hint__() &gt; 0