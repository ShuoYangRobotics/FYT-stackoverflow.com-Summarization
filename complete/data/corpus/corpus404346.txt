Question (ID-404346): python program to calculate harmonic series does anyone know how to write a program in pytohn that will calculate the addition of the harmonic series. i.e.1/2 +1/3 +1/4...
thanks.
lincoln 
 Answers (Total-7): #0 @Kiv's answer is correct but it is slow for large n if you don't need an infinite precision. It is better to use an asymptotic formula in this case: 

 

 #!/usr/bin/env python
from math import log

def H(n):
 """Returns an approximate value of n-th harmonic number.

  http://en.wikipedia.org/wiki/Harmonic_number
 """
 # Euler-Mascheroni constant
 gamma = 0.57721566490153286060651209008240243104215933593992
 return gamma + log(n) + 0.5/n - 1./(12*n**2) + 1./(120*n**4)
 

 @Kiv's answer for Python 2.6: 

 from fractions import Fraction

harmonic_number = lambda n: sum(Fraction(1, d) for d in xrange(1, n+1))
 

 Example: 

 &gt;&gt;&gt; N = 100
&gt;&gt;&gt; h_exact = harmonic_number(N)
&gt;&gt;&gt; h = H(N)
&gt;&gt;&gt; rel_err = (abs(h - h_exact) / h_exact)
&gt;&gt;&gt; print n, "%r" % h, "%.2g" % rel_err
100 5.1873775176396242 6.8e-16
 

 At N = 100 relative error is less then 1e-15 . 
 #1 @recursive's solution is correct for a floating point approximation. If you prefer, you can get the exact answer in Python 3.0 using the fractions module: 

 &gt;&gt;&gt; from fractions import Fraction
&gt;&gt;&gt; def calc_harmonic(n):
... return sum(Fraction(1, d) for d in range(1, n + 1))
...
&gt;&gt;&gt; calc_harmonic(20) # sum of the first 20 terms
Fraction(55835135, 15519504)
 

 Note that the number of digits grows quickly so this will require a lot of memory for large n. You could also use a generator to look at the series of partial sums if you wanted to get really fancy. 
 #2 The harmonic series diverges, i.e. its sum is infinity.. 

 edit: Unless you want partial sums, but you weren't really clear about that. 
 #3 This ought to do the trick. 

 def calc_harmonic(n):
 return sum(1.0/d for d in range(2,n+1))
 
 #4 How about this: 

 partialsum = 0
for i in xrange(1,1000000):
 partialsum += 1.0 / i
print partialsum
 

 where 1000000 is the upper bound. 
 #5 Just a footnote on the other answers that used floating point; starting with the largest divisor and iterating downward (toward the reciprocals with largest value) will put off accumulated round-off error as much as possible. 
 #6 Homework? 

 It's a divergent series, so it's impossible to sum it for all terms. 

 I don't know Python, but I know how to write it in Java. 

 public class Harmonic
{
 private static final int DEFAULT_NUM_TERMS = 10;

 public static void main(String[] args)
 {
  int numTerms = ((args.length &gt; 0) ? Integer.parseInt(args[0]) : DEFAULT_NUM_TERMS);

  System.out.println("sum of " + numTerms + " terms=" + sum(numTerms));
  }

  public static double sum(int numTerms)
  {
   double sum = 0.0;

   if (numTerms &gt; 0)
   {
    for (int k = 1; k &lt;= numTerms; ++k)
    {
     sum += 1.0/k;
    }
   }

   return sum;
  }
 }