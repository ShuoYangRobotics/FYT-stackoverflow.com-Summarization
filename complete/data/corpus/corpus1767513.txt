Question (ID-1767513): Read first N lines of a file in python We have a large raw data file that we would like to trim to a specified size.
I am experienced in .net c#, however would like to do this in python to simplify things and out of interest. 

 How would I go about getting the first N lines of a text file in python?
Will the OS being used have any effect on the implementation? 

 Thanks :) 
 Answers (Total-6): #0 with open("datafile") as myfile:
 head=[myfile.next() for x in xrange(N)]
print head
 

 Here's another way 

 from itertools import islice
with open("datafile") as myfile:
 head=list(islice(myfile,N))
print head
 
 #1 There is no specific method to read number of lines exposed by file object. 

 I guess the easiest way would be following: 

 lines =[]
with open(file_name) as f:
 lines.extend(f.readline() for i in xrange(N))
 
 #2 If you want something that obviously (without looking up esoteric stuff in manuals) works without imports and try/except and works on a fair range of Python 2.x versions (2.2 to 2.6): 

 def headn(file_name, n):
 """Like *x head -N command"""
 result = []
 nlines = 0
 assert n &gt;= 1
 for line in open(file_name):
  result.append(line)
  nlines += 1
  if nlines &gt;= n:
   break
 return result

if __name__ == "__main__":
 import sys
 rval = headn(sys.argv[1], int(sys.argv[2]))
 print rval
 print len(rval)
 
 #3 N=10
f=open("file")
for i in range(N):
 line=f.next().strip()
 print line
f.close()
 
 #4 Based on gnibbler top voted answer (Nov 20 '09 at 0:27): this class add head() and tail() method to file object. 

 class File(file):
 def head(self, lines_2find=1):
  self.seek(0)       #Rewind file
  return [self.next() for x in xrange(lines_2find)]

 def tail(self, lines_2find=1): 
  self.seek(0, 2)       #go to end of file
  bytes_in_file = self.tell()    
  lines_found, total_bytes_scanned = 0, 0
  while (lines_2find+1 &gt; lines_found and
    bytes_in_file &gt; total_bytes_scanned): 
   byte_block = min(1024, bytes_in_file-total_bytes_scanned)
   self.seek(-(byte_block+total_bytes_scanned), 2)
   total_bytes_scanned += byte_block
   lines_found += self.read(1024).count('\n')
  self.seek(-total_bytes_scanned, 2)
  line_list = list(self.readlines())
  return line_list[-lines_2find:]
 

 Usage: 

 f = File('path/to/file', 'r')
f.head(3)
f.tail(3)
 
 #5 most convinient way on my own: 

 LINE_COUNT = 3
print [s for (i, s) in enumerate(open('test.txt')) if i &lt; LINE_COUNT]
 

 Solution based on List Comprehension 
The function open() supports an iteration interface. The enumerate() covers open() and return tuples (index, item), then we check that we're inside an accepted range (if i &lt; LINE_COUNT) and then simply print the result. 

 Enjoy the Python. ;)