Question (ID-364519): In Python, how to I iterate over a dictionary in sorted order? There's an existing function that ends in: 

 return dict.iteritems()
 

 that returns an unsorted iterator for a given dictionary. I would like to return an iterator that goes through the items in sorted order. How do I do that? 
 Answers (Total-6): #0 Haven't tested this very extensively, but works in Python 2.5.2. 

 &gt;&gt;&gt; d = {"x":2, "h":15, "a":2222}
&gt;&gt;&gt; it = iter(sorted(d.iteritems()))
&gt;&gt;&gt; it.next()
('a', 2222)
&gt;&gt;&gt; it.next()
('h', 15)
&gt;&gt;&gt; it.next()
('x', 2)
&gt;&gt;&gt;
 
 #1 Use the sorted() function: 

 return sorted(dict.iteritems())
 

 If you want an actual iterator over the sorted results, since sorted() returns a list, use: 

 return iter(sorted(dict.iteritems()))
 
 #2 Greg's answer is right. Note that in Python 3.0 you'll have to do 

 sorted(dict.items())
 

 as iteritems will be gone. 
 #3 A dict's keys are stored in a hashtable so that is their 'natural order', i.e. psuedo-random. Any other ordering is a concept of the consumer of the dict. 

 sorted() always returns a list, not a dict. If you pass it a dict.items() (which produces a list of tuples), it will return a list of tuples [(k1,v1), (k2,v2), ...] which can be used in a loop in a way very much like a dict, but it is not in anyway a dict ! 

 foo = {
 'a': 1,
 'b': 2,
 'c': 3,
 }

print foo
&gt;&gt;&gt; {'a': 1, 'c': 3, 'b': 2}

print foo.items()
&gt;&gt;&gt; [('a', 1), ('c', 3), ('b', 2)]

print sorted(foo.items())
&gt;&gt;&gt; [('a', 1), ('b', 2), ('c', 3)]
 

 The following feels like a dict in a loop, but it's not, it's a list of tuples being unpacked into k,v: 

 for k,v in sorted(foo.items()):
 print k, v
 

 Roughly equivalent to: 

 for k in sorted(foo.keys()):
 print k, foo[k]
 
 #4 sorted returns a list, hence your error when you try to iterate over it,
but because you can't order a dict you will have to deal with a list. 

 I have no idea what the larger context of your code is, but you could try adding an
iterator to the resulting list. 
like this maybe?: 

 return iter(sorted(dict.iteritems()))
 

 of course you will be getting back tuples now because sorted turned your dict into a list of tuples 

 ex:
 say your dict was:
 {'a':1,'c':3,'b':2} 
sorted turns it into a list: 

 [('a',1),('b',2),('c',3)]
 

 so when you actually iterate over the list you get back (in this example) a tuple
composed of a string and an integer, but at least you will be able to iterate over it. 
 #5 If you want to sort by the order that items were inserted instead of of the order of the keys, you should have a look to Python's collections.OrderedDict . (Python 3 only)