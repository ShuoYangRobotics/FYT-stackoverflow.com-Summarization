Question (ID-5474514): Use of OR as branch control in FP I undertook an interview last week in which I learnt a few things about python I didn't know about (or rather realise how they could be used), first up and the content of this question is the use of or for the purposes of branch control. 

 So, for example, if we run: 

 def f():
 # do something. I'd use ... but that's actually a python object.

def g():
 # something else.

f() or g()
 

 Then if f() evaluates to some true condition then that value is returned, if not, g() is evaluated and whatever value it produces is returned, whether true or false. This gives us the ability to implement an if statement using or keywords. 

 We can also use and such that f() and g() will return the value of g() if f() is true and the value of f() if g() is false. 

 I am told that this (the use of or for branch control) is a common thing in languages such as lisp (hence the lisp tag). I'm currently following SICP learning Scheme, so I can see that (or (f x) (g x)) would return the value of (g x) assuming (f x) is #f . 

 I'm confused as to whether there is any advantage of this technique. It clearly achieves branch control but to me the built in keywords seem more self-explanatory. 

 I'm also confused as to whether or not this is "functional"? My understanding of pure functional programming is that you use constructs like this (an example from my recent erlang experiments): 

 makeeven(N,1) -&gt; N+1;
makeeven(N,0) -&gt; N;
makeeven(N) -&gt; makeeven(N,N rem 2). 
 

 Or a better, more complicated example using template meta-programming in C++ (discovered via cpp-next.com). My thought process is that one aspect of functional programming boils down the use of piecewise defined functions in code for branch control (and if you can manage it, tail recursion). 

 So, my questions: 

 
 Is this "functional"? It appears that way and my interviewers said they had backgrounds in functional programming, but it didn't match what I thought was functional. I see no reason why you couldn't have a logical operator as part of a function - it seems to lend itself nicely to the concept of higher order functions. I just hadn't thought that the use of logical operators was how functional programmers achieved branch control. Right? Wrong? I can see that circuits use logic gates for branch control so I guess this is a similar (related) concept? 
 Is there some advantage to using this technique? Is it just language conciseness/a syntax issue, or are there implications in terms of building an interpreter to using this construct? 
 Are there any use cases for this technique? Or is it not used very often? Is it used at all? As a self-taught guy I'd never seen it before although that in itself isn't necessarily surprising. 
 

 I apologise for jumping over so many languages; I'm simply trying to tie together my understanding across them. Feel free to answer in any language mentioned. I also apologise if I've misunderstood any definitions or am missing something vital here, I've never formally studied computer science. 
 Answers (Total-6): #0 Your interviewers must have had a "functional background" way back. It used to be common to write 

 (or (some-condition) (some-side-effect))
 

 but in CL and in Scheme implementation that support it, it is much better written with unless . Same goes for and vs when . 

 So, to be more concrete -- it's not more functional (and in fact the common use of these things was for one-sided conditionals, which are not functional to begin with); there is no advantage (which becomes very obvious in these languages when you know that things are implemented as macros anyway -- for example, most or and and implementations expand to an if ); and any possible use cases should use when and unless if you have them in your implementation, otherwise it's better to define them as macros than to not use them. 

 Oh, and you could use a combination of them instead of a two sided if , but that would be obfuscatingly ugly. 
 #1 I'm not aware of any issues with the way this code will execute, but it is confusing to read for the uninitiated. In fact, this kind of syntax is like a Python anti-pattern: you can do it, but it is in no way Pythonic. 
 #2 condition and true_branch or false_branch works in all languages that have short circuting logical operators. On the other hand it's not really a good idea to use in a language where values have a boolean value. 

 For example 

 zero = (1==0) and 0 or 1 # (1==0) -&gt; False 
zero = (False and 0) or 1 # (False and X) -&gt; X
zero = 0 or 1    # 0 is False in most languages
zero = False or 1 
zero = 1
 
 #3 As Eli said; also, performing control flow purely with logical operators tends to be taught in introductory FP classes -- more as a mind exercise, really, not something that you necessarily want to use IRL. It's always good to be able to translate any control operator down to if . 

 Now, the big difference between FPs and other languages is that, in more functional languages, if is actually an expression, not a statement. An if block always has a value! The C family of languages has a macro version of this -- the test? consequent : alternative construct -- but it gets really unreadable if you nest more expressions. 

 Prior to Python 2.5, if you want to have a control-flow expression in Python you might have to use logical operators. In Python 2.5, though, there is an FP-like if-expression syntax, so you can do something like this: 

 (42 if True else 7) + 35
 

 See PEP 308 
 #4 You only mention the case where there are exactly 2 expressions to evaluate. What happens if there are 5? 

 ;; returns first true value, evaluating only as many as needed
(or (f x) (g x) (h x) (i x) (j x))
 

 Would you nest if-statements? I'm not sure how I'd do this in Python. It's almost like this: 

 any(c(x) for c in [f, g, h, i, j])
 

 except Python's any throws away the value and just returns True . (There might be a way to do it with itertools.dropwhile , but it seems a little awkward to me. Or maybe I'm just missing the obvious way.) 

 (As an aside: I find that Lisp's builtins don't quite correspond to what their names are in other languages, which can be confusing. Lisp's IF is like C's ternary operator ?: or Python's conditional expressions, for example, not their if-statements. Likewise, Lisp's OR is in some ways more like (but not exactly like) Python's any() , which only takes 2 expressions. Since the normal IF returns a value already, there's no point in having a separate kind of "if" that can't be used like this, or a separate kind of "or" that only takes two values. It's already as flexible as the less common variant in other languages.) 

 I happen to be writing code like this right now, coincidentally, where some of the functions are "go ask some server for an answer", and I want to stop as soon as I get a positive response. I'd never use OR where I really want to say IF , but I'd rather say: 

 (setq did-we-pass (or (try-this x)
      (try-that x)
      (try-some-other-thing x)
      (heck-maybe-this-will-work x))
 

 than make a big tree of IFs. Does that qualify as "flow control" or "functional"? I guess it depends on your definitions. 
 #5 
 It may be considered "functional" in the sense of style of programming that is/was preferred in functional language. There is nothing functional in it otherwise. 
 It's just syntax. 
 It may be sometimes more readable to use or, for example: 

 def foo(bar=None):
 bar = bar or []
 ...
 return bar

def baz(elems):
 print "You have %s elements." % (len(elems) or "no")
 
 

 You could use bar if bar else [] , but it's quite elaborate.