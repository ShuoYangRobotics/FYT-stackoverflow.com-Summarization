Question (ID-2291637): Why dictionaries appear to be reversed? Why dictionaries in python appears reversed? 

 &gt;&gt;&gt; a = {'one': '1', 'two': '2', 'three': '3', 'four': '4'}
&gt;&gt;&gt; a
{'four': '4', 'three': '3', 'two': '2', 'one': '1'}
 

 How can I fix this? 
 Answers (Total-6): #0 Dictionaries in python (and hash tables in general) are unordered. In python you can use the sort() method on the keys to sort them. 
 #1 Dictionaries have no intrinsic order. You'll have to either roll your own ordered dict implementation, use an ordered list of tuple s or use an existing ordered dict implementation . 
 #2 Python3.1 has an OrderedDict 

 &gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; o=OrderedDict([('one', '1'), ('two', '2'), ('three', '3'), ('four', '4')])
&gt;&gt;&gt; o
OrderedDict([('one', '1'), ('two', '2'), ('three', '3'), ('four', '4')])
&gt;&gt;&gt; for k,v in o.items():
... print (k,v)
... 
one 1
two 2
three 3
four 4
 
 #3 Now you know dicts are unordered, here is how to convert them to a list which you can order 

 &gt;&gt;&gt; a = {'one': '1', 'two': '2', 'three': '3', 'four': '4'}
&gt;&gt;&gt; a
{'four': '4', 'three': '3', 'two': '2', 'one': '1'}
 

 sorted by key 

 &gt;&gt;&gt; sorted(a.items())
[('four', '4'), ('one', '1'), ('three', '3'), ('two', '2')]
 

 sorted by value 

 &gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; sorted(a.items(),key=itemgetter(1))
[('one', '1'), ('two', '2'), ('three', '3'), ('four', '4')]
&gt;&gt;&gt; 
 
 #4 And what is the "standard order" you would be expecting? It is very much application dependent. A python dictionary doesn't guarantee key ordering anyways. 

 In any case, you can iterate over a dictionary keys() the way you want. 
 #5 From the Python Tutorial : 

 
 It is best to think of a dictionary as
 an unordered set of key: value pairs 
 

 And from the Python Standard Library (about dict.items): 

 
 CPython implementation detail: Keys
 and values are listed in an arbitrary
 order which is non-random, varies
 across Python implementations, and
 depends on the dictionaryâ€™s history of
 insertions and deletions. 
 

 So if you need to process the dict in a certain order, sort the keys or values, e.g.: 

 &gt;&gt;&gt; sorted(a.keys())
['four', 'one', 'three', 'two']
&gt;&gt;&gt; sorted(a.values())
['1', '2', '3', '4']