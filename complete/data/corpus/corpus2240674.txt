Question (ID-2240674): Cross-platform desktop notifier in Python I am looking for Growl -like, Windows balloon-tip-like notifications library in Python. Imagine writing code like: 

 &gt;&gt;&gt; import desktopnotifier as dn
&gt;&gt;&gt; dn.notify('Title', 'Long description goes here')
 

 .. and that would notify with corresponding tooltips on Mac, Windows and Linux. Does such a library exist? If not, how would I go about writing one myself? 

 
 Does Mac come with a default notifier? Is Growl something that I should install separately? 
 On Windows, I assume this may require pywin32 ? 
 On Linux, assuming GNOME, is there a GNOME API (using gnome-python) that does this? 
 Can I make notifications 'sticky' (i.e., don't fade out ever) on all platforms? 
 

 Update : My preference is to not depend on gigantic GUI frameworks like PyQT4 and wxPython for a simple task such as this. 
 Answers (Total-8): #0 Here's a desktop notifier I wrote a few years ago using wxPython - it behaves identically across Windows and Linux and should also run on OSX. It contains a threaded event loop that can be used to animate a notification window containing an icon and message that can be clicked on. It probably needs a couple of tweaks to customize it for your own purpose but the ground work is done. 
 #1 
 How to go about writing it 

 Check how keyring handles the cross-platform issues (it's a python library which plugs into various autodetected keychain backends for storage) 
 Growl isn't bundled with OSX you have to install it separately, OSX doesn't come with any built-in notification system. 
 For unices, you might want to hook into DBus as already mentioned (as a fallback, note that dbus might also be available in OSX), but both KDE and Gnome have Growl-like libraries. Respectively, KNotification for KDE and libnotify for Gnome. 
 For windows, check out Snarl, fall back no notification bubbles if not available (using something along the lines of ToasterBox ) 
 

 Do not ever even think of making notifications sticky. It's stupid, it's insensitive and it's freaking annoying. Also, due to people like you it's been made not available in most notification systems. 

 Finally, even if there is no Python lib for any of these, you can probably use ctypes to access them. 
 #2 try PyQt4 , if you don't care about the size. 

 here is the class for this job:
 http://doc.trolltech.com/4.5/qsystemtrayicon.html 
 #3 At Pycon 2010 there was a presentation on cross-platform Python development . 
There was a html page about it as well, containing some advice for cross-platform notification. However, I don't find it online anymore, but I saved a local copy, and this is the part on notifications: 

 
 There are occasions in which your application wants to notify the user
 about something: software updates are available, a new instant message
 have been received, the 300 page print job has finally finished, etc. 
 
 
 To keep notifications easy to port cross-platform, don't make
 them interactive. For example Ubuntu does not support notifications
 that require user interaction. 
 These are the most important libraries: 
 
 o Linux: pynotify . 
 
 o Mac OS X: Growl, which is not standard, is usually
 installed. 
 
 o Windows: a good wxPython solution is ToasterBox of Andrea
 Gavana, which mimics the look of Firefox or Thunderbird notifications. 
 For Phatch we developed a library that unifies these three
 systems in one API: phatch/lib/notify.py . 
 
 

 The linked python file is very interesting, and I think you should be able to use the linked python file almost as is. The code is also very clear, so you'll quickly see what it does. 

 The basic approach is it detects what notification systems are available, almost regardless of the platform, and tries to use them in a certain order but falls back to more simple systems if necessary. This way, if the user has e.g. Growl installed it'll use it, regardless of the platform. 

 You could adapt it to provide support for other notification systems than the three mentioned above. 
 #4 For good cross-platform support, I would look at PyQt . It will add some heft to your library, but they've done a good job working out most of the kinks. 
 #5 On win you can use snarl . 

 Using it with python:
 www.k23productions.com/e107_plugins/forum/forum_viewtopic.php?2972 
 #6 Sounds like you need Growl for Windows 
 #7 For Linux, you should look at dbus .