Question (ID-706721): How do I pass a method as a parameter in python Is it possible to pass a method as a parameter to a method? 

 self.method2(self.method1)

def method1(self):
 return 'hello world'

def method2(self, methodToRun):
 result = methodToRun.call()
 return result
 
 Answers (Total-6): #0 Yes it is, just use the name of the method, as you have written. Methods/functions are objects in Python, just like anything else, and you can pass them around the way you do variables. In fact, you can think about a method (or function) as a variable whose value is the actual callable code object. 

 FYI, there is no call method - I think it's called __call__ , but you don't have to invoke it explicitly: 

 def method1():
 return 'hello world'

def method2(methodToRun):
 result = methodToRun()
 return result

method2(method1)
 
 #1 Yes it is possible. Just call it: 

 class Foo(object):
 def method1(self):
  pass
 def method2(self, method):
  return method()

foo = Foo()
foo.method2(foo.method1)
 
 #2 Yes. This feature is called "first class functions". See this article for an example . 
 #3 Yes; functions (and methods) are first class objects in Python. The following works: 

 def foo(f):
 print "Running parameter f()."
 f()

def bar():
 print "In bar()."

foo(bar)
 

 Outputs: 

 Running parameter f().
In bar().
 

 These sorts of questions are trivial to answer using the Python interpreter or, for more features, the IPython shell. 
 #4 Here is your example re-written to show a stand-alone working example: 

 class Test:
 def method1(self):
  return 'hello world'

 def method2(self, methodToRun):
  result = methodToRun()
  return result

 def method3(self):
  return self.method2(self.method1)

test = Test()

print test.method3()
 
 #5 Methods are objects like any other. So you can pass them around, store them in lists and dicts, do whatever you like with them. The special thing about them is they are callable objects so you can invoke __call__ on them. __call__ gets called automatically when you invoke the method with or without arguments so you just need to write methodToRun() .