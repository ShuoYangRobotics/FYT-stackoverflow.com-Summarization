Question (ID-6429638): How to split a string into two integers in python I have a string "42 0" (for example) and need to enter into an array the two integers. can i do a .split on a space? 

 thanks in advance 
 Answers (Total-7): #0 text = "42 0"
nums = [int(n) for n in text.split()]
 
 #1 l = (int(x) for x in s.split())
 

 If you are sure there are always two integers you could also do: 

 a,b = (int(x) for x in s.split())
 

 or if you plan on modifying the array after 

 l = [int(x) for x in s.split()]
 
 #2 Of course you can call split , but it will return strings, not integers. Do 

 &gt;&gt;&gt; x, y = "42 0".split()
&gt;&gt;&gt; [int(x), int(y)]
[42, 0]
 

 or 

 [int(x) for x in "42 0".split()]
 
 #3 6 answers is not nearly enough for a question that OP could easily have answered himself by testing in the interpreter : 

 &gt;&gt;&gt; "42 0".split() # or .split(" ")
['42', '0']
 

 A: Yes. 

 But it has not been spesifically pointed out that the split method by default splits on whitespace (space, tab, carriage return and newline ) if you do not supply an argument to it. 

 &gt;&gt;&gt; " \r 42\n\r \t\n \r0\n\r\n".split()
['42', '0']
 

 Also, using map usually looks cleaner than using list comprehensions when you want to convert the items of iterables to built-ins like int , float , str , etc.: 

 &gt;&gt;&gt; map(int, "42 0".split())
[42, 0]
 
 #4 This should work: 

 [ int(x) for x in "40 1".split(" ") ]
 
 #5 This code should run for an undefined amount of numbers. 

 str = "0 42"
final = []

numbers = str.split(" ")
for number in numbers:
 final.append(int(number))
 
 #6 Other answers already show that you can use split() to get the values into a list . If you were asking about Python's arrays , here is one solution: 

 import array
s = '42 0'
a = array.array('i')
for n in s.split():
 a.append(int(n))
 

 Edit: A more concise solution: 

 import array
s = '42 0'
a = array.array('i', (int(t) for t in s.split()))