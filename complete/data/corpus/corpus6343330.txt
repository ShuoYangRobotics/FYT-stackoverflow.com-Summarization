Question (ID-6343330): Importing a long list of constants to a Python file In Python, is there an analogue of the C preprocessor statement such as?: 

 #define MY_CONSTANT 50 

 Also, I have a large list of constants I'd like to import to several classes. Is there an analogue of declaring the constants as a long sequence of statements like the above in a .py file and importing it to another .py file? 

 Edit. 

 The file Constants.py reads: 

 #!/usr/bin/env python
# encoding: utf-8
"""
Constants.py
"""

MY_CONSTANT_ONE = 50
MY_CONSTANT_TWO = 51
 

 And myExample.py reads: 

 #!/usr/bin/env python
# encoding: utf-8
"""
myExample.py
"""

import sys
import os

import Constants

class myExample:
 def __init__(self):
  self.someValueOne = Constants.MY_CONSTANT_ONE + 1
  self.someValueTwo = Constants.MY_CONSTANT_TWO + 1

if __name__ == '__main__':
 x = MyClass()
 

 Edit. 

 From the compiler, 

 
 NameError: "global name
 'MY_CONSTANT_ONE' is not defined" 
 
 function init in myExample at line
 13 self.someValueOne =
 Constants.MY_CONSTANT_ONE + 1 copy
 output Program exited with code #1
 after 0.06 seconds. 
 
 Answers (Total-7): #0 Python doesn't have a preprocessor, nor does it have constants in the sense that they can't be changed - you can always change (nearly, you can emulate constant object properties, but doing this for the sake of constant-ness is rarely done and not considered useful) everything. When defining a constant, we define a name that's upper-case-with-underscores and call it a day - "We're all consenting adults here", no sane man would change a constant. Unless of course he has very good reasons and knows exactly what he's doing, in which case you can't (and propably shouldn't) stop him either way. 

 But of course you can define a module-level name with a value and use it in another module. This isn't specific to constants or anything, read up on the module system. 

 # a.py
MY_CONSTANT = ...

# b.py
import a
print a.MY_CONSTANT
 
 #1 Python isn't preprocessed. You can just do: 

 MY_CONSTANT = 50
 

 Importing them will work: 

 import myconstants
print myconstants.MY_CONSTANT * 2
 
 #2 Sure, you can put your constants into a separate module. For example: 

 const.py: 

 A = 12
B = 'abc'
C = 1.2
 

 main.py: 

 import const

print const.A, const.B, const.C
 

 Note that as declared above, A , B and C are variables, i.e. can be changed at run time. 
 #3 And ofcourse you can do: 

 # a.py
MY_CONSTANT = ...

# b.py
from a import *
print MY_CONSTANT
 
 #4 As an alternative to using the import approach described in several answers, have a look a the configparser module. 

 The ConfigParser class implements a basic configuration file parser language which provides a structure similar to what you would find on Microsoft Windows INI files. You can use this to write Python programs which can be customized by end users easily. 
 #5 Try to look Python Constants and Can I prevent modifying an object in Python? 

 Another one useful link: http://code.activestate.com/recipes/65207-constants-in-python/ tells us about the following option: 

 from copy import deepcopy

class const(object):

 def __setattr__(self, name, value):
  if self.__dict__.has_key(name):
   print 'NO WAY this is a const' # put here anything you want(throw exc and etc)
   return deepcopy(self.__dict__[name])
  self.__dict__[name] = value

 def __getattr__(self, name, value):
  if self.__dict__.has_key(name):
   return deepcopy(self.__dict__[name])

 def __delattr__(self, item):
  if self.__dict__.has_key(item):
   print 'NOOOOO' # throw exception if needed

CONST = const()
CONST.Constant1 = 111
CONST.Constant1 = 12
print a.Constant1 # 111
CONST.Constant2 = 'tst'
CONST.Constant2 = 'tst1'
print a.Constant2 # 'tst'
 

 So you could create a class like this and then import it from you contants.py module. This will allow you to be sure that value would not be changed, deleted. 
 #6 If you really want constants, not just variables looking like constants, the standard way to do it is to use immutable dictionaries. Unfortunately it's not built-in yet, so you have to use third party recipes (like this one or that one ).