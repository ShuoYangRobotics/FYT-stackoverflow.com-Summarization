Question (ID-1607612): Python: How do I make a subclass from a superclass? In Python, how do you make a subclass from a superclass? 
 Answers (Total-8): #0 class MySubClass(MySuperClass):
 def __init__(self):
  MySuperClass.__init__(self)
 

 The section on inheritance in the python documentation explains it in more detail 
 #1 You use: 

 class DerivedClassName(BaseClassName):
 

 For details, see the Python docs, section 9.5 . 
 #2 class Class1(object):
 pass

class Class2(Class1):
 pass
 

 Class2 is a sub-class of Class1 
 #3 class Mammal(object): 
#mammal stuff

class Dog(Mammal): 
#doggie stuff
 
 #4 The use of "super" (see Python Built-in , super) may be a slightly better method of calling the parent for initialization: 

 # Initialize using Parent
#
class MySubClass(MySuperClass):
 def __init__(self):
  MySuperClass.__init__(self)

# Better initialize using Parent (less redundant).
#
class MySubClassBetter(MySuperClass):
 def __init__(self):
  super(MySubClassBetter, self).__init__()
 
 #5 class Subclass (SuperClass):
  # Subclass stuff here
 
 #6 Subclassing in Python is done as follows: 

 class WindowElement:
 def print(self):
  pass

class Button(WindowElement):
 def print(self):
  pass
 

 Here is a tutorial about Python that also contains classes and subclasses. 
 #7 A heroic little example: 

 class SuperHero(object): #superclass, inherits from default object
 def getName(self):
  raise NotImplementedError #you want to override this on the child classes

class SuperMan(SuperHero): #subclass, inherits from SuperHero
 def getName(self):
  return "Clark Kent"

class SuperManII(SuperHero): #another subclass
 def getName(self):
  return "Clark Kent, Jr."

if __name__ == "__main__":
 sm = SuperMan()
 print sm.getName()
 sm2 = SuperManII()
 print sm2.getName()