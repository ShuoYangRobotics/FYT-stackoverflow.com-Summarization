Question (ID-70797): Python and User input How do I have a Python script that can accept user input (assuming this is possible) and how do I make it read in arguments if run from the command line? 
 Answers (Total-8): #0 To read user input you can try the cmd module for easily creating a mini-command line interpreter (with help texts and autocompletion) and raw_input for less fancy stuff (just reading a line of text from the user). 

 Command line inputs are in sys.argv. Try this in your script: 

 import sys
print sys.argv
 

 There are two modules for parsing command line options: optparse and getopt . If you just want to input files to your script, behold the power of fileinput . 

 The Python library reference is your friend . 
 #1 var = raw_input("Enter something: ")
print "you entered ", var
 
 #2 The best way to process command line arguments is the optparse module. 

 Use raw_input() to get user input. If you import the readline module your users will have line editing and history. 
 #3 Careful not to use the input function , unless you know what you're doing . Unlink raw_input , input will accept any python expression , so it's kinda like eval 
 #4 As of Python 3.2 2.7, there is now argparse for processing command line arguments. 
 #5 Use 'raw_input' for input from a console/terminal. 

 if you just want a command line argument like a file name or something e.g. 

 $ python my_prog.py file_name.txt
 

 then you can use sys.argv... 

 import sys
print sys.argv
 

 sys.argv is a list where 0 is the program name, so in the above example sys.argv[1] would be "file_name.txt" 

 If you want to have full on command line options use the optparse module. 

 Pev 
 #6 raw_input is no longer available in Python 3.x. But raw_input was renamed input , so the same functionality exists. 

 input_var = raw_input("Enter something: ")
print ("you entered " + input_var) 
 

 Documentation of the change 
 #7 For user input in python 3.x. 

 input_variable = input ("Enter your name: ")
print ("your name is" + input_variable)