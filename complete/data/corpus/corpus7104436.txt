Question (ID-7104436): [python]: change all the values Code goes below: 

 d = {'a':0, 'b':0, 'c':0, 'd':0} #at the beginning, all the values are 0.
s = 'cbad' #a string
indices = map(s.index, d.keys()) #get every key's index in s, i.e., a-2, b-1, c-0, d-3
#then set the values to keys' index
d = dict(zip(d.keys(), indices)) #this is how I do it, any better way?
print d #{'a':2, 'c':0, 'b':1, 'd':3}
 

 Any other way to do that? 

 PS. the code above is just a simple one to demonstrate my question. 
 Answers (Total-8): #0 Something like this might make your code more readable: 

 dict([(x,y) for y,x in enumerate('cbad')])
 

 But you should give more details what you really want to do. Your code will probably fail if the characters in s do not fit the keys of d . So d is just a container for the keys and the values are not important. Why not start with a list in that case? 
 #1 What about 

 d = {'a':0, 'b':0, 'c':0, 'd':0}
s = 'cbad'
for k in d.iterkeys():
 d[k] = s.index(k)
 

 ? It's no functional programming anymore but should be more performant and more pythonic, perhaps :-). 

 EDIT : A function variant using python dict-comprehensions (needs Python 2.7+ or 3+): 

 d.update({k : s.index(k) for k in d.iterkeys()})
 

 or even 

 {k : s.index(k) for k in d.iterkeys()}
 

 if a new dict is okay! 
 #2 another one liner: 

 dict([(k,s.index(k)) for (k,v) in d.items()])
 
 #3 for k in d.iterkeys():
 d[k] = s.index[k]
 

 Or, if you don't already know the letters in the string: 

 d = {}
for i in range(len(s)):
 d[s[i]]=i
 
 #4 use update() method of dict: 

 d.update((k,s.index(k)) for k in d.iterkeys())
 
 #5 You choose the right way but think that no need to create dict and then modify it if you have ability to do this in the same time: 

 keys = ['a','b','c','d']
strK = 'bcad'
res = dict(zip(keys, (strK.index(i) for i in keys)))
 
 #6 Dict comprehension for python 2.7 and above 

 {key : indice for key, indice in zip(d.keys(), map(s.index, d.keys()))}
 
 #7 &gt;&gt;&gt; d = {'a':0, 'b':0, 'c':0, 'd':0}
&gt;&gt;&gt; s = 'cbad'
&gt;&gt;&gt; for x in d: 
  d[x]=s.find(x)
&gt;&gt;&gt; d
 {'a': 2, 'c': 0, 'b': 1, 'd': 3}