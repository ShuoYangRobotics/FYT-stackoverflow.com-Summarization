Question (ID-2853723): Whats the python way for recursively setting file permissions? What's the "python way" to recursively set the owner and group to files in a directory? I could just pass a 'chown -R' command to shell, but I feel like I'm missing something obvious. 

 I'm mucking about with this: 

 
import os 
path = "/tmp/foo" 
for root, dirs, files in os.walk(path): 
 for momo in dirs: 
 os.chown(momo, 502, 20)
 

 This seems to work for setting the directory, but fails when applied to files. I suspect the files are not getting the whole path, so chown fails since it can't find the files. The error is: 

 'OSError: [Errno 2] No such file or directory: 'foo.html' 

 What am I overlooking here? 
 Answers (Total-6): #0 The dirs and files lists are all always relative to root - i.e., they are the basename() of the files/folders, i.e. they don't have a / in them (or \ on windows). You need to join the dirs/files to root to get their whole path if you want your code to work to infinite levels of recursion: 

 
import os 
path = "/tmp/foo" 
for root, dirs, files in os.walk(path): 
 for momo in dirs: 
 os.chown(os.path.join(root, momo), 502, 20)
 for momo in files:
 os.chown(os.path.join(root, momo), 502, 20)
 

 I'm suprised the shutil module doesn't have a function for this. 
 #1 try os.path.join(root,momo) that will give you full path 
 #2  glob.iglob is a much simpler way to get a set of paths recursively to then iterate over. 
 #3 import os 
path = "/tmp/foo" 
for root, dirs, files in os.walk(path): 
 for momo in dirs: 
 os.chown(momo, 502, 20)
 for file in files:
  fname = os.path.join(root, file)
  os.chown(fname, aaa, bb)
 

 substitute aaa and bb as you please 
 #4 Here is a function i wrote that uses glob to recursively list files and change their permissions. 

 import os
import glob
def recursive_file_permissions(path,mode,uid=-1,gid=-1):
  '''
  Recursively updates file permissions on a given path.
  UID and GID default to -1, and mode is required
  '''
 for item in glob.glob(path+'/*'):
  if os.path.isdir(item):
   recursive_file_permissions(os.path.join(path,item),mode,uid,gid)
  else:
   try:
    os.chown(os.path.join(path,item),uid,gid)
    os.chmod(os.path.join(path,item),mode)
   except:
    print('File permissions on {0} not updated due to error.'.format(os.path.join(path,item)))
 

 it's not perfect, but got me where I needed to be 
 #5 Don't forget the for f in files loop, either. Similarly, remember to os.path.join(root, f) to get the full path.