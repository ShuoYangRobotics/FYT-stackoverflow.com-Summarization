Question (ID-1518659): Python and indentation, having touble getting started I have just started learning python and am getting caught up. I come from mostly C background. 

 class Alarm:

 def timer():

 def main():
 	print ("Timer has Started")

 main()
 

 I always get a silly error when I try to run this code:: 

 alarm &gt; python alarm.py 
 File "alarm.py", line 5
 def main():
  ^
IndentationError: expected an indented block
 

 What am I doing wrong? 
 Answers (Total-9): #0 You have an empty def 

 def timer():
 

 use 

 def timer():
 pass
 

 instead. 
 #1 Learn about the pass statement , main is usually not part of the class. 

 A global (module level) main() function is simpler than an Alarm.main() class method. Usually, main() functions come at module level. 

 class Alarm:

 def timer():
  pass

def main():
 print ("Timer has Started")

main()
 
 #2 try deindent main() and add pass to timer and define an init method: 

 class Alarm():

 def __init__(self):
  print ("Timer has Started")

&lt;shell&gt;$ Alarm()
 
 #3 Your timer function is not defined. (And your space/tab indentation may be mixed) 

 See the tutorial ( classes ) for more details on classes. 

 class Alarm:

 def timer(self):
  pass
 def main(self):
  print ("Timer has Started")

if __name__ == '__main__':
 class_inst = Alarm()
 class_inst.main()
 

 If you getting into python read PEP8 . 
Also, using pylint helps, it will point out indentation and many other errors you'll run across before you 'execute' your code. 
 #4 I think you want to use __init__ though, which is the constructor... 

 class Alarm:

 def timer(self): 
  print('timer has started')

 def __init__(self): 
  print('constructor')
  self.timer()


x = Alarm()
 

 
 constructor 
 
 timer has started 
 

 My example differs from the others in that I'm actually instantiating a new object. 

 Notes: 

 
 specify self as the first argument to any method defined in the class 
 __init__ is the method to define for the constructor 
 invoke the class by doing variableName = className() like you would invoke a function, no new keyword 
 if you have an empty function, use the pass keyword like def foo(self): pass 
 
 #5 Invoking main() will give an undefined function error , as it is a Alarm method. 

 IMHO the right form you should use is the following: 

 class Alarm:
 def timer():
  pass

 @staticmethod
 def main():
  print ("Timer has Started")

if __name__ == "__main__" :
 Alarm.main()
 
 #6 As others have pointed out, you have a syntax error because timer() has no body. 

 You don't need to use main() in python at all. Usually people use it to indicate that the file is the top level program and not a module to be imported, but it is just by convention 

 You may also see this idiom 

 def main():
 blah blah

if __name__ == "__main__":
 main()
 

 Here __name__ is a special variable. If the file has been imported it will contain the module name, so the comparison fails and main does not run. 

 For the top level program __name__ contains " __main__ " so the main() function will be run. 

 This is useful because sometimes your module might run tests when it is loaded as a program but you don't want those test to run if you are importing it into a larger program 
 #7 In Python, you don't need to define everything as a class. There's nothing to encapsulate in this code, so there's no reason to define an Alarm class. Just have the functions in a module. 
 #8 Thanks for all the help everybody. I was making a little alarm/timer to remind me to get up and take a walk every now and then. I got most of it working, and it works great. Checked it against a stop watch and it works great. 

 import time

def timer(num):
 seconds = num*60
 print (num , "minutes", seconds , "seconds")

 while (seconds &gt; 0):
 	print (seconds, "seconds")
 	time.sleep(1)
 	seconds = seconds-1

 print ("Time to get up and take a WALK!!!!")
 main()


def main():
 number = input("Input time : ")
 int(number)
 timer(number)


if __name__ == '__main__':
 main()