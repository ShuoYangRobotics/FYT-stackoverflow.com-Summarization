Question (ID-8319970): comparing two files and writing the missing values to a file I have a problem when I try to compare two large files. What I am trying to do is take a line from one file, search all the lines of another file for a match and if there isn't one, write that line to another file. I was able to recreate the problem with the simple example below: 

 file1.txt (contents ) 

 apple
banana
pear
peach
lime
 

 file_old.txt (contents) 

 lime
apple
pear
peach
 

 Since I am looking for lines in file1 that are not in file_old, I would expect that 'banana' would be the only value to show in the output file. But in the output file, "*fill_diff*", I am showing: 

 apple
banana
banana
 

 What is wrong with my code to try and produce the differences in a file? 

 def main():

 file_old = open(r'C:\Users\test\Desktop\file_old.txt', 'r+')
 file_new = open(r'C:\Users\test\Desktop\file1.txt', 'r+')
 file_diff = open(r'C:\Users\test\Desktop\file_diff.txt', 'w')

 for each_line in file_new: 
  for every_line in file_old:
   if each_line == every_line:
    break
   file_diff.write(each_line)

 file_old.close()
 file_new.close()
 file_diff.close()

main()
 

 Thanks! 
 Answers (Total-6): #0 You can do this in O(n + n*log(n)) by sorting both files first and then iterate over both simultaneously. 

 # sort file1 and file2 on disk or in memory
while len(file1) &gt; 0 and len(file2) &gt; 0:
 while file1[0] &lt; file2[0]:
  diff.append(file1[0])
  file1 = file1[1:]
 while file1[0] &gt; file2[0]:
  diff.append(file2[0])
  file2 = file2[1:]
 while file1[0] == file2[0]:
  file1 = file1[1:]
  file2 = file2[1:]
diff = diff + file1 + file2 # add the rest to the diff
 
 #1 You need to go back to the beginning of file_old at the beginning of each iteration of your loop. Something like this: 

 for each_line in file_new:
 file_old.seek(0)
 for every_line in file_old:
  ...
 

 Also, the logic of your innermost loop seems wrong. I think you want something like 

 for each_line in file_new:
 file_old.seek(0)
 found = False
 for every_line in file_old:
  if each_line == every_line:
   found = True
   break

 if not found:
  file_diff.write(each_line)
 
 #2 FWIW, the difflib module was designed for this kind of use case. 

 If you need to do it manually, Python's sets can make it easier: 

 file_diff = open(r'C:\Users\test\Desktop\file_diff.txt', 'w')
oldlines = set(open(r'C:\Users\test\Desktop\file_old.txt', 'r'))
for line in open(r'C:\Users\test\Desktop\file1.txt', 'r'):
 if line not in oldlines:
  file_diff.write(line)
 
 #3 srgerg's answer will work. 

 However, reading through files multiple times will have a very large runtime complexity. Therefore, if the files (though large) are small enough to fit into memory, then you might consider putting all the lines in file_old into a data structure for comparison: 

 old_lines = set((line.strip() for line in open(r'C:\Users\test\Desktop\file_old.txt', 'r+')))
file_new = open(r'C:\Users\test\Desktop\file1.txt', 'r+')
file_diff = open(r'C:\Users\test\Desktop\file_diff.txt', 'w')

for line in file_new:
 if line.strip() not in old_lines:
  file_diff.write(line)
file_new.close()
file_diff.close()
 

 Hope this helps 
 #4 I suspect you want missing lines in any order ? 

 This is a quick and dirty implementation based on set() : 

 def readfile(name):
 afile = open(name, 'r+')
 lines = set([l.strip() for l in afile])
 afile.close()
 return lines

def main():
 oldset = readfile(r'file_old.txt')
 newset = readfile(r'file1.txt')

 file_diff = open(r'file_diff.txt', 'w')

 for diff in (newset - oldset):
  file_diff.write(diff)

 file_diff.close()

main()
 

 This may not scale too well for very large input files. 
 #5 If you can't assume the files are sorted, then I'd do something like this 

 def diffUnsorted(fn1, fn2) :
 return set([l.strip() for l in open(fn1) if l.strip() != ""]) - \
   set([l.strip() for l in open(fn2) if l.strip() != ""])
 

 If you're going to be dealing with large files though, I'd go with a solution that sorts the files first, which gets you O(n) time and O(1) space (not counting the sorting..).