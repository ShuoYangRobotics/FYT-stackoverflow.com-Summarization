Question (ID-108892): Is there something like 'autotest' for Python unittests? Basically, growl notifications (or other callbacks) when tests break or pass. Does anything like this exist? 

 If not, it should be pretty easy to write.. Easiest way would be to.. 

 
 run python-autotest myfile1.py myfile2.py etc.py 
 Check if files-to-be-monitored have been modified (possibly just if they've been saved). 
 Run any tests in those files. 
 If a test fails, but in the previous run it passed, generate a growl alert. Same with tests that fail then pass. 
 Wait, and repeat steps 2-5. 
 

 The problem I can see there is if the tests are in a different file. The simple solution would be to run all the tests after each save.. but with slower tests, this might take longer than the time between saves, and/or could use a lot of CPU power etc.. 

 The best way to do it would be to actually see what bits of code have changed, if function abc() has changed, only run tests that interact with this.. While this would be great, I think it'd be extremely complex to implement? 

 To summarise: 

 
 Is there anything like the Ruby tool autotest (part of the ZenTest package ), but for Python code? 
 How do you check which functions have changed between two revisions of a script? 
 Is it possible to determine which functions a command will call? (Somewhat like a reverse traceback) 
 
 Answers (Total-6): #0 autonose created by gfxmonk : 

 
 Autonose is an autotest-like tool for python, using the excellent nosetest library. 
 
 autotest tracks filesystem changes and automatically re-run any changed tests or dependencies whenever a file is added, removed or updated. A file counts as changed if it has iself been modified, or if any file it import s has changed. 
 
 ... 
 
 Autonose currently has a native GUI for OSX and GTK. If neither of those are available to you, you can instead run the console version (with the --console option). 
 
 #1 I just found this: http://www.metareal.org/p/modipyd/ 

 I'm currently using thumb.py, but as my current project transitions from a small project to a medium sized one, I've been looking for something that can do a bit more thorough dependency analysis, and with a few tweaks, I got modipyd up and running pretty quickly. 
 #2 Django's development server has a file change monitor that watches for modifications and automatically reloads itself. You could re-use this code to launch unit tests on file modification. 
 #3 Maybe buildbot would be useful http://buildbot.net/trac 
 #4 For your third question, maybe the trace module is what you need: 

 &gt;&gt;&gt; def y(a): return a*a
&gt;&gt;&gt; def x(a): return y(a)
&gt;&gt;&gt; import trace
&gt;&gt;&gt; tracer = trace.Trace(countfuncs = 1)
&gt;&gt;&gt; tracer.runfunc(x, 2)
4
&gt;&gt;&gt; res = tracer.results()
&gt;&gt;&gt; res.calledfuncs
{('&lt;stdin&gt;', '&lt;stdin&gt;', 'y'): 1, ('&lt;stdin&gt;', '&lt;stdin&gt;', 'x'): 1}
 

 res.calledfuncs contains the functions that were called. If you specify countcallers = 1 when creating the tracer, you can get caller/callee relationships. See the docs of the trace module for more information. 

 You can also try to get the calls via static analysis, but this can be dangerous due to the dynamic nature of Python. 
 #5 Maybe Nose http://somethingaboutorange.com/mrl/projects/nose/ has a plugin http://somethingaboutorange.com/mrl/projects/nose/doc/writing_plugins.html 

 Found this: http://jeffwinkler.net/2006/04/27/keeping-your-nose-green/