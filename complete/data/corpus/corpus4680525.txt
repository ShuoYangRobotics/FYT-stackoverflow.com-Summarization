Question (ID-4680525): Plotting implicit equations in 3d I'd like to plot implicit equation F(x,y,z) = 0 in 3D. Is it possible in Matplotlib? 
 Answers (Total-6): #0 You can trick matplotlib into plotting implicit equations in 3D. Just make a one-level contour plot of the equation for each z value within the desired limits. You can repeat the process along the y and z axes as well for a more solid-looking shape. 

 from mpl_toolkits.mplot3d import axes3d
import matplotlib.pyplot as plt
import numpy as np

def plot_implicit(fn, bbox=(-2.5,2.5)):
 ''' create a plot of an implicit function
 fn ...implicit function (plot where fn==0)
 bbox ..the x,y,and z limits of plotted interval'''
 xmin, xmax, ymin, ymax, zmin, zmax = bbox*3
 fig = plt.figure()
 ax = fig.add_subplot(111, projection='3d')
 A = np.linspace(xmin, xmax, 100) # resolution of the contour
 B = np.linspace(xmin, xmax, 15) # number of slices
 A1,A2 = np.meshgrid(A,A) # grid on which the contour is plotted

 for z in B: # plot contours in the XY plane
  X,Y = A1,A2
  Z = fn(X,Y,z)
  cset = ax.contour(X, Y, Z+z, [z], zdir='z')
  # [z] defines the only level to plot for this contour for this value of z

 for y in B: # plot contours in the XZ plane
  X,Z = A1,A2
  Y = fn(X,y,Z)
  cset = ax.contour(X, Y+y, Z, [y], zdir='y')

 for x in B: # plot contours in the YZ plane
  Y,Z = A1,A2
  X = fn(x,Y,Z)
  cset = ax.contour(X+x, Y, Z, [x], zdir='x')

 # must set plot limits because the contour will likely extend
 # way beyond the displayed level. Otherwise matplotlib extends the plot limits
 # to encompass all values in the contour.
 ax.set_zlim3d(zmin,zmax)
 ax.set_xlim3d(xmin,xmax)
 ax.set_ylim3d(ymin,ymax)

 plt.show()
 

 Here's the plot of the Goursat Tangle: 

 def goursat_tangle(x,y,z):
 a,b,c = 0.0,-5.0,11.8
 return x**4+y**4+z**4+a*(x**2+y**2+z**2)**2+b*(x**2+y**2+z**2)+c

plot_implicit(goursat_tangle)
 

 

 You can make it easier to visualize by adding depth cues with creative colormapping: 

 

 Here's how the OP's plot looks: 

 def hyp_part1(x,y,z):
 return -(x**2) - (y**2) + (z**2) - 1

plot_implicit(hyp_part1, bbox=(-100.,100.))
 

 

 Bonus: You can use python to functionally combine these implicit functions: 

 def sphere(x,y,z):
 return x**2 + y**2 + z**2 - 2.0**2

def translate(fn,x,y,z):
 return lambda a,b,c: fn(x-a,y-b,z-c)

def union(*fns):
 return lambda x,y,z: np.min(
  [fn(x,y,z) for fn in fns], 0)

def intersect(*fns):
 return lambda x,y,z: np.max(
  [fn(x,y,z) for fn in fns], 0)

def subtract(fn1, fn2):
 return intersect(fn1, lambda *args:-fn2(*args))

plot_implicit(union(sphere,translate(sphere, 1.,1.,1.)), (-2.,3.))
 

 
 #1 Matplotlib expects a series of points; it will do the plotting if you can figure out how to render your equation. 

 Referring to Is it possible to plot implicit equations using Matplotlib? Mike Graham's answer suggests using scipy.optimize to numerically explore the implicit function. 

 There is an interesting gallery at http://xrt.wikidot.com/gallery:implicit showing a variety of raytraced implicit functions - if your equation matches one of these, it might give you a better idea what you are looking at. 

 Failing that, if you care to share the actual equation, maybe someone can suggest an easier approach. 
 #2 As far as I know, it is not possible. You have to solve this equation numerically by yourself. Using scipy.optimize is a good idea. The simplest case is that you know the range of the surface that you want to plot, and just make a regular grid in x and y, and try to solve equation F(xi,yi,z)=0 for z, giving a starting point of z. Following is a very dirty code that might help you 

 from scipy import *
from scipy import optimize

xrange = (0,1)
yrange = (0,1)
density = 100
startz = 1

def F(x,y,z):
 return x**2+y**2+z**2-10

x = linspace(xrange[0],xrange[1],density)
y = linspace(yrange[0],yrange[1],density)

points = []
for xi in x:
 for yi in y:
  g = lambda z:F(xi,yi,z)
  res = optimize.fsolve(g, startz, full_output=1)
  if res[2] == 1:
   zi = res[0]
   points.append([xi,yi,zi])

points = array(points)
 
 #3 Have you looked at mplot3d on matplotlib? 
 #4 Finally, I did it (I updated my matplotlib to 1.0.1).
Here is code: 

 import matplotlib.pyplot as plt
import numpy as np
from mpl_toolkits.mplot3d import Axes3D

def hyp_part1(x,y,z):
 return -(x**2) - (y**2) + (z**2) - 1

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

x_range = np.arange(-100,100,10) 
y_range = np.arange(-100,100,10)
X,Y = np.meshgrid(x_range,y_range)
A = np.linspace(-100, 100, 15)

A1,A2 = np.meshgrid(A,A) 

for z in A: 
 X,Y = A1, A2
 Z = hyp_part1(X,Y,z)
 ax.contour(X, Y, Z+z, [z], zdir='z')

for y in A: 
 X,Z= A1, A2
 Y = hyp_part1(X,y,Z)
 ax.contour(X, Y+y, Z, [y], zdir='y')

for x in A:
 Y,Z = A1, A2 
 X = hyp_part1(x,Y,Z)
 ax.contour(X+x, Y, Z, [x], zdir='x')

ax.set_zlim3d(-100,100)
ax.set_xlim3d(-100,100)
ax.set_ylim3d(-100,100)
 

 Here is result: 

 Thank You, Paul! 
 #5 MathGL (GPL plotting library) can plot it easily. Just create a data mesh with function values f[i,j,k] and use Surf3() function to make isosurface at value f[i,j,k]=0. See this sample .