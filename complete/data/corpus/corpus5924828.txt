Question (ID-5924828): Can this be written as a python reduce function? Can you make this more pythonic by using the map and/or reduce functions? it just sums the products of every consecutive pair of numbers. 

 topo = (14,10,6,7,23,6)
result = 0
for i in range(len(topo)-1):
 result += topo[i]*topo[i+1]
 
 Answers (Total-6): #0 This is the nicest way I can think of: 

 import operator
sum(map(operator.mul, topo[:-1], topo[1:]))
 
 #1 You can use map and reduce like this, but I'm not convinced it's more pythonic: 

 reduce( lambda x, y: x + y, map( lambda x, y: x * y, topo[:-1], topo[1:]) )
 

 Probably simpler is this sum + generator expression: 

 sum(topo[x] * topo[x+1] for x in xrange(len(topo)-1))
 
 #2 This works: 

 mult = lambda (x, y): x * y
pairs = zip(list(topo), list(topo)[1:])
result = sum(map(mult, pairs))
 

 but is probably harder to understand. 
 #3 Instead of map using a list comprehension should work: 

 &gt;&gt;&gt; topo = (14,10,6,7,23,6)
&gt;&gt;&gt; sum((x*y for x,y in zip(topo[:-1],topo[1:])))
541
&gt;&gt;&gt; 
 

 or 

 &gt;&gt;&gt; sum((topo[i]*topo[i+1] for i in range(len(topo)-1)))
541
 
 #4 I wouldn't call this pythonic, though it looks cooler, reduce doesn't fit in here: 

 def func(first, *rest):
 return reduce(lambda (x,y),z:(x+y*z,z), rest, (0,first))[0]
 

 Note the usage of (x,y),z is 2.x only. 
 #5 With reduce and Python &lt; 3.x: 

 from itertools import tee, izip

#recipe from http://docs.python.org/library/itertools.html#recipes
def pairwise(iterable):
 "s -&gt; (s0,s1), (s1,s2), (s2, s3), ..."
 a, b = tee(iterable)
 next(b, None)
 return izip(a, b)

reduce(lambda s, (x, y):s + x * y, pairwise(topo), 0)
 

 with map: 

 from operator import mul
from itertools import tee

a, b = tee(topo)
next(b, None)

sum(map(mul, a, b))