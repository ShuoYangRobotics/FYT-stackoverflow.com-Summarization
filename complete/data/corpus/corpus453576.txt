Question (ID-453576): Is there a fast way to generate a dict of the alphabet in Python? I want to generate a dict with the letters of the alphabet as the keys, something like 

 letter_count = {'a': 0, 'b': 0, 'c': 0}
 

 what would be a fast way of generating that dict, rather than me having to type it in? 

 Thanks for your help. 

 EDIT 
Thanks everyone for your solutions :) 

 nosklo's 
 solution is probably the shortest 

 Also, thanks for reminding me about the Python string module. 
 Answers (Total-7): #0 I find this solution more elegant: 

 import string
d = dict.fromkeys(string.ascii_lowercase, 0)
 
 #1 import string
letter_count = dict(zip(string.ascii_lowercase, [0]*26))
 

 Or maybe: 

 import string
import itertools
letter_count = dict(zip(string.lowercase, itertools.repeat(0)))
 

 Can't decide which one I like more at the moment. 

 EDIT: I've decided that I like nosklo's the best :-) 

 import string
letter_count = dict.fromkeys(string.ascii_lowercase, 0)
 

 

 I'll take a guess here: do you want to count occurences of letters in a text (or something similar)? There are better ways to do this than starting with an initialized dictionary. 

 For one, there is defaultdict in the collections module: 

 &gt;&gt;&gt; import collections
&gt;&gt;&gt; letter_count = collections.defaultdict(int)
&gt;&gt;&gt; the_text = 'the quick brown fox jumps over the lazy dog'
&gt;&gt;&gt; for letter in the_text: letter_count[letter] += 1
... 
&gt;&gt;&gt; letter_counts
defaultdict(&lt;type 'int'&gt;, {' ': 8, 'a': 1, 'c': 1, 'b': 1, ... 'z': 1})
 

 Then there is this way: 

 &gt;&gt;&gt; dict((c, s.count(c)) for c in string.ascii_lowercase)
{'a': 1, 'b': 1, 'c': 1, ... 'z': 1}
 

 Horrible performance, but short and easy to read. Might be worth it, if performance doesn't matter. 
 #2 If you plan to use it for counting, I suggest the following: 

 import collections
d = collections.defaultdict(int)
 
 #3 Here's a compact version, using a list comprehension : 

 &gt;&gt;&gt; import string
&gt;&gt;&gt; letter_count = dict( (key, 0) for key in string.ascii_lowercase )
&gt;&gt;&gt; letter_count
{'a': 0, 'c': 0, 'b': 0, 'e': 0, 'd': 0, 'g': 0, 'f': 0, 'i': 0, 'h': 0, 'k': 0,
 'j': 0, 'm': 0, 'l': 0, 'o': 0, 'n': 0, 'q': 0, 'p': 0, 's': 0, 'r': 0, 'u': 0, 
't': 0, 'w': 0, 'v': 0, 'y': 0, 'x': 0, 'z': 0}
 
 #4 There's this too: 

 import string
letter_count = dict((letter, 0) for letter in string.ascii_lowercase)
 
 #5 import string
letters = string.ascii_lowercase
d = dict(zip(letters, [0]*len(letters))
 
 #6 Yet another 1-liner Python hack: 

 letter_count = dict([(chr(i),0) for i in range(97,123)])