Question (ID-764412): Python Macros: Use Cases? If Python had a macro facility similar to Lisp/Scheme (something like MetaPython ), how would you use it? 

 If you are a Lisp/Scheme programmer, what sorts of things do you use macros for (other than things that have a clear syntactic parallel in Python such as a while loop)? 
 Answers (Total-11): #0 I believe that macros run counter to Python's culture. Macros in Lisp allow the big ball of mud approach; you get to redefine the language to become more suited to your problem domain. Conversely Pythonic code uses the most natural built in feature of Python to solve a problem, instead of solving it in a way that would be more natural in a different language. 

 Macros are inherently unpythonic. 
 #1 Some examples of lisp macros: 

 
 ITERATE which is a funny and extensible loop facility 
 CL-YACC / FUCC that are parser generators that generate parsers at compile time 
 CL-WHO which allows specifying html documents with static and dynamic parts 
 Parenscript which is a javascript code generator 
 Various simple code-wrappers, e.g., error handlers (I have a with-gtk-error-message-handler that executes code and shows GtkMessageDialog if unhandled error occurs), executors (e.g., given a code, execute it in different thread; I have a within-main-thread macro that executes code in different threads; PCall library uses macros to wrap code to be executed concurrently) 
 GUI builders with macros (e.g., specify widgets hierarchy and widgets' properties and have a macro generate code for creation of all widgets) 
 Code generators that use external resources during compilation time. E.g., a macro that processes C headers and generates FFI code or a macro that generates classes definitions based on database schema 
 Declarative FFI. E.g., specifying the foreign structures, functions, their argument types and having macros to generate corresponding lisp structures, functions with type mapping and marshaling code 
 Continuations-based web frameworks for Common Lisp use macros that transform the code into CPS (continuation passing style) form. 
 
 #2 There's a mailing list posting ( archive.org mirror ) which explains this rather well. The post is about Perl, but it applies to Python just as well. 
 #3 In lisp, macros are just another way to abstract ideas. 

 This is an example from an incomplete ray-tracer written in clojure: 

 (defmacro per-pixel
 "Macro.
Excecutes body for every pixel. Binds i and j to the current pixel coord."
 [i j &amp; body]
 `(dotimes [~i @width]
  (dotimes [~j @height]
  ~@body)))
 

 If you want to do something to every pixel with coordinates (i,j), say, draw a black pixel if i is even, you would write: 

 (per-pixel i,j
 (if (even? i)
 (draw-black i,j)))
 

 This is not possible to do without macros because @body can mean anything inside (per-pixel i j @body) 

 Something like this would be possible in python as well. You need to use decorators.
You can't do everything you can do with lisp macros, but they are very powerful 

 Check out this decorator tutorial: 
 http://www.artima.com/weblogs/viewpost.jsp?thread=240808 
 #4 See also this question: Pythonic macro syntax 
 #5 I don't think Python needs macros, because they are useful for 2 things: 

 
 Creating a DSL or more eloquent syntax for something (Lisp LOOP macro is a nice example). In this case, Python philosophy decided against it deliberately. If there is some explicit notation you're missing, you can always ask for a PEP. 
 Making things faster by precomputing things at compile time. Python isn't oriented to speed, so you can always use a function instead. 
 

 I am not saying macros are wrong, just that they don't fit Python philosophy. You can always do without them without much code duplication, because you have duck typing and operator overloading. 

 And as a side note, I would much rather see Lisp's restarts in Python than macros. 
 #6 Here's one real-world example I came across that would be trivial with macros or real metaprogramming support, but has to be done with CPython bytecode manipulation due to absence of both in Python: 

 http://www.aminus.net/dejavu/chrome/common/doc/2.0a/html/intro.html#cpython 

 This is how the problem is solved in Common Lisp using a combination of regular macros, and read-macros to extend the syntax (it could have been done without the latter, but not the former): 

 http://clsql.b9.com/manual/csql-find.html 

 The same problem solved in Smalltalk using closures and metaprogramming (Smalltalk is one of the few single-dispatch OO languages that actually gets message passing right): 

 http://people.csail.mit.edu/gregs/ll1-discuss-archive-html/msg02096.html 

 Here I tried to implement the Smalltalk approach in Common Lisp, which is a good illustration of how metaprogramming is poorly supported in the latter: 

 http://carcaddar.blogspot.com/2009/04/closure-oriented-metaprogramming-via.html 
 #7 Some uses cases I have seen before include making class factories or stripping logging statements out of production code. 
 #8 Read "The Lambda Papers" so you might find out generally why one would take advtage of macros at all. 

 You should start with ‘AIM-353 Lambda:The Ultimate Imperative’ and follow it with ‘AIM-443 Lambda: The Ultimate GOTO’. Both may be found here: 

 http://library.readscheme.org/page1.html 
 #9 Hy,
For my own use, I created a Python module (Espy) that allows macro definitions with arguments, loop and conditional code generation:
You create a source.espy file, then launch the appropriate function, then source.py is generated. 

 It allows syntaxes as following: 

 macro repeat(arg1):
 for i in range(%arg1%):
  socket
 print "stop"
 ...
repeat(5):
 print "Hi everybody"
 print "See you soon"
 

 is equivalent to: 

 ...
for i in range(5):
 print "Hi everybody"
 print "See you soon"
print "stop"
 

 Other syntax: 

 macro doit(arg1):
 for i in %arg1%:
  socket suit(arg2):
   socket
   print %arg2%
  socket check(arg3):
   if %arg2%==%arg3%:
    socket
...
#use
doit(range(10)):
 suit(result):
  result=i*i
 check(result,25):
  print "I knew that 5*5 == 25"
 

 is equivalent to: 

 for i in range(10):
 result=i*i
 print result
 if result==25:
  print "I knew that 5*5 == 25"
 

 More, Espy has 2 functions: "macro for" and "macro if". An example: 

 macro for v in [6,10,12,20,23]:
 macro if 7&lt;%v%&lt;22:
  True:
   print "At %v%, I'm awake."
  False:
   print "At %v%, I'm sleeping."
 

 is translated by Espy in: 

 print "At 6, I'm sleeping."
print "At 10, I'm awake."
print "At 12, I'm awake."
print "At 20, I'm awake."
print "At 23, I'm sleeping."
 

 Complete documentation and free download can be found here: http://elp.chronocv.fr 

 I use this module in many cases. It permits more structured and shorter codes. With it I generated 65000 lines of clear and efficient python code from 1000 lines of espy code for a new chess engine project (still in progress). 

 If Python could include macros in futur release, it'd become more impressive. 
 #10 Possibly if you want the source code at runtime such as for debugging (say printf debugging an expression's value with the name of it so you don't have to write it twice). 

 The only way I could think of to do it in python is to pass a string to eval.