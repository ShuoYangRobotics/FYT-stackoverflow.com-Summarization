Question (ID-5132036): Shortest/Best way to do this list task in Python I'm learning Python. I'd like to do the following task: 

 
 Input: a list: e.g., ['a', 'b', 'c'] 
 Output: a single string that concatenate all elements in the list, while each element is modifed in the same way for all elements. 
 

 For example, I'd like to add "-temp" to each element in the list. So, the output would be: 

 "a-temp b-temp c-temp" 

 Of couse, I can write C/C++ style. But, is there more elegant or interesting way in Python? 
 Answers (Total-6): #0 &gt;&gt;&gt; ' '.join( x+'-temp' for x in ['a', 'b', 'c'] )
'a-temp b-temp c-temp'
 
 #1 List comprehensions are your friend: 

 lst = ['a', 'b', 'c']
print ' '.join(['%s-temp' % item for item in lst])
 
 #2 Use list comprehensions when you need to access and use each element of a list. Example: 

 l = ['a', 'b', 'c']
' '.join([element + '-temp' for element in l])
 
 #3 Here you go: 

 s = " ".join(["%s-temp" % s for s in thelist])
 

 That contains a list comprehension that maps the elements of thelist through a string interpolation, generating a new list. That is then joined with a space in between to get the final string. 
 #4  '-temp'.join(list) 
 

 I believe will do it. 

 

 Almost: 

 '-temp '.join(['a','b','c'])+'-temp'
 
 #5 You can use map function as below: 

 l = ['a','b','c']
map((lambda s: s + '-temp'), l)