Question (ID-1566936): Easy pretty printing of floats in python? I have a list of floats. If I simply print it, it shows up like this: 

 [9.0, 0.052999999999999999, 0.032575399999999997, 0.010892799999999999, 0.055702500000000002, 0.079330300000000006]
 

 I could use print "%.2f" , but that would require a for loop to traverse the list, which I consider to be ugly. I believe that there must be a better solution. 

 I'd like something like (I'm completely making this up) 

 &gt;&gt;&gt; import print_options
&gt;&gt;&gt; print_options.set_float_precision(2)
&gt;&gt;&gt; print [9.0, 0.052999999999999999, 0.032575399999999997, 0.010892799999999999, 0.055702500000000002, 0.079330300000000006]
[9.0, 0.05, 0.03, 0.01, 0.06, 0.08]
 
 Answers (Total-9): #0 You can do: 

 a = [9.0, 0.052999999999999999, 0.032575399999999997, 0.010892799999999999, 0.055702500000000002, 0.079330300000000006]
print ["%0.2f" % i for i in a]
 
 #1 Note that you can also multiply a string like "%.2f" (example: "%.2f "*10). 

 &gt;&gt;&gt; print "%.2f "*len(yourlist) % tuple(yourlist)
2.00 33.00 4.42 0.31
 
 #2 A more permanent solution is to subclass float : 

 &gt;&gt;&gt; class prettyfloat(float):
 def __repr__(self):
  return "%0.2f" % self

&gt;&gt;&gt; x
[1.290192, 3.0002, 22.119199999999999, 3.4110999999999998]
&gt;&gt;&gt; x = map(prettyfloat, x)
&gt;&gt;&gt; x
[1.29, 3.00, 22.12, 3.41]
&gt;&gt;&gt; y = x[2]
&gt;&gt;&gt; y
22.12
 

 The problem with subclassing float is that it breaks code that's explicitly looking for a variable's type. But so far as I can tell, that's the only problem with it. And a simple x = map(float, x) undoes the conversion to prettyfloat . 

 Tragically, you can't just monkey-patch float.__repr__ , because float 's immutable. 

 If you don't want to subclass float , but don't mind defining a function, map(f, x) is a lot more concise than [f(n) for n in x] 
 #3 I believe that Python 3.1 will print them nicer by default, without any code changing. But that is useless if you use any extensions that haven't been updated to work with Python 3.1 
 #4 print "[%s]"%", ".join(map(str,yourlist))
 

 This will avoid the rounding errors in the binary representation when printed, without introducing a fixed precision constraint (like formating with "%.2f" ): 

 [9.0, 0.053, 0.0325754, 0.0108928, 0.0557025, 0.0793303]
 
 #5 List comps are your friend. 

 print ", ".join(["%.2f" % f for f in list_o_numbers])
 

 Try it: 

 &gt;&gt;&gt; nums = [9.0, 0.052999999999999999, 0.032575399999999997, 0.010892799999999999]
&gt;&gt;&gt; print ", ".join(["%.2f" % f for f in nums])
9.00, 0.05, 0.03, 0.01
 
 #6 As noone has added it, it should be noted that going forward from Python 2.6+ the recommended way to do string formating is with format , to get ready for Python 3+. 

 print ["{0:0.2f}".format(i) for i in a]
 

 The new string formating syntax is not hard to use, and yet is quite powerfull. 

 I though that may be pprint could have something, but I haven't found anything. 
 #7 First, elements inside a collection print their repr. you should learn about __repr__ and __str__ . 

 This is the difference between print repr(1.1) and print 1.1. Let's join all those strings instead of the representations: 

 numbers = [9.0, 0.053, 0.0325754, 0.0108928, 0.0557025, 0.07933]
print "repr:", " ".join(repr(n) for n in numbers)
print "str:", " ".join(str(n) for n in numbers)
 
 #8 I agree with SilentGhost's comment, the for loop isn't that bad. You can achieve what you want with: 

 l = [9.0, 0.052999999999999999, 0.032575399999999997, 0.010892799999999999, 0.055702500000000002, 0.079330300000000006]
for x in l: print "%0.2f" % (x)