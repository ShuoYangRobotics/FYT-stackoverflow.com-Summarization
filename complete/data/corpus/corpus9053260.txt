Question (ID-9053260): Removing one list from another In python (2.7) we can do: 

 &gt;&gt;&gt; a = [1, 2, 3]
&gt;&gt;&gt; b = [4 , 5]
&gt;&gt;&gt; a + b
[1, 2, 3, 4, 5]
 

 However we can't do a - b. 

 Since python seems to have something cool for nearly everything, what is the most python-esque to do a - b, in your opinion? 

 Similar question for dictionaries, which can neither do a + b, or a - b, where a and b are both dictionaries. Thanks. 
 Answers (Total-7): #0 You can do this with sets: 

 &gt;&gt;&gt; s = set([1,2,3] + [4,5])
&gt;&gt;&gt; s - set([4, 5])
{1, 2, 3}
 

 The main difference of course being a set cannot contain duplicate elements. 
 #1 I would do: 

 &gt;&gt;&gt; a = [1, 2, 3]
&gt;&gt;&gt; b = [2, 3]
&gt;&gt;&gt; filter(lambda x: x not in b, a)
[1]
 

 or using list comprehensions 

 [x for x in a if x not in b]
 

 And it can be done the same way for dictionaries. 

 Set has defined operator - and methods difference and symmetric_difference . If you are planning to make extensive use of that operations use set instead of list or dict. 
 #2 The answer depends on the desired semantics of a - b . 

 If you just want the first elements, then slicing is the natural way to do it: 

 In [11]: a = [1, 2, 3]

In [12]: b = [4 , 5]

In [13]: ab = a + b

In [14]: ab[:len(a)]
Out[14]: [1, 2, 3]
 

 If, on the other hand, you want to remove elements of the first list not found in the second list: 

 In [15]: [v for v in ab if v not in b]
Out[15]: [1, 2, 3]
 

 The second type of operation is more naturally expressed using sets: 

 In [18]: set(ab) - set(b)
Out[18]: set([1, 2, 3])
 

 Note that generally this does not preserve the ordering of the elements (since sets are unordered). If ordering is important, and b is likely to be long, converting b into a set may improve performance: 

 In [19]: bset = set(b)

In [20]: [v for v in ab if v not in bset]
Out[20]: [1, 2, 3]
 

 For dictionaries, there already exists an in-place "addition" operation. It's called dict.update() . 
 #3 y = set(b) 
 aminusb = filter(lambda p: p not in y,a) 
 #4 I would try [x for x in a if a not in b] . 
 #5 Try this: 

 def list_sub(lst1, lst2):
 s = set(lst2)
 return [x for x in lst1 if x not in s]

list_sub([1, 2, 3, 1, 2, 1, 5], [1, 2])
&gt; [3, 5]
 

 It's an O(n+m) solution due to the fact that it's using a precomputed set , so membership lookup will be fast. Also, it will preserve the order of the original elements and remove duplicates. 
 #6 Order is not preserved, but it has the result you want: 

 &gt;&gt;&gt; def list_diff(a, b):
...  return list(set(a) - set(b))
... 
&gt;&gt;&gt; print list_diff([1, 2, 3, 1, 2, 1], [1, 2])
[3]