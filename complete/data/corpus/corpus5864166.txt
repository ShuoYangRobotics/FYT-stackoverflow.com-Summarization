Question (ID-5864166): return statement in for loops I have been working on this assignment for school and I just can't figure out what why I cant get this program to work properly. I am trying to get the program to allow the user to enter three animals. It is only allowing me to enter one. I know it has to do with my placement of the return statemet in the make_list function but can't figure out how to fix it. 

 Here is my code: 

 import pet_class

def main():
 #get list of pet objects
 pets = make_list()

 #Display the data in a list.
 print 'Here is the data you entered:'
 display_list(pets)


#The make_list function gets data from the user for three pets. The function
# returns a list of pet objects containing the data.

def make_list():
 #create empty list.
 pet_list = []

 #Add three pet objects to the list.
 print 'Enter data for three pets.'
 for count in range (1, 4):
  #get the pet data.
  print 'Pet number ' + str(count) + ':'
  name = raw_input('Enter the pet name:')
  animal=raw_input('Enter the pet animal type:')
  age=raw_input('Enter the pet age:')
  print

  #create a new pet object in memory and assign it
  #to the pet variable

  pet = pet_class.PetName(name,animal,age)

  #Add the object to the list.
  pet_list.append(pet)

  #Return the list
  return pet_list

#The display_list function accepts a list containing pet objects
#as an argument and displays the data stored in each object.

def display_list(pet_list):
 for item in pet_list:
  print item.get_name()
  print item.get_animal_type()
  print item.get_age() 
  print

#call main function
main()
 
 Answers (Total-6): #0 I'm only answering this again, because I notice that your subject already states the problem, and nobody's given a.. theoretical explanation, here.. theoretical being too big a word in this case, but whatever. 

 Your problem is, precisely, that you're putting the return statement inside the for-loop. The for-loop runs each statement in it for however so many times.. if one of your statements is a return, then the function will return when it hits it. This makes sense in, for example, the following case: 

 def get_index(needle, haystack):
 for x in range(len(haystack)):
  if haystack[x] == needle:
   return x
 

 Here, the function iterates until it finds where the needle is in the haystack, and then returns that index (there's a builtin function to do this, anyways). If you want the function to run for however many times you tell it to, you have to put the return AFTER the for-loop, not inside it, that way, the function will return after the control gets off the loop 

 def add(numbers):
 ret = 0
 for x in numbers:
  ret = ret + x

 return ret
 

 (once again, there's a builtin function to do this as well) 
 #1 You just need to return the pet_list outside of the for loop, so it will happen after the loop has finished running. 

 def make_list():
 pet_list = []

 print 'Enter data for three pets.'
 for count in range (1, 4):
  print 'Pet number ' + str(count) + ':'
  name = raw_input('Enter the pet name:')
  animal=raw_input('Enter the pet animal type:')
  age=raw_input('Enter the pet age:')
  print

  pet = pet_class.PetName(name,animal,age)
  pet_list.append(pet)

 return pet_list
 
 #2 Remove one indent before the return. 
 #3 You have the return statement at the incorrect level of indentation. It should be at the same depth as the for statement. Having the return within the loop causes it to break out of the loop. 
 #4 Your return is in your for loop. 
-1 tab. 
 #5 Your spacing is off. return pet_list is in the scope of the for loop.