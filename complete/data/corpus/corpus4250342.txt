Question (ID-4250342): Generate all possible numpad/keypad sequences I am trying to generate all possible keypad sequences (7 digit length only right now). For example if the mobile keypad looks like this: 

 1 2 3
4 5 6
7 8 9
 0
 

 Some of the possible sequences can be: 

 
 123698 
 147896 
 125698 
 789632 
 

 The requirement is that the each digit of number should be neighbor of previous digit. 

 Here is how I am planning to start this: 

 The information about the neighbor changes from keypad to keypad so we have to hardcode it like this: 

 neighbors = {0: 8, 1: [2,4], 2: [1,3,5], 3: [2,6], 4: [1,5,7], 5: [2,4,6,8], 6: [3,5,9], 7: [4,8], 8: [7,5,9,0], 9: [6,8]}
 

 I will be traversing through all digits and will append one of the possible neighbors to it until required length is achieved. 

 EDIT: Updated neighbors, no diagonals allowed
EDIT 2: Digits can be reused 
 Answers (Total-6): #0 Try this. 

 neighbors = {0: [8], 
    1: [2,4], 
    2: [1,4,3], 
    3: [2,6], 
    4: [1,5,7], 
    5: [2,4,6,8], 
    6: [3,5,9], 
    7: [4,8], 
    8: [7,5,9,0], 
    9: [6,8]}


def get_sequences(n):
 if not n:
  return
 stack = [(i,) for i in range(10)]
 while stack:
  cur = stack.pop()
  if len(cur) == n:
   yield cur
  else:
   stack.extend(cur + (d, ) for d in neighbors[cur[-1]]) 

print list(get_sequences(3))
 

 This will produce all possible sequences. You didn't mention if you wanted ones that have cycles in them, for example (0, 8, 9, 8) so I left them in. If you don't want them, then just use 

 stack.extend(cur + (d, ) 
    for d in neighbors[cur[-1]]
    if d not in cur)
 

 Note that I made the entry for 0 a list with one element instead of just an integer. This is for consistency. It's very nice be able to index into the dictionary and know that you're going to get a list back. 

 Also note that this isn't recursive. Recursive functions are great in languages that properly support them. In Python, you should almost always manage a stack like I demonstrate here. It's just as easy as a recursive solution and sidesteps function call overhead (python doesn't support tail recursion) and maximum recursion depth concerns. 
 #1 neighbors = {0: [8], 1: [2,5,4], 2: [1,4,3], 3: [2,5,6], 4: [1,5,7], 5: [2,4,6,8], 6: [3,5,9], 7: [4,5,8], 8: [7,5,9,0], 9: [6,5,8]}

def gen_neighbor_permutations(n, current_prefix, available_digit_set, removed_digits=set(), unique_digits=False):
 if n == 0:
   print current_prefix
   return
 for d in available_digit_set:
   if unique_digits:
     gen_neighbor_permutations(n-1, current_prefix + str(d), set(neighbors[d]).difference(removed_digits), removed_digits.union(set([d])), unique_digits=True )
   else:
     gen_neighbor_permutations(n-1, current_prefix + str(d), set(neighbors[d]).difference(removed_digits) )

gen_neighbor_permutations(n=3, current_prefix='', available_digit_set=start_set)
 

 I also couldn't help but notice that in your examples, none of the digits are reused. If you want that, then you would use the unique_digits = True option; this will disallow recursion on digits that are already used. 

 +1 What a fun puzzle. I hope this works for you! 

 gen_neighbor_permutations(n=3, current_prefix='', available_digit_set=start_set, unique_digits = True)
 
 #2 Recursion isn't really much of an issue here because the sequence is relatively short as are the choices for each digit except the first -- so there appear to "only" be 4790 possibilities disallowing diagonals. This is written as an iterator to eliminate the need to create and return a large container with all possibilities produced in it. 

 It occurred to me that an additional benefit of the data-driven approach of storing the neighbor adjacency information in a data structure (as the OP suggested) was that besides easily supporting different keypads, it also makes controlling whether diagonals are allowed or not trivial. 

 I debated briefly about whether to make it a list instead of a dictionary for faster lookups, but realized that doing so would make it more difficult to adapt to produce sequences other than digits (and likely wouldn't make it significantly faster anyway). 

 adjacent = {1: [2,4], 2: [1,3,4], 3: [2,6],
   4: [1,5,7], 5: [2,4,6,8], 6: [3,5,9],
   7: [4,8], 8: [0,5,7,9], 9: [6,8],
      0: [8]}

def adj_sequences(ndigits):
 seq = [None]*ndigits # pre-allocate

 def next_level(i):
  for neighbor in adjacent[seq[i-1]]:
   seq[i] = neighbor
   if i == ndigits-1: # last digit?
    yield seq
   else:
    for digits in next_level(i+1):
     yield digits

 for first_digit in range(10):
  seq[0] = first_digit
  for digits in next_level(1):
   yield digits

cnt = 1
for digits in adj_sequences(7):
 print '{:d}: {!r}'.format(cnt, ''.join(map(str,digits)))
 cnt += 1
 
 #3 That's a classic recursive algorithm. Some pseudo code to show the concept: 

 function(numbers) { 
 if (length(numbers)==7) { 
 print numbers; 
 return; 
 } 
 if (numbers[last]=='1') { 
 function(concat(numbers, '2')); 
 function(concat(numbers, '4')); 
 return; 
 } 
 if (numbers[last]==='2') { 
 function(concat(numbers, '1')); 
 function(concat(numbers, '3')); 
 function(concat(numbers, '5')); 
 return; 
 } 
 ...keep going with a condition for each digit..
} 
 
 #4 neighbors = {0: [8], 1: [2,5,4], 2: [1,4,3], 3: [2,5,6], 4: [1,5,7], 5: [2,4,6,8], 6: [3,5,9], 7: [4,5,8], 8: [7,5,9,0], 9: [6,5,8]}

def keyNeighborsRec(x, length):
 if length == 0:
   print x
   return
 for i in neighbors[x%10]:
   keyNeighborsRec(x*10+i,length-1)


def keyNeighbors(l):
 for i in range(10):
   keyNeighborsRec(i,length-1)

keyNeighbors(7)
 

 its really easy without the neighbor condition... 

 def keypadSequences(length):
 return map(lambda x: '0'*(length-len(repr(x)))+repr(x), range(10**length))

keypadSequences(7)
 
 #5 states = [
 [8],
 [2, 4],
 [1, 3, 5],
 [2, 6],
 [1, 5, 7],
 [2, 4, 6, 8],
 [3, 5, 9],
 [4, 8],
 [5, 7, 9, 0],
 [6, 8]
]

def traverse(distance_left, last_state):
 if not distance_left:
  yield []
 else:
  distance_left -= 1
  for s in states[last_state]:
   for n in traverse(distance_left, s):
    yield [s] + n

def produce_all_series():
 return [t for i in range(10) for t in traverse(7, i)]

from pprint import pprint
pprint(produce_all_series())