Question (ID-5577501): How to tell if string starts with a number? I have a string that starts with a number (from 0-9)
I know I can "or" 10 test cases using startswith() but there is probably a neater solution 

 so instead of writing 

 if (string.startswith('0') || string.startswith('2') || string.startswith('3') || string.startswith('4') || string.startswith('5') || string.startswith('6') || string.startswith('7') || string.startswith('8') || string.startswith('9') ):
#do something
 

 Is there a cleverer/more efficient way? 
 Answers (Total-9): #0 
>>> string = '1abc'
>>> string[0].isdigit()
True
 
 #1 Python's string library has isdigit() method: 

 string[0].isdigit()
 
 #2 Your code won't work; you need or instead of || . 

 Try 

 '0' &lt;= strg[:1] &lt;= '9'
 

 or 

 strg[:1] in '0123456789'
 

 or, if you are really crazy about startswith , 

 strg.startswith(('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'))
 
 #3 for s in ("fukushima", "123 is a number", ""):

 print s.ljust(20), s[0].isdigit() if s else False
 

 result 

 fukushima   False
123 is a number  True
      False
 
 #4 sometimes, you can use regex 

 &gt;&gt;&gt; import re
&gt;&gt;&gt; re.search('^\s*[0-9]',"0abc")
&lt;_sre.SRE_Match object at 0xb7722fa8&gt;
 
 #5 Use Regular Expressions , if you are going to somehow extend method's functionality. 
 #6 Here are my "answers" (trying to be unique here, I don't actually recommend either for this particular case :-) 

 Using ord() and the special a &lt;= b &lt;= c form: 

 //starts_with_digit = ord('0') &lt;= ord(mystring[0]) &lt;= ord('9')
//I was thinking too much in C. Strings are perfectly comparable.
starts_with_digit = '0' &lt;= mystring[0] &lt;= '9'
 

 (This a &lt;= b &lt;= c , like a &lt; b &lt; c , is a special Python construct and it's kind of neat: compare 1 &lt; 2 &lt; 3 (true) and 1 &lt; 3 &lt; 2 (false) and (1 &lt; 3) &lt; 2 (true). This isn't how it works in most other languages.) 

 Using a regular expression : 

 import re
//starts_with_digit = re.match(r"^\d", mystring) is not None
//re.match is already anchored
starts_with_digit = re.match(r"\d", mystring) is not None
 
 #7 You could use regular expressions . 

 You can detect digits using: 

 if(re.search([0-9], yourstring[:1])):
#do something
 

 The [0-9] par matches any digit, and yourstring[:1] matches the first character of your string 
 #8 Try this: 

 if string[0] in range(10):