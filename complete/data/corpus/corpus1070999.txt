Question (ID-1070999): Writing a website in Python I'm pretty proficient in PHP, but want to try something new. 

 I'm also know a bit of Python, enough to do the basics of the basics, but haven't used in a web design type situation. 

 I've just written this, which works: 

 #!/usr/bin/python

def main():
 print "Content-type: text/html"
 print
 print "&lt;html&gt;&lt;head&gt;"
 print "&lt;title&gt;Hello World from Python&lt;/title&gt;"
 print "&lt;/head&gt;&lt;body&gt;"
 print "Hello World!"
 print "&lt;/body&gt;&lt;/html&gt;"

if __name__ == "__main__":
 main()
 

 Thing is, that this seems pretty cumbersome. Without using something huge like django, what's the best way to write scripts that can process get and post? 
 Answers (Total-9): #0 As far as full frameworks go I believe Django is relatively small. 

 If you really want lightweight, though, check out web.py , CherryPy , Pylons and web2py . 

 I think the crowd favorite from the above is Pylons, but I am a Django man so I can't say much else. 

 For more on lightweight Python frameworks, check out this question . 
 #1 Your question was about basic CGI scripting, looking at your example, but it seems like everyone has chosen to answer it with "use my favorite framework". Let's try a different approach. 

 If you're looking for a direct replacement for what you wrote above (ie. CGI scripting), then you're probably looking for the cgi module. It's a part of the Python standard library. Complimentary functionality is available in urllib and urllib2 . You might also be interested in BaseHTTPServer and SimpleHTTPServer , also part of the standard library. 

 Getting into more interesting territory, wsgiref gives you the basics of a WSGI interface, at which point you probably want to start thinking about more "frameworky" (is that a word?) things like web.py, Django, Pylons, CherryPy, etc, as others have mentioned. 
 #2 There are a couple of web frameworks available in python, that will relieve you from most of the work 

 
 Django 
 Pylons (and the new TurboGears, based on it). 
 Web2py 
 CherryPy (and the old TurboGears, based on it) 
 

 I do not feel Django as "big" as you say; however, I think that Pylons and CherryPy may be a better answer to your question. CherryPy seems simpler,. but seems also a bit "pass√©", while Pylons is under active development. 
For Pylons, there is also an interesting Pylons book , available online. 
 #3 In Python, the way to produce a website is to use a framework. Most of the popular (and actively maintained/supported) frameworks have already been mentioned. 

 In general, I do not view Djano or Turbogears as "huge", I view them as "complete." Each will let you build a database backed, dynamic website. The preference for one over the other is more about style than it is about features. 

 Zope on the other hand, does feel "big". Zope is also "enterprise" class in terms of the features that are included out of the box. One very nice thing is that you can use the ZODB (Zope Object Database) without using the rest of Zope. 

 It would certainly help if we knew what kinds of websites you were interested in developing, as that might help to narrow the suggestions. 
 #4 In web2py the previous code would be 

 # in controller default.py
def main():
 return dict(message="Hello World")

# in view default/main.html
&lt;html&gt;&lt;head&gt;
&lt;title&gt;Hello World from Python&lt;/title&gt;
&lt;/head&gt;&lt;body&gt;
{{=message}}
&lt;/body&gt;&lt;/html&gt;
 

 nothing else, no installation, no configuration, you can edit the two files above directly on the web via the admin interface. web2py is based on wsgi but works also with cgi, mod_python, mod_proxy and fastcgi if mod_wsgi is not available. 
 #5 I really love django and it doesn't seem to me that is huge. It is very powerful but not huge. 

 If you want to start playing with http and python, the simplest thing is the BaseHttpServer provided in the standard library. see http://docs.python.org/library/basehttpserver.html for details 
 #6 If you are looking for a framework take a look at this list: Python Web Frameworks 

 If you need small script(-s) or one time job script, might be plain CGI module is going to be enough - CGI Scripts and cgi module itself. 

 I would recommend you to stick to some framework if you want to create something more then static pages and simple forms. Django is I believe most popular and most supported. 
 #7 What is "huge" is a matter of taste, but Django is a "full stack" framework, that includes everything from an ORM, to templates to well, loads of things. So it's not small (although smaller than Grok and Zope3, other full-stack python web frameworks). 

 But there are also plenty of really small and minimalistic web frameworks, that do nothing than provide a framework for the web part. Many have been mentioned above. To the list I must add BFG and Bobo. Both utterly minimal, but still useful and flexible. 

 http://bfg.repoze.org/ 
 http://bobo.digicool.com/ 
 #8 I agree with Paolo - Django is pretty small and the way to go - but if you are not down with that I would add to TurboGears to the list