Question (ID-5022247): Understanding the behavior of Python's set The documentation for the built-in type set says: 

 class set([iterable])
 

 
 Return a new set or frozenset object
 whose elements are taken from
 iterable. The elements of a set must
 be hashable. 
 

 That is all right but why does this work: 

 &gt;&gt;&gt; l = range(10)
&gt;&gt;&gt; s = set(l)
&gt;&gt;&gt; s
set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
 

 And this doesn't: 

 &gt;&gt;&gt; s.add([10])

 Traceback (most recent call last):
  File "&lt;pyshell#7&gt;", line 1, in &lt;module&gt;
  s.add([10])
 TypeError: unhashable type: 'list'
 

 Both are lists. Is some magic happening during the initialization? 
 Answers (Total-6): #0 When you initialize a set, you provide a list of values that must each be hashable. 

 s = set()
s.add([10])
 

 is the same as 

 s = set([[10]])
 

 which throws the same error that you're seeing right now. 
 #1 In [13]: (2).__hash__
Out[13]: &lt;method-wrapper '__hash__' of int object at 0x9f61d84&gt;

In [14]: ([2]).__hash__ # nothing.
 

 The thing is that set needs its items to be hashable, i.e. implement the __hash__ magic method (this is used for ordering in the tree as far as I know). list does not implement that magic method, hence it cannot be added in a set. 
 #2 In this line: 

 s.add([10])
 

 You are trying to add a list to the set, rather than the elements of the list. If you want ot add the elements of the list, use the update method. 
 #3 Think of the constructor being something like: 

 class Set:
 def __init__(self,l):
  for elem in l:
   self.add(elem)
 

 Nothing too interesting to be concerned about why it takes lists but on the other hand add(element) does not. 
 #4 s.add([10]) works as documented. An exception is raised because [10] is not hashable. 

 There is no magic happening during initialisation. 

 set([0,1,2,3,4,5,6,7,8,9]) has the same effect as set(range(10)) and set(xrange(10)) and set(foo()) where 

 def foo():
 for i in (9,8,7,6,5,4,3,2,1,0):
  yield i
 

 In other words, the arg to set is an iterable , and each of the values obtained from the iterable must be hashable. 
 #5 It behaves according to the documentation: set.add() adds a single element (and since you give it a list, it complains it is unhashable - since lists are no good as hash keys). If you want to add a list of elements, use set.update() . Example: 

 &gt;&gt;&gt; s = set([1,2,3])
&gt;&gt;&gt; s.add(5)
&gt;&gt;&gt; s
set([1, 2, 3, 5])
&gt;&gt;&gt; s.update([8])
&gt;&gt;&gt; s
set([8, 1, 2, 3, 5])