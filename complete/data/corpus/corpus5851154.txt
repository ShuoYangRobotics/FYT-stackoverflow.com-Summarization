Question (ID-5851154): best algorithm for finding distance for all pairs where edges' weight is 1 As the title said, I'm trying to implement an algorithm that finds out the distances between all pairs of nodes in given graph. But there is more: (Things that might help you) 

 
 The graph is unweighted. Meaning that all the edges can be considered as having weight of 1 . 
 |E| &lt;= 4*|V| 
 The graph is pretty big (at most ~144 depth) 
 The graph is directed 
 There might be cycles 
 I'm writing my code in python (please if you reference algorithms, code would be nice too :)) 
 

 I know about Johnson's algorithm , Floyd-Warshal , and Dijkstra for all pairs. But these algorithms are good when the graph has weights. 

 I was wondering if there is a better algorithm for my case, because those algorithms are intended for weighted graphs. 

 Thanks! 
 Answers (Total-10): #0 I can't point you to a better algorithm straight away, but I would argue that there is space for improvement because in unweighted graphs, you gain an additional attribute which does not hold for weighted graphs, namely: 

 
 For any edge directly connecting A to C, you know for sure that there is no shorter path via a third node B. 
 

 With this in mind, you should be able to simplify Dijkstra's Algorithm: As you may know, it works with three sets of nodes: 

 
 Those of which the definitive shortest path is known, 
 those of which a preliminary distance has been calculated and 
 those which have not yet been explored. 
 

 When following an edge e from A (1.) to C (3.), original Dijkstra would move node C from (3.) to (2.). Since the above attribute holds in all your graphs, you can however add it directly to the set (1.), which is more efficient. 

 Addendum : Here's the essential observation: The procedure outlined above is basically a BFS (breadth first search), i.e. you can find the distance from some fixed node v to any other node in O(|V| + |E|) . 

 You did not mention in your original question that the graph was basically a grid with some holes in it. This is an even stronger requirement, and I am sure you can exploit it. Doing a quick search for "grid graph shortest path" yields this paper which promises O(sqrt(n)) in the best case. As the problem you specify is fairly well-structured, I'm almost sure there are several more papers which you might want to look into. 
 #1 Run a breadth-first search from each node. Total time: O(|V| |E|) = O(|V| 2 ), which is optimal. 
 #2 I don't how you can measure the distance if all edges are unweighted but you want to look at Edmond's Blossom V algorithm. You want to look at http://code.activestate.com/recipes/221251-maximum-cardinality-matching-in-general-graphs . Here is something similar: http://wilanw.blogspot.com/2009/09/maximumminimum-weighted-bipartite.html . 
 #3 How about the Warshall algorithm, with the following very simple implementation: 

 def warshall(graph):
 n = graph.numNodes+1
 W = [ [graph.w(i,j) for j in graph.V()] for i in graph.V() ]
 for k in range(1,n): 
 for i in range(1,n):
  for j in range(1,n):
  W[i][j] = min( W[i][j] , W[i][k]+W[k][j] )
 return W
 

 where 

 
 V() yield all vertices of the graph 
 w(i,j) yields the wight of edge (i,j) - in your case all 1 or 0 
 numNodes yield the number of the graph's nodes. 
 

 complexity is, however O(n^3) 
 #4 I would refer you to the following paper: "Sub-cubic Cost Algorithms for the All Pairs Shortest Path Problem" by Tadao Takaoka. There a sequential algorithm with sub-cubic complexity for graphs with unit weight (actually max edge weight = O(n ^ 0.624)) is available. 
 #5 I suggest you give networkx a try, it seemed to work fine with 1000 nodes. 

 the following link contains Shortest path algorithms for unweighted graphs: 

 http://networkx.lanl.gov/reference/algorithms.shortest_paths.html 

 Here is an example with 10 nodes: 

 from random import random
import networkx as nx
G=nx.DiGraph()
N=10
#make a random graph
for i in range(N):
 for j in range(i):
  if 4*random()&lt;1:
   G.add_edge(i,j)

print G.adj
print nx.all_pairs_shortest_path(G)
print nx.all_pairs_shortest_path_length(G)

#output:
#Graph ADJ={0: {}, 1: {}, 2: {}, 3: {0: {}, 2: {}}, 4: {}, 5: {0: {}, 3: {}, 4: {}}, 6: {0: {}, 1: {}, 4: {}}, 7: {2: {}, 4: {}, 6: {}}, 8: {1: {}}, 9: {2: {}, 5: {}}}
#PAIRS={0: {0: [0]}, 1: {1: [1]}, 2: {2: [2]}, 3: {0: [3, 0], 2: [3, 2], 3: [3]}, 4: {4: [4]}, 5: {0: [5, 0], 2: [5, 3, 2], 3: [5, 3], 4: [5, 4], 5: [5]}, 6: {0: [6, 0], 1: [6, 1], 4: [6, 4], 6: [6]}, 7: {0: [7, 6, 0], 1: [7, 6, 1], 2: [7, 2], 4: [7, 4], 6: [7, 6], 7: [7]}, 8: {8: [8], 1: [8, 1]}, 9: {0: [9, 5, 0], 2: [9, 2], 3: [9, 5, 3], 4: [9, 5, 4], 5: [9, 5], 9: [9]}}
#LENGTHS={0: {0: 0}, 1: {1: 0}, 2: {2: 0}, 3: {0: 1, 2: 1, 3: 0}, 4: {4: 0}, 5: {0: 1, 2: 2, 3: 1, 4: 1, 5: 0}, 6: {0: 1, 1: 1, 4: 1, 6: 0}, 7: {0: 2, 1: 2, 2: 1, 4: 1, 6: 1, 7: 0}, 8: {8: 0, 1: 1}, 9: {0: 2, 2: 1, 3: 2, 4: 2, 5: 1, 9: 0}}
 
 #6 In the Python Graph project: 

 http://code.google.com/p/python-graph/ 

 You can find my implementation of the A* algorithm with support for hinting-heuristics. This is particularly suitable for obstacle avoidance in 2 dimensions as the hinting algorithm need not be anything more than pythogras' theorem. 

 I think this would do everything you nedd. If you dont like the graph abstractions used by this project you can re-use the algorithm. It's written in a very generic way. 
 #7 I'm assuming the graph is dynamic; otherwise, there's no reason not to use Floyd-Warshall to precompute all-pairs distances on such a small graph ;) 

 Suppose you have a grid of points (x, y) with 0 &lt;= x &lt;= n, 0 &lt;= y &lt;= n. Upon removing an edge E: (i, j) &lt;-> (i+1, j), you partition row j into sets A = { (0, j), ..., (i, j) }, B = { (i+1, j), ..., (n, j) } such that points a in A, b in B are forced to route around E - so you need only recompute distance for all pairs (a, b) in (A, B). 

 Maybe you can precompute Floyd-Warshall, then, and use something like this to cut recomputation down to O(n^2) (or so) per graph modification... 
 #8 After taking a quick flip through the Algorithm Design Manual , here is what Skiena has to say (from Chapter 15.4 - Shortest Path). Unsurprisingly, it comes to the same conclusion many of you have already provided, but also provides some other insights 

 
 The primary algorithm for finding the shortest path is Djikstra's algorithm ... 
 
 Is your graph weighted, or unweighted? If your graph is unweighted, a simple breadth-first search starting from the source vertex will find the shortest path to all other vertices in linear time... 
 

 He goes on to mention the other cases you may be interested in (e.g. what if the input is a set of geometric obstacles? Do you need the shortest path between all pairs of points?) but in these cases he also concludes the same as you have: Djikstra's algorithm or the Floyd-Warshall algorithm. 

 Depending on your use, you may also want to look into Transitive Closures which deal with reachability, and use similar algorithms. 
 #9 def from_vertex(v, E):
 active = [v]
 step = 0
 result = {v:0}
 while active:
  step += 1
  new_active = []
  for x in active:
   for nh in E[x]:
    if nh not in result:
     new_active.append(nh)
     result[nh] = step + 1
  active = new_active
 return result
 

 Basically you do a flood-fill from each vertex and you get as result the minimum distance of any other reachable vertex from that one.