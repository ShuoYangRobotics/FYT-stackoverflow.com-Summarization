Question (ID-1185199): Passing expressions to functions in python? I'm not quite sure what i mean here, so please bear with me.. 

 In sqlalchemy, it appears i'm supposed to pass an expression? to filter() in certain cases. When i try to implement something like this myself, i end up with: 

 &gt;&gt;&gt; def someFunc(value):
... print(value)

&gt;&gt;&gt; someFunc(5 == 5)
True
 

 How do i get the values passed to == from inside the function? 

 Edit: I'm trying to achieve something like this 

 &gt;&gt;&gt; def magic(left, op, right):
 ... print(left+" "+op+" "+right)

 &gt;&gt;&gt; magic(5 == 5)
 5 == 5
 

 Edit: What about if one of the paramaters was an object? 
 Answers (Total-7): #0 You can achieve your example if you make "op" a function: 

 
 >>> def magic(left, op, right):
 ...  return op(left, right)
 ...
 >>> magic(5, (lambda a, b: a == b), 5)
 True
 >>> magic(5, (lambda a, b: a == b), 4)
 False
 

 This is more Pythonic than passing a String. It's how functions like sort() work. 

 Those SQLAlchemy examples with filter() are puzzling. I don't know the internals about SQLAlchemy, but I'm guessing in an example like query.filter(User.name == 'ed') what's going on is that User.name is a SQLAlchemy-specific type, with an odd implementation of the __eq() function that generates SQL for the filter() function instead of doing a comparison. Ie: they've made special classes that let you type Python expressions that emit SQL code. It's an unusual technique, one I'd avoid unless building something that's bridging two languages like an ORM. 
 #1 An even more pythonic variant of Nelson's solution is to use the operator functions from the operator module in the standard library; there is no need to create your own lambdas. 

 &gt;&gt;&gt; from operator import eq
&gt;&gt;&gt; def magic(left, op, right):
... return op(left, right)
... 
&gt;&gt;&gt; magic(5, eq, 5)
True
 
 #2 You can't. The expression 5 == 5 is evaluated and only then is the result passed to someFunc. The function just gets True (the True object, to be precise), no matter what the expression was. 

 Edit: Concerning your edit, this question is kind of close. 

 Edit 2: You could just pass the expression as a string and use eval, like this: 

 &gt;&gt;&gt; def someFunc(expression_string):
... print(expression_string, "evaluates to", eval(expression_string))

&gt;&gt;&gt; someFunc("5 == 5")
5 == 5 evaluates to True
 

 Don't know whether that helps you. Keep in mind that eval is a powerful tool, so it's dangerous to pass arbitrary (and possibly even user-generated) input to it. 
 #3 It appears you can return tuples from eq : 

 class Foo:
 def __init__(self, value):
   self.value = value

 def __eq__(self, other):
   return (self.value, other.value)


f1 = Foo(5)
f2 = Foo(10)
print(f1 == f2)
 
 #4 You need to wrap the whole thing as a literal string. You're trying to print that out as a string I assume, correct? 
 #5 Short answer: You can't. The result of the expression evaluation is passed to the function rather than the expression itself. 
 #6 Time has passed but, I found this post looking for a similar solution. I have a list of dictionaries which I wanted to be able to search in a familiar way. Since I've always found that the filtering in SQLAlchemy seemed visual and better then .eq/.lt/etc functions I wanted something similar with my list search without too much effort. 

 If you want to have the magic of passing a condition to a function you will need to wrap the 'keys' in some kind of object either like i do below or by having a key (or column) class. In any case you'll need to allow the expression to be solved before it passes as the param. Having such a method would allow additional logic like 'and' and 'or'. But, this is far more detail then I have need for. I think want you want to get out of using the magic function can be achieved with this. 

 The (simple) collection looks something like this:
 class mycollection( list ): 

  def search( self ): 
  return Search( self )
 

 

 The (simplified) search class. 
Side note: use bisect to do the .eq/.lt/etc operations Searching Sorted Lists 

 class Search: 

  def __init__( self, result ):
  self.result = result

 def filter( self, key ):
  return expressionKey( self, key )

 def eq(self, key, value): 
  """eq search logic modify self.result"""
  return len( self.result ) != 0

 def ne(self, key, value ):
  """ne search logic modify self.result"""
  return len( self.result ) != 0

 def lt(self, key, value ):
  """lt search logic modify self.result"""
  return len( self.result ) != 0

 def le(self, key, value ):
  """le search logic modify self.result"""
  return len( self.result ) != 0

 def gt(self, key, value):
  """gt search logic modify self.result"""
  return len( self.result ) != 0

 def ge(self, key, value ):
  """ge search logic modify self.result"""
   return len( self.result ) != 0
 

 

 The expresssionKey class can wrap the key value into something we can do an expression on 

 class expressionKey: 

  def __init__(self, search, key): 
  self.search = search 
  self.key = key

 def __lt__(self, value): 
  return self.search.lt( self.key, value )

 def __le__(self, value): 
  return self.search.le( self.key, value )

 def __gt__(self, value): 
  return self.search.gt( self.key, value )

 def __ge__(self, value): 
  return self.search.ge( self.key, value )

 def __eq__(self, value): 
  return self.search.eq( self.key, value )

 def __ne__(self, value): 
  return self.search.ne( self.key, value )
 

 

 So to filter we use it like this and call search.result to get the values we have filterd out of mycollection
 filled_collection = mycollection()
search = filled_collection.Search( )
search.filter( 'enabled' ) == True
search.filter( 'last_access' ) >= datetime.now( ).date()
print search.result 

 search = filled_collection.Search( )
some_method( search.filter( 'id' ) != 1 )
 

 Hope that helps