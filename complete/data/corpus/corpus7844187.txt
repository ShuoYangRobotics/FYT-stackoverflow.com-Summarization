Question (ID-7844187): Instantiating a unique object every time when using object composition? As an example, just a couple of dummy objects that will be used together. FWIW this is using Python 2.7.2. 

 class Student(object):
 def __init__(self, tool):
  self.tool = tool

 def draw(self):
  if self.tool.broken != True:
   print "I used my tool. Sweet."
  else:
   print "My tool is broken. Wah."

class Tool(object):
 def __init__(self, name):
  self.name = name
  self.broken = False

 def break(self):
  print "The %s busted." % self.name
  self.broken = True

Hammer = Tool(hammer)
Billy = Student(Hammer)
Tommy = Student(Hammer)
 

 That's probably enough code, you see where I'm going with this. If I call Hammer.break(), I'm calling it on the same instance of the object; if Billy's hammer is broken, so is Tommy's (it's really the same Hammer after all). 

 Now obviously if the program were limited to just Billy and Tommy as instances of Students, the fix would be obvious - instantiate more Hammers. But clearly I'm asking because it isn't that simple, heh. I would like to know if it's possible to create objects which show up as unique instances of themselves for every time they're called into being. 

 EDIT: The kind of answers I'm getting lead me to believe that I have a gaping hole in my understanding of instantiation. If I have something like this: 

 class Foo(object):
 pass

class Moo(Foo):
 pass

class Guy(object):
 def __init__(self, thing):
  self.thing = thing

Bill = Guy(Moo())
Steve = Guy(Moo())
 

 Each time I use Moo(), is that a separate instance, or do they both reference the same object? If they're separate , then my whole question can be withdrawn, because it'll ahve to make way for my mind getting blown. 
 Answers (Total-6): #0 You have to create new instances of the Tool for each Student. 

 class Student(object):
 def __init__(self, tool):
  self.tool = tool

 def draw(self):
  if self.tool.broken != True:
   print "I used my tool. Sweet."
  else:
   print "My tool is broken. Wah."

class Tool(object):
 def __init__(self, name):
  self.name = name
  self.broken = False

 def break(self):
  print "The %s busted." % self.name
  self.broken = True

# Instead of instance, make it a callable that returns a new one
def Hammer():
 return Tool('hammer')

# Pass a new object, instead of the type
Billy = Student(Hammer())
Tommy = Student(Hammer())
 
 #1 
 I'll try to be brief. Well.. I always try to be brief, but my level of success is pretty much random.randint(0, never). So yeah. 
 

 Lol. You even failed to be brief about announcing that you will try to be brief. 

 First, we need to be clear about what "called into being" means. Presumably you want a new hammer every time self.tool = object happens. You don't want a new instance every time, for example, you access the tool attribute, or you'd always a get a new, presumably unbroken, hammer every time you check self.tool.broken . 

 A couple approaches. 

 One, give Tool a copy method that produces a new object that should equal the original object, but be a different instance. For example: 

 class Tool:

 def __init__(self, kind):
  self.kind = kind
  self.broken = False

 def copy(self):
  result = Tool(self.kind)
  result.broken = self.broken
  return result
 

 Then in Student's init you say 

  self.tool = tool.copy()
 

 Option two, use a factory function. 

 def makehammer():
 return Tool(hammer)

class Student:
 def __init__(self, factory):
  self.tool = factory()

Billy = Student(makehammer)
 

 I can't think any way in Python that you can write the line self.tool = object and have object automagically make a copy, and I don't think you want to. One thing I like about Python is WYSIWYG. If you want magic use C++. I think it makes code hard to understand when you not only can't tell what a line of code is doing, you can't even tell it's doing anything special. 

 Note you can get even fancier with a factory object . For example: 

 class RealisticFactory:
 def __init__(self, kind, failurerate):
  self.kind = kind
  self.failurerate = failurerate

 def make(self):
  result = Tool(self.kind)
  if random.random() &lt; self.failurerate:
   result.broken = True
  if (self.failurerate &lt; 0.01):
   self.failurerate += 0.0001
  return result

factory = RealisticFactory(hammer, 0.0007)
Billy = Student(factory.make)
Tommy = Student(factory.make) # Tommy's tool is slightly more likely to be broken
 
 #2 You could change your lines like this: 

 Billy = Student(Tool('hammer'))
Tommy = Student(Tool('hammer'))
 

 That'll produce a distinct instance of your Tool class for each instance of the Student class. the trouble with your posted example code is that you haven't "called the Tool into being" (to use your words) more than once. 
 #3 Just call Tool('hammer') every time you want to create a new tool. 

 h1 = Tool('hammer')
h2 = Tool('hammer')
Billy = Student(h1)
Tommy = Student(h2)
 
 #4 Oh wait, I forgot, Python does have magic. 

 class Student:
 def __setattr__(self, attr, value):
  if attr == 'tool':
   self.__dict__[attr] = value.copy()
  else:
   self.__dict__[attr] = value
 

 But I still say you should use magic sparingly. 
 #5 After seeing the tenor of the answers here and remembering the Zen of Python, I'm going to answer my own dang question by saying, "I probably should have just thought harder about it." 

 I will restate my own question as the answer. Suppose I have this tiny program: 

 class Item(object):
 def __init__(self):
  self.broken = False

 def smash(self):
  print "This object broke."
  self.broken = True

class Person(object):
 def __init__(self, holding):
  self.holding = holding

 def using(self):
  if self.holding.broken != True:
   print "Pass."
  else:
   print "Fail."

Foo = Person(Item())
Bar = Person(Item())

Foo.holding.smash()
Foo.using()
Bar.using()
 

 The program will return "Fail" for Foo.using() and "Pass" for Bar.using(). Upon actually thinking about what I'm doing , "Foo.holding = Item()" and "Bar.holding = Item()" are clearly different instances. I even ran this dumpy program to prove it worked as I surmised it did, and no surprises to you pros, it does. So I withdraw my question on the basis that I wasn't actually using my brain when I asked it . The funny thing is, with the program I've been working on, I was already doing it this way but assuming it was the wrong way to do it. So thanks for humoring me.