Question (ID-2485466): So, I guess I can't use "&&" in the Python if conditional. What should I use in this case? Any help? Here's my code: 

 # F. front_back
# Consider dividing a string into two halves.
# If the length is even, the front and back halves are the same length.
# If the length is odd, we'll say that the extra char goes in the front half.
# e.g. 'abcde', the front half is 'abc', the back half 'de'.
# Given 2 strings, a and b, return a string of the form
# a-front + b-front + a-back + b-back
def front_back(a, b):
 # +++your code here+++
 if len(a) % 2 == 0 &amp;&amp; len(b) % 2 == 0:
 return a[:(len(a)/2)] + b[:(len(b)/2)] + a[(len(a)/2):] + b[(len(b)/2):] 
 else:
 #todo! Not yet done. :P
 return
 

 I'm getting an error in the IF conditional. What am I doing wrong? 

 Edit: 
I meant no arrogance here. Someone edited my question title to make it sound douchy. I was genuinely confused about what to use, didn't think 'and' would be a keyword. Please don't downvote as other newbies might be confused about it as well. 
 Answers (Total-6): #0 You would want and instead of &amp;&amp; . 
 #1 Two comments: 

 
 Use and and or for logical operations in Python. 
 Use 4 spaces to indent instead of 2. You will thank yourself later because your code will look pretty much the same as everyone else's code. See PEP 8 for more details. 
 
 #2 Python uses and and or conditionals. 

 i.e. 

 if foo == 'abc' and bar == 'bac' or zoo == '123'
 # do something
 
 #3 I am a bit of a newbie with Python myself... You should definitely take a look into http://diveintopython.org/ . 

 Here is the and-or chapter . 

 It's one of the better written "introduction books" I've read, doesn't assume you are a master programmer (but doesn't assume you know nothing about programming either) 
 #4 Probably this is not best code for this task, but is working - 

 def front_back(a, b):

 if len(a) % 2 == 0 and len(b) % 2 == 0:
 print a[:(len(a)/2)] + b[:(len(b)/2)] + a[(len(a)/2):] + b[(len(b)/2):]

 elif len(a) % 2 == 1 and len(b) % 2 == 0:
 print a[:(len(a)/2)+1] + b[:(len(b)/2)] + a[(len(a)/2)+1:] + b[(len(b)/2):] 

 elif len(a) % 2 == 0 and len(b) % 2 == 1:
  print a[:(len(a)/2)] + b[:(len(b)/2)+1] + a[(len(a)/2):] + b[(len(b)/2)+1:] 

 else :
  print a[:(len(a)/2)+1] + b[:(len(b)/2)+1] + a[(len(a)/2)+1:] + b[(len(b)/2)+1:]
 
 #5 In python, like in C, boolean and bitwise operations are separate, but the boolean operators are spelled differently. 

 The boolean ones are spelled and and or . They have two advantages: they can work for any type of operands (types/classes that define how to be interpreted in a boolean context, i.e. have a __nonzero__ special method), and they take a shortcut if they can. For example, 1 or lengthy_operation() will never call the lengthy operation. 

 The bitwise operators ( &amp; /and, | /or and ^ /xor) have the same meaning as in C, but they work only on integers (or other classes convertable to integer), and they don't short-circuit. Although not advisable, should you prefer to use the bitwise operators as boolean, make sure you use parentheses around the boolean terms, and that they are indeed boolean: 

 if (len(a) % 2 == 0) &amp; (len(b) % 2 == 0):