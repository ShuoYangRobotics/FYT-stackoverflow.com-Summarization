Question (ID-7111068): Split string by count of characters I can't figure out how to do this with string methods: 

 In my file I have something like 1.012345e0070.123414e-004-0.1234567891.21423... which means there is no delimiter between the numbers. 

 Now if I read a line from this file I get a string like above which I want to split after e.g. 12 characters. 
There is no way to do this with something like str.split() or any other string method as far as I've seen but maybe I'm overlooking something? 

 Thx 
 Answers (Total-6): #0 Since you want to iterate in an unusual way, a generator is a good way to abstract that: 

 def chunks(s, n):
 """Produce `n`-character chunks from `s`."""
 for start in range(0, len(s), n):
  yield s[start:start+n]

nums = "1.012345e0070.123414e-004-0.1234567891.21423"
for chunk in chunks(nums, 12):
 print chunk
 

 produces: 

 1.012345e007
0.123414e-00
4-0.12345678
91.21423
 

 (which doesn't look right, but those are the 12-char chunks) 
 #1 You're looking for string slicing. 

 &gt;&gt;&gt; x = "1.012345e0070.123414e-004-0.1234567891.21423"
&gt;&gt;&gt; x[2:10]
'012345e0'
 
 #2 line = "1.012345e0070.123414e-004-0.1234567891.21423"
firstNumber = line[:12]
restOfLine = line[12:]

print firstNumber
print restOfLine
 

 Output : 

 1.012345e007
0.123414e-004-0.1234567891.21423
 
 #3 x = "1.012345e0070.123414e-004-0.1234567891.21423"
while len(x)&gt;0:
 v = x[:12]
 print v
 x = x[12:]
 
 #4 from itertools import izip_longest

def grouper(n, iterable, padvalue=None):
 return izip_longest(*[iter(iterable)]*n, fillvalue=padvalue)
 
 #5 you can do it like this: 

 step = 12
for i in range(0, len(string), 12):
 slice = string[i:step]
 step += 12
 

 in this way on each iteration you will get one slice of 14 characters.