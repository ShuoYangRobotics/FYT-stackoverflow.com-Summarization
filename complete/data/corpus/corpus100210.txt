Question (ID-100210): Python - easy way to add N seconds to a datetime.time? Given a datetime.time value in Python, is there a standard way to add an integer number of seconds to it, so that 11:34:59 + 3 = 11:35:02 , for example? 

 These obvious ideas don't work: 

 &gt;&gt;&gt; datetime.time(11, 34, 59) + 3
TypeError: unsupported operand type(s) for +: 'datetime.time' and 'int'
&gt;&gt;&gt; datetime.time(11, 34, 59) + datetime.timedelta(0, 3)
TypeError: unsupported operand type(s) for +: 'datetime.time' and 'datetime.timedelta'
&gt;&gt;&gt; datetime.time(11, 34, 59) + datetime.time(0, 0, 3)
TypeError: unsupported operand type(s) for +: 'datetime.time' and 'datetime.time'
 

 In the end I have written functions like this: 

 def add_secs_to_time(timeval, secs_to_add):
 secs = timeval.hour * 3600 + timeval.minute * 60 + timeval.second
 secs += secs_to_add
 return datetime.time(secs // 3600, (secs % 3600) // 60, secs % 60)
 

 I can't help thinking that I'm missing an easier way to do this though. 

 Related 

 
 python time + timedelta equivalent 
 
 Answers (Total-6): #0 You can use full datetime variables with timedelta , and by providing a dummy date then using time to just get the time value. 

 For example: 

 import datetime
a = datetime.datetime(1,1,1,11,34,59)
b = a + datetime.timedelta(0,3) # days, seconds, then other fields.
print a.time()
print b.time()
 

 results in the two values, three seconds apart: 

 11:34:59
11:35:02
 

 You could also opt for the more readable 

 b = a + datetime.timedelta(seconds=3)
 

 if you're so inclined. 

 

 If you're after a function that can do this, you can look into using addSecs below: 

 import datetime

def addSecs (tm,secs):
 fulldate = datetime.datetime(1,1,1,tm.hour,tm.minute,tm.second)
 fulldate = fulldate + datetime.timedelta(0,3)
 return fulldate.time()

a = datetime.datetime.now().time()
b = addSecs (a,300)
print a
print b
 

 This outputs: 

 16:38:04.314204
16:43:04
 
 #1 As others here have stated, you can just use full datetime objects throughout: 

 sometime = get_some_time() # the time to which you want to add 3 seconds
later = (datetime.combine(date.today(), sometime) + timedelta(seconds=3)).time()
 

 However, I think it's worth explaining why full datetime objects are required. Consider what would happen if I added 2 hours to 11pm. What's the correct behavior? An exception, because you can't have a time larger than 11:59pm? Should it wrap back around? 

 Different programmers will expect different things, so whichever result they picked would surprise a lot of people. Worse yet, programmers would write code that worked just fine when they tested it initially, and then have it break later by doing something unexpected. This is very bad, which is why you're not allowed to add timedelta objects to time objects. 
 #2 Thanks to @ Pax Diablo , @bvmou and @Arachnid for the suggestion of using full datetimes throughout. If I have to accept datetime.time objects from an external source, then this seems to be an alternative add_secs_to_time() function: 

 def add_secs_to_time(timeval, secs_to_add):
 dummy_date = datetime.date(1, 1, 1)
 full_datetime = datetime.datetime.combine(dummy_date, timeval)
 added_datetime = full_datetime + datetime.timedelta(seconds=secs_to_add)
 return added_datetime.time()
 

 This verbose code can be compressed to this one-liner: 

 (datetime.datetime.combine(datetime.date(1, 1, 1), timeval) + datetime.timedelta(seconds=secs_to_add)).time()
 

 but I think I'd want to wrap that up in a function for code clarity anyway. 
 #3 One little thing, might add clarity to override the default value for seconds 

 &gt;&gt;&gt; b = a + datetime.timedelta(seconds=3000)
&gt;&gt;&gt; b
datetime.datetime(1, 1, 1, 12, 24, 59)
 
 #4 Try adding a datetime.datetime to a datetime.timedelta. If you only want the time portion, you can call the time() method on the resultant datetime.datetime object to get it. 
 #5 If it's worth adding another file / dependency to your project, I've just written a tiny little class that extends datetime.time with the ability to do arithmetic. 

 Your example would be written: 

 &gt;&gt;&gt; import datetime
&gt;&gt;&gt; import nptime
&gt;&gt;&gt; nptime.nptime(11, 34, 59) + datetime.timedelta(0, 3)
nptime(11, 35, 2)
 

 nptime inherits from datetime.time , so any of those methods should be usable, too. 

 It's available from PyPi as nptime ("non-pedantic time"), or on GitHub: https://github.com/tgs/nptime