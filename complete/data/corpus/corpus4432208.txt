Question (ID-4432208): How does % work in Python? What does the % in a calculation? I can't seem to work out what it does. 

 Does it work out a percent of the calculation for example: 3 + 2 + 1 - 5 + 4 % 2 - 1 / 4 + 6 is apparently equal to 7. How? 
 Answers (Total-11): #0 
 The % (modulo) operator yields the remainder from the division of the first argument by the second. The numeric arguments are first converted to a common type. A zero right argument raises the ZeroDivisionError exception. The arguments may be floating point numbers, e.g., 3.14%0.7 equals 0.34 (since 3.14 equals 4*0.7 + 0.34.) The modulo operator always yields a result with the same sign as its second operand (or zero); the absolute value of the result is strictly smaller than the absolute value of the second operand [2]. 
 

 Taken from http://docs.python.org/reference/expressions.html 

 Example 1: 
 6%2 evaluates to 0 because there's no remainder if 6 is divided by 2 ( 3 times ). 

 Example 2 : 7%2 evaluates to 1 because there's a remainder of 1 when 7 is divided by 2 ( 3 times ). 

 So to summarise that, it returns the remainder of a division operation, or 0 if there is no remainder. So 6%2 means find the remainder of 6 divided by 2. 
 #1 Python - Basic Operators 
 http://www.tutorialspoint.com/python/python_basic_operators.htm 

 
 Modulus - Divides left hand operand by right hand operand and returns remainder 
 

 a = 10 and b = 20 

 b % a = 0 
 #2 An expression like 'x % y' evaluates to the remainder of 'x / y'. Precedence rules are like '/' and '*'. 

 &gt;&gt;&gt; 9 / 2
4
&gt;&gt;&gt; 9 % 2
1
 

 
 9 divided by 2 is equal to 4. 
 4 times 2 is 8 
 9 minus 8 is 1 - the remainder. 
 
 #3 Modulus operator, it is used for remainder division on integers, typically, but in Python can be used for floating point numbers. 

 http://docs.python.org/reference/expressions.html 

 
 The % (modulo) operator yields the remainder from the division of the first argument by the second. The numeric arguments are first converted to a common type. A zero right argument raises the ZeroDivisionError exception. The arguments may be floating point numbers, e.g., 3.14%0.7 equals 0.34 (since 3.14 equals 4*0.7 + 0.34.) The modulo operator always yields a result with the same sign as its second operand (or zero); the absolute value of the result is strictly smaller than the absolute value of the second operand [2]. 
 
 #4 In most languages % is used for modulus . Python is no exception. 
 #5 It is, as in many C-like languages, the remainder or modulo operation. See the documentation for numeric types â€” int, float, long, complex . 
 #6 It's a modulo operation, except when it's an old-fashioned C-style string formatting operator, not a modulo operation . See here for details. You'll see a lot of this in existing code. 
 #7 The % (modulo) operator yields the remainder from the division of the first argument by the second. The numeric arguments are first converted to a common type. 

 
 3 + 2 + 1 - 5 + 4 % 2 - 1 / 4 + 6 = 7 
 

 This is based on operator precedence. 
 #8 % is modulo . 3 % 2 = 1 , 4 % 2 = 0 

 / is (an integer in this case) division, so: 

 3 + 2 + 1 - 5 + 4 % 2 - 1 / 4 + 6
1 + 4%2 - 1/4 + 6
1 + 0 - 0 + 6
7
 
 #9 It's a modulo operation
 http://en.wikipedia.org/wiki/Modulo_operation 

 http://docs.python.org/reference/expressions.html 

 So with order of operations, that works out to 

 (3+2+1-5) + (4%2) - (1/4) + 6 

 (1) + (0) - (0) + 6 

 7 

 The 1/4=0 because we're doing integer math here. 
 #10 Also, there is a useful built-in function called divmod : 

 
 divmod(a, b) 
 
 Take two (non complex) numbers as arguments and return a pair of numbers
 consisting of their quotient and
 remainder when using long division.