Question (ID-618093): How to find whether a number belongs to a particular range in Python? Suppose i want to check 1.1 belongs to range 0 to 0.5 how can i do it? 

 with range i can do : 

 for i in range(0,0.5):
 if i == 1.1:
 print 'yes'
 if i != 1.1:
 print 'no'
 

 Is ther any other way to do this ???? 
 Answers (Total-7): #0 No, you can't do that. range() expects integer arguments. If you want to know if x is inside this range try some form of this: 

 print 0.0 &lt;= x &lt;= 0.5
 

 Be careful with your upper limit. If you use range() it is excluded ( range(0, 5) does not include 5!) 
 #1 print 'yes' if 0 &lt; x &lt; 0.5 else 'no'
 

 range() is for generating arrays of consecutive integers 
 #2 &gt;&gt;&gt; s = 1.1
&gt;&gt;&gt; 0&lt;= s &lt;=0.2
False
&gt;&gt;&gt; 0&lt;= s &lt;=1.2
True
 
 #3 I would use the numpy library, which would allow you to do this for a list of numbers as well: 

 from numpy import array
a = array([1, 2, 3, 4, 5, 6,])
a[a &lt; 2]
 
 #4 Old faithful: 

 if n &gt;= a and n &lt;= b:
 

 And it doesn't look like Perl (joke) 
 #5 To check whether some number n is in the inclusive range denoted by the two number a and b you do either 

 if a &lt;= n &lt;= b:
 print "yes"
else:
 print "no"
 

 use the replace '>=' and '&lt;=' withe '>' and '&lt;' to check whether n is in the exclusive range denoted by a and b (i.e. a and b are not themselves members of the range) 

 Alternatively, you can also check for 

 if (b - n) &gt;= a :
 print "yes"
 ...
 

 Range will produce an arithmetic progression defined by the two (or three) arguments converted to integers. See the documentation . This is not what you want I guess. 
 #6 def belongsTo(value, rangeStart, rangeEnd):
  if value &gt;= rangeStart and value &lt;= rangeEnd:
    return True
  return False
 

 Now you can: 

 print "1.1 belongs to &lt;0, 0.5&gt;:", belongsTo(1.1, 0, 0.5)