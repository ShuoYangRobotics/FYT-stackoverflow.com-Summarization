Question (ID-2711289): a more pythonic way to express conditionally bounded loop? I've got a loop that wants to execute to exhaustion or until some user specified limit is reached. I've got a construct that looks bad yet I can't seem to find a more elegant way to express it; is there one? 

 def ello_bruce(limit=None):
 for i in xrange(10**5):
  if predicate(i):
   if not limit is None:
    limit -= 1
    if limit &lt;= 0:
     break

def predicate(i):
 # lengthy computation
 return True
 

 Holy nesting! There has to be a better way. For purposes of a working example, xrange is used where I normally have an iterator of finite but unknown length (and predicate sometimes returns False). 
 Answers (Total-6): #0 Maybe something like this would be a little better: 

 from itertools import ifilter, islice

def ello_bruce(limit=None):
 for i in islice(ifilter(predicate, xrange(10**5)), limit):
  # do whatever you want with i here
 
 #1 I'd take a good look at the itertools library. Using that, I think you'd have something like... 

 # From the itertools examples
def tabulate(function, start=0):
 return imap(function, count(start))
def take(n, iterable):
 return list(islice(iterable, n))

# Then something like:
def ello_bruce(limit=None):
 take(filter(tabulate(predicate)), limit)
 
 #2 I'd start with 

 if limit is None: return
 

 since nothing can ever happen to limit when it starts as None (if there are no desirable side effects in the iteration and in the computation of predicate -- if there are, then, in this case you can just do for i in xrange(10**5): predicate(i) ). 

 If limit is not None , then you just want to perform max(limit, 1) computations of predicate that are true, so an itertools.islice of an itertools.ifilter would do: 

 import itertools as it

def ello_bruce(limit=None):
 if limit is None:
  for i in xrange(10**5): predicate(i)
 else:
  for _ in it.islice(
   it.ifilter(predicate, xrange(10**5),
   max(limit, 1)): pass
 
 #3 You should remove the nested ifs: 

 if predicate(i) and not limit is None:
 ...
 
 #4 What you want to do seems perfectly suited for a while loop: 

 def ello_bruce(limit=None):
 max = 10**5
 # if you consider 0 to be an invalid value for limit you can also do
 # if limit:
 if limit is None: 
  limit = max

 while max and limit:
  if predicate(i):
   limit -= 1
  max -=1
 

 The loop stops if either max or limit reaches zero. 
 #5 Um. As far as I understand it, predicate just computes in segments, and you totally ignore its return value, right? 

 This is another take: 

 import itertools

def ello_bruce(limit=None):
 if limit is None:
  limiter= itertools.repeat(None)
 else:
  limiter= xrange(limit)

 # since predicate is a Python function
 # itertools looping won't be faster, so use plain for.
 # remember to replace the xrange(100000) with your own iterator
 for dummy in itertools.izip(xrange(100000), limiter):
  pass
 

 Also, remove the unneeded return True from the end of predicate .