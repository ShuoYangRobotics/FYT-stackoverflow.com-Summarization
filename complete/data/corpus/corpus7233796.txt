Question (ID-7233796): build list of lists using comprehension lists two at a time I am using the following code to build a list of lists: 

 res = []
for i in I:
 res.append(x)
 res.append(y[i])
 

 so my final list is [x, y[0], x, y[1],...] where x and y[i] are also lists. 

 Is there a way building this list using list comprehensions, instead of for loop? 
 Answers (Total-6): #0 I ... think ... this might be close to what you want: 

 res = [z for z in ((x, y[i]) for i in I)]
 
 #1 Itertools can help with this sort of thing: 

 &gt;&gt;&gt; y = I = range(5)
&gt;&gt;&gt; x = 'x'
&gt;&gt;&gt; res = list(itertools.chain.from_iterable((x, y[i]) for i in I))
&gt;&gt;&gt; res
['x', 0, 'x', 1, 'x', 2, 'x', 3, 'x', 4]
 
 #2 res = reduce(tuple.__add__, [(x, y[i]) for i in I])
 
 #3 The map style: 

 res = []
map(res.extend, ((x, y[i]) for i in I))
 

 The reduce style: 

 res = reduce(lambda arr, i: arr + [x, y[i]], I, [])
 
 #4 sum(([x, y[i]] for i in I), [])
 

 Like bpgergo's, but with lists, and with a simpler way of joining them together. 
 #5 I think this should do what you are looking for: 

 &gt;&gt;&gt; from itertools import chain, izip, repeat
&gt;&gt;&gt; x = [1, 2]
&gt;&gt;&gt; y = [['a', 'b'], ['c', 'd']]
&gt;&gt;&gt; list(chain(*izip(repeat(x), y)))
[[1, 2], ['a', 'b'], [1, 2], ['c', 'd']]
 

 Note that this will have shallow copies of the inner lists (same as other solutions), so make sure you understand the following behavior: 

 &gt;&gt;&gt; z = list(chain(*izip(repeat(x), y)))
&gt;&gt;&gt; z
[[1, 2], ['a', 'b'], [1, 2], ['c', 'd']]
&gt;&gt;&gt; x.append(3)
&gt;&gt;&gt; z
[[1, 2, 3], ['a', 'b'], [1, 2, 3], ['c', 'd']]
&gt;&gt;&gt; z[0].append(4)
&gt;&gt;&gt; z
[[1, 2, 3, 4], ['a', 'b'], [1, 2, 3, 4], ['c', 'd']]
&gt;&gt;&gt; y[1].append('e')
&gt;&gt;&gt; z
[[1, 2, 3, 4], ['a', 'b'], [1, 2, 3, 4], ['c', 'd', 'e']]