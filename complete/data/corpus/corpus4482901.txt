Question (ID-4482901): Is there a usecase for nested classes? I've recently seen several people doing things like this here on Stackoverflow: 

 class A:
 foo = 1

 class B:
  def blah(self):
   pass
 

 In other words, they have nested classes. This works (although people new to Python seem to run into problems because it doesn't behave like they thought it would), but I can't think of any reason to do this in any language at all, and certainly not in Python. Is there such a usecase? Why are people doing this? Searching for this it seems it's reasonably common in C++, is there a good reason there? 
 Answers (Total-8): #0 The main reason for putting one class in another is to avoid polluting the global namespace with things that are used only inside one class and therefore doesn't belong in the global namespace. This is applicable even to Python, with the global namespace being a namespace of a particular module. For example if you have SomeClass and OtherClass, and both of them need to read something in a specialized way, it is better to have SomeClass.Reader and OtherClass.Reader rather than SomeClassReader and OtherClassReader. 

 I have never encountered this in C++, though. It can be problematic to control access to the outer class' fields from a nested class. And it is also pretty common to have just one public class in a compilation unit defined in the header file and some utility classes defined in the CPP file (the Qt library is a great example of this). This way they aren't visible to "outsiders" which is good, so it doesn't make much sense to include them in the header. It also helps to increase binary compatibility which is otherwise a pain to maintain. Well, it's a pain anyway, but much less so. 

 A great example of a language where nested classes are really useful is Java. Nested classes there automatically have a pointer to the instance of the outer class that creates them (unless you declare the inner class as static). This way you don't need to pass "outer" to their constructors and you can address the outer class' fields just by their names. 
 #1 It allows you to control the access of the nested class- for example, it's often used for implementation detail classes. In C++ it also has advantages in terms of when various things are parsed and what you can access without having to declare first. 
 #2 I am not a big fan of python, but to me this type of decisions are more semantical than syntactical. If you are implementing a list, the class Node inside List is not a class in itself meant to be used from anywhere, but an implementation detail of the list. At the same time you can have a Node internal class inside Tree , or Graph . Whether the compiler/interpreter allows you to access the class or not is in a different thing. Programing is about writing specifications that the computer can follow and other programers can read, List.Node is more explicit in that Node is internal to List than having ListNode as a first level class. 
 #3 In some languages, the nested class will have access to variables that are in scope within the outer class. (Similarly with functions, or with class-in-function nesting. Of course, function-in-class nesting just creates a method, which behaves fairly unsurprisingly. ;) ) 

 In more technical terms, we create a closure . 
 #4 Python lets you do a lot of things with functions (including lambdas) that in C++03 or Java you need a class for (although Java has anonymous inner classes, so a nested class doesn't always look like your example). Listeners, visitors, that kind of thing. A list comprehension is loosely a kind of visitor: 

 Python: 

 (foo(x) if x.f == target else bar(x) for x in bazes)
 

 C++: 

 struct FooBar {
 Sommat operator()(const Baz &amp;x) const {
  return (x.f == val) ? foo(x) : bar(x);
 }
 FooBar(int val) : val(val) {}
 int val;
};

vector&lt;Sommat&gt; v(bazes.size());
std::transform(bazes.begin(), bazes.end(), v.begin(), FooBar(target));
 

 The question that C++ and Java programmers then ask themselves is, "this little class that I'm writing: should it appear in the same scope as the big class that needs to use it, or should I confine it within the scope of the only class that uses it?"[*] 

 Since you don't want to publish the thing, or allow anyone else to rely on it, often the answer in these cases is a nested class. In Java, private classes can serve, and in C++ you can restrict classes to a TU, in which case you may no longer care too much what namespace scope the name appears in, so nested classes aren't actually required. It's just a style thing, plus Java provides some syntactic sugar. 

 As someone else said, another case is iterators in C++. Python can support iteration without an iterator class, but if you're writing a data structure in C++ or Java then you have to put the blighters somewhere. To follow the standard library container interface you'll have a nested typedef for it whether the class is nested or not, so it's fairly natural to think, "nested class". 

 [*] They also ask themselves, "should I just write a for loop?", but let's suppose a case where the answer to that is no... 
 #5 In C++ at least, one major common use-case for nested classes is iterators in containers. For example, a hypothetical implementation might look something like this: 

 class list
{
 public:

 class iterator 
 {
  // implementation code
 };

 class const_iterator
 {
  // implementation code
 };
};
 

 Another reason for nested classes in C++ would be private implementation details like node classes for maps, linked lists, etc. 
 #6 "Nested classes" can mean two different things, which can be split into three different categories by intent. The first one is purely stylistic, the other two are used for practical purposes, and are highly dependent on the features language where they are used. 

 
 Nested class definitions for the sake of creating a new namespace and/or organizing your code better. For example, in Java this is accomplished through the use static nested classes, and it is suggested by the official documentation as a way to create more readable and maintainable code, and to logically group classes together. The Zen of Python, however, suggests that you nest code blocks less, thus discouraging this practice. 

 import this 

 In Python you'd much more often see the classes grouped in modules. 
 Putting a class inside another class as part of its interface (or the interface of the instances). First, this interface can be used by the implementation to aid subclassing, for example imagine a nested class HTML.Node which you can override in a subclass of HTML to alter the class used to create new node instances. Second, this interface might be used by the class/instance users, though this is not that useful unless you are in the third case described below. 

 In Python at least, you don't need to nest the definitions to achieve either of those, however, and it's probably very rare. Instead, you might see Node defined outside of the class and then node_factory = Node in the class definition (or a method dedicated to creating the nodes). 
 Nesting the namespace of the objects, or creating different contexts for different groups of objects. In Java, non-static nested classes (called inner classes) are bound to an instance of the outer class. This is very useful because it lets you have instances of the inner class that live inside different outer namespaces. 

 For Python, consider the decimal module. You can create different contexts, and have things like different precisions defined for each context. Each Decimal object can assigned a context on creation. This achieves the same as an inner class would, through a different mechanism. If Python supported inner classes, and Context and Decimal were nested, you'd have context.Decimal('3') instead of Decimal('3', context=context) . 

 You could easily create a metaclass in Python that lets you create nested classes that live inside of an instance, you can even make it produce proper bound and unbound class proxies that support isinstance correctly through the use of __subclasscheck__ and __instancecheck__ . However, it won't gain you anything over the other simpler ways to achieve the same (like an additional argument to __init__ ). It would only limit what you can do with it, and I have found inner classes in Java very confusing every time I had to use them. 
 
 #7 In Python, a more usefull pattern is declaration of a class inside a function or method. Declaration of a class in teh body of another class, as people have noted in other answers, is of little use - yes, it does avoid polution of the module namespace, but since there_is_ a module namespace at all, a few more names on it do not bother. Eve3n if the extra classes are not intended to be instantiatiated directly by users of the module, putting then on the module root make their documentation more easily acessible to others. 

 However, a class inside a function is a completely different creature: It is "declared" and created each time the code containing the class body is run. This gives one the possibility of creating dynamic classes for various uses - in a very simple way. For example, each class created this way is in a different closure, and can have access to different instances of the variables on the containing function. 

 def call_count(func):
 class Counter(object):
  def __init__(self):
   self.counter = 0
  def __repr__(self):
   return str(func)
  def __call__(self, *args, **kw):
   self.counter += 1
   return func(*args, **kw)
 return Counter()
 

 And using it on the console: 

 &gt;&gt;&gt; @call_count
... def noop(): pass
...
&gt;&gt;&gt; noop()
&gt;&gt;&gt; noop()
&gt;&gt;&gt; noop.counter
2
&gt;&gt;&gt; noop
&lt;function noop at 0x7fc251b0b578&gt;
 

 So, a simple call_counter decorator culd use a static "Counter" class, defined outside the function, and receiving func as a parameter to its constructor - but if you want to tweak other behaviors, like in this example, makin repr(func) return the function representation, not the class representation, it is easier to be made this way.
.