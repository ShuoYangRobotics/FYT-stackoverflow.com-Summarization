Question (ID-3494906): How do I merge a list of dicts into a single dict? EDIT 

 i have: 

 [{'a':1},{'b':2},{'c':1},{'d':2}]
 

 the output should be: 

 {'a':1,'b':2,'c':1,'d':2}
 
 Answers (Total-6): #0 This works for dictionaries of any length: 

 &gt;&gt;&gt; result = {}
&gt;&gt;&gt; for d in L: result.update(d)
... 
{'a':1,'c':2,'b':1,'d':2}
 

 And as generator-oneliner: 

 dict((k,v) for d in L for (k,v) in d.items())
 

 Edit: As pointed out by katrielalex, dictionary comprehension: 

 { k: v for d in L for k, v in d.items() }
 

 is even better. OTOH they are Python3-only, so they may not be available to you. 
 #1 &gt;&gt;&gt; L=[{'a':1},{'b':2},{'c':1},{'d':2}] 
&gt;&gt;&gt; dict(i.items()[0] for i in L)
{'a': 1, 'c': 1, 'b': 2, 'd': 2}
 

 Note: the order of 'b' and 'c' doesn't match your output because dicts are unordered 

 if the dicts can have more than one key/value 

 &gt;&gt;&gt; dict(j for i in L for j in i.items())
 
 #2 dict1.update( dict2 )
 

 This is asymmetrical because you need to choose what to do with duplicate keys; in this case, dict2 will overwrite dict1 . Exchange them for the other way. 

 EDIT: Ah, sorry, didn't see that. 

 It is possible to do this in a single expression: 

 &gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; dict( chain( *map( dict.items, theDicts ) ) )
{'a': 1, 'c': 1, 'b': 2, 'd': 2}
 

 No credit to me for this last! 

 However, I'd argue that it might be more Pythonic (explicit > implicit, flat > nested ) to do this with a simple for loop. YMMV. 
 #3 see this http://stackoverflow.com/questions/2365921/merging-python-dictionaries 
 #4 This handles all the subdicts in your list, even if they have multiple items: 

 dict(sum((d.items() for d in L), []))
 

 But I think update() is preferred: 

 &gt;&gt;&gt; dd = {}
&gt;&gt;&gt; for d in L: dd.update(d)
 
 #5 &gt;&gt;&gt; dictlist = [{'a':1},{'b':2},{'c':1},{'d':2, 'e':3}]
&gt;&gt;&gt; dict(kv for d in dictlist for kv in d.iteritems())
{'a': 1, 'c': 1, 'b': 2, 'e': 3, 'd': 2}
&gt;&gt;&gt;
 

 Note I added a second key/value pair to the last dictionary to show it works with multiple entries.
Also keys from dicts later in the list will overwrite the same key from an earlier dict.