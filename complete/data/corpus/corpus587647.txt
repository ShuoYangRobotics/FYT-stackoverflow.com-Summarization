Question (ID-587647): How to increment a value with leading zeroes? What would be the best way to increment a value that contains leading zeroes? For example, I'd like to increment "00000001". However, it should be noted that the number of leading zeroes will not exceed 30. So there may be cases like "0000012", "00000000000000099", or "000000000000045". 

 I can think of a couple ways, but I want to see if someone comes up with something slick. 
 Answers (Total-6): #0 Use the much overlooked str.zfill(): 

 str(int(x) + 1).zfill(len(x))
 
 #1 int('00000001') + 1
 

 if you want the leading zeroes back: 

 "%08g" % (int('000000001') + 1)
 
 #2 "%%0%ii" % len(x) % (int(x)+1) 

 -- MarkusQ 

 P.S. For x = "0000034" it unfolds like so: 

 "%%0%ii" % len("0000034") % (int("0000034")+1)
"%%0%ii" % 7 % (34+1)
"%07i" % 35
"0000035"
 
 #3 Presumably, you specifically mean an integer represented as a string with leading zeros? 

 If that's the case, I'd do it thusly: 

 &gt;&gt;&gt; a
'00000000000000099'
&gt;&gt;&gt; l = len(a)
&gt;&gt;&gt; b = int(a)+1
&gt;&gt;&gt; b
100
&gt;&gt;&gt; ("%0"+"%dd" % l) % b
'00000000000000100'
 
 #4 Determine the length, convert it to an integer, increment it, then convert it back to a string with leading zeros so that it has the same length as before. 
 #5 Store your number as an integer. When you want to print it, add the leading zeros. This way you can easily do math without conversions, and it simplifies the thought process.