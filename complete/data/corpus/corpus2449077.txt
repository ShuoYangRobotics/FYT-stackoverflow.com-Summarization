Question (ID-2449077): duplicate each member in a list - python Hi
I want to write a function that revives a list [1,5,3,6,...] 
and gives [1,1,5,5,3,3,6,6,...] 
any idea how to do it?
thanks 
 Answers (Total-6): #0 &gt;&gt;&gt; a = range(10)
&gt;&gt;&gt; [val for val in a for _ in (0, 1)]
[0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]
 

 N.B. _ is traditionally used as a placeholder variable name where you do not want to do anything with the contents of the variable. In this case it is just used to generate two values for every time round the outer loop. 

 To turn this from a list into a generator replace the square brackets with round brackets. 
 #1 &gt;&gt;&gt; a = [1, 2, 3]
&gt;&gt;&gt; b = []
&gt;&gt;&gt; for i in a:
 b.extend([i, i])


&gt;&gt;&gt; b
[1, 1, 2, 2, 3, 3]
 

 or 

 &gt;&gt;&gt; [a[i//2] for i in range(len(a)*2)]
[1, 1, 2, 2, 3, 3]
 
 #2 If you already have the roundrobin recipe described in the documentation for itertools —and it is quite handy—then you can just use 

 roundrobin(my_list, my_list)
 
 #3 I would use zip and itertools.chain . 

 &gt;&gt;&gt; import itertools
&gt;&gt;&gt; l = [1,5,3,6,16]
&gt;&gt;&gt; list(itertools.chain(*zip(l,l)))
[1, 1, 5, 5, 3, 3, 6, 6, 16, 16]
 

 Note: I only used list to consume the generator to make it fit for printing. You probably don't need the list call in your code... 
 #4 I would use 

 import itertools
foo = [1, 5, 3, 6]
new = itertools.chain.from_iterable([item, item] for item in foo)
 

 new will be an iterator that lazily iterates over the duplicated items. If you need the actual list computed, you can do list(new) or use one of the other solutions. 
 #5 For as much as Guido dislikes the functional operators, they can be pretty darned handy: 

 &gt;&gt;&gt; from operator import add
&gt;&gt;&gt; a = range(10)
&gt;&gt;&gt; b = reduce(add, [(x,x) for x in a])