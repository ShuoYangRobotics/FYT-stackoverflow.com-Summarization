Question (ID-127606): Editing XML as a dictionary in python? I'm trying to generate customized xml files from a template xml file in python. 

 Conceptually, I want to read in the template xml, remove some elements, change some text attributes, and write the new xml out to a file. I wanted it to work something like this: 

 conf_base = ConvertXmlToDict('config-template.xml')
conf_base_dict = conf_base.UnWrap()
del conf_base_dict['root-name']['level1-name']['leaf1']
del conf_base_dict['root-name']['level1-name']['leaf2'] 

 conf_new = ConvertDictToXml(conf_base_dict) 

 now I want to write to file, but I don't see how to get to 
ElementTree.ElementTree.write() 

 conf_new.write('config-new.xml') 

 Is there some way to do this, or can someone suggest doing this a different way? 
 Answers (Total-6): #0 This'll get you a dict minus attributes... dunno if this is useful to anyone. I was looking for an xml to dict solution myself when i came up with this. 

 

import xml.etree.ElementTree as etree

tree = etree.parse('test.xml')
root = tree.getroot()

def xml_to_dict(el):
 d={}
 if el.text:
 d[el.tag] = el.text
 else:
 d[el.tag] = {}
 children = el.getchildren()
 if children:
 d[el.tag] = map(xml_to_dict, children)
 return d
 

 This: http://www.w3schools.com/XML/note.xml 

 Would equal this: 

 
{'note': [{'to': 'Tove'},
   {'from': 'Jani'},
   {'heading': 'Reminder'},
   {'body': "Don't forget me this weekend!"}]}
 
 #1 I'm not sure if converting the info set to nested dicts first is easier. Using ElementTree, you can do this: 

 import xml.etree.ElementTree as ET
doc = ET.parse("template.xml")
lvl1 = doc.findall("level1-name")[0]
lvl1.remove(lvl1.find("leaf1")
lvl1.remove(lvl1.find("leaf2")
# or use del lvl1[idx]
doc.write("config-new.xml")
 

 ElementTree was designed so that you don't have to convert your XML trees to lists and attributes first, since it uses exactly that internally. 

 It also support as small subset of XPath . 
 #2 For easy manipulation of XML in python, I like the Beautiful Soup library. It works something like this: 
Sample XML File: 

 &lt;root&gt;
 &lt;level1&gt;leaf1&lt;/level1&gt;
 &lt;level2&gt;leaf2&lt;/level2&gt;
&lt;/root&gt;
 

 Python code: 

 from BeautifulSoup import BeatifulStoneSoup, Tag, NavigableString

soup = BeautifulStoneSoup('config-template.xml') # get the parser for the xml file
soup.contents[0].name
# u'root'
 

 You can use the node names as methods: 

 soup.root.contents[0].name
# u'level1'
 

 It is also possible to use regexes: 

 import re
tags_starting_with_level = soup.findAll(re.compile('^level'))
for tag in tags_starting_with_level: print tag.name
# level1
# level2
 

 Adding and inserting new nodes is pretty straightforward: 

 # build and insert a new level with a new leaf
level3 = Tag(soup, 'level3')
level3.insert(0, NavigableString('leaf3')
soup.root.insert(2, level3)

print soup.prettify()
# &lt;root&gt;
# &lt;level1&gt;
# leaf1
# &lt;/level1&gt;
# &lt;level2&gt;
# leaf2
# &lt;/level2&gt;
# &lt;level3&gt;
# leaf3
# &lt;/level3&gt;
# &lt;/root&gt;
 
 #3 My modification of Daniel's answer, to give a marginally neater dictionary: 

 def xml_to_dictionary(element):
 l = len(namespace)
 dictionary={}
 tag = element.tag[l:]
 if element.text:
  if (element.text == ' '):
   dictionary[tag] = {}
  else:
   dictionary[tag] = element.text
 children = element.getchildren()
 if children:
  subdictionary = {}
  for child in children:
   for k,v in xml_to_dictionary(child).items():
    if k in subdictionary:
     if ( isinstance(subdictionary[k], list)):
      subdictionary[k].append(v)
     else:
      subdictionary[k] = [subdictionary[k], v]
    else:
     subdictionary[k] = v
  if (dictionary[tag] == {}):
   dictionary[tag] = subdictionary
  else:
   dictionary[tag] = [dictionary[tag], subdictionary]
 if element.attrib:
  attribs = {}
  for k,v in element.attrib.items():
   attribs[k] = v
  if (dictionary[tag] == {}):
   dictionary[tag] = attribs
  else:
   dictionary[tag] = [dictionary[tag], attribs]
 return dictionary
 

 namespace is the xmlns string, including braces, that ElementTree prepends to all tags, so here I've cleared it as there is one namespace for the entire document 

 NB that I adjusted the raw xml too, so that 'empty' tags would produce at most a ' ' text property in the ElementTree representation 

 spacepattern = re.compile(r'\s+')
mydictionary = xml_to_dictionary(ElementTree.XML(spacepattern.sub(' ', content)))
 

 would give for instance 

 {'note': {'to': 'Tove',
   'from': 'Jani',
   'heading': 'Reminder',
   'body': "Don't forget me this weekend!"}}
 

 it's designed for specific xml that is basically equivalent to json, should handle element attributes such as 

 &lt;elementName attributeName='attributeContent'&gt;elementContent&lt;/elementName&gt;
 

 too 

 there's the possibility of merging the attribute dictionary / subtag dictionary similarly to how repeat subtags are merged, although nesting the lists seems kind of appropriate :-) 
 #4 Have you tried this? 

 print xml.etree.ElementTree.tostring( conf_new )
 
 #5 most direct way to me : 

 root  = ET.parse(xh)
data  = root.getroot()
xdic  = {}
if data &gt; None:
 for part in data.getchildren():
  xdic[part.tag] = part.text