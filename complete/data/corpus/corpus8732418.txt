Question (ID-8732418): Is it possible to get detailed help on a given function using the command line? I am a new Python user :)
Is it possible to get detailed help on a given function using the command line ? 
 Answers (Total-6): #0 As python tells you when you start the CLI: 

 
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt;
 

 just ask for help : 

 help(help)
help(list)
help(locals)
import math
help(math)
help(math.atan2)
 
 #1 Consider installing IPython . Not only does it give you quick and easy access to help doc strings : 

 In [3]: os.path.expanduser?
Type:  function
Base Class: &lt;type 'function'&gt;
String Form: &lt;function expanduser at 0xb77ffe64&gt;
Namespace: Interactive
File:  /usr/lib/python2.7/posixpath.py
Definition: os.path.expanduser(path)
Docstring:
 Expand ~ and ~user constructions. If user or $HOME is unknown,
 do nothing.
 

 it also helps you find out what attributes / methods an object has through tab completion : 

 os.path.__name__     os.path.ismount
os.path.__new__      os.path.join
os.path.__package__     os.path.lexists
os.path.__reduce__     os.path.normcase
os.path.__reduce_ex__    os.path.normpath
os.path.__repr__     os.path.os
os.path.__setattr__     os.path.pardir
os.path.__sizeof__     os.path.pathsep
os.path.__str__      os.path.realpath
os.path.__subclasshook__   os.path.relpath
os.path._resolve_link    os.path.samefile
os.path._varprog     os.path.sameopenfile
os.path.abspath      os.path.samestat
os.path.altsep      os.path.sep
os.path.basename     os.path.split
os.path.commonprefix    os.path.splitdrive
os.path.curdir      os.path.splitext
os.path.defpath      os.path.stat
os.path.devnull      os.path.supports_unicode_filenames
os.path.dirname      os.path.sys
os.path.exists      os.path.walk
os.path.expanduser     os.path.warnings

In [4]: os.path.[TAB]
 

 On Debian/Ubuntu, ipython can be installed with 

 sudo apt-get install ipython
 
 #2 If you mean using the shell command line, here is a possible solution: 

 python -c "help(help)"
 
 #3 For most modules: 

 Python 2.6.7 (r267:88850, Sep 23 2011, 00:28:08) 
....
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import os
&gt;&gt;&gt; help(os)

&gt;&gt;&gt; print os.__doc__
OS routines for Mac, NT, or Posix depending on what system we're on.

This exports:
 - all functions from posix, nt, os2, or ce, e.g. unlink, stat, etc.
 - os.path is one of the modules posixpath, or ntpath
 - os.name is 'posix', 'nt', 'os2', 'ce' or 'riscos'
 - os.curdir is a string representing the current directory ('.' or ':')
 - os.pardir is a string representing the parent directory ('..' or '::')
 - os.sep is the (or a most common) pathname separator ('/' or ':' or '\\')
 .....
&gt;&gt;&gt; 
 
 #4 If you mean the Python command prompt then: 

 help(whatever)
 

 or if whatever is a reserved word: 

 help("whatever")
 

 If you mean the shell or windows command prompt then use pydoc: 

 C:\Python32&gt;lib\pydoc.py json.dumps
Help on function dumps in json:

json.dumps = dumps(obj, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, s
eparators=None, default=None, **kw)
 Serialize ``obj`` to a JSON formatted ``str``.

 If ``skipkeys`` is false then ``dict`` keys that are not basic types
 (``str``, ``int``, ``float``, ``bool``, ``None``) will be skipped
 instead of raising a ``TypeError``.

 If ``ensure_ascii`` is false, then the return value can contain non-ASCII
 characters if they appear in strings contained in ``obj``. Otherwise, all
 such characters are escaped in JSON strings.

 If ``check_circular`` is false, then the circular reference check
 for container types will be skipped and a circular reference will
 result in an ``OverflowError`` (or worse).

 If ``allow_nan`` is false, then it will be a ``ValueError`` to
 serialize out of range ``float`` values (``nan``, ``inf``, ``-inf``) in
 strict compliance of the JSON specification, instead of using the
 JavaScript equivalents (``NaN``, ``Infinity``, ``-Infinity``).

 If ``indent`` is a non-negative integer, then JSON array elements and
 object members will be pretty-printed with that indent level. An indent
 level of 0 will only insert newlines. ``None`` is the most compact
 representation.

 If ``separators`` is an ``(item_separator, dict_separator)`` tuple
 then it will be used instead of the default ``(', ', ': ')`` separators.
 ``(',', ':')`` is the most compact JSON representation.

 ``default(obj)`` is a function that should return a serializable version
 of obj or raise TypeError. The default simply raises TypeError.

 To use a custom ``JSONEncoder`` subclass (e.g. one that overrides the
 ``.default()`` method to serialize additional types), specify it with
 the ``cls`` kwarg; otherwise ``JSONEncoder`` is used.
 
 #5 You can use pydoc