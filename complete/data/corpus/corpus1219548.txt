Question (ID-1219548): java and python equivalent of php's foreach($array as $key => $value) EDIT: Amazingly, newacct's answer has accumulated 12 points in the four hours since I posted my question. This, despite its being incorrect. As alternatives to php's associative array, newacct offers Java's HashMap and Python's dictionary, neither of which preserves key order. 

 cmcg provided a correct answer for the Java version. That is, to use a LinkedHashMap to preserve key order. Milhous suggested a TreeMap, but Piligrim pointed out that a TreeMap sorts elements by key, while LinkedHashMap preserves original order, which was the intent. 

 Alexander Ljungberg first indicated that an ordered dictionary was not currently available for Python. Daniel Pryden then provided a simple and straightforward alternative structure, a list of two-tuples. 

 In the hope that my beginner's Python syntax is correct, 

 # a list of two-tuples
stateList = [('ALABAMA', 'AL'), ('ALASKA', 'AK'), ('WISCONSIN', 'WI'), ('WYOMING', 'WY')]

for name, abbreviation in stateList:
 print name, abbreviation
 

 Output: 

 ALABAMA AL
ALASKA AK
WISCONSIN WI
WYOMING WY
 

 Which is exactly what was required. 

 Thanks to everyone who contributed. It's been educational. 

 

 In php one can handle a list of state names and their abbreviations with an associative array like this: 

 &lt;?php
 $stateArray = array (
  "ALABAMA"=&gt;"AL",
  "ALASKA"=&gt;"AK",
  // etc...
  "WYOMING"=&gt;"WY");

 foreach ($stateArray as $stateName =&gt; $stateAbbreviation)
 {
  print "The abbreviation for $stateName is $stateAbbreviation.\n\n";
 }
?&gt;
 

 Output ( * with key order preserved * ): 

 The abbreviation for ALABAMA is AL. 

 The abbreviation for ALASKA is AK. 

 The abbreviation for WYOMING is WY. 

 EDIT: Note that the order of array elements is preserved in the output of the php version. The Java implementation, using a HashMap, does not guarantee the order of elements. Nor, in fact, does the dictionary in Python. 

 How is this done in java and python? I only find approaches that supply the value, given the key, like python's: 

 stateDict = {
 "ALASKA" : "AK",
 "WYOMING" : "WY"
 }

for key in stateDict:
 value = stateDict[key]
 

 Many thanks. 

 Lasoldo Solsifa 
 Answers (Total-8): #0 in Python: 

 for key, value in stateDict.items(): # .iteritems() in Python 2.x
 print "The abbreviation for %s is %s." % (key, value)
 

 in Java: 

 Map&lt;String,String&gt; stateDict;

for (Map.Entry&lt;String,String&gt; e : stateDict.entrySet())
 System.out.println("The abbreviation for " + e.getKey() + " is " + e.getValue() + ".");
 
 #1 in java for associative array use Map 

 import java.util.*;

class Foo
{
 public static void main(String[] args)
 {
 	Map&lt;String, String&gt; stateMap = new HashMap&lt;String, String&gt;();
 	stateMap.put("ALABAMA", "AL");
 	stateMap.put("ALASKA", "AK");
 	// ...
 	stateMap.put("WYOMING", "WY");

 	for (Map.Entry&lt;String, String&gt; state : stateMap.entrySet()) {
 		 System.out.printf(
 			"The abbreviation for %s is %s%n",
 			state.getKey(),
 			state.getValue()
 		);
 	}
 }
}
 
 #2 Also, to maintain insertion order, you can use a LinkedHashMap instead of a HashMap. 
 #3 In python an ordered dictionary is available in Python 2.7 (not yet released) and Python 3.1. It's called OrderedDict. 
 #4 Another way of doing it in Java. Although a better way has already been posted, this one's syntactically closer to your php code. 

 for (String x:stateDict.keySet()){
		System.out.printf("The abbreviation for %s is %s\n",x,stateDict.get(x));
	}
 
 #5 This is the modified code from o948 where you use a TreeMap instead of a HashMap. The Tree map will preserve the ordering of the keys by the key. 

 import java.util.*;

class Foo
{
 public static void main(String[] args)
 {
 Map&lt;String, String&gt; stateMap = new TreeMap&lt;String, String&gt;();
 stateMap.put("ALABAMA", "AL");
 stateMap.put("ALASKA", "AK");
 // ...
 stateMap.put("WYOMING", "WY");

 for (Map.Entry&lt;String, String&gt; state : stateMap.entrySet()) {
    System.out.printf(
     "The abbreviation for %s is %s%n",
     state.getKey(),
     state.getValue()
   );
  }
 }
 }
 
 #6 Along the lines of Alexander's answer... 

 The native python dictionary doesn't maintain ordering for maximum efficiency of its primary use: an unordered mapping of keys to values. 

 I can think of two workarounds: 

 
 look at the source code of OrderedDict and include it in your own program. 
 make a list that holds the keys in order: 

 states = ['Alabamba', 'Alaska', ...] 
statesd = {'Alabamba':'AL', 'Alaska':'AK', ...}
for k in states:
 print "The abbreviation for %s is %s." % (k, statesd[k])
 
 
 #7 TreeMap is not an answer to your question because it sorts elements by key, while LinkedHashMap preserves original order. However, TreeMap is more suitable for the dictionary because of sorting.