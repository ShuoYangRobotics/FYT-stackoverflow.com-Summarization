Question (ID-7696561): Is there a way to use more than 1 variable length arguments (*args) in a Python function? I would like to create a function that uses two variable length arguments. For example: 

 def my_func(*args1, *args2):
 for i in args1:
  do stuff
 for j in args2:
  do stuff
 

 Is there a way in Python to use more than one *args ? Thanks in advance for the help. 
 Answers (Total-6): #0 No, as there is no way to decide whether 

 my_func(a, b)
 

 means 

 args = [], args2 = [a,b] # or ..
args = [a], args2 = [b] # or ..
args = [a,b], args2 = []
 

 Instead, simply let the function take two lists as arguments. 
 #1 You should use lists. That way, it's obvious which item goes in which argument: 

 def my_func(args1, args2):
 for a in args1:
  print a
 for b in args2:
  print b

my_func([1, 2, 3], [4, 5, 6])
 
 #2 You could use an array (or whatever Python's name for an array is) for each argument. Otherwise, there's no way for Python to know where to split each set of variable length arguments. 
 #3 How would you like to call the function? why not use two arrys or dicts? 
 #4 No that doesn't even make sense. What would determine what goes in the first list and what goes in the second? You can pass keyword arguments as well, though (in case you didn't know already): 

 def func(*args **kwargs):
 pass
 

 What exactly is it that you are trying to accomplish? 
 #5 Just split the list after it is received by the function. For example, to split the list (roughly) in halves: 

 def my_func(*args):
 l=len(args)//2
 args1,args2 = args[:l],args[l:]