Question (ID-2132718): Best way to handle list.index(might-not-exist) in python? I have code which looks something like this: 

 thing_index = thing_list.index(thing)
otherfunction(thing_list, thing_index)
 

 ok so that's simplified but you get the idea. Now thing might not actually be in the list, in which case I want to pass -1 as thing_index . In other languages this is what you'd expect index() to return if it couldn't find the element. In fact it throws a ValueError . 

 I could do this: 

 try:
 thing_index = thing_list.index(thing)
except ValueError:
 thing_index = -1
otherfunction(thing_list, thing_index)
 

 But this feels dirty, plus I don't know if ValueError could be raised for some other reason. I came up with the following solution based on generator functions, but it seems a little complex: 

 thing_index = ( [(i for i in xrange(len(thing_list)) if thing_list[i]==thing)] or [-1] )[0]
 

 Is there a cleaner way to achieve the same thing? Let's assume the list isn't sorted. 
 Answers (Total-7): #0 There is nothing "dirty" about using try-except clause. This is the pythonic way. ValueError will be raised by the .index method only, because it's the only code you have there! 

 To answer the comment: 
In Python, easier to ask forgiveness than to get permission philosophy is well established, and no index will not raise this type of error for any other issues. Not that I can think of any. 
 #1 The dict type has a get function , where if the key doesn't exist in the dictionary, the 2nd argument to get is the value that it should return. Similarly there is setdefault , which returns the value in the dict if the key exists, otherwise it sets the value according to your default parameter and then returns your default parameter. 

 You could extend the list type to have a getindexdefault method. 

 object SuperDuperList(list):
 def getindexdefault(self, elem, default):
  try:
   thing_index = self.index(elem)
  catch ValueError:
   return default
 

 Which could then be used like: 

 mylist = SuperDuperList([0,1,2])
index = mylist.getindexdefault( 'asdf', -1 )
 
 #2 There is nothing wrong with your code that uses ValueError . Here's yet another one-liner if you'd like to avoid exceptions: 

 thing_index = next((i for i, x in enumerate(thing_list) if x == thing), -1)
 
 #3 This issue is one of language philosophy. In Java for example there has always been a tradition that exceptions should really only be used in "exceptional circumstances" that is when errors have happened, rather than for flow control . In the beginning this was for performance reasons as Java exceptions were slow but now this has become the accepted style. 

 In contrast Python has always used exceptions to indicate normal program flow, like raising a ValueError as we are discussing here. There is nothing "dirty" about this in Python style and there are many more where that came from. An even more common example is StopIteration exception which is raised by an iteratorâ€˜s next() method to signal that there are no further values. 
 #4 What about this: 

 otherfunction(thing_collection, thing)
 

 Rather than expose something so implementation-dependent like a list index in a function interface, pass the collection and the thing and let otherfunction deal with the "test for membership" issues. If otherfunction is written to be collection-type-agnostic, then it would probably start with: 

 if thing in thing_collection:
 ... proceed with operation on thing
 

 which will work if thing_collection is a list, tuple, set, or dict. 

 This is possibly clearer than: 

 if thing_index != MAGIC_VALUE_INDICATING_NOT_A_MEMBER:
 

 which is the code you already have in otherfunction. 
 #5 I don't know why you should think it is dirty... because of the exception? if you want a oneliner, here it is: 

 thing_index = thing_list.index(elem) if thing_list.count(elem) else -1
 

 but i would advise against using it; I think Ross Rogers solution is the best, use an object to encapsulate your desiderd behaviour, don't try pushing the language to its limits at the cost of readability. 
 #6 thing_index = thing_list.index(elem) if elem in thing_list else -1
 

 One line. Simple. No exceptions.