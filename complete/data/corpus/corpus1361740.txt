Question (ID-1361740): Cubic root of the negative number on python Can someone help me to find a solution on how to calculate a cubic root of the negative number using python? 

 &gt;&gt;&gt; math.pow(-3, float(1)/3)
nan
 

 it does not work. Cubic root of the negative number is negative number. Any solutions? 
 Answers (Total-9): #0 A simple use of De Moivre's formula , is sufficient to show that the cube root of a value, regardless of sign, is a multi-valued function. That means, for any input value, there will be three solutions. Most of the solutions presented to far only return the principle root. A solution that returns all valid roots, and explicitly tests for non-complex special cases, is shown below. 

 import numpy
import math
def cuberoot( z ):
 z = complex(z)
 x = z.real
 y = z.imag
 mag = abs(z)
 arg = math.atan2(y,x)
 return [ mag**(1./3) * numpy.exp( 1j*(arg+2*n*math.pi)/3 ) for n in range(1,4) ]
 

 Edit: As requested, in cases where it is inappropriate to have dependency on numpy, the following code does the same thing. 

 def cuberoot( z ):
 z = complex(z) 
 x = z.real
 y = z.imag
 mag = abs(z)
 arg = math.atan2(y,x)
 resMag = mag**(1./3)
 resArg = [ (arg+2*math.pi*n)/3. for n in range(1,4) ]
 return [ resMag*(math.cos(a) + math.sin(a)*1j) for a in resArg ]
 
 #1 math.pow(abs(x),float(1)/3) * (1,-1)[x&lt;0]
 
 #2 You could use: 

 -math.pow(3, float(1)/3)
 

 Or more generally: 

 if x &gt; 0:
 return math.pow(x, float(1)/3)
elif x &lt; 0:
 return -math.pow(abs(x), float(1)/3)
else:
 return 0
 
 #3 Taking the earlier answers and making it into a one-liner: 

 import math
def cubic_root(x):
 return math.copysign(math.pow(abs(x), 1.0/3.0), x)
 
 #4 You can get the complete (all n roots) and more general (any sign, any power) solution using: 

 import cmath

x, t = -3., 3 # x**(1/t)

a = cmath.exp((1./t)*cmath.log(x))
p = cmath.exp(1j*2*cmath.pi*(1./t))

r = [a*(p**i) for i in range(t)]
 

 Explanation:
a is using the equation x u = exp(u*log(x)). This solution will then be one of the roots, and to get the others, rotate it in the complex plane by a (full rotation)/t. 
 #5 You can also wrap the libm library that offers a cbrt (cube root) function: 

 from ctypes import *
libm = cdll.LoadLibrary('libm.so.6')
libm.cbrt.restype = c_double
libm.cbrt.argtypes = [c_double]
libm.cbrt(-8.0)
 

 gives the expected 

 -2.0
 
 #6 The cubic root of a negative number is just the negative of the cubic root of the absolute value of that number. 

 i.e. x^(1/3) for x &lt; 0 is the same as (-1)*(|x|)^(1/3) 

 Just make your number positive, and then perform cubic root. 
 #7 Primitive solution: 

 def cubic_root(nr):
 if nr&lt;0:
  return -math.pow(-nr, float(1)/3)
 else:
  return math.pow(nr, float(1)/3)
 

 Probably massively non-pythonic, but it should work. 
 #8 Maybe math.pow is the problem: 

 (Using Python 2.5.4)
&gt;&gt;&gt; -1**(1/3.)
-1.0