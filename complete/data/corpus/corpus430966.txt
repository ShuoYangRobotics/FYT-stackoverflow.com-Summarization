Question (ID-430966): Regex for links in html text I hope this question is not a RTFM one.
I am trying to write a Python script that extracts links from a standard HTML webpage (the &lt;link href... tags).
I have searched the web for matching regexen and found many different patterns. Is there any agreed, standard regex to match links? 

 Adam 

 UPDATE: 
I am actually looking for two different answers: 

 
 What's the library solution for parsing HTML links. Beautiful Soup seems to be a good solution (thanks, Igal Serban and cletus !) 
 Can a link be defined using a regex? 
 
 Answers (Total-9): #0 Regexes with HTML get messy. Just use a DOM parser like Beautiful Soup. 
 #1 As others have suggested, if real-time-like performance isn't necessary, BeautifulSoup is a good solution: 

 import urllib2
from BeautifulSoup import BeautifulSoup

html = urllib2.urlopen("http://www.google.com").read()
soup = BeautifulSoup(html)
all_links = soup.findAll("a")
 

 As for the second question, yes, HTML links ought to be well-defined, but the HTML you actually encounter is very unlikely to be standard. The beauty of BeautifulSoup is that it uses browser-like heuristics to try to parse the non-standard, malformed HTML that you are likely to actually come across. 

 If you are certain to be working on standard XHTML, you can use (much) faster XML parsers like expat. 

 Regex, for the reasons above (the parser must maintain state, and regex can't do that) will never be a general solution. 
 #2 No there isn't. 

 You can consider using Beautiful Soup . You can call it the standard for parsing html files. 
 #3 
 Shoudln't a link be a well-defined regex? 
 

 No, [X]HTML is not in the general case parseable with regex. Consider examples like: 

 &lt;link title='hello"&gt;world' href="x"&gt;link&lt;/link&gt;
&lt;!-- &lt;link href="x"&gt;not a link&lt;/link&gt; --&gt;
&lt;![CDATA[ &gt;&lt;link href="x"&gt;not a link&lt;/link&gt; ]]&gt;
&lt;script&gt;document.write('&lt;link href="x"&gt;not a link&lt;/link&gt;')&lt;/script&gt;
 

 and that's just a few random valid examples; if you have to cope with real-world tag-soup HTML there are a million malformed possibilities. 

 If you know and can rely on the exact output format of the target page you can get away with regex. Otherwise it is completely the wrong choice for scraping web pages. 
 #4 
 Shoudln't a link be a well-defined regex? This is a rather theoretical question, 
 

 I second PEZ's answer: 

 
 I don't think HTML lends itself to "well defined" regular expressions since it's not a regular language. 
 

 As far as I know, any HTML tag may contain any number of nested tags. For example: 

 &lt;a href="http://stackoverflow.com"&gt;stackoverflow&lt;/a&gt;
&lt;a href="http://stackoverflow.com"&gt;&lt;i&gt;stackoverflow&lt;/i&gt;&lt;/a&gt;
&lt;a href="http://stackoverflow.com"&gt;&lt;b&gt;&lt;i&gt;stackoverflow&lt;/i&gt;&lt;/b&gt;&lt;/a&gt;
...
 

 Thus, in principle, to match a tag properly you must be able at least to match strings of the form: 

 BE
BBEE
BBBEEE
...
BBBBBBBBBBEEEEEEEEEE
...
 

 where B means the beginning of a tag and E means the end. That is, you must be able to match strings formed by any number of B's followed by the same number of E's. To do that, your matcher must be able to "count", and regular expressions (i.e. finite state automata) simply cannot do that (in order to count, an automaton needs at least a stack). Referring to PEZ's answer, HTML is a context-free grammar, not a regular language. 
 #5 this has much better general solutions: 

 http://stackoverflow.com/questions/773340/can-you-provide-an-example-of-parsing-html-with-your-favorite-parser/773344#773344 
 #6 Answering your two subquestions there. 

 
 I've sometimes subclassed SGMLParser (included in the core Python distribution) and must say it's straight forward. 
 I don't think HTML lends itself to "well defined" regular expressions since it's not a regular language. 
 
 #7 It depends a bit on how the HTML is produced. If it's somewhat controlled you can get away with: 

 re.findall(r'''&lt;link\s+.*?href=['"](.*?)['"].*?(?:&lt;/link|/)&gt;''', html, re.I)
 
 #8 In response to question #2 (shouldn't a link be a well defined regular expression) the answer is ... no. 

 An HTML link structure is a recursive much like parens and braces in programming languages. There must be an equal number of start and end constructs and the "link" expression can be nested within itself. 

 To properly match a "link" expression a regex would be required to count the start and end tags. Regular expressions are a class of Finite Automata. By definition a Finite Automata cannot "count" constructs within a pattern. A grammar is required to describe a recursive data structure such as this. The inability for a regex to "count" is why you see programming languages described with Grammars as opposed to regular expressions. 

 So it is not possible to create a regex that will positively match 100% of all "link" expressions. There are certainly regex's that will match a good deal of "link"'s with a high degree of accuracy but they won't ever be perfect. 

 I wrote a blog article about this problem recently. Regular Expression Limitations