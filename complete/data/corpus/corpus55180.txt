Question (ID-55180): In Python, how can you easily retrieve sorted items from a dictionary? Dictionaries unlike lists are not ordered (and do not have the 'sort' attribute). Therefore, you can not rely on getting the items in the same order when first added. 

 What is the easiest way to loop through a dictionary containing strings as the key value and retrieving them in ascending order by key? 

 For example, you had this: 

 d = {'b' : 'this is b', 'a': 'this is a' , 'c' : 'this is c'}
 

 I want to print the associated values in the following sequence sorted by key: 

 this is a
this is b
this is c
 
 Answers (Total-7): #0 Do you mean that you need the values sorted by the value of the key?
In that case, this should do it: 

 for key in sorted(d):
 print d[key]
 

 EDIT: changed to use sorted(d) instead of sorted(d.keys()), thanks Eli ! 
 #1 Or shorter, 

 for key, value in sorted(d.items()):
 print value
 
 #2 This snippet will do so. If you're going to do it frequently, you might want to make a 'sortkeys' method or somesuch to make it easier on the eyes. 

 keys = list(d.keys())
keys.sort()
for key in keys:
 print d[key]
 

 Edit: dF's solution is better -- I forgot all about sorted(). 
 #3 &gt;&gt;&gt; d = {'b' : 'this is b', 'a': 'this is a' , 'c' : 'this is c'}
&gt;&gt;&gt; for k,v in sorted(d.items()):
...  print v, k
... 
this is a a
this is b b
this is c c
 
 #4 for key in sorted(d):
 print d[key]
 
 #5 You can also sort a dictionary by value and control the sort order: 

 import operator

d = {'b' : 'this is 3', 'a': 'this is 2' , 'c' : 'this is 1'}

for key, value in sorted(d.iteritems(), key=operator.itemgetter(1), reverse=True):
 print key, " ", value
 

 Output: 
b this is 3 
a this is 2 
c this is 1 
 #6 d = {'b' : 'this is b', 'a': 'this is a' , 'c' : 'this is c'}
ks = d.keys()
ks.sort()
for k in ks:
 print "this is " + k