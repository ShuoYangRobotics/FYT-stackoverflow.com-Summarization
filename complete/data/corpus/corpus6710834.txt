Question (ID-6710834): Iterating over list or single element in python I would like to iterate over the outputs of an unknown function. Unfortunately I do not know whether the function returns a single item or a tuple. This must be a standard problem and there must be a standard way of dealing with this -- what I have now is quite ugly. 

 x = UnknownFunction()
if islist(x):
 iterator = x
else:
 iterator = [x]

def islist(s):
 try:
  len(s)
  return True
 except TypeError:
  return False

for ii in iterator:
 #do stuff
 
 Answers (Total-6): #0 It's not particularly elegant to include the code everywhere you need it. So write a function that does the massaging. Here's a suggestion I came up with for a similar previous question. It special-cases strings (which would usually be iterable) as single items, which is what I find I usually want. 

 def iterfy(iterable):
 if isinstance(iterable, basestring):
  iterable = [iterable]
 try:
  iter(iterable)
 except TypeError:
  iterable = [iterable]
 return iterable
 

 Usage: 

 for item in iterfy(unknownfunction()):
  # do something
 
 #1 The most general solution to this problem is to use isinstance with the abstract base class collections.Iterable . 

 import collections

def get_iterable(x):
 if isinstance(x, collections.Iterable):
  return x
 else:
  return (x,)
 

 You might also want to test for basestring as well, as Kindall suggests. 

  if isinstance(x, collections.Iterable) and not isinstance(x, basestring):
 

 Now some people might think, as I once did, "isn't isinstance considered harmful ? Doesn't it lock you into using one kind of type? Wouldn't using hasattr(x, '__iter__') be better?" 

 The answer is: not when it comes to abstract base classes. In fact, you can define your own class with an __iter__ method and it will be recognized as an instance of collections.Iterable , even if you do not subclass collections.Iterable . This works because collections.Iterable defines a __subclasshook__ that determines whether a type passed to it is an Iterable by whatever definition it implements. 

 &gt;&gt;&gt; class MyIter(object):
...  def __iter__(self):
...   return iter(range(10))
... 
&gt;&gt;&gt; i = MyIter()
&gt;&gt;&gt; isinstance(i, collections.Iterable)
True
&gt;&gt;&gt; collections.Iterable.__subclasshook__(type(i))
True
 
 #2 You'll want to do the following: 

 iterator = (x,) if not isinstance(x, (tuple, list)) else x
 

 then 

 for i in iterator:
 #do stuff
 
 #3 Perhaps better to use collections.Iterable to find out whether the output is an iterable or not. 

 import collections

x = UnknownFunction()
if not isinstance(x, collections.Iterable): x = [x]

for ii in x:
 #do stuff
 

 This will work if type of x is either of these - list , tuple , dict , str , any class derived from these. 
 #4 You could also try using the operator.isSequenceType function 

 import operator
x = unknown_function()
if not operator.isSequenceType(x) and not isinstance(x, basestring):
 x = (x,)
for item in x:
 do_something(item)
 
 #5 You might define a function that ensures the returned value supports iteration ( str , dict , tuple , etc --including user-defined sequence types that don't directly inherit from these classes) rather than checking if it is a tuple or list directly. 

 def ensure_iterable(x):
 return (x,) if not hasattr(x, '__iter__') else x

x = ensure_iterable(UnknownFunction())
for i in x:
 do_something(i)