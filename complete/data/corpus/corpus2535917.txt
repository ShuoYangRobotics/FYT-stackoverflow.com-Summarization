Question (ID-2535917): Copy **kwargs to self? Given 

 class ValidationRule:
 def __init__(self, **kwargs):
  # code here
 

 Is there a way that I can define __init__ such that if I were to initialize the class with something like ValidationRule(other='email') then self.other would be "added" to class without having to explicitly name every possible kwarg? 
 Answers (Total-6): #0 You could do something like this: 

 class ValidationRule:
 def __init__(self, **kwargs):
  for (k, v) in kwargs.items():
   setattr(self, k, v)
 
 #1 I think somewhere on the stackoverflow I've seen such solution
Anyway it can look like: 

 class ValidationRule:
 __allowed = ("other", "same", "different")
 def __init__(self, **kwargs):
  for k, v in kwargs.iteritems():
   assert( k in self.__class__.__allowed )
   setattr(self, k, v)
 
 #2 This may not be the cleanest way, but it works: 

 class ValidationRule: 
 def __init__(self, **kwargs): 
  self.__dict__.update(kwargs)
 

 I think I prefer ony's solution because it restricts available properties to keep you out of trouble when your input comes from external sources. 
 #3 class ValidationRule:
 def __init__(self, **kwargs):
  self.__dict__.update(kwargs)
 
 #4 You can set your kwargs arguments by updating __dict__ attribute of the instance. 

 class ValidationRule:
 def __init__(self, **kwargs):
  self.__dict__.update(kwargs)
 
 #5 I found the above answers helpful and then refined: 

 class MyObj(object):
 def __init__(self, key1=1, key2=2, key3=3):
  for (k, v) in locals().iteritems():
   if k != 'self':
    setattr(self, k, v)
 

 Test: 

 &gt;&gt;&gt; myobj = MyObj(key1=0)
&gt;&gt;&gt; print myobj.key1
0
 

 And validation is also there: 

 &gt;&gt;&gt; myobj = MyObj(key4=4)
TypeError: __init__() got an unexpected keyword argument 'key4'