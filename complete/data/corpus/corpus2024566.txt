Question (ID-2024566): Access outer class from inner class in python I have a situation like so... 

 class Outer(object):

 def some_method(self):
  # do something

 class Inner(object):
  def __init__(self):
   self.Outer.some_method() # &lt;-- this is the line in question
 

 How can I access the Outer class's method from the Inner class? 

 Edit -- Thanks for the responses. I'm concluding that I need to re-assess how I had designed this to be implemented and come up with a more robust method. 
 Answers (Total-6): #0 The methods of a nested class cannot directly access the instance attributes of the outer class. 

 Note that it is not necessarily the case that an instance of the outer class exists even when you have created an instance of the inner class. 

 In fact, it is often recommended against using nested classes, since the nesting does not imply any particular relationship between the inner and outer classes. 
 #1 Do you mean to use inheritance, rather than nesting classes like this? What you're doing doesn't make a heap of sense in Python. 

 You can access the Outer 's some_method by just referencing Outer.some_method within the inner class's methods, but it's not going to work as you expect it will. For example, if you try this: 

 class Outer(object):

 def some_method(self):
  # do something

 class Inner(object):
  def __init__(self):
   Outer.some_method()
 

 ...you'll get a TypeError when initialising an Inner object, because Outer.some_method expects to receive an Outer instance as its first argument. (In the example above, you're basically trying to call some_method as a class method of Outer .) 
 #2 maybe I'm mad but this seems very easy indeed - the thing is to make your inner class inside a method of the outer class... 

 def do_sthg( self ):
 ...

def messAround( self ):

 outerClassSelf = self

 class mooble():
  def do_sthg_different( self ):
   ...
   outerClassSelf.do_sthg()
 

 Plus... "self" is only used by convention, so you could do this: 

 def do_sthg( self ):
 ...

def messAround( outerClassSelf ):

 class mooble():
  def do_sthg_different( self ):
   ...
   outerClassSelf.do_sthg()
 

 It might be objected that you can't then create this inner class from outside the outer class... but this ain't true: 

 class Bumblebee():

 def do_sthg( self ):
  print "sthg"

 def giveMeAnInnerClass( outerClassSelf ):

  class mooble():
   def do_sthg_different( self ):
    print "something diff\n"
    outerClassSelf.do_sthg()
  return mooble
 

 then, somewhere miles away: 

 blob = Bumblebee().giveMeAnInnerClass()()
blob.do_sthg_different() 
 

 even push the boat out a bit and extend this inner class (NB to get super() to work you have to change the class signature of mooble to "class mooble( object )" 

 class InnerBumblebeeWithAddedBounce( Bumblebee().giveMeAnInnerClass() ):
 def bounce( self ):
  print "bounce"

 def do_sthg_different( self ):
  super( InnerBumblebeeWithAddedBounce, self ).do_sthg_different()
  print "and more different"


ibwab = InnerBumblebeeWithAddedBounce() 
ibwab.bounce()
ibwab.do_sthg_different()
 
 #3 i found this . 

 Tweaked to suite your question, it is the answer: 

 class Outer(object):
 def some_method(self):
  # do something

 class _Inner(object):
  def __init__(self, outer):
   outer.some_method()
 def Inner(self):
  return Inner(self)
 

 Iâ€™m sure you can somehow write a decorator for this or something :) 
/edit: kinda 
 #4 Another possibility: 

 class _Outer (object):
 # Define your static methods here, e.g.
 @staticmethod
 def subclassRef ():
  return Outer

class Outer (_Outer):
 class Inner (object):
  def outer (self):
   return _Outer

  def doSomething (self):
   outer = self.outer ()
   # Call your static mehthods.
   cls = outer.subclassRef ()
   return cls ()
 
 #5 You're trying to access Outer's class instance, from inner class instance. So just use factory-method to build Inner instance and pass Outer instance to it. 

 class Outer(object):

 def createInner(self):
  return Outer.Inner(self)

 class Inner(object):
  def __init__(self, outer_instance):
   self.outer_instance = outer_instance
   self.outer_instance.somemethod()

  def inner_method(self):
   self.outer_instance.anothermethod()