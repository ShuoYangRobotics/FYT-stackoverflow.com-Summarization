Question (ID-661603): How do I know if a generator is empty from the start? Is there a simple way of testing if the generator has no items, like peek, hasNext, isEmpty, something along those lines? 
 Answers (Total-8): #0 The simple answer to your question: no, there is no simple way. There are a whole lot of work-arounds. 

 There really shouldn't be a simple way, because of what generators are: a way to output a sequence of values without holding the sequence in memory . So there's no backward traversal. 

 You could write a has_next function or maybe even slap it on to a generator as a method with a fancy decorator if you wanted to. 
 #1 Here is a recipe for an iterator wrapper, it probably allows to do what you want: 

 http://code.activestate.com/recipes/502304/ 

 Note: I have not tested if it works or not.
Nor am I sure that the functionality is useful. 
 #2 Suggestion: 

 def peek(iterable):
 try:
  first, rest = next(iterable)
 except StopIteration:
  return None
 return first, itertools.chain([first], rest)
 

 Usage: 

 res = peek(mysequence)
if res is None:
 # sequence is empty. Do stuff.
else:
 first, mysequence = res
 # Do something with first, maybe?
 # Then iterate over the sequence:
 for element in mysequence:
  # etc.
 
 #3 I hate to offer a second solution, especially one that I would not use myself, but, if you absolutely had to do this and to not consume the generator, as in other answers: 

 def do_something_with_item(item):
 print item

empty_marker = object()

try:
  first_item = my_generator.next()  
except StopIteration:
  print 'The generator was empty'
  first_item = empty_marker

if first_item is not empty_marker:
 do_something_with_item(first_item)
 for item in my_generator:
  do_something_with_item(item)
 

 Now I really don't like this solution, because I believe that this is not how generators are to be used. 
 #4 Sorry for the obvious approach, but the best way would be to do: 

 for item in my_generator:
  print item
 

 Now you have detected that the generator is empty while you are using it. Of course, item will never be displayed if the generator is empty. 

 This may not exactly fit in with your code, but this is what the idiom of the generator is for: iterating, so perhaps you might change your approach slightly, or not use generators at all. 
 #5 The best approach, IMHO, would be to avoid a special test. Most times, use of a generator is the test: 

 thing_generated = False

# Nothing is lost here. if nothing is generated, 
# the for block is not executed. Often, that's the only check
# you need to do
for thing in my_generator():
 thing_generated = True
 print "I've generated something!"
 

 If that's not good enough, you can still perform an explicit test. At this point, thing will contain the last value generated. If nothing was generated, it will be undefined - unless you've already defined the variable. You could check the value of thing , but that's a bit unreliable. Instead, just set a flag within the block and check it afterward: 

 if not thing_generated:
 print "Avast, ye scurvy dog!"
 
 #6 &gt;&gt;&gt; gen = (i for i in [])
&gt;&gt;&gt; next(gen)
Traceback (most recent call last):
 File "&lt;pyshell#43&gt;", line 1, in &lt;module&gt;
 next(gen)
StopIteration
 

 At the end of generator StopIteration is raised, since in your case end is reached immediately, exception is raised. But normally you shouldn't check for existence of next value. 

 another thing you can do is: 

 &gt;&gt;&gt; gen = (i for i in [])
&gt;&gt;&gt; if not list(gen):
 print('empty generator')
 
 #7 If you need to know before you use the generator, then no, there is no simple way. If you can wait until after you have used the generator, there is a simple way: 

 was_empty = True

for some_item in some_generator:
 was_empty = False
 do_something_with(some_item)

if was_empty:
 handle_already_empty_generator_case()