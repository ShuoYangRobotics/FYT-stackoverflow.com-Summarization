Question (ID-5366513): splitting merged words in python I am working with a text where all "\n"s have been deleted (which merges two words into one, like "I like bananasAnd this is a new line.And another one.") What I would like to do now is tell Python to look for combinations of a small letter followed by capital letter/punctuation followed by capital letter and insert a whitespace. 

 I thought this would be easy with reg. expressions, but it is not - I couldnt find an "insert" function or anything, and the string commands seem not to be helpful either. How do I do this?
Any help would be greatly appreciated, I am despairing over here... 

 Thanks, patrick 
 Answers (Total-6): #0 Try the following: 

 re.sub(r"([a-z\.!?])([A-Z])", r"\1 \2", your_string)
 

 For example: 

 import re
lines = "I like bananasAnd this is a new line.And another one."
print re.sub(r"([a-z\.!?])([A-Z])", r"\1 \2", lines)
# I like bananas And this is a new line. And another one.
 

 If you want to insert a newline instead of a space, change the replacement to r"\1\n\2" . 
 #1 Using re.sub you should be able to make a pattern that grabs a lowercase and uppercase letter and substitutes them for the same two letters, but with a space in between: 

 import re
re.sub(r'([a-z][.?]?)([A-Z])', '\\1\n\\2', mystring)
 
 #2 You're looking for the sub function. See http://docs.python.org/library/re.html for documentation. 
 #3 Hmm, interesting. You can use regular expressions to replace text with the sub() function : 

 &gt;&gt;&gt; import re
&gt;&gt;&gt; string = 'fooBar'
&gt;&gt;&gt; re.sub(r'([a-z][.!?]*)([A-Z])', r'\1 \2', string)
'foo Bar'
 
 #4 If you really don't have any caps except at the beginning of a sentence, it will probably be easiest to just loop through the string. 

 &gt;&gt;&gt; import string
&gt;&gt;&gt; s = "a word endsA new sentence"
&gt;&gt;&gt; lastend = 0
&gt;&gt;&gt; sentences = list()
&gt;&gt;&gt; for i in range(0, len(s)):
... if s[i] in string.uppercase:
...  sentences.append(s[lastend:i])
...  lastend = i
&gt;&gt;&gt; sentences.append(s[lastend:])
&gt;&gt;&gt; print sentences
['a word ends', 'A new sentence']
 
 #5 Here's another approach, which avoids regular expressions and does not use any imported libraries, just built-ins... 

 s = "I like bananasAnd this is a new line.And another one."
with_whitespace = ''
last_was_upper = True
for c in s:
 if c.isupper():
  if not last_was_upper:
   with_whitespace += ' '
  last_was_upper = True
 else:
  last_was_upper = False
 with_whitespace += c

print with_whitespace
 

 Yields: 

 I like bananas And this is a new line. And another one.