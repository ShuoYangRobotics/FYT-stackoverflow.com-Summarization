Question (ID-3752618): Python: Adding element to list while iterating I know that it is not allowed to remove elements while iterating a list, but is it allowed to add elements to a python list while iterating. Here is an example: 

  for a in myarr:
  if somecond(a):
   myarr.append(newObj())
 

 I have tried this in my code and it seems to works fine, however i dont know if its because i am just lucky and that it will break at some point in the future? 

 EDIT: i prefer not to copy the list since "myarr" is huge, and therefore it would be too slow. Also i need to check the appended objects with "somecond()". 

 EDIT: At some point "somecond(a)" will be false, so there can not be an infinite loop. 

 EDIT: Someone asked about the "somecond()" function. Each object in myarr has a size, and each time "somecond(a)" is true and a new object is appended to the list, the new object will have a size smaller than a. "somecond()" has an epsilon for how small objects can be and if they are too small it will return "false" 
 Answers (Total-8): #0 well, according to http://docs.python.org/tutorial/controlflow.html 

 
 It is not safe to modify the sequence
 being iterated over in the loop (this
 can only happen for mutable sequence
 types, such as lists). If you need to
 modify the list you are iterating over
 (for example, to duplicate selected
 items) you must iterate over a copy. 
 
 #1 You can do this. 

 bonus_rows = []
for a in myarr:
 if somecond(a):
  bonus_rows.append(newObj())
myarr.extend( bonus_rows )
 
 #2 make copy of your original list, iterate over it,
see the modified code below 

 for a in myarr[:]:
  if somecond(a):
   myarr.append(newObj())
 
 #3 The danger with doing this is that the elements added at the end will also be iterated through. This means that if those objects also satisfy somecond(), then more elements will be added on. This can create an infinite loop. For instance, here is a very simple infinite loop: 

 x = [1]
for a in x:
 x.append(a+1)
 

 If you want to avoid copying the array, then you could use an index to loop through the items: 

 L = len(myarr)
for i in xrange(L):
 if somecond(a[i]):
  myarr.append(newObj())
 

 This isn't Pythonic, but it will avoid copying the array. 
 #4 You could use the islice from itertools to create an iterator over a smaller portion of the list. Then you can append entries to the list without impacting the items you're iterating over: 

 islice( myarr, 0, len(myarr)-1 )
 

 Even better, you don't even have to iterate over all the elements. You can increment a step size. 
 #5 Why don't you just do it the idiomatic C way. This ought to be bullet-proof, however it won't be fast. I'm pretty sure indexing into a list in Python walks the linked list, so this is a Shlemiel the Painter algorithm. But I tend not to worry about optimization until it becomes clear that a particular section of code is really a problem. First make it work, then worry about making it fast, if necessary. 

 If you want to iterate over all the elements): 

 i = 0 
while i &lt; len(some_list): 
 more_elements = do_something_with(some_list[i]) 
 some_list.extend(more_elements) 
 i += 1 
 

 If you only want to iterate over the elements that were originally in the list: 

 i = 0 
original_len = len(some_list) 
while i &lt; original_len: 
 more_elements = do_something_with(some_list[i]) 
 some_list.extend(more_elements) 
 i += 1 
 
 #6 Access your list elements directly by i. Then you can append to your list: 

 for i in xrange(len(myarr)):
 if somecond(a[i]):
  myarr.append(newObj())
 
 #7 Expanding S.Lott's answer so that new items are processed as well: 

 todo = myarr
done = []
while todo:
 added = []
 for a in todo:
  if somecond(a):
   added.append(newObj())
 done.extend(todo)
 todo = added
 

 The final list is in done .