Question (ID-9072669): what is the meaning of this (redundant?) python expression? str='test'
example={'test':'value',}
return str in example and example[str] or None
 

 why the seemingly redundant extra test for key str in example ? 
 Answers (Total-6): #0 In this specific example, the check is to first make sure that 'test' is actually a valid key in the example dict, otherwise you would get a KeyError exception. Then the logic proceeds to check the key and either return it, or a None if the value of example[str] evals to False 

 It would be a lot easier if this example simply did: 

 str='test'
example={'test':'value',}
return example.get(str, None) or None
 

 Update 

 Even simpler, since the extra param to get() is not needed: 

 return example.get(str) or None
 

 Update 2 : Breaking down the truth tests and boolean operations from the OP (based on comments) 

 example = {
 'test' : 'value', 
 'test2': 0, 
 'test3': [],
}
test = lambda k: k in example and example[k] or None
print test('test')
# value
print test('test2')
# None
print test('test3')
# None
 
 #1 For starters, the behaviour is different for the case where you're looking up a non-existent key (the extra test would prevent a KeyError exception being thrown). 

 However, it goes further than that because example[str] can be false in a boolean context. e.g., it could be an empty string. 

 &gt;&gt;&gt; str='test'
&gt;&gt;&gt; example={'test':[],}
&gt;&gt;&gt; str in example and example[str] or None
&gt;&gt;&gt; str in example or None
True
 

 So it is not quite redundant. str in example checks for the existence of the key, whereas and example[str] is also checking the truthiness of the value. 
 #2 Since Python evaluates Booleans lazily, you can safely omit parentheses in simple tests. This might make it easier to read: 

 (str in example and example[str]) or None
 

 In plain English: 

 "Make sure the dictionary example has the key str and that the key also has a non-False value. If so, return the value of the key example[str] . Otherwise return None " 
 #3 str in example is a boolean test to see if str is a key in example , while example[str] yields the actual value associated with that key. 
 #4 Graceful failure. If the key doesn't exist, the lookup 'example[str]' will fail at runtime. You'll get a fault, terminate your app and get a traceback. By checking for the key first you get the None value back instead and your application will go on on its merry way. 

 Another, more general approach would be to catch the exception and return None as a result of that. 

 def testfun():
 str='test2'
 example={'test':'value',}
 try:
  return example[str]
 except KeyError:
  return None
 
 #5 If the key doesn't exist it will get KeyError exception 

 #!/usr/bin/python

str='test'
example={'test':'value',}

if str in example and example[str]:
 print example[str]
else:
 print False