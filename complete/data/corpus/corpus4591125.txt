Question (ID-4591125): Is it safe to replace '==' with 'is' to compare Boolean-values I did several Boolean Comparisons: 

 &gt;&gt;&gt; (True or False) is True
True
&gt;&gt;&gt; (True or False) == True
True
 

 It sounds like == and is are interchangeable for Boolean-values. 

 Sometimes it's more clear to use is 

 I want to know that: 

 Are True and False pre-allocated in python? 

 Is bool(var) always return the same True (or False ) with the pre-allocated True (or False )? 

 Is it safe to replace == with is to compare Boolean-values? 

 

 It's not about Best-Practice. 

 I just want to know the Truth. 
 Answers (Total-6): #0 You shouldn't ever need to compare booleans. If you are doing something like: 

 if(some_bool == True):
 ...
 

 ...just change it to: 

 if(some_bool):
 ...
 

 No is or == needed. 

 Added: okay, if it's simply about knowing more about the internals: there should only ever be two boolean literal objects (see also the C API ), and bool(x) is True should be True if bool(x) == True for any Python program. This does not mean that x is True if x == True , however (eg. x = 1 ). 
 #1 Watch out for what else you may be comparing. 

 &gt;&gt;&gt; 1 == True
True
&gt;&gt;&gt; 1 is True
False
 

 True and False will have stable object ids for their lifetime in your python instance. 

 &gt;&gt;&gt; id(True)
4296106928
&gt;&gt;&gt; id(True)
4296106928
 

 is compares the id of an object 

 EDIT: adding or 

 Since OP is using or in question it may be worth pointing this out. 

 or that evaluates True: returns the first 'True' object. 

 &gt;&gt;&gt; 1 or True
1
&gt;&gt;&gt; 'a' or True
'a'
&gt;&gt;&gt; True or 1
True
 

 or that evaluates False: returns the last 'False' object 

 &gt;&gt;&gt; False or ''
''
&gt;&gt;&gt; '' or False
False
 

 and that evaluates to True: returns the last 'True' object 

 &gt;&gt;&gt; True and 1
1
&gt;&gt;&gt; 1 and True
True
 

 and that evaluates to False: returns the first 'False' object 

 &gt;&gt;&gt; '' and False
''
&gt;&gt;&gt; False and ''
False
 

 This is an important python idiom and it allows concise and compact code for dealing with boolean logic over regular python objects. 

 &gt;&gt;&gt; bool([])
False
&gt;&gt;&gt; bool([0])
True
&gt;&gt;&gt; bool({})
False
&gt;&gt;&gt; bool({False: False})
True
&gt;&gt;&gt; bool(0)
False
&gt;&gt;&gt; bool(-1)
True
&gt;&gt;&gt; bool('False')
True
&gt;&gt;&gt; bool('')
False
 

 Basically 'empty' objects are False, 'non empty' are True. 

 Combining this with @detly's and the other answers should provide some insight into how to use if and bools in python. 
 #2 The == operator tests for equality The is keyword tests for object identity. Whether we are talking about the same object. Note, that more variables may refer to the same object. 
 #3 Yes. There are guaranteed to be exactly two bool s, True and False: 

 
 Class bool cannot be subclassed
 further. Its only instances are False
 and True. 
 

 That means if you know both operands are bool , == and is are equivalent. However, as detly notes, there's usually no reason to use either in this case. 
 #4 == and is are both comparison operators, which would return a boolean value - True or False . True has a numeric value of 1 and False has a numeric value of 0. 

 The operator == compare the values of two objects and objects compared are most often are the same types (int vs int, float vs float), If you compare objects of different types, then they are unequal. The operator is tests for object identity, 'x is y' is true if both x and y have the same id. That is, they are same objects. 

 So, when you are comparing if you comparing the return values of same type, use == and if you are comparing if two objects are same (be it boolean or anything else), you can use is . 

 42 is 42 is True and is same as 42 == 42 . 
 #5 It seems that all answers deal with True and False as defined after an interpreter startup. Before booleans became part of Python they were often defined as part of a program. Even now (Python 2.6.6) they are only names that can be pointed to different objects: 

 &gt;&gt;&gt; True = 1
&gt;&gt;&gt; (2 &gt; 1)
True
&gt;&gt;&gt; (2 &gt; 1) == True
True
&gt;&gt;&gt; (2 &gt; 1) is True
False
 

 If you have to deal with older software, be aware of that.