Question (ID-6609982): Python string processing based on the numeric part: '5a+6b' + '2a+3b+9c' = '7a+9b+9c' I need to add two simple polynomials (represented as strings). The following example would clarify my requirement. 

 input1 = '5a+6b'
input2 = '2a+3b+9c'
 

 The required sum should be as follows: 

 '7a+9b+9c'
 

 Currently I have created a function (of 20 lines) to perform this task for me, but I think this can be improved. 

 EDIT: Adding my code 

 def add_domain_strings():
 input_list = ['5a+6b', '2a+3b+9c']
 vars_dict = {}
 for input in input_list:
  temp_list = input.split('+')
  for i in temp_list:
   split_index = None
   for j in i:
    if not j.isdigit():
     split_index = i.index(j)
     break
   if i[split_index:] in vars_dict:
    vars_dict[i[split_index:]] += int(i[:split_index])
   else:
    vars_dict[i[split_index:]] = int(i[:split_index])
 sum_string = ''
 for k,v in vars_dict.iteritems():
  if sum_string:
   sum_string += '+%s%s' % (v,k)
  else:
   sum_string += '%s%s' % (v,k)
 return sum_string
 
 Answers (Total-6): #0  sympy does close to what you want 

 &gt;&gt;&gt; import sympy
&gt;&gt;&gt; a,b,c = sympy.symbols('abc')
&gt;&gt;&gt; 5*a+6*b + 2*a+9*b+9*c
7*a + 9*c + 15*b
 
 #1 You could either use sympy: 

 &gt;&gt;&gt; import sympy
&gt;&gt;&gt; from sympy import *
&gt;&gt;&gt; a = Symbol('a')
&gt;&gt;&gt; b = Symbol('b')
&gt;&gt;&gt; c = Symbol('c')
&gt;&gt;&gt; eval('5*a+6*b')
5*a + 6*b
&gt;&gt;&gt; eval('5*a+6*b') + eval('2*a+3*b+9*c')
7*a + 9*b + 9*c
 

 Or write a simple parser: 

 &gt;&gt;&gt; input1 = '5a+6b'
&gt;&gt;&gt; input2 = '2a+3b+9c'
&gt;&gt;&gt; s = "+".join((input1, input2))
&gt;&gt;&gt; s
'5a+6b+2a+3b+9c'
&gt;&gt;&gt; d = {}
&gt;&gt;&gt; for i in s.split("+"):
...  d[i[-1]] = d.get(i[-1], 0) + int(i[:-1])
... 
&gt;&gt;&gt; d
{'a': 7, 'c': 9, 'b': 9}
&gt;&gt;&gt; "+".join("".join((str(j),i)) for i, j in d.items())
'7a+9c+9b'
 
 #2 For python2.7+ 

 &gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; input1 = '5a+6b'
&gt;&gt;&gt; input2 = '2a+3b+9c'
&gt;&gt;&gt; c=Counter()
&gt;&gt;&gt; for inp in input1, input2:
...  c+=Counter({x[-1]:int(x[:-1]) for x in inp.split('+')})
... 
&gt;&gt;&gt; '+'.join("%s%s"%(v,k) for k,v in sorted(c.items()))
'7a+9b+9c'
 
 #3 It depends on what types of expressions you want to support. If there are to be parenthesis and other constructs, this turns into standard expression parsing - lexical analysis and syntactic analysis. You can just construct appropriate abstract syntax tree and provide suitable rules for evaluation. 
 #4 Not knowing what you've already got, I'll just post a description of how I would approach this: 

 
 Convert each input to a dictionary on the form {'a': 5, 'b': 6} 1 
 Iterate the dictionary of input2 and add values to the corresponding key in input1 
 Convert dictionary back to string. 
 

 

 1) The following could be used (assumption: single letters): 

 d = {}
for e in input1.split("+"):
 d[e[:-1]] = e[-1]
 
 #5 if you are willing to sacrifice a bit of speed for a massive control gain, I'd suggest regular expressions: 

 from re import findall

def make_poly(s):
 m = findall('([+-]?[0-9.]+)([a-z]+)', s)
 return dict([(i[1], float(i[0])) for i in m])

def add_polys(*polys):
 res = {}
 for poly in polys:
  for item in poly.iteritems():
   if res.has_key(item[0]):
    res[item[0]] += item[1]
   else:
    res[item[0]] = item[1]
 return res

&gt;&gt;&gt; p1 = make_poly('4x+7y+3.5z')
&gt;&gt;&gt; p1
{'y': 7.0, 'x': 4.0, 'z': 3.5}
&gt;&gt;&gt; p2 = make_poly('-2x+1y+0.2z')
&gt;&gt;&gt; p2
{'y': 1.0, 'x': -2.0, 'z': 0.2}
&gt;&gt;&gt; 
&gt;&gt;&gt; add_polys(p1, p2)
{'y': 8.0, 'x': 2.0, 'z': 3.7}
 

 It still needs some tinkering for edge-cases and mal-formed user input but it works so far