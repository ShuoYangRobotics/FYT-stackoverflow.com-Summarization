Question (ID-2401785): In Python, can I single line a for loop over iterator with an IF filter? Silly question: 
I have a simple for loop followed by a simple if statement: 

 for airport in airports:
 if airport.is_important:
 

 and I was wondering if I can write this as a single line somehow. 
So, yes, I can do this: 

 for airport in (airport for airport in airports if airport.is_important):
 

 but it reads so silly and redundant ("for airport in airport for airport in airports..."). 
Is there a better way? 
 Answers (Total-6): #0 No, there is no shorter way. Usually, you will even break it into two lines : 

 important_airports = (airport for airport in airports if airport.is_important)
for airport in important_airports:
 # do stuff
 

 This is more flexible, easier to read and still don't consume much memory. 
 #1 Mabe this, but it's more or less the same verbose... 

 import itertools

for airport in itertools.ifilter(lambda x: x.is_important, airports):
 ...
 
 #2 You could do 

 for airport in filter(lamdba x: x.is_important, airports):
 # do stuff...
 
 #3 I'd use a negative guard on the loop. It's readable, and doesn't introduce an extra level of indentation. 

 for airport in airports:
 if not airport.is_important: continue
 &lt;body of loop&gt;
 
 #4 This is a design philosophy of python. If it takes you too many words to put it on one line, it should be broken into a few lines to help the person who comes after you. List and generator expressions are more for transforming iterables in-place -- making more readable forms of map and filter . 
 #5 Using list comprehension (only if airports is a list of objects): 

 for airport in [a for a in airports if a.is_important]: