Question (ID-21961): Why does this python date/time conversion seem wrong? &gt;&gt;&gt; import time
&gt;&gt;&gt; time.strptime("01-31-2009", "%m-%d-%Y")
(2009, 1, 31, 0, 0, 0, 5, 31, -1)
&gt;&gt;&gt; time.mktime((2009, 1, 31, 0, 0, 0, 5, 31, -1))
1233378000.0
&gt;&gt;&gt; 60*60*24 # seconds in a day
86400
&gt;&gt;&gt; 1233378000.0 / 86400
14275.208333333334
 

 time.mktime should return the number of seconds since the epoch. Since I'm giving it a time at midnight and the epoch is at midnight, shouldn't the result be evenly divisible by the number of seconds in a day? 

 Thanks! 
 Answers (Total-6): #0 Short answer: Because of timezones. 

 The Epoch is in UTC. 

 For example, I'm on IST (Irish Stsandard Time) or GMT+1. time.mktime() is relative to my timezone, so on my system this refers to 

 &gt;&gt;&gt; time.mktime((2009, 1, 31, 0, 0, 0, 5, 31, -1))
1233360000.0
 

 Because you got the result 1233378000, that would suggest that you're 5 hours behind me 

 &gt;&gt;&gt; (1233378000 - 1233360000) / (60*60) 
5
 

 Have a look at the time.gmtime() function which works off UTC. 
 #1 mktime(...)
 mktime(tuple) -&gt; floating point number

 Convert a time tuple in local time to seconds since the Epoch.
 

 local time... fancy that. 

 The time tuple: 

 The other representation is a tuple of 9 integers giving local time.
The tuple items are:
 year (four digits, e.g. 1998)
 month (1-12)
 day (1-31)
 hours (0-23)
 minutes (0-59)
 seconds (0-59)
 weekday (0-6, Monday is 0)
 Julian day (day in the year, 1-366)
 DST (Daylight Savings Time) flag (-1, 0 or 1)
If the DST flag is 0, the time is given in the regular time zone;
if it is 1, the time is given in the DST time zone;
if it is -1, mktime() should guess based on the date and time.
 

 Incidentally, we seem to be 6 hours apart: 

 &gt;&gt;&gt; time.mktime((2009, 1, 31, 0, 0, 0, 5, 31, -1))
1233356400.0
&gt;&gt;&gt; (1233378000.0 - 1233356400)/(60*60)
6.0
 
 #2 Phil's answer really solved it, but I'll elaborate a little more. Since the epoch is in UTC, if I want to compare other times to the epoch, I need to interpret them as UTC as well. 

 &gt;&gt;&gt; calendar.timegm((2009, 1, 31, 0, 0, 0, 5, 31, -1))
1233360000
&gt;&gt;&gt; 1233360000 / (60*60*24)
14275
 

 By converting the time tuple to a timestamp treating is as UTC time, I get a number which is evenly divisible by the number of seconds in a day. 

 I can use this to convert a date to a days-from-the-epoch representation which is what I'm ultimately after. 
 #3 Interesting. I don't know, but I did try this: 

 &gt;&gt;&gt; now = time.mktime((2008, 8, 22, 11 ,17, -1, -1, -1, -1))
&gt;&gt;&gt; tomorrow = time.mktime((2008, 8, 23, 11 ,17, -1, -1, -1, -1))
&gt;&gt;&gt; tomorrow - now
86400.0
 

 which is what you expected. My guess? Maybe some time correction was done since the epoch. This could be only a few seconds, something like a leap year. I think I heard something like this before, but can't remember exactly how and when it is done... 
 #4 Where are you from?
Isn't the result of summer timer/winter time changes !?? 
 #5 not sure if this is your problem but do know that time.mktime calls localtime and it's bitten me in the arse once or twice.