Question (ID-6071050): Python: How to tell the for loop to continue from a function? Sometimes I need the following pattern within a for loop. At times more than once in the same loop: 

  try:
  var = 'attempt to do something that may fail on a number of levels'
 except Exception, e:
  log(e)
  continue
 

 Now I don't see a nice way to wrap this in a function as it can not return continue : 

 def attempt(this):
 try:
  return this
 except Exception, e:
  log(e)
  # 1. continue # &lt;-- syntax error: continue not properly in loop or
  # 2. return continue # &lt;-- invalid syntax
  # 3.
  return False # &lt;-- this sort of works, but makes me feel powerless
 

 If I return False than I could: 

  var = attempt('to do something that may fail on a number of levels')
 if not var:
  continue
 

 But I don't feel that does it the justice. I want to tell the for loop to continue (or fake it) from within attempt function. 
 Answers (Total-6): #0 Python already has a very nice construct for doing just this and it doesn't use continue : 

 for i in range(10):
 try:
  r = 1.0 / (i % 2)
 except Exception, e:
  print(e)
 else:
  print(r)
 

 I wouldn't nest any more than this, though, or your code will soon get very ugly. 

 In your case I would probably do something more like this as it is far easier to unit test the individual functions and flat is better than nested : 

 #!/usr/bin/env python

def something_that_may_raise(i):
 return 1.0 / (i % 2)

def handle(e):
 print("Exception: " + str(e))

def do_something_with(result):
 print("No exception: " + str(result))

def wrap_process(i):
 try:
  result = something_that_may_raise(i)
 except ZeroDivisionError, e:
  handle(e)
 except OverflowError, e:
  handle(e) # Realistically, this will be a different handler...
 else:
  do_something_with(result)

for i in range(10):
 wrap_process(i)
 

 Remember to always catch specific exceptions . If you were not expecting a specific exception to be thrown, it is probably not safe to continue with your processing loop. 

 Edit following comments: 

 If you really don't want to handle the exceptions, which I still think is a bad idea, then catch all exceptions ( except: ) and instead of handle(e) , just pass . At this point wrap_process() will end, skipping the else: -block where the real work is done, and you'll go to the next iteration of your for -loop. 

 Bear in mind, Errors should never pass silently . 
 #1 Maybe you want to do continuations? You could go and look at how Eric Lippert explains them (if you are ready to have your mind blown, but in Python it could look a bit like this: 

 def attempt(operation, continuation):
 try:
  operation()
 except:
  log('operation failed!')
 continuation()
 

 Inside your loop you could do: 

 attempt(attempt_something, lambda: foo(bar)) # attempt_something is a function
 
 #2 Think that you are mapping foo on all items where attempt worked. So attempt is a filter and it's easy to write this as a generator: 

 def attempted( items ):
 for item in items:
  try:
   yield attempt( item )
  except Exception, e:
   log(e)

print [foo(bar) for bar in attempted( items )]
 
 #3 You could use this: 

 for l in loop:
 attempt() and foo(bar)
 

 but you should make sure attempt() returns True or False. 

 Really, though, Johnsyweb's answer is probably better. 
 #4 The whole idea of exceptions is that they work across multiple levels of indirection, i.e., if you have an error (or any other exceptional state) deep inside your call hierarchy, you can still catch it on a higher level and handle it properly. 

 In your case, say you have a function attempt() which calls the functions attempt2() and attempt3() down the call hierarchy, and attempt3() may encounter an exceptional state which should cause the main loop to terminate: 

 class JustContinueException(Exception):
 pass

for i in range(0,99):
 try:
  var = attempt() # calls attempt2() and attempt3() in turn
 except JustContinueException:
  continue # we don't need to log anything here
 except Exception, e:
  log(e)
  continue

 foo(bar)

def attempt3():
 try:
  # do something
 except Exception, e:
  # do something with e, if needed
  raise # reraise exception, so we catch it downstream
 

 You can even throw a dummy exception yourself, that would just cause the loop to terminate, and wouldn't even be logged. 

 def attempt3():
 raise JustContinueException()
 
 #5 I wouldn't normally post a second answer, but this is an alternative approach if you really don't like my first answer . 

 Remember that a function can return a tuple . 

 #!/usr/bin/env python

def something_that_mail_fail(i):
 failed = False
 result = None
 try:
  result = 1.0 / (i % 4)
 except:
  failed = True # But we don't care
 return failed, result

for i in range(20):
 failed, result = something_that_mail_fail(i)
 if failed:
  continue
 for rah in ['rah'] * 3:
  print(rah)
 print(result)
 

 I maintain that try ... except ... else is the way to go, and you shouldn't silently ignore errors though. Caveat emptor and all that.