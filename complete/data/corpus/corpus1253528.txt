Question (ID-1253528): Is there an easy way to pickle a python function (or otherwise serialize its code)? I'm trying to transfer a transfer a function across a network connection (using asyncore). Is there an easy way to serialize a python function (one that, in this case at least, will have no side affects) for transfer like this? 

 I would ideally like to have a pair of functions similar to these: 

 def transmit(func):
 obj = pickle.dumps(func)
 [send obj across the network]

def receive():
 [receive obj from the network]
 func = pickle.loads(s)
 func()
 
 Answers (Total-6): #0 You could serialise the function bytecode and then reconstruct it on the caller. The marshal module can be used to serialise code objects, which can then be reassembled into a function. ie: 

 import marshal
def foo(x): return x*x
code_string = marshal.dumps(foo.func_code)
 

 Then in the remote process (after transferring code_string): 

 import marshal, types

code = marshal.loads(code_string)
func = types.FunctionType(code, globals(), "some_func_name")

func(10) # gives 100
 

 A few caveats: 

 
 marshal's format (any python bytecode for that matter) may not be compatable between major python versions. 
 Will only work for cpython implementation. 
 If the function references globals (including imported modules, other functions etc) that you need to pick up, you'll need to serialise these too, or recreate them on the remote side. My example just gives it the remote process's global namespace. 
 You'll probably need to do a bit more to support more complex cases, like closures or generator functions. 
 
 #1 The most simple way is probably inspect.getsource(object) (see the inspect module ) which returns a String with the source code for a function or a method. 
 #2 Pyro can do this for you . 
 #3 It all depends on whether you generate the function at runtime or not: 

 If you do - inspect.getsource(object) won't work for dynamically generated functions as it gets object's source from .py file, so only functions defined before execution can be retrieved as source. 

 And if your functions are placed in files anyway, why not give receiver access to them and only pass around module and function names. 

 The only solution for dynamically created functions that I can think of is to construct function as a string before transmission, transmit source, and then eval() it on the receiver side. 

 Edit: the marshal solution looks also pretty smart, didn't know you can serialize something other thatn built-ins 
 #4 The basic functions used for this module covers your query, plus you get the best compression over the wire; see the instructive source code: 

 y_serial.py module :: warehouse Python objects with SQLite 

 "Serialization + persistance :: in a few lines of code, compress and annotate Python objects into SQLite; then later retrieve them chronologically by keywords without any SQL. Most useful "standard" module for a database to store schema-less data." 

 http://yserial.sourceforge.net 
 #5 It will work if you keep it simple.
Read the section " What can be pickled and unpickled? " for details. 

 &gt;&gt;&gt; import pickle
&gt;&gt;&gt;
&gt;&gt;&gt; def hi():
...  print 'hello'
...
&gt;&gt;&gt;
&gt;&gt;&gt; hi()
hello
&gt;&gt;&gt; p_func = pickle.dumps(hi)
&gt;&gt;&gt;
&gt;&gt;&gt; loaded_func = pickle.loads(p_func)
&gt;&gt;&gt;
&gt;&gt;&gt; loaded_func()
hello
 

 As Aaron Digulla pointed at, you may just want to consider sending the source file of the function. 

 Something like: 

 transmit(&lt;source file&gt;, &lt;function name in source file&gt;)
trasmit('./my_functions.py', 'hi')
 

 As your probably aware you don't want to do this out of a completely controlled environment.