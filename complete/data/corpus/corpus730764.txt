Question (ID-730764): Try/Catch in Python When you just want to do a try catch without handling the exception, how do you do it in Python? 

 try :
 shutil.rmtree ( path )
except :
 pass
 
 Answers (Total-7): #0 try:
 doSomething()
except: 
 pass
 

 or 

 try:
 doSomething()
except Exception: 
 pass
 

 The difference is, that the first one will also catch KeyboardInterrupt , SystemExit and stuff like that, which are derived directly from exceptions.BaseException , not exceptions.Exception . See documentation for details: 

 
 try statement &mdash; http://docs.python.org/reference/compound_stmts.html#try 
 exceptions &mdash; http://docs.python.org/library/exceptions 
 
 #1 
 When you just want to do a try catch without handling the exception, how do you do it in Python? 
 

 It depends on what you mean by "handling." 

 If you mean to catch it without taking any action, the code you posted will work. 

 If you mean that you want to take action on an exception without stopping the exception from going up the stack, then you want something like this: 

 try:
 do_something()
except:
 handle_exception()
 raise #re-raise the exact same exception that was thrown
 
 #2 It's generally considered best-practice to only catch the errors you are interested in, in the case of shutil.rmtree it's probably OSError : 

 &gt;&gt;&gt; shutil.rmtree("/fake/dir")
Traceback (most recent call last):
 [...]
OSError: [Errno 2] No such file or directory: '/fake/dir'
 

 If you want to silently ignore that error, you would do.. 

 try:
 shutil.rmtree(path)
except OSError:
 pass
 

 Why? Say you (somehow) accidently pass the function an integer instead of a string, like.. 

 shutil.rmtree(2)
 

 It will give the error "TypeError: coercing to Unicode: need string or buffer, int found" - you probably don't want to ignore that, which can be difficult to debug.. 

 If you defiantly want to ignore all errors, catch Exception rather than a bare catch: statement. Again, why? 

 It catches every exception, include the SystemExit exception which sys.exit() uses, for example: 

 &gt;&gt;&gt; try:
...  sys.exit(1)
... except:
...  pass
... 
&gt;&gt;&gt;
 

 ..compared to the following, which correctly exits: 

 &gt;&gt;&gt; try:
...  sys.exit(1)
... except Exception:
...  pass
... 
shell:~$
 
 #3 For completeness: 

 &gt;&gt;&gt; def divide(x, y):
...  try:
...   result = x / y
...  except ZeroDivisionError:
...   print "division by zero!"
...  else:
...   print "result is", result
...  finally:
...   print "executing finally clause"
 

 ...from the python tutorial . 
 #4 @When you just want to do a try catch without handling the exception, how do you do it in Python? 

 This will help you to print what exception is:( i.e. try catch without handling the exception and print the exception.) 

 
import sys
....
try:
 doSomething()
except:
 print "Unexpected error:", sys.exc_info()[0]

...

 

 reg,
Tilokchan 
 #5 try:
  doSomething()
except Exception: 
 pass
else:
  stuffDoneIf()
  TryClauseSucceeds()
 

 FYI the else clause can go after all exceptions and will only be run if the code in the try doesn't cause an exception. 
 #6 in python, we handle exceptions similar to other language but the difference is some syntex difference, for example- 

 try:
 #Your Code in which exception can occur
except :
 #we can call that exception here also, like ZeroDivisionError()
 #now your code 

 we can put finally block also 

 finally:
 #YOur Code..