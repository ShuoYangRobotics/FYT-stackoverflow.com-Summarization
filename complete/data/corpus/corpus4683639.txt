Question (ID-4683639): Call a program written in python in a program written in Ocaml I wanted to ask if you could call in a program written in Ocaml a program written in python , and if the answer is yes how do I do? 
 Answers (Total-6): #0 What exactly are you intending to do? Do you want to run it and forget about it? Then do a fork/exec. Do you want run it and wait until it's finished but otherwise do nothing? Then use Sys.command . Do you want to read/write to it? Then uses Unix.open_process* (or Unix.create_process* ). 

 For example, if I want to run ls and print out the results, I can do this: 

 let ls = Unix.open_process_in "ls"
try
 while true do
 Printf.printf "%s\n" (input_line ls)
 done
with End_of_file -&gt; ()
Unix.close_process_in ls
 
 #1 Don't have any real life experience with this, but this sounds interesting (from the Integrating Python with other languages wiki ): 

 Pycaml : write Python extension modules in OCaml (instead of C), and use Python code and native libraries from OCaml programs. 
 #2 You can execute commands using Sys.command , so you can just do Sys.command "python foo.py" , assuming python is in your path and foo.py is in the current directory. 
 #3 If your program is an executable (otherwise you would compile it ;) ) you can use the Unix module as you use it in C, for example : 

 let program = "path_to_python_program_exe" in

match Unix.fork () with
 | 0 -&gt; (try
   Unix.execvp program [|program; "any_more_args_here"|]
  with
   _ -&gt; printf "%s" "error while execv\n"; exit (-1))
 | -1 -&gt; printf "%s" "error accured on fork\n"
 | _ -&gt; ignore (wait ()); printf "%s" "parent exit...\n"
 

 When you compile, you use the unix.cma for the compiler: ocamlc unix.cma you_ml.ml 
 #4 Looks like you can use the Shell library . 
 #5 It depends on your exact requirements, but you can use pythons os.system() to execute an program in the same way you would call it from the command line. That should be a good starting point.