Question (ID-436198): What is an alternative to execfile in Python 3.0? It seems they canceled in Python 3.0 all the easy way to quickly load a script file - both execfile() and reload(). 

 Is there an obvious alternative I'm missing? 
 Answers (Total-6): #0 You are just supposed to read the file and exec the code yourself. 2to3 current replaces 

 execfile("somefile.py", local_vars, global_vars)
 

 as 

 exec(compile(open("somefile.py").read(), "somefile.py", 'exec'), global_vars, local_vars)
 

 (The compile call isn't strictly needed, but it associates the filename with the code object making debugging a little easier.) 
 #1 If the script you want to load is in the same directory than the one you run, maybe "import" will do the job ? 

 If you need to dynamically import code the built-in function __ import__ and the module imp are worth looking at. 

 &gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.path = ['/path/to/script'] + sys.path
&gt;&gt;&gt; __import__('test')
&lt;module 'test' from '/path/to/script/test.pyc'&gt;
&gt;&gt;&gt; __import__('test').run()
'Hello world!'
 

 test.py: 

 def run():
  return "Hello world!"
 

 If you're using Python 3.1 or later, you should also take a look at importlib . 
 #2 def execfile(file, globals=globals(), locals=locals()):
 with open(file, "r") as fh:
  exec(fh.read()+"\n", globals, locals)
 

 If you really needed to... 
 #3 This one is better, since it takes the globals and locals from the caller: 

 import sys
def execfile(filename, globals=None, locals=None):
 if globals is None:
  globals = sys._getframe(1).f_globals
 if locals is None:
  locals = sys._getframe(1).f_locals
 with open(filename, "r") as fh:
  exec(fh.read()+"\n", globals, locals)
 
 #4 Note that the above pattern will fail if you're using PEP-263 encoding declarations
that aren't ascii or utf-8. You need to find the encoding of the data, and encode it 
correctly before handing it to exec(). 

 class python3Execfile(object):
 def _get_file_encoding(self, filename):
  with open(filename, 'rb') as fp:
   try:
    return tokenize.detect_encoding(fp.readline)[0]
   except SyntaxError:
    return "utf-8"

 def my_execfile(filename):
  globals['__file__'] = filename
  with open(filename, 'r', encoding=self._get_file_encoding(filename)) as fp:
   contents = fp.read()
  if not contents.endswith("\n"):
   # http://bugs.python.org/issue10204
   contents += "\n"
  exec(contents, globals, globals)
 
 #5 If you have to use execfile , you have a design problem.
Of course you can always read the entire file as a string and use the exec statement on it. But it would be even better to rethink your application's design so you won't need it in first place.