Question (ID-140182): Regular expressions but for writing in the match When using regular expressions we generally, if not always use them to extract some kind of information. What I need is to replace the match value with some other value... 

 Right now I'm doing this... 

 def getExpandedText(pattern, text, replaceValue):
 """
  One liner... really ugly but it's only used in here.
 """

 return text.replace(text[text.find(re.findall(pattern, text)[0]):], replaceValue) + \
   text[text.find(re.findall(pattern, text)[0]) + len(replaceValue):]
 

 so if I do sth like 

 &gt;&gt;&gt; getExpandedText("aaa(...)bbb", "hola aaaiiibbb como estas?", "ooo")
'hola aaaooobbb como estas?'
 

 It changes the (...) with 'ooo'. 

 Do you guys know whether with python regular expressions we can do this? 

 thanks a lot guys!! 
 Answers (Total-6): #0 sub (replacement, string[, count = 0])
 

 sub returns the string obtained by replacing the leftmost non-overlapping occurrences of the RE in string by the replacement replacement. If the pattern isn't found, string is returned unchanged. 

  p = re.compile( '(blue|white|red)')
 &gt;&gt;&gt; p.sub( 'colour', 'blue socks and red shoes')
 'colour socks and colour shoes'
 &gt;&gt;&gt; p.sub( 'colour', 'blue socks and red shoes', count=1)
 'colour socks and red shoes'
 
 #1 You want to use re.sub : 

 &gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub(r'aaa...bbb', 'aaaooobbb', "hola aaaiiibbb como estas?")
'hola aaaooobbb como estas?'
 

 To re-use variable parts from the pattern, use \g&lt;n&gt; in the replacement string to access the n-th () group: 

 &gt;&gt;&gt; re.sub( "(svcOrdNbr +)..", "\g&lt;1&gt;XX", "svcOrdNbr    IASZ0080")
'svcOrdNbr    XXSZ0080'
 
 #2 Of course. See the 'sub' and 'subn' methods of compiled regular expressions, or the 're.sub' and 're.subn' functions. You can either make it replace the matches with a string argument you give, or you can pass a callable (such as a function) which will be called to supply the replacement. See http://docs.python.org/lib/module-re.html 
 #3 If you want to continue using the syntax you mentioned (replace the match value instead of replacing the part that didn't match), and considering you will only have one group, you could use the code below. 

 def getExpandedText(pattern, text, replaceValue):
 m = re.search(pattern, text)
 expandedText = text[:m.start(1)] + replaceValue + text[m.end(1):]
 return expandedText
 
 #4 def getExpandedText(pattern,text,*group):
 r""" Searches for pattern in the text and replaces
 all captures with the values in group.

 Tag renaming:
 &gt;&gt;&gt; html = '&lt;div&gt; abc &lt;span id="x"&gt; def &lt;/span&gt; ghi &lt;/div&gt;'
 &gt;&gt;&gt; getExpandedText(r'&lt;/?(span\b)[^&gt;]*&gt;', html, 'div')
 '&lt;div&gt; abc &lt;div id="x"&gt; def &lt;/div&gt; ghi &lt;/div&gt;'

 Nested groups, capture-references:
 &gt;&gt;&gt; getExpandedText(r'A(.*?Z(.*?))B', "abAcdZefBgh", r'&lt;\2&gt;')
 'abA&lt;ef&gt;Bgh'
 """
 pattern = re.compile(pattern)
 ret = []
 last = 0
 for m in pattern.finditer(text):
  for i in xrange(0,len(m.groups())):
   start,end = m.span(i+1)

   # nested or skipped group
   if start &lt; last or group[i] is None:
    continue

   # text between the previous and current match
   if last &lt; start:
    ret.append(text[last:start])

   last = end
   ret.append(m.expand(group[i]))

 ret.append(text[last:])
 return ''.join(ret)
 

 Edit: Allow capture-references in the replacement strings. 
 #5 re.sub() does replacing based on regular expressions.