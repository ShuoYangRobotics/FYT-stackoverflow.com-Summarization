Question (ID-4983258): Python - How to check list monotonicity What would be an efficient and pythonic way to check list monotonicity? i.e. that it has monotonically increasing or decreasing values? 

 Examples: 

 [0,1,2,3,3,4] # This is a monotonically increasing list
[4.3,4.2,-2] # This is a monotonically decreasing list
[2,3,1]  # This is neither
 
 Answers (Total-7): #0 def strictly_increasing(L):
 return all(x&lt;y for x, y in zip(L, L[1:]))

def strictly_decreasing(L):
 return all(x&gt;y for x, y in zip(L, L[1:]))

def non_increasing(L):
 return all(x&gt;=y for x, y in zip(L, L[1:]))

def non_decreasing(L):
 return all(x&lt;=y for x, y in zip(L, L[1:]))
 
 #1 import itertools
import operator

def monotone_increasing(lst):
 pairs = zip(lst, lst[1:])
 return all(itertools.starmap(operator.le, pairs))

def monotone_decreasing(lst):
 pairs = zip(lst, lst[1:])
 return all(itertools.starmap(operator.ge, pairs))

def monotone(lst):
 return monotone_increasing(lst) or monotone_decreasing(lst)
 

 This approach is O(N) in the length of the list. 
 #2 If you have large lists of numbers it might be best to use numpy, and if you are: 

 import numpy as np

def monotonic(x):
 dx = np.diff(x)
 return np.all(dx &lt;= 0) or np.all(dx &gt;= 0)
 

 should do the trick. 
 #3 @6502 has the perfect code for lists, I just want to add a general version that works for all sequences: 

 def pairwise(seq):
 items = iter(seq)
 last = next(items)
 for item in items:
  yield last, item
  last = item

def strictly_increasing(L):
 return all(x&lt;y for x, y in pairwise(L))

def strictly_decreasing(L):
 return all(x&gt;y for x, y in pairwise(L))

def non_increasing(L):
 return all(x&gt;=y for x, y in pairwise(L))

def non_decreasing(L):
 return all(x&lt;=y for x, y in pairwise(L))
 
 #4 import operator, itertools

def is_monotone(lst):
 op = operator.le   # pick 'op' based upon trend between
 if not op(lst[0], lst[-1]): # first and last element in the 'lst'
  op = operator.ge
 return all(op(x,y) for x, y in itertools.izip(lst, lst[1:]))
 
 #5 L = [1,2,3]
L == sorted(L)

L == sorted(L, reverse=True)
 
 #6 &gt;&gt;&gt; l = [0,1,2,3,3,4]
&gt;&gt;&gt; l == sorted(l) or l == sorted(l,reverse=True)