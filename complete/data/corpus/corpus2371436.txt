Question (ID-2371436): Evaluating a mathematical expression in a string stringExp = "2^4"
intVal = int(stringExp)  # Expected value: 16
 

 This returns the following error: 

 Traceback (most recent call last): 
File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: invalid literal for int()
with base 10: '2^4'
 

 I know that eval can work around this, but isn't there a better and - more importantly - safer method to evaluate a mathematical expression that is being stored in a string? 
 Answers (Total-7): #0 Pyparsing can be used to parse mathematical expressions. In particular, fourFn.py 
shows how to parse basic arithmetic expressions. Below, I've rewrapped fourFn into a numeric parser class for easier reuse. 

 from __future__ import division
from pyparsing import (Literal,CaselessLiteral,Word,Combine,Group,Optional,
      ZeroOrMore,Forward,nums,alphas,oneOf)
import math
import operator

__author__='Paul McGuire'
__version__ = '$Revision: 0.0 $'
__date__ = '$Date: 2009-03-20 $'
__source__='''http://pyparsing.wikispaces.com/file/view/fourFn.py
http://pyparsing.wikispaces.com/message/view/home/15549426
'''
__note__='''
All I've done is rewrap Paul McGuire's fourFn.py as a class, so I can use it
more easily in other places.
'''

class NumericStringParser(object):
 '''
 Most of this code comes from the fourFn.py pyparsing example

 '''
 def pushFirst(self, strg, loc, toks ):
  self.exprStack.append( toks[0] )
 def pushUMinus(self, strg, loc, toks ):
  if toks and toks[0]=='-': 
   self.exprStack.append( 'unary -' )
 def __init__(self):
  """
  expop :: '^'
  multop :: '*' | '/'
  addop :: '+' | '-'
  integer :: ['+' | '-'] '0'..'9'+
  atom :: PI | E | real | fn '(' expr ')' | '(' expr ')'
  factor :: atom [ expop factor ]*
  term :: factor [ multop factor ]*
  expr :: term [ addop term ]*
  """
  point = Literal( "." )
  e  = CaselessLiteral( "E" )
  fnumber = Combine( Word( "+-"+nums, nums ) + 
       Optional( point + Optional( Word( nums ) ) ) +
       Optional( e + Word( "+-"+nums, nums ) ) )
  ident = Word(alphas, alphas+nums+"_$")  
  plus = Literal( "+" )
  minus = Literal( "-" )
  mult = Literal( "*" )
  div = Literal( "/" )
  lpar = Literal( "(" ).suppress()
  rpar = Literal( ")" ).suppress()
  addop = plus | minus
  multop = mult | div
  expop = Literal( "^" )
  pi = CaselessLiteral( "PI" )
  expr = Forward()
  atom = ((Optional(oneOf("- +")) +
     (pi|e|fnumber|ident+lpar+expr+rpar).setParseAction(self.pushFirst))
    | Optional(oneOf("- +")) + Group(lpar+expr+rpar)
    ).setParseAction(self.pushUMinus)  
  # by defining exponentiation as "atom [ ^ factor ]..." instead of 
  # "atom [ ^ atom ]...", we get right-to-left exponents, instead of left-to-right
  # that is, 2^3^2 = 2^(3^2), not (2^3)^2.
  factor = Forward()
  factor &lt;&lt; atom + ZeroOrMore( ( expop + factor ).setParseAction( self.pushFirst ) )
  term = factor + ZeroOrMore( ( multop + factor ).setParseAction( self.pushFirst ) )
  expr &lt;&lt; term + ZeroOrMore( ( addop + term ).setParseAction( self.pushFirst ) )
  # addop_term = ( addop + term ).setParseAction( self.pushFirst )
  # general_term = term + ZeroOrMore( addop_term ) | OneOrMore( addop_term)
  # expr &lt;&lt; general_term  
  self.bnf = expr
  # map operator symbols to corresponding arithmetic operations
  epsilon = 1e-12
  self.opn = { "+" : operator.add,
    "-" : operator.sub,
    "*" : operator.mul,
    "/" : operator.truediv,
    "^" : operator.pow }
  self.fn = { "sin" : math.sin,
    "cos" : math.cos,
    "tan" : math.tan,
    "abs" : abs,
    "trunc" : lambda a: int(a),
    "round" : round,
    "sgn" : lambda a: abs(a)&gt;epsilon and cmp(a,0) or 0}
 def evaluateStack(self, s ):
  op = s.pop()
  if op == 'unary -':
   return -self.evaluateStack( s )
  if op in "+-*/^":
   op2 = self.evaluateStack( s )
   op1 = self.evaluateStack( s )
   return self.opn[op]( op1, op2 )
  elif op == "PI":
   return math.pi # 3.1415926535
  elif op == "E":
   return math.e # 2.718281828
  elif op in self.fn:
   return self.fn[op]( self.evaluateStack( s ) )
  elif op[0].isalpha():
   return 0
  else:
   return float( op )
 def eval(self,num_string,parseAll=True):
  self.exprStack=[]
  results=self.bnf.parseString(num_string,parseAll)
  val=self.evaluateStack( self.exprStack[:] )
  return val
 

 You can use it like this: 

 nsp=NumericStringParser()
result=nsp.eval('2^4')
print(result)
# 16.0
 
 #1 You need to use the eval() function , as in 

 #btw that's probably what you meant, 2 to the 4th power, not the XOR operation
&gt;&gt;&gt;stringExp = "2**4" 
&gt;&gt;&gt;print(eval(stringExp))
16
 

 Beware that eval(), and its cousin exec() are dangerous tools in the Python's "workshop" because, depending on the origin of the string to be evaluated, the expression could at best simply generate an exception, and at worse, well..., take over the computer or something like that ;-) 

 Therefore you typically need to 

 
 parse (if only roughly) the string for "dangerous" keywords etc.;
For simple expressions, a simple regex which checks for the absence of letters may just suffice. 
 run the eval in the context of a try-except construct 
 

 Better yet, to check the input string against erroneous syntax and malicious code, you could use functions from the ast module (Abstract Syntax Tree) 
For example, after ast.parse() ing the expression use ast.walk() to check that the tree only contains an ast.Expr , void of ast.Assign and such. 
 #2 Use eval in a clean namespace: 

 &gt;&gt;&gt; ns = {'__builtins__': None}
&gt;&gt;&gt; eval('2 ** 4', ns)
16
 

 The clean namespace should prevent injection. For instance: 

 &gt;&gt;&gt; eval('__builtins__.__import__("os").system("echo got through")', ns)
Traceback (most recent call last):
 File "&lt;stdin&gt;", line 1, in &lt;module&gt;
 File "&lt;string&gt;", line 1, in &lt;module&gt;
AttributeError: 'NoneType' object has no attribute '__import__'
 

 Otherwise you would get: 

 &gt;&gt;&gt; eval('__builtins__.__import__("os").system("echo got through")')
got through
0
 

 You might want to give access to the math module: 

 &gt;&gt;&gt; import math
&gt;&gt;&gt; ns = vars(math).copy()
&gt;&gt;&gt; ns['__builtins__'] = None
&gt;&gt;&gt; eval('cos(pi/3)', ns)
0.50000000000000011
 
 #3 I think I would use eval() , but would first check to make sure the string is a valid mathematical expression, as opposed to something malicious. You could use a regex for the validation. 

 eval() also takes additional arguments which you can use to restrict the namespace it operates in for greater security. 
 #4 What is wrong with eval ? If you have some expression as a string , then eval is the way to go. 

 Just run: 

 try:
 result = eval('2**4')
except SyntaxError:
 result = 0
 

 Or something like this. 

 If you want to sanitaze your code, you can use compiler package and parse the given code. If you notice anything but mathematical expressions, just refuse to evaluate the code. 
 #5 lybniz shows how to use eval() with untrustworthy input. 
 #6 If you don't want to use eval, then the only solution is to implement the appropriate grammar parser. Have a look at pyparsing .