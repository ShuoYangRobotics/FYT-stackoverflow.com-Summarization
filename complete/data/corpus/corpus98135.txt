Question (ID-98135): How do I use Django templates without the rest of Django? I want to use the Django template engine in my (Python) code, but I'm not building a Django-based web site. How do I use it without having a settings.py file (and others) and having to set the DJANGO_SETTINGS_MODULE environment variable? 

 If I run the following code: 

 &gt;&gt;&gt; import django.template
&gt;&gt;&gt; from django.template import Template, Context
&gt;&gt;&gt; t = Template('My name is {{ my_name }}.')
 

 I get: 

 ImportError: Settings cannot be imported, because environment variable DJANGO_SETTINGS_MODULE is undefined.
 
 Answers (Total-9): #0 The solution is simple. It's actually well documented, but not too easy to find. (I had to dig around--it didn't come up when I tried a few different Google searches.) See http://docs.djangoproject.com/en/dev/ref/templates/api/#configuring-the-template-system-in-standalone-mode . 

 The following code works: 

 &gt;&gt;&gt; from django.template import Template, Context
&gt;&gt;&gt; from django.conf import settings
&gt;&gt;&gt; settings.configure()
&gt;&gt;&gt; t = Template('My name is {{ my_name }}.')
&gt;&gt;&gt; c = Context({'my_name': 'Daryl Spitzer'})
&gt;&gt;&gt; t.render(c)
u'My name is Daryl Spitzer.'
 

 See the Django documentation for a description of some of the settings you may want to define (as keyword arguments to configure). 
 #1 Jinja2 syntax is pretty much the same as Django's with very few differences, and you get a much more powerfull template engine, which also compiles your template to bytecode (FAST!). 

 I use it for templating, including in Django itself, and it is very good. You can also easily write extensions if some feature you want is missing. 

 Here is some demonstration of the code generation: 

 &gt;&gt;&gt; import jinja2
&gt;&gt;&gt; print jinja2.Environment().compile('{% for row in data %}{{ row.name | upper }}{% endfor %}', raw=True) 
from __future__ import division
from jinja2.runtime import LoopContext, Context, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join
name = None

def root(context, environment=environment):
 l_data = context.resolve('data')
 t_1 = environment.filters['upper']
 if 0: yield None
 for l_row in l_data:
  if 0: yield None
  yield unicode(t_1(environment.getattr(l_row, 'name')))

blocks = {}
debug_info = '1=9'
 
 #2 I would also recommend jinja2. There is a nice article on django vs. jinja2 that gives some in-detail information on why you should prefere the later. 
 #3 Any particular reason you want to use Django's templates? Both Jinja and Genshi are, in my opinion, superior. 

 

 If you really want to, then see the Django documentation on settings.py . Especially the section "Using settings without setting DJANGO_SETTINGS_MODULE ". Use something like this: 

 from django.conf import settings
settings.configure (FOO='bar') # Your settings go here
 
 #4 Found this: 

 http://snippets.dzone.com/posts/show/3339 
 #5 Don't. Use StringTemplate instead--there is no reason to consider any other template engine once you know about it. 
 #6 I would say Jinja as well. It is definitely more powerful than Django Templating Engine and it is stand alone . 

 If this was an external plug to an existing Django application, you could create a custom command and use the templating engine within your projects environment. Like this; 

 manage.py generatereports --format=html
 

 But I don't think it is worth just using the Django Templating Engine instead of Jinja. 
 #7 Google AppEngine uses the Django templating engine, have you taken a look at how they do it? You could possibly just use that. 
 #8 I echo the above statements. Jinja 2 is a pretty good superset of Django templates for general use. I think they're working on making the Django templates a little less coupled to the settings.py, but Jinja should do well for you.