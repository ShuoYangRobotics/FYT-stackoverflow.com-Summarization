Question (ID-1020839): How to make a simple command-line chat in Python? I study network programming and would like to write a simple command-line chat in Python. 

 I'm wondering how make receving constant along with inputing available for sending at any time. 

 As you see, this client can do only one job at a time: 

 from socket import *

HOST = 'localhost'
PORT = 21567
BUFSIZE = 1024
ADDR = (HOST, PORT)

tcpCliSock = socket(AF_INET, SOCK_STREAM)
tcpCliSock.connect(ADDR)

while 1:
 data = raw_input('&gt; ')
 if not data: break
 tcpCliSock.send(data)
 data = tcpCliSock.recv(BUFSIZE)
 if not data: break
 print data

tcpCliSock.close()
 

 So if another client sends a message, this client will only receive it after sending a message too. I bet you understand me. I have googled for the matter and found out many interesting things such as asynchronous I/O, threading, non-blocking synchronization, concurrent programming and so on. I have also installed the twisted package. In brief, I've been learning all these things but yet haven't found what I was looking for. (Of course, I will keep trying and trying until I get to the point.) 

 So, my question is how make that? =) 
 Answers (Total-6): #0 If you want to code it from scratch select is the way to go (and you can read on Google Book Search most of the chapter of Python in a Nutshell that covers such matters); if you want to leverage more abstraction, asyncore is usable, but Twisted is much richer and more powerful. 
 #1 You should use select . 

 Check: 

 
 Another select link 
 howto 
 
 #2 I wrote one in async I/O... its a lot easier to wrap your head around than a full threading model. 

 if you can get your hands ahold of "talk"'s source code, you can learn a lot about it. see a demo http://dsl.org/cookbook/cookbook_40.html#SEC559 , or try it your self if you are on a linux box... 

 it sends characters in real-time. 

 also, ytalk is interactive and multiple users.... kinda like hudddlechat or campfire. 
 #3 Chat programs are doing two things concurrently. 

 
 Watching the local user's keyboard and sending to the remote user (via a socket of some kind) 
 Watching the remote socket and displaying what they type on the local console. 
 

 You have several ways to do this. 

 
 A program that opens socket and keyboard and uses the select module to see which one has input ready. 
 A program that creates two threads. One threads reads the remote socket and prints. The other thread reads the keyboard and sends to the remote socket. 
 A program that forks two subprocesses. One subprocess reads the remote socket and prints. The other subprocess reads the keyboard and sends to the remote socket. 
 
 #4 Well, well, here's what I am having at this very moment. 

 Server goes like this: 

 import asyncore
import socket

clients = {}

class MainServerSocket(asyncore.dispatcher):
 def __init__(self, port):
  asyncore.dispatcher.__init__(self)
  self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
  self.bind(('',port))
  self.listen(5)
 def handle_accept(self):
  newSocket, address = self.accept( )
  clients[address] = newSocket
  print "Connected from", address
  SecondaryServerSocket(newSocket)

class SecondaryServerSocket(asyncore.dispatcher_with_send):
 def handle_read(self):
  receivedData = self.recv(8192)
  if receivedData:
   every = clients.values()
   for one in every:
    one.send(receivedData+'\n')
  else: self.close( )
 def handle_close(self):
  print "Disconnected from", self.getpeername( )
  one = self.getpeername( )
  del clients[one]

MainServerSocket(21567)
asyncore.loop( )
 

 And client goes just like this: 

 from Tkinter import *
from socket import *
import thread

HOST = 'localhost'
PORT = 21567
BUFSIZE = 1024
ADDR = (HOST, PORT)

tcpCliSock = socket(AF_INET, SOCK_STREAM)
tcpCliSock.connect(ADDR)

class Application(Frame):
 def __init__(self, master):
  Frame.__init__(self, master)
  self.grid()
  self.create_widgets()
  self.socket()

 def callback(self, event):
  message = self.entry_field.get()
  tcpCliSock.send(message)

 def create_widgets(self):
  self.messaging_field = Text(self, width = 110, height = 20, wrap = WORD)
  self.messaging_field.grid(row = 0, column = 0, columnspan = 2, sticky = W)

  self.entry_field = Entry(self, width = 92)
  self.entry_field.grid(row = 1, column = 0, sticky = W)
  self.entry_field.bind('&lt;Return&gt;', self.callback)

 def add(self, data):
  self.messaging_field.insert(END, data)

 def socket(self):
  def loop0():
   while 1:
    data = tcpCliSock.recv(BUFSIZE)
    if data: self.add(data)

  thread.start_new_thread(loop0, ())



root = Tk()
root.title("Chat client")
root.geometry("550x260")

app = Application(root)

root.mainloop()
 

 Now it's time to make the code look better and add some functionality. 

 Thanks for your help, folks! 
 #5 Your question was not very coherent. However, your program does not need to be asynchronous at all to attain what you are asking for. 

 This is a working chat script you originally wanted with minimal changes. It uses 1 thread for receiving and 1 for sending, both using blocking sockets. It is far simpler than using asynchronous methods. 

 from socket import *
from threading import Thread
import sys

HOST = 'localhost'
PORT = 21567
BUFSIZE = 1024
ADDR = (HOST, PORT)

tcpCliSock = socket(AF_INET, SOCK_STREAM)
tcpCliSock.connect(ADDR)

def recv():
 while True:
  data = tcpCliSock.recv(BUFSIZE)
  if not data: sys.exit(0)
  print data

Thread(target=recv).start()
while True:
 data = raw_input('&gt; ')
 if not data: break
 tcpCliSock.send(data)

tcpCliSock.close()