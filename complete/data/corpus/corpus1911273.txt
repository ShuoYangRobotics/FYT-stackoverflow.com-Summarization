Question (ID-1911273): Is there a better way to compare dictionary values I am currently using the following function to compare dictionary values. Is there a faster or better way to do it? 

 match = True
for keys in dict1:
 if dict1[keys] != dict2[keys]:
  match = False
  print keys
  print dict1[keys],
  print '-&gt;' ,
  print dict2[keys]
 

 Edit: Both the dicts contain the same keys. 
 Answers (Total-6): #0 If the dicts have identical sets of keys and you need all those prints for any value difference, there isn't much you can do; maybe something like: 

 diffkeys = [k for k in dict1 if dict1[k] != dict2[k]]
for k in diffkeys:
 print k, ':', dict1[k], '-&gt;', dict2[k]
 

 pretty much equivalent to what you have, but you might get nicer presentation for example by sorting diffkeys before you loop on it. 
 #1 Uhm, you are describing dict1 == dict2 ( check if boths dicts are equal ) 

 But what your code does is all( dict1[k]==dict2[k] for k in dict1 ) ( check if all entries in dict1 are equal to those in dict2 ) 
 #2 You can use sets for this too 

 &gt;&gt;&gt; a = {'x': 1, 'y': 2}
&gt;&gt;&gt; b = {'y': 2, 'x': 1}
&gt;&gt;&gt; set(a.iteritems())-set(b.iteritems())
set([])
&gt;&gt;&gt; a['y']=3
&gt;&gt;&gt; set(a.iteritems())-set(b.iteritems())
set([('y', 3)])
&gt;&gt;&gt; set(b.iteritems())-set(a.iteritems())
set([('y', 2)])
&gt;&gt;&gt; set(b.iteritems())^set(a.iteritems())
set([('y', 3), ('y', 2)])
 
 #3 If you're just comparing for equality, you can just do this: 

 if not dict1 == dict2:
 match = False
 

 Otherwise, the only major problem I see is that you're going to get a KeyError if there is a key in dict1 that is not in dict2, so you may want to do something like this: 

 for key in dict1:
 if not key in dict2 or dict1[key] != dict2[key]:
  match = False
 

 You could compress this into a comprehension to just get the list of keys that don't match too: 

 mismatch_keys = [key for key in x if not key in y or x[key] != y[key]]
match = not bool(mismatch_keys) #If the list is not empty, they don't match 
for key in mismatch_keys:
 print key
 print '%s -&gt; %s' % (dict1[key],dict2[key])
 

 The only other optimization I can think of might be to use "len(dict)" to figure out which dict has fewer entries and loop through that one first to have the shortest loop possible. 
 #4 &gt;&gt;&gt; a = {'x': 1, 'y': 2}
&gt;&gt;&gt; b = {'y': 2, 'x': 1}
&gt;&gt;&gt; print a == b
True
&gt;&gt;&gt; c = {'z': 1}
&gt;&gt;&gt; print a == c
False
&gt;&gt;&gt;
 
 #5 If the true intent of the question is the comparison between dicts (rather than printing differences), the answer is 

 dict1 == dict2
 

 This has been mentioned before, but I felt it was slightly drowning in other bits of information. It might appear superficial, but the value comparison of dicts has actually powerful semantics. It covers 

 
 number of keys (if they don't match, the dicts are not equal) 
 names of keys (if they don't match, they're not equal) 
 value of each key (they have to be '==', too) 
 

 The last point again appears trivial, but is acutally interesting as it means that all of this applies recursively to nested dicts as well. E.g. 

 m1 = {'f':True}
 m2 = {'f':True}
 m3 = {'a':1, 2:2, 3:m1}
 m4 = {'a':1, 2:2, 3:m2}
 m3 == m4 # True
 

 Similar semantics exist for the comparison of lists. All of this makes it a no-brainer to e.g. compare deep Json structures, alone with a simple "==".