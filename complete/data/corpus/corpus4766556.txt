Question (ID-4766556): Repeat Python function call on exception? Hey everybody I'm working on a data scraping project and I'm looking for a clean way to repeat a function call if an exception is raised. 

 Pseudo-code: 

 try:
 myfunc(x)
except myError:
 ###try to call myfunc(x) again Y number of times, 
  until success(no exceptions raised) otherwise raise myError2
 

 I realize this isn't best practice at all but I'm working through a number of different code/network layers that aren't reliable and I can't realistically debug them. 

 Right now I'm accomplishing this with a huge set of try\except blocks and it's making my eyes bleed. 

 Elegant ideas anyone? 
 Answers (Total-6): #0 To do precisely what you want, you could do something like the following: 

 import functools
def try_x_times(x, exceptions_to_catch, exception_to_raise, fn):
 @functools.wraps(fn) #keeps name and docstring of old function
 def new_fn(*args, **kwargs):
  for i in xrange(x):
   try:
    return fn(*args, **kwargs)
   except exceptions_to_catch:
     pass
  raise exception_to_raise
 return new_fn
 

 Then you just wrap the old function in this new function: 

 #instead of
#risky_method(1,2,'x')
not_so_risky_method = try_x_times(3, (MyError,), myError2, risky_method)
not_so_risky_method(1,2,'x')

#or just
try_x_times(3, (MyError,), myError2, risky_method)(1,2,'x')
 
 #1 Use a loop 

 i = 0
while True:
 try: myfunc(x); break;
 except myError:
 i = i + 1;
 # print "Trying again"
 if i &gt; 5: raise myError2;
 
 #2 
for x in xrange(num_retries):
 try:
  myFunc()
 except MyError, err:
  continue
  #time.sleep(1)
 err = None
 break
if err:
 raise MyError2
#else:
# print "Success!"


 
 #3 Try following snippet: 

 while True:
 try:
  func()
  break
 except:
  print "Error. Gonna try again"
 

 But it is better to limit the number of retries. 
 #4 success = False
attempts = 0
while not success and attempts &lt; 10: # or however many times you want to attempt
 try:
  functionCall()
  success = True
 except:
  i += 1
if not success:
 raise functionCallFailedError
 

 Hope this helps 
 #5 I like to do these problems with recursion: 

 def tryfor(times, on_failure, excepts, func, *args, **kwargs):
 if times &lt; 1:
  raise on_failure()
 try:
  return func(*args, **kwargs)
 except excepts:
  return tryfor(times-1, on_failure, excepts, func, *args, **kwargs)


tryfor(3, PermanentException, (SomeError,), dostuff,1,2)