Question (ID-7975515): Is it a sin to use infinite recursion for infinite loops in Python? This question is more about curiosity than utility. If I'm writing a function that's supposed to run for ever, for instance a daemon, how would Python handle it if I called the function again from the end of the function? 

 def daemonLoop():

 # Declare locals

 # Do stuff

 daemonLoop()
 

 I'm fairly sure that doing this in C would result in a stack overflow, but given the level of abstraction from C to Python I'm guessing stuff is handled differently. 

 Would I go to hell for this? 
 Answers (Total-6): #0 In almost all Python interpreters that will cause a stack overflow, as it would in C. The higher-level feature that would permit this is called Tail Call Optimization or Tail Recursion Elimination, and the benevolent dictator of Python opposes adding this to the language . 

 This style is considered to be non-idiomatic for Python, and a simple while True: loop is preferred. 
 #1 The maximum recursion depth can be retrieved with sys.getrecursionlimit() and set with sys.setrecursionlimit() . 

 
 Would I go to hell for this? 
 

 Yes. CPython has no Tail Recursion Elimination / Last Call Optimization. 

 def recurse():
 recurse()

recurse()
 

 Error: 

 
 # 1000 or so lines of this:
 File "", line 2, in recurse
RuntimeError: maximum recursion depth exceeded
 
 #2 The C version of the Python interpreter (which is probably what you're using) will raise an error eventually if you never return from daemonLoop . I'm not sure about other versions. 
 #3 I don't know why you'd think about doing something like that when you could simply have an infinite while loop. Anyway for your question about whether it will work: 

 ...
 File "test.py", line 7, in daemonLoop
 daemonLoop()
 File "test.py", line 7, in daemonLoop
 daemonLoop()
RuntimeError: maximum recursion depth exceeded
 

 So yeah, hell it is. 
 #4 Probably not a good idea.... 

 def forever(): forever()

forever()
 

 RuntimeError: maximum recursion depth exceeded 

 http://paulbarry.com/articles/2009/09/02/infinite-recursion 
 #5 (define forever (lambda () (forever)))
 

 This kind of recursion is what Lisp dialects like Scheme are made for!