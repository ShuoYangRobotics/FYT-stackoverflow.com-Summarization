Question (ID-3840843): How to downcase the first character of a string in Python? There is a function to capitalize a string, I would like to be able to change the first character of a string to be sure it will be lowercase. 

 How can I do that in Python ? 
 Answers (Total-7): #0 def first_lower(s):
 if len(s) == 0:
  return s
 else:
  return s[0].lower() + s[1:]

print first_lower("HELLO") # Prints "hELLO"
print first_lower("")  # Doesn't crash :-)
 
 #1 s = "Bobby tables"
s = s[0].lower() + s[1:]
 
 #2 Simplest way: 

 &gt;&gt;&gt; mystring = 'ABCDE'
&gt;&gt;&gt; mystring[0].lower() + mystring[1:]
'aBCDE'
&gt;&gt;&gt; 
 

 Update 

 See this answer (by @RichieHindle) for a more foolproof solution, including handling empty strings. That answer doesn't handle None though, so here is my take: 

 &gt;&gt;&gt; def first_lower(s):
 if not s: # Added to handle case where s == None
 return 
 else:
  return s[0].lower() + s[1:]

&gt;&gt;&gt; first_lower(None)
&gt;&gt;&gt; first_lower("HELLO")
'hELLO'
&gt;&gt;&gt; first_lower("")
&gt;&gt;&gt; 
 
 #3 No need to handle special cases (and I think the symmetry is more Pythonic): 

 def uncapitalize(s):
 return s[:1].lower() + s[1:].upper()
 
 #4 One-liner which handles empty strings and None : 

 func = lambda s: s[:1].lower() + s[1:] if s else ''

&gt;&gt;&gt; func(None)
&gt;&gt;&gt; ''
&gt;&gt;&gt; func('')
&gt;&gt;&gt; ''
&gt;&gt;&gt; func('MARTINEAU')
&gt;&gt;&gt; 'mARTINEAU'
 
 #5 Interestingly, none of these answers does exactly the opposite of capitalize() . For example, capitalize('abC') returns Abc rather than AbC . If you want the opposite of capitalize() , you need something like: 

 def uncapitalize(s):
 if len(s) &gt; 0:
 s = s[0].lower() + s[1:].upper()
 return s
 
 #6 I'd write it this way: 

 def first_lower(s):
 if s == "":
  return s
 return s[0].lower() + s[1:]
 

 This has the (relative) merit that it will throw an error if you inadvertently pass it something that isn't a string, like None or an empty list.