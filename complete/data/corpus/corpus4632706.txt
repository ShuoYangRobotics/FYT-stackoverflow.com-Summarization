Question (ID-4632706): Why doesn't append() work correctly with a dictionary created via zip() with empty lists as values? Dictionary d works fine, as expected, 

 In [335]: d={1:[], 2:[]}

In [336]: d[1].append('word')

In [337]: d

Out[337]: {1: ['word'], 2: []}
 

 But dz, which looks identical to d, doesn't work correctly. 

 In [339]: dz=dict(zip([1,2],[[]]*2))

In [340]: dz

Out[340]: {1: [], 2: []}

In [341]: dz[1].append('word')

In [342]: dz

Out[342]: {1: ['word'], 2: ['word']}
 

 Am I doing something wrong? Python 2.6.5 
 Answers (Total-6): #0 This is a common Python gotcha: [[]]*2 creates two references to the same empty list. You want ([], []) or [ [] for _ in xrange(2)] (suitable for long sequences of empty lists). 

 Simpler example that represents your zip code: 

 In [1]: dupl = [[]] * 2

In [2]: dupl[0].append(1)

In [3]: dupl
Out[3]: [[1], [1]]
 
 #1 &gt;&gt;&gt; a = []
&gt;&gt;&gt; b = []
&gt;&gt;&gt; c = a
&gt;&gt;&gt; a is b
False
&gt;&gt;&gt; a is a
True
&gt;&gt;&gt; a is c
True
 

 is demonstrates that your unexpected case is due to having two ways of referencing the same object. 

 &gt;&gt;&gt; d={1:[], 2:[]}
&gt;&gt;&gt; d[1] is d[2]
False
&gt;&gt;&gt; dz=dict(zip([1,2],[[]]*2))
&gt;&gt;&gt; dz[1] is dz[2]
True
 

 If this is not intended behavior, I would probably write 

 &gt;&gt;&gt; dz = dict( (k, []) for k in [1, 2] )
&gt;&gt;&gt; dz[1] is dz[2]
False
 

 or (assuming new enough Python, and this is what you want) 

 &gt;&gt;&gt; import collections
&gt;&gt;&gt; dz = collections.defaultdict(list)
 
 #2 In d , the values of the dict are initially two separate empty lists. In dz , they are the same empty list. 
 #3 [[]]*2 creates a list which contains the same list twice, not a list containing two different lists. 

 x=[[]]*2
print x[0] is x[1]
# True
 
 #4 The * operator used to copy elements makes a shallow copy instead of a real copy. Essentially, it is duplicating the reference to the same empty list and a change to either reference changes the contents of the same, shared list. 

 I'm not sure if this is relevant to what you're eventually going to do with your dict but if you want to have the default content in a dict be a certain value, you can use collections.defaultdict 

 d = collections.defaultdict(list)
d['a'].append(3)
print d
defaultdict(&lt;type 'list'&gt;, {'a': [3]})
 
 #5 OK, thanks for the answers. Using copy() solves the problem, indeed. 

 In [1]: import copy 

 In [2]: udict = lambda a,e: dict(zip(a,[copy.copy(e) for _ in xrange(len(a))])) 

 In [3]: dzx = udict([1,2],[]) 

 In [4]: dzx[1].append('word') 

 In [5]: dzx 

 Out[5]: {1: ['word'], 2: []}