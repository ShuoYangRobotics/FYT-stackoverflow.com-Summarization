Question (ID-4882428): Help me optimize this python code... Project Euler question 23 The question:
 Click! 

 My solution: 

 #returns a list of the divisors of a given number
def Divs(Number):
 Divisors = []

 for i in range(2 , int(Number**0.5) + 1):
  if Number % i == 0:
   Divisors.append(i)

 for q in range(len(Divisors)):
  if Divisors[q] != (Number / Divisors[q]):
   Divisors.append(Number / Divisors[q])

 Divisors.insert(0,1)
 return Divisors

#returns a list of abundant numbers up to and including the limit
def AbList(limit):
 Abundant = []

 for i in range(11,limit + 1):
  if sum(Divs(i)) &gt; i:
   Abundant.append(i)

 return Abundant

#Finds the sum of all positive integers that cannot be written as the
#sum of two abundant numbers...
def AbSum(limit):
 Abundant = AbList(limit)
 NoAbSum = 0
 for i in range(1 , limit):
  AbSum = 0
  x = 0
  for x in Abundant:
   if i - x in Abundant[:i]:
    AbSum = 1
    break
  if AbSum == 0:
   NoAbSum += i
 return NoAbSum
 

 Alright, so this took my 3.4 GhZ processor about 15 minutes to solve. I have spent hours searching for a better way, but I simply can't think of anything. For now, I'm not concerned with the first two functions, because together they take less than a second to run. The third function is the kicker here. It runs through the range of numbers up to the limit (in this case, 20000-something), and each time, it runs through the list of abundant numbers, subtracting each from the current number, then checking that answer against the list of abundant numbers. If there is a match, the loop breaks and tries again with the next number, all the way up to the limit. 

 I know there has got to be a better way of doing this. Any suggestions? Also, a disclaimer: I'm somewhat new to programming. Go easy on me :) 
 Answers (Total-6): #0 You're testing every number between 1 and the limit (let's say 30000) against every abundant number, so you're doing roughly 30000 * 7428 iterations; and you're checking if the result is in a list, which is a very slow operation -- it checks every item on the list until it finds a match! 

 Instead, you should generate every number that is a sum of two abundant numbers. At the most, that would take 7428 * 7428 iterations -- fewer if properly executed (hint: avoid checking both a + b and b + a by ensuring that b is always >= a; and as someone else suggested, be sure to stop when sums get too large). Mark those numbers off a list of numbers below limit and sum the remaining numbers. 

 In other words: 

 [... 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43 ...]
 

 becomes 

 [... 31, 0, 33, 34, 35, 0, 37, 0, 39, 0, 41, 0, 43 ...]
 

 

 Edit: After playing with implementations for a few minutes, I can confidently say that if i - x in Abundant[:i]: is the problem. The first python solution posted to Project Euler's p23 forum is essentially a clever implementation of your algorithm, the only major difference being that it uses a set of abundant numbers instead of a list. It solves the problem on an Atom processor in 15 seconds; when I changed it to use a list, after fifteen minutes, it still hadn't solved the problem. 

 Moral of the story: x in list is SLOW. 

 Still, generating the sums directly is faster than subtracting and checking. :) 
 #1  for x in Abundant:
  if i - x in Abundant[:i]:
   AbSum = 1
   break
 

 Note that the in expression here takes O(i) time, and thus the loop is O(nÂ²). You can improve this to O(n) if you use a set instead of a list . 
 #2 Let's start by searching a little bit, and find out the largest number not expressible as the sum of two abundant numbers is actually 20161. Then, we can solve the problem with a simple set membership test. Plus, it runs pretty fast. :-) 

 #!/usr/bin/env python
# -*- coding: utf-8 -*-
from math import sqrt

def d(n):
 sum = 1
 t = sqrt(n)
 # only proper divisors; start from 2.
 for i in range(2, int(t)+1):
  if n % i == 0:
   sum += i + n / i
 # don't count the square root twice!
 if t == int(t):
  sum -= t
 return sum

limit = 20162
sum = 0
# it's a set, after all. sets are faster than lists for our needs.
abn = set()
for n in range(1, limit):
 if d(n) &gt; n:
  abn.add(n)
 # if the difference of the number we're examining and every number in the set
 # is in the set, then the number is the sum of two abundant numbers.
 # otherwise, we must add it to our sum in question.
 if not any( (n-a in abn) for a in abn ):
  sum += n
 

 Runs in 0.6463340939061518 seconds on average on an i5, based on timeit . 
 #3 One thing that would help is bailing out of your inner loop once the abundant numbers go larger than the one you're testing. 

 I also don't understand this bit of your code: 

 for q in range(len(Divisors)):
 if Divisors[q] != (Number / Divisors[q]):
  Divisors.append(Number / Divisors[q])
 

 Once you have verified that the modulo is 0, it's a divisor. I don't know why you're doing an identity check essentially. 
 #4 Your code looks like it might benefit from map, filter or list comprehension in favour of those for loops. 
 #5 You can use a simple mathematical trick: The sum of all numbers that can not be written as a sum of two abundant numbers is the sum of all numbers minus the numbers that can be written as a sum of two abundant numbers: 

 solution = sum(range(limit)) - sum(all_two_sums(abundant_numbers))
 

 ( sum(range(limit)) can also be simplified with math, but you might not find it unless you're Gauss ;-)) 

 You already have a list of abundant numbers, so it's relatively easy to create the set of numbers that can be written as the sum of two abundant numbers and where the sum is smaller than the limit. Just make sure you have no duplicate numbers, a Python set does that.