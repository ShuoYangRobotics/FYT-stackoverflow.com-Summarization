Question (ID-923111): Creating lists of lists in a pythonic way I'm using a list of lists to store a matrix in python. I tried to initialise a 2x3 Zero matrix as follows. 

 mat=[[0]*2]*3
 

 However, when I change the value of one of the items in the matrix, it changes the value of that entry in every row, since the id of each row in mat is the same. For example, after assigning 

 mat[0][0]=1
 

 mat is [[1, 0], [1, 0], [1, 0]] . 

 I know I can create the Zero matrix using a loop as follows, 

 mat=[[0]*2]
for i in range(1,3):
mat.append([0]*2)
 

 but can anyone show me a more pythonic way? 
 Answers (Total-8): #0 Use a list comprehension : 

 &gt;&gt;&gt; mat = [[0]*2 for x in xrange(3)]
&gt;&gt;&gt; mat[0][0] = 1
&gt;&gt;&gt; mat
[[1, 0], [0, 0], [0, 0]]
 

 Or, as a function: 

 def matrix(rows, cols):
 return [[0]*cols for x in xrange(rows)]
 
 #1 Try this: 

 &gt;&gt;&gt; cols = 6
&gt;&gt;&gt; rows = 3
&gt;&gt;&gt; a = [[0]*cols for _ in [0]*rows]
&gt;&gt;&gt; a
[[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]]
&gt;&gt;&gt; a[0][3] = 2
&gt;&gt;&gt; a
[[0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]]
 

 This is also discussed in this answer : 

 &gt;&gt;&gt; lst_2d = [[0] * 3 for i in xrange(3)]
&gt;&gt;&gt; lst_2d
[[0, 0, 0], [0, 0, 0], [0, 0, 0]]
&gt;&gt;&gt; lst_2d[0][0] = 5
&gt;&gt;&gt; lst_2d
[[5, 0, 0], [0, 0, 0], [0, 0, 0]]
 
 #2 I use 

 mat = [[0 for col in range(3)] for row in range(2)]
 

 although depending on what you do with the matrix after you create it, you might take a look at using a NumPy array. 
 #3 This one is faster than the accepted answer! 
Using xrange(rows) instead of [0]*rows makes no difference. 

 &gt;&gt;&gt; from itertools import repeat
&gt;&gt;&gt; rows,cols = 3,6
&gt;&gt;&gt; a=[x[:] for x in repeat([0]*cols,rows)]
 

 A variation that doesn't use itertools and runs around the same speed 

 &gt;&gt;&gt; a=[x[:] for x in [[0]*cols]*rows]
 

 From ipython: 

 In [1]: from itertools import repeat

In [2]: rows=cols=10

In [3]: timeit a = [[0]*cols for _ in [0]*rows]
10000 loops, best of 3: 17.8 us per loop

In [4]: timeit a=[x[:] for x in repeat([0]*cols,rows)]
100000 loops, best of 3: 12.7 us per loop

In [5]: rows=cols=100

In [6]: timeit a = [[0]*cols for _ in [0]*rows]
1000 loops, best of 3: 368 us per loop

In [7]: timeit a=[x[:] for x in repeat([0]*cols,rows)]
1000 loops, best of 3: 311 us per loop
 
 #4 This will work 

 col = 2
row = 3
[[0] * col for row in xrange(row)]
 
 #5 What about: 

 m, n = 2, 3
&gt;&gt;&gt; A = [[0]*m for _ in range(n)]
&gt;&gt;&gt; A
[[0, 0], [0, 0], [0, 0]]
&gt;&gt;&gt; A[0][0] = 1
[[1, 0], [0, 0], [0, 0]]
 

 Aka List comprehension; from the docs : 

 List comprehensions provide a concise way to create lists 
without resorting to use of  
map(), filter() and/or lambda. 
The resulting list definition tends often to be clearer 
than lists built using those constructs.
 
 #6 See also this question for generalization to an n-levels nested list / n-dimensional matrix. 
 #7 Is there anything itertools can't do? :) 

 &gt;&gt;&gt; from itertools import repeat,izip
&gt;&gt;&gt; rows=3
&gt;&gt;&gt; cols=6
&gt;&gt;&gt; A=map(list,izip(*[repeat(0,rows*cols)]*cols))
&gt;&gt;&gt; A
[[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]]
&gt;&gt;&gt; A[0][3] = 2
&gt;&gt;&gt; A
[[0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]]