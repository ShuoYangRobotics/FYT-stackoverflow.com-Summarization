Question (ID-2186525): Use a Glob() to find files recursively in Python? This is what I have: 

 Glob(os.path.join('src','*.c'))
 

 but I want to search the subfolders of src. Something like this would work: 

 Glob(os.path.join('src','*.c'))
Glob(os.path.join('src','*','*.c'))
Glob(os.path.join('src','*','*','*.c'))
Glob(os.path.join('src','*','*','*','*.c'))
 

 But this is obviously limited and clunky. 
 Answers (Total-7): #0 Use os.walk to recursively walk a directory and fnmatch.filter to match against a simple expression: 

 import fnmatch
import os

matches = []
for root, dirnames, filenames in os.walk('src'):
 for filename in fnmatch.filter(filenames, '*.c'):
  matches.append(os.path.join(root, filename))
 

 For Python versions older than 2.2, use glob.glob against each filename instead of fnmatch.filter . 
 #1 Similar to other solutions, but using fnmatch.fnmatch instead of glob, since os.walk already listed the filenames: 

 import os, fnmatch


def find_files(directory, pattern):
 for root, dirs, files in os.walk(directory):
  for basename in files:
   if fnmatch.fnmatch(basename, pattern):
    filename = os.path.join(root, basename)
    yield filename


for filename in find_files('src', '*.c'):
 print 'Found C source:', filename
 

 Also, using a generator alows you to process each file as it is found, instead of finding all the files and then processing them. 
 #2 You'll want to use os.walk to collect filenames that match your criteria. For example: 

 import os
cfiles = []
for root, dirs, files in os.walk('src'):
 for file in files:
 if file.endswith('.c'):
  cfiles.append(os.path.join(root, file))
 
 #3 import os, fnmatch

def recursive_glob(treeroot, pattern):
 results = []
 for base, dirs, files in os.walk(treeroot):
 goodfiles = fnmatch.filter(files, pattern)
 results.extend(os.path.join(base, f) for f in goodfiles)
 return results
 

 fnmatch gives you exactly the same patterns as glob , so this is really an excellent replacement for glob.glob with very close semantics. An iterative version (e.g. a generator), IOW a replacement for glob.iglob , is a trivial adaptation (just yield the intermediate results as you go, instead of extend ing a single results list to return at the end). 
 #4 I've modified the glob module to support ** for recursive globbing: 

 https://github.com/miracle2k/python-glob2/ 

 Useful when you want to provide your users with the ability to use the ** syntax, and thus os.walk() alone is not good enough. 
 #5 Here's a solution with nested list comprehensions, os.walk and simple suffix matching instead of glob : 

 import os
cfiles = [os.path.join(root, filename)
   for root, dirnames, filenames in os.walk('src')
   for filename in filenames if filename.endswith('.c')]
 

 It can be compressed to a one-liner: 

 import os;cfiles=[os.path.join(r,f) for r,d,fs in os.walk('src') for f in fs if f.endswith('.c')]
 

 or generalized as a function: 

 import os

def recursive_glob(rootdir='.', suffix=''):
 return [os.path.join(rootdir, filename)
   for rootdir, dirnames, filenames in os.walk(rootdir)
   for filename in filenames if filename.endswith(suffix)]

cfiles = recursive_glob('src', '.c')
 

 If you do need full glob style patterns, you can follow Alex's and
Bruno's example and use fnmatch : 

 import fnmatch
import os

def recursive_glob(rootdir='.', pattern='*'):
 return [os.path.join(rootdir, filename)
   for rootdir, dirnames, filenames in os.walk(rootdir)
   for filename in filenames
   if fnmatch.fnmatch(filename, pattern)]

cfiles = recursive_glob('src', '.c')
 
 #6 Another way to do it using just the glob module. Just seed the rglob method with a starting base directory and a pattern to match and it will return a list of matching file names. 

 import glob
import os

def _getDirs(base):
 return [x for x in glob.iglob(os.path.join( base, '*')) if os.path.isdir(x) ]

def rglob(base, pattern):
 list = []
 list.extend(glob.glob(os.path.join(base,pattern)))
 dirs = _getDirs(base)
 if len(dirs):
  for d in dirs:
   list.extend(rglob(os.path.join(base,d), pattern))
 return list