Question (ID-4942305): Why don't scripting languages output Unicode to the Windows console? The Windows console has been Unicode aware for at least a decade and perhaps as far back as Windows NT. However for some reason the major cross-platform scripting languages including Perl and Python only ever output various 8-bit encodings, requiring much trouble to work around. Perl gives a "wide character in print" warning, Python gives a charmap error and quits. Why on earth after all these years do they not just simply call the Win32 -W APIs that output UTF-16 Unicode instead of forcing everything through the ANSI/codepage bottleneck? 

 Is it just that cross-platform performance is low priority? Is it that the languages use UTF-8 internally and find it too much bother to output UTF-16? Or are the -W APIs inherently broken to such a degree that they can't be used as-is? 

 UPDATE 

 It seems that the blame may need to be shared by all parties. I imagined that the scripting languages could just call wprintf on Windows and let the OS/runtime worry about things such as redirection. But it turns out that even wprintf on Windows converts wide characters to ANSI and back before printing to the console ! 

 Please let me know if this has been fixed since the bug report link seems broken but my Visual C test code still fails for wprintf and succeeds for WriteConsoleW. 

 UPDATE 2 

 Actually you can print UTF-16 to the console from C using wprintf but only if you first do _setmode(_fileno(stdout), _O_U16TEXT) . 

 From C you can print UTF-8 to a console whose codepage is set to codepage 65001, however Perl, Python, PHP and Ruby all have bugs which prevent this. Perl and PHP corrupt the output by adding additional blank lines following lines which contain at least one wide character. Ruby has slightly different corrupt output. Python crashes. 
 Answers (Total-8): #0 The main problem seems to be that it is not possible to use Unicode on Windows using only the standard C library and no platform-dependent or third-party extensions. The languages you mentioned originate from Unix platforms, whose method of implementing Unicode blends well with C (they use normal char* strings, the C locale functions, and UTF-8). If you want to do Unicode in C, you more or less have to write everything twice: once using nonstandard Microsoft extensions, and once using the standard C API functions for all other operating systems. While this can be done, it usually doesn't have high priority because it's cumbersome and most scripting language developers either hate or ignore Windows anyway. 

 At a more technical level, I think the basic assumption that most standard library designers make is that all I/O streams are inherently byte-based on the OS level, which is true for files on all operating systems, and for all streams on Unix-like systems, with the Windows console being the only exception. Thus the architecture many class libraries and programming language standard have to be modified to a great extent if one wants to incorporate Windows console I/O. 

 Another more subjective point is that Microsoft just did not enough to promote the use of Unicode. The first Windows OS with decent (for its time) Unicode support was Windows NT 3.1, released in 1993, long before Linux and OS X grew Unicode support. Still, the transition to Unicode in those OSes has been much more seamless and unproblematic. Microsoft once again listened to the sales people instead of the engineers, and kept the technically obsolete Windows 9x around until 2001; instead of forcing developers to use a clean Unicode interface, they still ship the broken and now-unnecessary 8-bit API interface, and invite programmers to use it (look at a few of the recent Windows API questions on Stack Overflow, most newbies still use the horrible legacy API!). 

 When Unicode came out, many people realized it was useful. Unicode started as a pure 16-bit encoding, so it was natural to use 16-bit code units. Microsoft then apparently said "OK, we have this 16-bit encoding, so we have to create a 16-bit API", not realizing that nobody would use it. The Unix luminaries, however, thought "how can we integrate this into the current system in an efficient and backward-compatible way so that people will actually use it?" and subsequently invented UTF-8, which is a brilliant piece of engineering. Just as when Unix was created, the Unix people thought a bit more, needed a bit longer, has less financially success, but did it eventually right. 

 I cannot comment on Perl (but I think that there are more Windows haters in the Perl community than in the Python community), but regarding Python I know that the BDFL (who doesn't like Windows as well) has stated that adequate Unicode support on all platforms is a major goal. 
 #1 Small contribution to the discussion - I am running Czech localized Windows XP, which almost everywhere uses CP1250 code page. Funny thing with console is though that it still uses legacy DOS 852 code page. 

 I was able to make very simple perl script that prints utf8 encoded data to console using: 

 binmode STDOUT, ":utf8:encoding(cp852)";
 

 Tried various options (including utf16le), but only above settings printed accented Czech characters correctly. 

 Edit: I played a little more with the problem and found Win32::Unicode . The module exports function printW that works properly both in output and redirected: 

 use utf8;
use Win32::Unicode;

binmode STDOUT, ":utf8";
printW "Příliš žluťoučký kůň úpěl ďábelské ódy";
 
 #2 I have to unask many of your questions. 

 Did you know that 

 
 Windows uses UTF-16 for its APIs, but still defaults to the various "fun" legacy encodings (e.g. Windows-1252, Windows-1251) in userspace, including file names, differently for the many localisations of Windows? 
 you need to encode output, and picking the appropriate encoding for the system is achieved by the locale pragma , and that there is the a POSIX standard called locale on which this is built, and Windows is incompatible with it? 
 Perl already supported the so-called "wide" APIs once? 
 Microsoft managed to adapt UTF-8 into their codepage system of character encoding, and you can switch your terminal by issuing the appropriate chcp 65001 command? 
 
 #3 Are you sure your script would output Unicode on some other platform correctly? "wide character in print" warning makes me very suspicious. 

 I recommend to look over this overview 
 #4 Michael Kaplan has series of blog posts about the cmd console and Unicode that may be informative (while not really answering your question): 

 
 Conventional wisdom is retarded, aka What the @#%&amp;* is _O_U16TEXT? 
 Anyone who says the console can't do Unicode isn't as smart as they think they are 
 A confluence of circumstances leaves a stone unturned... 
 
 #5 
 Why on earth after all these years do
 they not just simply call the Win32 -W
 APIs that output UTF-16 Unicode
 instead of forcing everything through
 the ANSI/codepage bottleneck? 
 

 Because Perl and Python aren't Windows programs. They're Unix programs that happen to have been mostly ported to Windows. As such, they don't like to call Win32 functions unless necessary. For byte-based I/O, it's not necessary; this can be done with the Standard C Libary. UTF-16-based I/O is a special case. 

 
 Or are the -W APIs inherently broken
 to such a degree that they can't be
 used as-is? 
 

 I wouldn't say that the -W APIs are inherently broken as much as I'd say that Microsoft's approach to Unicode in C(++) is inherently broken. 

 No matter how much certain Windows developers insist that programs should use wchar_t instead of char , there are just too many barriers to switching: 

 
 Platform dependence:
 
 The use of UTF-16 wchar_t on Windows and UTF-32 wchar_t elsewhere. (The new char16_t and char32_t types may help.) 
 The non-standardness of UTF-16 filename functions like _wfopen , _wstat , etc. limits the ability to use wchar_t in cross-platform code. 
 
 Education. Everbody learns C with printf("Hello, world!\n"); , not wprintf(L"Hello, world!\n"); . The C textbook I used in college never even mentioned wide characters until Appendix A.13. 
 The existing zillions of lines of code that use char* strings. 
 
 #6 For Perl to fully support Windows in this way, every call to print printf say warn and die has to be modified. 

 
 Is this Windows? 
 Which version of Windows?
 Perl still mostly works on Windows 95 
 Is this going to the console, or somewhere else. 
 

 Once you have that determined, you then have to use a completely different set of API functions. 

 If you really want to see everything involved in doing this properly, have a look at the source of Win32::Unicode::Console . 

 

 On Linux, OpenBSD, FreeBSD and similar OS's you can usually just call binmode on the STDOUT and STDERR file handles. 

 binmode STDOUT, ':utf8';
binmode STDERR, ':utf8';
 

 This assumes that the terminal is using the UTF-8 encoding. 
 #7 Unicode issues in Perl 

 covers how the Win32 console works with Perl and the transcoding that happens behind the scene from ANSI to Unicode;albeit not just a Perl issue but affects other languages