Question (ID-1815528): Why can't I sort this list? statlist = [('abc',5,1), ('bzs',66,1), ... ]
sorted(statlist, key=lambda x: int(x[1]))
 

 I want to sort it by the integer largest to smallest. In this case, 5 and 66. But it doesn't seem to be working. 
 Answers (Total-7): #0 The sorted function returns a new list so you will need to assign the results of the function like this: 

 new_list = sorted(statlist, key=lambda x: int(x[1]))
 
 #1 Use the .sort method for in place sorting: 

 statlist = [('abc',5,1), ('bzs',66,1), ... ]
statlist.sort(key=lambda x: int(x[1]))
 

 If you do want to use sorted , then reassign the variable: 

 statlist = [('abc',5,1), ('bzs',66,1), ... ]
statlist = sorted(statlist, key=lambda x: int(x[1]))
 

 For descending sort, use reverse : 

 statlist = [('abc',5,1), ('bzs',66,1), ... ]
statlist = sorted(statlist, key=lambda x: int(x[1]), reverse=True)
 

 Then, you'd better use itemgetter instead of a lambda : 

 import operator
statlist = [('abc',5,1), ('bzs',66,1), ... ]
statlist = sorted(statlist, key=operator.itemgetter(1), reverse=True)
 
 #2 You can pass, key, and reverse to .sort function 

 &gt;&gt;&gt; x.sort(key=lambda x:x[1],reverse=True)
&gt;&gt;&gt; x
[('bzs', 66, 1), ('abc', 5, 1)]
&gt;&gt;&gt;
 
 #3 for inplace sorting use 

 statlist.sort(key=lambda x: x[1])
 

 for creating other list, with sorted data use 

 otherlist = sorted( statlist, key=lambda x: x[1] )
 
 #4 from operator import itemgetter
statlist = [('abc',5,1), ('bzs',66,1), ... ]

# statlist.sort modifiest the statlist, sorted returns a new one
# reverse puts the largest items to the front
statlist.sort(key=itemgetter(1), reverse=True)
 
 #5 In response to alex's comment that he thought that sorted() worked "like the sort function": 

 If it worked "like the sort function", it is unlikely to have been put in the library. 

 In any case, there is no sort function ... you refer to the sort method of list objects. 

 Simple demonstration using the interactive interpreter: 

 &gt;&gt;&gt; alist = [3, 2, 1]; x = alist.sort(); print x; print alist
None
[1, 2, 3]
&gt;&gt;&gt; alist = [3, 2, 1]; x = sorted(alist); print x; print alist
[1, 2, 3]
[3, 2, 1]
 

 Here's a tip: look for patterns and similarities, but always verify your intuitive extrapolations. You might like to apply those ideas to reverse and reversed . 
 #6 &gt;&gt;&gt; s = [('xyz', 8, 1), ('abc',5,1), ('bzs',66,1) ]
&gt;&gt;&gt; s = sorted(s, key=lambda x: int(x[1]))
&gt;&gt;&gt; s.reverse()
&gt;&gt;&gt; print s
[('bzs', 66, 1), ('xyz', 8, 1), ('abc', 5, 1)]