Question (ID-8582741): Why do Python's math.ceil() and math.floor() operations return floats instead of integers? Can someone explain this (straight from the docs - emphasis mine): 

 
 math.ceil(x) Return the ceiling of x as a float , the smallest integer value greater than or equal to x. 
 
 math.floor(x) Return the floor of x as a float , the largest integer value less than or equal to x. 
 

 Why would .ceil and .floor return floats when they are by definition supposed to calculate integers? 

 

 EDIT: 

 Well this got some very good arguments as to why they should return floats, and I was just getting used to the idea, when @jcollado pointed out that they in fact do return ints in Python 3... 
 Answers (Total-8): #0 As pointed out by other answers, in python they return floats probably because of historical reasons to prevent overflow problems. However, they return integers in python 3. 

 &gt;&gt;&gt; import math
&gt;&gt;&gt; type(math.floor(3.1))
&lt;class 'int'&gt;
&gt;&gt;&gt; type(math.ceil(3.1))
&lt;class 'int'&gt;
 

 You can find more information in PEP 3141 . 
 #1 The range of floating point numbers usually exceeds the range of integers. By returning a floating point value, the functions can return a sensible value for input values that lie outside the representable range of integers. 

 Consider: If floor() returned an integer, what should floor(1.0e30) return? 

 Now, while Python's integers are now arbitrary precision, it wasn't always this way. The standard library functions are thin wrappers around the equivalent C library functions. 
 #2 Because python's math library is a thin wrapper around the C math library which returns floats. 
 #3 Because the range for floats is greater than that of integers -- returning an integer could overflow 
 #4 Before Python 2.4, an integer couldn't hold the full range of truncated real numbers. 

 http://docs.python.org/whatsnew/2.4.html#pep-237-unifying-long-integers-and-integers 
 #5 The source of your confusion is evident in your comment: 

 
 
  the whole point of ceil/floor operations is to convert floats to integers! 
 
 

 The point of the ceil and floor operations is to round floating-point data to integral values . Not to do a type conversion. Users who need to get integer values can do an explicit conversion following the operation. 

 Note that it would not be possible to implement a round to integral value as trivially if all you had available were a ceil or float operation that returned an integer. You would need to first check that the input is within the representable integer range, then call the function; you would need to handle NaN and infinities in a separate code path. 

 Additionally, you must have versions of ceil and floor which return floating-point numbers if you want to conform to IEEE-754. 
 #6 Maybe because other languages do this as well, so it is generally-accepted behavior. (For good reasons, as shown in the other answers) 
 #7 There is really no sane way to make such a function that returns a standard integer type. Clearly the input has to be a float. And the range of floats vastly exceeds the range of integers. So returning a float is the standard .