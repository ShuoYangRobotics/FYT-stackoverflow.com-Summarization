Question (ID-5434891): Iterate a list as pair (current, next) in Python I sometimes need to iterate a list in python looking at the "current" element and the "next" element. I have, till now, done so with code like: 

 for current, next in zip(the_list, the_list[1:]):
 # do something
 

 This works and does what I expect -- just wondering if there's a more idiomatic or efficient way to do the same thing. 
 Answers (Total-6): #0 Here's a relevant example from the itertools module docs: 

 def pairwise(iterable):
 "s -&gt; (s0,s1), (s1,s2), (s2, s3), ..."
 a, b = tee(iterable)
 next(b, None)
 return izip(a, b)
 

 How this works: 

 First, two parallel iterators, a and b are created (the tee() call), both pointing to the first element of the original iterable. The second iterator, b is moved 1 step forward (the next(b, None) ) call). At this point a points to s0 and b points to s1. Both a and b can traverse the original iterator independently - the izip function takes the two iterators and makes pairs of the returned elements, advancing both iterators at the same pace. 

 One caveat: the tee() function produces two iterators that can advance independently of each other, but it comes at a cost. If one of the iterators advances further than the other, then tee() needs to keep the consumed elements in memory until the second iterator comsumes them too (it cannot 'rewind' the original iterator). Here it doesn't matter because one iterator is only 1 step ahead of the other, but in general it's easy to use a lot of memory this way. 
 #1 Since the_list[1:] actually creates a copy of the whole list (excluding its first element), and zip() creates a list of tuples immediately when called, in total three copies of your list are created. If your list is very large, you might prefer 

 from itertools import izip, islice
for current, next in izip(the_list, islice(the_list, 1, None)):
 # whatever
 

 which does not copy the list at all. 
 #2 This should do the same thing: 

 #!/usr/bin/python
the_list = [1,2,3,4]
for i in range(1, len(the_list)):
 current, next = the_list[i-1], the_list[i]
 print current, next
 
 #3 Check MizardX answer for this question . But i don't think this solution is more idiomatic than yours. 
 #4 A basic solution: 

 def neighbors( list ):
 i = 0
 while i + 1 &lt; len( list ):
 yield ( list[ i ], list[ i + 1 ] )
 i += 1

for ( x, y ) in neighbors( list ):
 print( x, y )
 
 #5 code = '0016364ee0942aa7cc04a8189ef3'
# Getting the current and next item
print [code[idx]+code[idx+1] for idx in range(len(code)-1)]
# Getting the pair
print [code[idx*2]+code[idx*2+1] for idx in range(len(code)/2)]