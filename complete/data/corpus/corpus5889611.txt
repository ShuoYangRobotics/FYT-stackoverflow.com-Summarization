Question (ID-5889611): One liner to determine if dictionary values are all empty lists or not I have a dict as follows: 

 someDict = {'a':[], 'b':[]}
 

 I want to determine if this dictionary has any values which are not empty lists. If so, I want to return True. If not, I want to return False. Any way to make this a one liner? 
 Answers (Total-6): #0 &gt;&gt;&gt; someDict = {'a':[], 'b':[]} 
&gt;&gt;&gt; all(map(lambda x: x == [], someDict.values()))
True
 
 #1 Per my testing, the following one-liner (my original answer) has best time performance in all scenarios. See edits below for testing information. I do acknowledge that solutions using generator expressions will be much more memory efficient and should be preferred for large dicts. 

 bool([a for a in my_dict.values() if a != []])
 

 Edit: 

 Decided to have some fun. A comparison of answers, not in any particular order: 

 (As used below, timeit will calculate a loop order of magnitude based on what will take less than 0.2 seconds to run) 

 bool([a for a in my_dict.values() if a != []]) : 

 python -mtimeit -s"my_dict={'a':[],'b':[]}" "bool([a for a in my_dict.values() if a != []])"
1000000 loops, best of 3: 0.875 usec per loop
 

 any([my_dict[i] != [] for i in my_dict]) : 

 python -mtimeit -s"my_dict={'a':[],'b':[]}" "any([my_dict[i] != [] for i in my_dict])"
1000000 loops, best of 3: 0.821 usec per loop
 

 any(x != [] for x in my_dict.itervalues()): 

 python -mtimeit -s"my_dict={'a':[],'b':[]}" "any(x != [] for x in my_dict.itervalues())"
1000000 loops, best of 3: 1.03 usec per loop
 

 all(map(lambda x: x == [], my_dict.values())): 

 python -mtimeit -s"my_dict={'a':[],'b':[]}" "all(map(lambda x: x == [], my_dict.values()))"
1000000 loops, best of 3: 1.47 usec per loop
 

 filter(lambda x: x != [], my_dict.values()): 

 python -mtimeit -s"my_dict={'a':[],'b':[]}" "filter(lambda x: x != [], my_dict.values())"
1000000 loops, best of 3: 1.19 usec per loop
 

 
Edit again - more fun: 

 any() is best case O(1) (if bool(list[0]) returns True). any()'s worst case is the "positive" scenario - a long list of values for which bool(list[i]) returns False. 

 
Check out what happens when the dict gets big: 

 bool([a for a in my_dict.values() if a != []]) : 

 #n=1000
python -mtimeit -s"my_dict=dict(zip(range(1000),[[]]*1000))" "bool([a for a in my_dict.values() if a != []])"
10000 loops, best of 3: 126 usec per loop

#n=100000
python -mtimeit -s"my_dict=dict(zip(range(100000),[[]]*100000))" "bool([a for a in my_dict.values() if a != []])"
100 loops, best of 3: 14.2 msec per loop
 

 any([my_dict[i] != [] for i in my_dict]): 

 #n=1000
python -mtimeit -s"my_dict=dict(zip(range(1000),[[]]*1000))" "any([my_dict[i] != [] for i in my_dict])"
10000 loops, best of 3: 198 usec per loop

#n=100000
python -mtimeit -s"my_dict=dict(zip(range(100000),[[]]*100000))" "any([my_dict[i] != [] for i in my_dict])"
10 loops, best of 3: 21.1 msec per loop
 

 

 But that's not enough - what about a worst-case 'False' scenario? 

 bool([a for a in my_dict.values() if a != []]) : 

 python -mtimeit -s"my_dict=dict(zip(range(1000),[0]*1000))" "bool([a for a in my_dict.values() if a != []])"
10000 loops, best of 3: 198 usec per loop
 

 any([my_dict[i] != [] for i in my_dict]) : 

 python -mtimeit -s"my_dict=dict(zip(range(1000),[0]*1000))" "any([my_dict[i] != [] for i in my_dict])"
1000 loops, best of 3: 265 usec per loop
 
 #2 Not falsey or not empty lists: 

 Not falsey: 

 any(someDict.values())
 

 Not empty lists: 

 any(a != [] for a in someDict.values())
 

 or 

 any(map(lambda x: x != [], someDict.values()))
 

 Or if you are ok with a falsey return value: 

 filter(lambda x: x != [], someDict.values())
 

 Returns a list of items that are not empty lists, so if they are all empty lists it's an empty list :) 
 #3 try this 

 all([d[i] == [] for i in d])
 

 edit: oops, i think i got you backwards. lets deMorgan that 

 any([d[i] != [] for i in d])
 

 this second way has the short-circuit advantage on the first anyhow 
 #4 Quite literally: 

 any(x != [] for x in someDict.itervalues())
 
 #5 len(filter(lambda x: x!=[], someDict.values())) != 0