Question (ID-7781792): Selenium waitForElement How do I write the function for Selenium to wait for a table with just a class identifier in Python? I'm having a devil of a time learning to use Selenium's Python webdriver functions. 
 Answers (Total-6): #0 I have made good experiences using: 

 
 time.sleep(seconds) 
 webdriver.Firefox.implicitly_wait(seconds) 
 

 The first one is pretty obvious - just wait a few seconds for some stuff. 

 For all my Selenium Scripts the sleep() with a few seconds (range from 1 to 3) works when I run them on my laptop, but on my Server the time to wait has a wider range, so I use implicitly_wait() too. I usually use implicitly_wait(30), which is really enough. 

 
 An implicit wait is to tell WebDriver to poll the DOM for a certain amount of time when trying to find an element or elements if they are not immediately available. The default setting is 0. Once set, the implicit wait is set for the life of the WebDriver object instance. 
 
 #1 in C#: 

 public WebDriverWait _wait;
_wait.Until(d =&gt; d.FindElement(By.XPath("//XPath to the first cell of your table")));
 

 Or use something else instead XPath. 

 See also 
 #2 Use Wait Until Page Contains Element with the proper XPath locator. For example, given the following HTML: 

 &lt;body&gt;
 &lt;div id="myDiv"&gt;
 &lt;table class="myTable"&gt;
  &lt;!-- implementation --&gt;
 &lt;/table&gt;
 &lt;/div&gt;
&lt;/body&gt;
 

 ... you can enter the following keyword: 

 Wait Until Page Contains Element //table[@class='myTable'] 5 seconds
 

 Unless I missed something, there is no need to create a new function for this. 
 #3 In case this helps ... 

 In the Selenium IDE, I added ...
 Command: waitForElementPresent
 Target: //table[@class='pln'] 

 Then I did File>Export TestCase As Python2(Web Driver), and it gave me this ... 

 def test_sel(self):
 driver = self.driver
 for i in range(60):
  try:
   if self.is_element_present(By.XPATH, "//table[@class='pln']"): break
  except: pass
  time.sleep(1)
 else: self.fail("time out")
 
 #4 I implemented the following for python for wait_for_condition since the python selenium driver does not support this function. 

 def wait_for_condition(c):
for x in range(1,10):
 print "Waiting for ajax: " + c
 x = browser.execute_script("return " + c)
 if(x):
  return
 time.sleep(1)
 

 to be used as 

 Wait that an ExtJS Ajax call is not pending: 

 wait_for_condition("!Ext.Ajax.isLoading()")
 

 A Javascript variable is set 

 wait_for_condition("CG.discovery != undefined;")
 

 etc. 
 #5 From the Selenium Documentation PDF : 

 import contextlib
import selenium.webdriver as webdriver
import selenium.webdriver.support.ui as ui

with contextlib.closing(webdriver.Firefox()) as driver:
 driver.get('http://www.google.com')
 wait = ui.WebDriverWait(driver,10)
 # Do not call `implicitly_wait` if using `WebDriverWait`.
 #  It magnifies the timeout.
 # driver.implicitly_wait(10) 
 inputElement=driver.find_element_by_name('q')
 inputElement.send_keys('Cheese!')
 inputElement.submit()
 print(driver.title)

 wait.until(lambda driver: driver.title.lower().startswith('cheese!'))
 print(driver.title)

 # This raises
 #  selenium.common.exceptions.TimeoutException: Message: None
 #  after 10 seconds
 wait.until(lambda driver: driver.find_element_by_id('someId'))
 print(driver.title)