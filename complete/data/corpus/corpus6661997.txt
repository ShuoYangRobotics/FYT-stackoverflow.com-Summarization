Question (ID-6661997): c style loop for in python I need c style loop for: 

 for( int i = 0; i &lt; n; i++ )
 

 There's equivalent i've found, but when iterating with big number of iterations, it consumes a lot of memory. 

 for i in range( 0, n ):
 

 Is there any other equivalent? 
 Answers (Total-6): #0 You can use xrange instead of range, which uses a generator instead of building a whole list. 
 #1 Use xrange 

 for i in xrange(n):
 

 which returns an iterator rather than a list. Or upgrade to Python 3, where range gets the semantics of xrange . 
 #2 Use xrange instead of range to prevent the list from being constructed upfront. That will reduce your memory cost. 

 Either that or use a while loop with a counter and break when it reaches n . 

 Usually, I've found that using a C style loop while coding in Python is a hidden stylistic problem. What exactly are you trying to do? 
 #3 xrange will consume less memory than range .
The difference is that range stores all the range values in a list, while xrange just yields value one by one. 

 http://docs.python.org/library/functions.html#xrange 
 #4 If n is not known at the start of the loop, you can iterate over count from itertools. 

 from itertools import count

for i in count():
 if some_condition(i):
  break
 do_stuff()
 

 The count iterator takes optional start and step arguments. I think the above is more pythonic than the usual way of doing it, which is 

 i = 0
while not some_condition(i):
 do_stuff()
 i += 1
 

 The i = 0 setup bothers me with this approach, and as the contents of the while block grows more complex with added break and continue statements, making sure the i variable gets incremented becomes a tedious and error-prone task. This rearrangement solves the last problem: 

 i = -1
while True:
 i += 1
 if some_condition(i):
  break
 do_stuff()
 

 But it's still messy and inelegant compared to using count . 
 #5 In older Pythons, use xrange() instead of range() , it doesn't create an actual (in-memory) list.