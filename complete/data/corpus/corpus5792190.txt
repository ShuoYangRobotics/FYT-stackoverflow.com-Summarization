Question (ID-5792190): Python: Element order in dictionary Here is my Django code that does not work as expected: 

 posts = Post.objects.all().order_by('-added')[:20] # ordered by 'added'
post_list = dict([(obj.id, obj) for obj in posts])

# ... some operations with dictionary elements go here ...

posts_to_return = [post for post_id, post in post_list.items()] # order by 'id' now!
 

 Is there a way to keep the original element order, so the posts would be ordered by added in posts_to_return ? 

 Thank you! 

 EDIT: Python 2.6, Django 1.3 
 Answers (Total-6): #0 Use SortedDict instead of dict ( from django.utils.datastructures import SortedDict ) 

 SortedDict maintains it's order in it's keyOrder attribute. So you can manipulate the ordering without reconstructing dict if you want to. For example, to reverse the SortedDict's order just use keyOrder.reverse() 

 post_list = SortedDict([(obj.id, obj) for obj in posts])
# reversing the post order in-place
post_list.keyOrder.reverse()
 
 #1 Dicts in python (and most languages) have no order. You should instead use collections.OrderedDict . This will retain the order of items as they are added. You can also look at the sorted() builtin if the order of addition isn't the order you're trying to preserve. 
 #2 As you are using Django you could use SortedDict ( docs ) 
 #3 Because no one has drawn attention to it yet, I'll simply note that the OrderedDict docs indicate that this recipe is equivalent and works on Python 2.4 and up. So at least you don't have to roll your own. 
 #4 You would need an ordered dictionary, which will be available in Python3.3 as far as I know. So you will probably have to order your result "by hand". Depending on your operations (which you havn't shown) it might be possible to just reuse the original posts list. But without knowing the operations, I can only guess. 
 #5 You can use an OrderedDict instead of a Dict. 

 from collections import OrderedDict
...
post_list = OrderedDict([(obj.id, obj) for obj in posts])