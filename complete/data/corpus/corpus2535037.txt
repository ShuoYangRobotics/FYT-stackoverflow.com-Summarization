Question (ID-2535037): Way to call super(MyClass, self).__init__() without MyClass? I find this syntax astoundingly annoying. Every time I rename my class, I have to change this call for no apparent reason. Isn't there some __class__ magic variable or something I can use at least? Interested in answers for Python 2.5, but it doesn't hurt to know if later versions fixed this. 
 Answers (Total-6): #0 As far as I know, this isn't possible in 2.5. However, in 3.0, this was changed so that you can simply call super().__init__() . 
 #1 This is fixed in Python 3. http://docs.python.org/py3k/library/functions.html#super 

 http://www.python.org/dev/peps/pep-3135/ 
 #2 In Python 3.0, the super() can be called without arguments to do the same thing. 
 #3 I think if your class only inherits from one class it is safe to do just this: 

 class B(A):
 def __init__(self):
  A.__init__(self)
 

 But I could be mistaken. 
 #4 There is some __class__ magic variable. The __class__ magic variable. Try: 

 class foo(OtherClass):
 def __init__(self, *args, **kwargs):
  super(self.__class__, self).__init__(*args, **kwargs)
 
 #5 EDIT 

 As pointed out by Alex, this is wrong where there is more than a single level of inheritence. 

 Yes, "new" style classes have a __class__ attribute available which can be used, eg. 

 class B(object):
 def __init__(self):
  print "B.__init__():"

class D(B):
 def __init__(self):
  print "D.__init__():"
  super(self.__class__, self).__init__()

&gt;&gt;&gt; d = D()
D.__init__():
B.__init__():

&gt;&gt;&gt; dir(d)
['__class__', '__delattr__', '__dict__', '__doc__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__str__', '__weakref__']
&gt;&gt;&gt; d.__class__
&lt;class '__main__.D'&gt;