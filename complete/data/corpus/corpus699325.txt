Question (ID-699325): Suppress output in Python calls to executables I have a binary named A that generates output when called. If I call it from a Bash shell, most of the output is suppressed by A &gt; /dev/null . All of the output is suppressed by A &amp;&gt; /dev/null 

 I have a python script named B that needs to call A . I want to be able to generate output from B , while suppressing all the output from A . 

 From within B , I've tried os.system('A') , os.system('A &gt; /dev/null') , and os.system('A &amp;&gt; /dev/null') , os.execvp('...') , etc. but none of those suppress all the output from A. 

 I could run B &amp;&gt; /dev/null , but that suppresses all of B 's output too and I don't want that. 

 Anyone have suggestions? 
 Answers (Total-8): #0 import os
import subprocess

fnull = open(os.devnull, 'w')
result = subprocess.call('A', shell = True, stdout = fnull, stderr = fnull)
fnull.close()
 
 #1 If your search engine lead you to this old question (like me), be aware that using PIPE may lead to deadlocks .
Indeed, because pipes are buffered, you can write a certain number of bytes in a pipe, even if no one read it. However the size of buffer is finite. And consequently if your program A has an output larger than the buffer, A will be blocked on writing, while the calling program B awaits the termination of A. But not, in this particular case... see comments below. 

 Still, I recommend using Devin Jeanpierre and DNS' solution. 
 #2 As the os.system() docs mention, use the subprocess module, and, if you like, set stdout=open(os.devnull, 'w') (and perhaps the same for stderr) when you open the subprocess. 
 #3 If you have Python 2.4, you can use the subprocess module : 

 &gt;&gt;&gt; import subprocess
&gt;&gt;&gt; s = subprocess.Popen(['cowsay', 'hello'], \
  stderr=subprocess.STDOUT, stdout=subprocess.PIPE).communicate()[0]
&gt;&gt;&gt; print s
 _______ 
&lt; hello &gt;
 ------- 
  \ ^__^
   \ (oo)\_______
   (__)\  )\/\
    ||----w |
    ||  ||
 
 #4 I know it's late to the game, but why not simply redirect output to /dev/null from within os.system? E.g.: 

 tgt_file = "./bogus.txt"
os.sytem("d2u '%s' &amp;&gt; /dev/null" % tgt_file)
 

 This seems to work for those occasions when you don't want to deal with subprocess.STDOUT. 
 #5 I use: 

 call(command, stderr=subprocess.PIPE, stdout=subprocess.PIPE)
 

 where command is the string of the command + arguments 
 #6 If you need to just capture STDOUT, doesn't assigning it to a variable do this? For example: 

 megabyte=''
# Create a 1 MiB string of NULL characters.
for i in range(1048576):
 megabyte += '\0'
fh=open('zero.bin','w')
# Write an 8 GiB file.
for i in range(8192):
 print(i)
 # Suppress output of 'write()' by assigning to a variable.
 discard=fh.write(megabyte)
fh.close()
 

 I was creating a large zero-filled file to zero free space on my hard drive and discovered that each call to handle.write(string) spit out the number of bytes written. Assigning it to a vairable suppressed that output. 
 #7 In Python 3.3 and higher, subprocess supports an option for redirecting to /dev/null . To use it, when calling .Popen and friends, specify stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, as keyword arguments. 

 So DNS's answer, rewritten for Python 3, becomes 

 import subprocess
result = subprocess.call('A', shell=True,
       stdout=subprocess.DEVNULL,
       stderr=subprocess.DEVNULL)
 

 From the documentation: 

 
 subprocess.DEVNULLÂ¶ 
 
 Special value that can be used as the stdin, stdout or stderr
 argument to Popen and indicates that the special file os.devnull will
 be used. 
 
 New in version 3.3.