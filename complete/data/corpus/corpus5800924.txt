Question (ID-5800924): How to get the difference in Localtime and GMT time python? I get the server date and I need to get the difference of this date from GMT 

 I get 

 Datetime = "2011-04-27 2:17:45"
 

 I would like to get the result like 

 Datetime = "2011-04-27 2:17:45 +0500"
 
 Answers (Total-6): #0 Try this: 

 import datetime, pytz
now = datetime.datetime.now(pytz.timezone('Asia/Kolkata'))

print now.strftime('%Y-%m-%d %H:%M:%S %z')

# prints: '2011-04-27 13:56:09 +0530'
 
 #1 From the example you have given, it looks to me that what you are looking for is datetime.isoformat . The example in the page shows how to convert the datetime values to the ISO format with the time zone information. 
 #2 To do this, you have to know the timezone (or the UTC offset) of the server date. What you have here is a "naive" date, without timezone info, you can't guess the UTC difference. 
 #3 I think the datetime module is what you need here: 

 &gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; datetime.now()
datetime.datetime(2011, 4, 27, 11, 8, 26, 149000)
&gt;&gt;&gt; datetime.utcnow()
datetime.datetime(2011, 4, 27, 8, 8, 47, 712000)
 

 For a difference between two dates: 

 &gt;&gt;&gt; dtnow = datetime.now()
&gt;&gt;&gt; dtutc = datetime.utcnow()
&gt;&gt;&gt; dtnow - dtutc
datetime.timedelta(0, 10792, 847000)
 

 Look up the datetime module and the relevant classes in Python's docs. 
 #4 A very powerful extension of the datetime standard python library is the dateutil one, that allows you to easily: 

 
 set the delta of your time zone: 
 parse dates with various convenient options (in our case we will use the default option, which will allow us to set our time zone) 
 

 So 1st set time zone, and default date with this zone: 

 &gt;&gt;&gt; from datetime import datetime 
&gt;&gt;&gt; from dateutil import parser
&gt;&gt;&gt; from dateutil.tz import tzoffset
&gt;&gt;&gt; tz_plus_5 = tzoffset(None, 5 * 60 * 60) # offset is in seconds !
&gt;&gt;&gt; default = datetime.now(tz_plus_5)
 

 Now use this default date in the parsing: 

 &gt;&gt;&gt; Datetime = "2011-04-27 2:17:45"
&gt;&gt;&gt; my_date = parser.parse(Datetime, default=default)
&gt;&gt;&gt; my_date
datetime.datetime(2011, 4, 27, 2, 17, 45, tzinfo=tzoffset(None, 18000))
&gt;&gt;&gt; my_date.strftime("%Y-%m-%d %H:%M:%S %z")
'2011-04-27 02:17:45 +0500'
 
 #5 For those that simply need to get the offset between local time and UTC, the time module has an attribute time.altzone that specifies the difference between UTC and local time in seconds: 

 
 The offset of the local DST timezone, in seconds west of UTC, if one is defined. This is negative if the local DST timezone is east of UTC (as in Western Europe, including the UK). Only use this if daylight is nonzero. 
 

 Here's an example of how it works: 

 &gt;&gt;&gt; datetime.now().isoformat()
'2011-09-01T17:26:46.971000'
&gt;&gt;&gt; datetime.utcnow().isoformat()
'2011-09-01T15:27:32.699000'
&gt;&gt;&gt; time.altzone / (60*60)
-2
 

 Doesn't get much cleaner than that.