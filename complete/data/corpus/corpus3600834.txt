Question (ID-3600834): How to make it shorter (Pythonic)? I have to check a lot of worlds if they are in string... code looks like: 

 if "string_1" in var_string or "string_2" in var_string or "string_3" in var_string or "string_n" in var_string:
 do_something()
 

 how to make it more readable and more clear? 
 Answers (Total-6): #0 This is one way: 

 words = ['string_1', 'string_2', ...]

if any(word in var_string for word in words):
 do_something()
 

 Reference: any() 

 Update: 

 For completeness, if you want to execute the function only if all words are contained in the string, you can use all() instead of any() . 

 Also note that this construct won't do any unnecessary computations as any will return if it encounters a true value and a generator expression is used to create the Boolean values. So you also have some kind of short-circuit evaluation that is normally used when evaluating Boolean expressions. 
 #1 import re
if re.search("string_1|string_2|string_n", var_strings): print True
 

 The beauty of python regex it that it returns either a regex object (that gives informations on what matched) or None, that can be used as a "false" value in a test. 
 #2 With regex that would be: 

 import re
words = ['string_1', 'string_2', ...]

if re.search('|'.join([re.escape(w) for w in words]), var_string):
 blahblah
 
 #3 Have you looked at filter? 

 filter( lambda x: x in var_string, ["myString", "nextString"])
 

 which then can be combined with map to get this 

 map( doSomething(), filter(lambda x: x in var_string, ["myString", "nextString"] ) )
 

 EDIT: 

 of course that doesn't do what you want. Go with the any solution. For some reason I thought you wanted it done every time instead of just once. 
 #4 one more way to achieve this
 check = lambda a: any(y for y in ['string_%s'%x for x in xrange(0,10)] if y in a) 

 print check('hello string_1') 
 #5 &gt;&gt;&gt; import re
&gt;&gt;&gt; string="word1testword2andword3last"
&gt;&gt;&gt; c=re.compile("word1|word2|word3")
&gt;&gt;&gt; c.search(string)
&lt;_sre.SRE_Match object at 0xb7715d40&gt;
&gt;&gt;&gt; string="blahblah"
&gt;&gt;&gt; c.search(string)
&gt;&gt;&gt;