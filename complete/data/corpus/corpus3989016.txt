Question (ID-3989016): How to find positions of the list maximum? I have a list: 

 a = [32, 37, 28, 30, 37, 25, 27, 24, 35, 55, 23, 31, 55, 21, 40, 18, 50,
    35, 41, 49, 37, 19, 40, 41, 31]
 

 max element is 55 (two elements on position 9 and 12) 

 I need to find on which position the maximum elements are situated. Please, help. 
 Answers (Total-6): #0 &gt;&gt;&gt; m = max(a)
&gt;&gt;&gt; [i for i, j in enumerate(a) if j == m]
[9, 12]
 
 #1 a.index(max(a))
 

 will tell you the index of the first instance of the largest valued element of list a . 
 #2 Here is the max value and the indexes it appears at: 

 &gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d = defaultdict(list)
&gt;&gt;&gt; a = [32, 37, 28, 30, 37, 25, 27, 24, 35, 55, 23, 31, 55, 21, 40, 18, 50, 35, 41, 49, 37, 19, 40, 41, 31]
&gt;&gt;&gt; for i, x in enumerate(a):
...  d[x].append(i)
... 
&gt;&gt;&gt; k = max(d.keys())
&gt;&gt;&gt; print k, d[k]
55 [9, 12]
 

 

 Later: for the satisfaction of @SilentGhost 

 &gt;&gt;&gt; from itertools import takewhile
&gt;&gt;&gt; import heapq
&gt;&gt;&gt; 
&gt;&gt;&gt; def popper(heap):
...  while heap:
...   yield heapq.heappop(heap)
... 
&gt;&gt;&gt; a = [32, 37, 28, 30, 37, 25, 27, 24, 35, 55, 23, 31, 55, 21, 40, 18, 50, 35, 41, 49, 37, 19, 40, 41, 31]
&gt;&gt;&gt; h = [(-x, i) for i, x in enumerate(a)]
&gt;&gt;&gt; heapq.heapify(h)
&gt;&gt;&gt; 
&gt;&gt;&gt; largest = heapq.heappop(h)
&gt;&gt;&gt; indexes = [largest[1]] + [x[1] for x in takewhile(lambda large: large[0] == largest[0], popper(h))]
&gt;&gt;&gt; print -largest[0], indexes
55 [9, 12]
 
 #3 The chosen answer (and others) require at least two passes through the list. Here's a one pass solution. 

 Edited: To address the two deficiencies pointed out by @John Machin. For (2) I attempted to optimize the tests based on guesstimated probability of occurrence of each condition and inferences allowed from predecessors. It was a little tricky figuring out the proper initialization value for max_indices which worked for all possible cases, especially if the max happened to be the first value in the list. 

 a = [32, 37, 28, 30, 37, 25, 27, 24, 35, 55, 23, 31, 55, 21, 40, 18, 50,
    35, 41, 49, 37, 19, 40, 41, 31]

def maxelements(seq):
 ''' Return list of position(s) of largest element '''
 max_indices = []
 if len(seq):
  max_val = seq[0]
  for i,val in ((i,val) for i,val in enumerate(seq) if val &gt;= max_val):
   if val == max_val:
    max_indices.append(i)
   else:
    max_val = val
    max_indices = [i]

 return max_indices
 
 #4 I can't reproduce the @SilentGhost-beating performance quoted by @martineau. Here's my effort with comparisons: 

 === maxelements.py === 

 a = [32, 37, 28, 30, 37, 25, 27, 24, 35, 55, 23, 31, 55, 21, 40, 18, 50,
    35, 41, 49, 37, 19, 40, 41, 31]
b = range(10000)
c = range(10000 - 1, -1, -1)
d = b + c

def maxelements_s(seq): # @SilentGhost
 ''' Return list of position(s) of largest element '''
 m = max(seq)
 return [i for i, j in enumerate(seq) if j == m]

def maxelements_m(seq): # @martineau
 ''' Return list of position(s) of largest element '''
 max_indices = []
 if len(seq):
  max_val = seq[0]
  for i, val in ((i, val) for i, val in enumerate(seq) if val &gt;= max_val):
   if val == max_val:
    max_indices.append(i)
   else:
    max_val = val
    max_indices = [i]
 return max_indices

def maxelements_j(seq): # @John Machin
 ''' Return list of position(s) of largest element '''
 if not seq: return []
 max_val = seq[0] if seq[0] &gt;= seq[-1] else seq[-1]
 max_indices = []
 for i, val in enumerate(seq):
  if val &lt; max_val: continue
  if val == max_val:
   max_indices.append(i)
  else:
   max_val = val
   max_indices = [i]
 return max_indices
 

 Results from a beat-up old laptop running Python 2.7 on Windows XP SP3: 

 &gt;\python27\python -mtimeit -s"import maxelements as me" "me.maxelements_s(me.a)"
100000 loops, best of 3: 6.88 usec per loop

&gt;\python27\python -mtimeit -s"import maxelements as me" "me.maxelements_m(me.a)"
100000 loops, best of 3: 11.1 usec per loop

&gt;\python27\python -mtimeit -s"import maxelements as me" "me.maxelements_j(me.a)"
100000 loops, best of 3: 8.51 usec per loop

&gt;\python27\python -mtimeit -s"import maxelements as me;a100=me.a*100" "me.maxelements_s(a100)"
1000 loops, best of 3: 535 usec per loop

&gt;\python27\python -mtimeit -s"import maxelements as me;a100=me.a*100" "me.maxelements_m(a100)"
1000 loops, best of 3: 558 usec per loop

&gt;\python27\python -mtimeit -s"import maxelements as me;a100=me.a*100" "me.maxelements_j(a100)"
1000 loops, best of 3: 489 usec per loop
 
 #5 import operator

def max_positions(iterable, key=None, reverse=False):
 if key is None:
 def key(x):
  return x
 if reverse:
 better = operator.lt
 else:
 better = operator.gt

 it = enumerate(iterable)
 for pos, item in it:
 break
 else:
 raise ValueError("max_positions: empty iterable")
 # note this is the same exception type raised by max([])
 cur_max = key(item)
 cur_pos = [pos]

 for pos, item in it:
 k = key(item)
 if better(k, cur_max):
  cur_max = k
  cur_pos = [pos]
 elif k == cur_max:
  cur_pos.append(pos)

 return cur_max, cur_pos

def min_positions(iterable, key=None, reverse=False):
 return max_positions(iterable, key, not reverse)
 

 

 &gt;&gt;&gt; L = range(10) * 2
&gt;&gt;&gt; L
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; max_positions(L)
(9, [9, 19])
&gt;&gt;&gt; min_positions(L)
(0, [0, 10])
&gt;&gt;&gt; max_positions(L, key=lambda x: x // 2, reverse=True)
(0, [0, 1, 10, 11])