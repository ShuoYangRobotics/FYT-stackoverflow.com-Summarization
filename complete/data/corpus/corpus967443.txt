Question (ID-967443): Python module to shellquote/unshellquote? Is there a python module that will properly parse/unparse strings for using in shell commands? I'm looking for the python analog to perl's String::ShellQuote::shell_quote : 

 $ print String::ShellQuote::shell_quote("hello", "stack", "overflow's", "quite", "cool")
hello stack 'overflow'\''s' quite cool
 

 And, even more importantly, something which will work in the reverse direction (take a string and decompose it into a list). 

 Thanks! 

 /YGA 
 Answers (Total-6): #0 You should never have to shell quote. The correct way to do a command is to not do shell quoting and instead use subprocess.call or subprocess.Popen , and pass a list of unquoted arguments. This is immune to shell expansion. 

 i.e. 

 subprocess.Popen(['echo', '"', '$foo'], shell=False)
 

 If you want to unquote shell quoted data, you can use shlex.shlex like this: 

 list(shlex.shlex("hello stack 'overflow'\''s' quite cool"))
 
 #1 Looks like 

 &gt; ipython

# In [1]: 
import pipes

# In [2]: 
pipes.quote("hello stack overflow's quite cool")
# Out[2]: '"hello stack overflow\'s quite cool"'
 

 gets me far enough. 
 #2 I'm pretty sure that pipes.quote is broken, and should not be used, because it does not handle zero-length arguments correctly: 

 &gt;&gt;&gt; from pipes import quote
&gt;&gt;&gt; args = ['arg1', '', 'arg3']
&gt;&gt;&gt; print 'mycommand %s' % (' '.join(quote(arg) for arg in args))
mycommand arg1 arg3
 

 I believe the result should be something like 

 mycommand arg1 '' arg3
 
 #3 To unquote, try shlex.split() 
 #4 For shell quoting, this works: I've rigorously tested it on Posix. [I'm assuming that the list2cmdline function supplied by Python works as advertised on Windows] 

 # shell.py
import os
if os.name == 'nt':
 from subprocess import list2cmdline

 def quote(arg):
  return list2cmdline([arg])[0]
else:
 import re
 _quote_pos = re.compile('(?=[^-0-9a-zA-Z_./\n])')

 def quote(arg):
  r"""
  &gt;&gt;&gt; quote('\t')
  '\\\t'
  &gt;&gt;&gt; quote('foo bar')
  'foo\\ bar'
  """
  # This is the logic emacs uses
  if arg:
   return _quote_pos.sub('\\\\', arg).replace('\n',"'\n'")
  else:
   return "''"

 def list2cmdline(args):
  return ' '.join([ quote(a) for a in args ])
 

 The tests are here , if anyone cares. 
 #5 The standard library module subprocess has the list2cmdline function which does this, albeit according to Microsoft rules so I am not sure how reliable it works in Unix-like environments for more complicated command lines.