Question (ID-1119722): Base 62 conversion in Python How would you convert an integer to base 62 (like hexadecimal, but with these digits: '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'). 

 I have been trying to find a good Python library for it, but they all seems to be occupied with converting strings. The Python base64 module only accepts strings and turns a single digit into four characters. I was looking for something akin to what URL shorteners use. 
 Answers (Total-11): #0 There is no standard module for this, but I have written my own functions to achieve that. 

 ALPHABET = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"

def base62_encode(num, alphabet=ALPHABET):
 """Encode a number in Base X

 `num`: The number to encode
 `alphabet`: The alphabet to use for encoding
 """
 if (num == 0):
  return alphabet[0]
 arr = []
 base = len(alphabet)
 while num:
  rem = num % base
  num = num // base
  arr.append(alphabet[rem])
 arr.reverse()
 return ''.join(arr)

def base62_decode(string, alphabet=ALPHABET):
 """Decode a Base X encoded string into the number

 Arguments:
 - `string`: The encoded string
 - `alphabet`: The alphabet to use for encoding
 """
 base = len(alphabet)
 strlen = len(string)
 num = 0

 idx = 0
 for char in string:
  power = (strlen - (idx + 1))
  num += alphabet.index(char) * (base ** power)
  idx += 1

 return num
 

 Notice the fact that you can give it any Alphabet to use for encoding and decoding. 

 Hope this helps. 

 PS - For URL shorteners, I have found that it's better to leave out a few confusing characters like 0Ol1oI etc. Thus I use this alphabet for my URL shortening needs - "23456789abcdefghijkmnpqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ" 

 Have fun. 
 #1 I once wrote a script to do this aswell, I think it's quite elegant :) 

 import string
BASE_LIST = string.digits + string.letters + '_@'
BASE_DICT = dict((c, i) for i, c in enumerate(BASE_LIST))

def base_decode(string, reverse_base=BASE_DICT):
 length = len(reverse_base)
 ret = 0
 for i, c in enumerate(string[::-1]):
  ret += (length ** i) * reverse_base[c]

 return ret

def base_encode(integer, base=BASE_LIST):
 length = len(base)
 ret = ''
 while integer != 0:
  ret = base[integer % length] + ret
  integer /= length

 return ret
 

 Example usage: 

 for i in range(100):         
 print i, base_decode(base_encode(i)), base_encode(i)
 
 #2 The following decoder-maker works with any reasonable base, has a much tidier loop, and gives an explicit error message when it meets an invalid character. 

 def base_n_decoder(alphabet):
 """Return a decoder for a base-n encoded string
 Argument:
 - `alphabet`: The alphabet used for encoding
 """
 base = len(alphabet)
 char_value = dict(((c, v) for v, c in enumerate(alphabet)))
 def f(string):
  num = 0
  try:
   for char in string:
    num = num * base + char_value[char]
  except KeyError:
   raise ValueError('Unexpected character %r' % char)
  return num
 return f

if __name__ == "__main__":
 func = base_n_decoder('0123456789abcdef')
 for test in ('0', 'f', '2020', 'ffff', 'abqdef'):
  print test
  print func(test)
 
 #3 You probably want base64, not base62. There's an URL-compatible version of it floating around, so the extra two filler characters shouldn't be a problem. 

 The process is fairly simple; consider that base64 represents 6 bits and a regular byte represents 8. Assign a value from 000000 to 111111 to each of the 64 characters chosen, and put the 4 values together to match a set of 3 base256 bytes. Repeat for each set of 3 bytes, padding at the end with your choice of padding character (0 is generally useful). 
 #4 you can download zbase62 module from pypi 

 eg 

 &gt;&gt;&gt; import zbase62
&gt;&gt;&gt; zbase62.b2a("abcd")
'1mZPsa'
 
 #5 I have a Python library for doing exactly that here: http://www.djangosnippets.org/snippets/1431/ 
 #6 I have benefited greatly from others' posts here. I needed the python code originally for a Django project, but since then I have turned to node.js, so here's a javascript version of the code (the encoding part) that Baishampayan Ghose provided. 

 var ALPHABET = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";

function base62_encode(n, alpha) {
 var num = n || 0;
 var alphabet = alpha || ALPHABET;

 if (num == 0) return alphabet[0];
 var arr = [];
 var base = alphabet.length;

 while(num) {
 rem = num % base;
 num = (num - rem)/base;
 arr.push(alphabet.substring(rem,rem+1));
 }

 return arr.reverse().join('');
}

console.log(base62_encode(2390687438976, "123456789ABCDEFGHIJKLMNPQRSTUVWXYZ"));
 
 #7 Sorry, I can't help you with a library here. I would prefer using base64 and just adding to extra characters to your choice -- if possible! 

 Then you can use the base64 module. 

 If this is really, really not possible: 

 You can do it yourself this way (this is pseudo-code): 

 base62vals = []
myBase = 62
while num &gt; 0:
 reminder = num % myBase
 num = num / myBase
 base62vals.insert(0, reminder)
 
 #8 Personally I like the solution from Baishampayan, mostly because of stripping the confusing characters. 

 For completeness, and solution with better performance, this post shows a way to use the Python base64 module. 
 #9 If all you need is to generate a short ID (since you mention URL shorteners) rather than encode/decode something, this module might help: 

 https://github.com/stochastic-technologies/shortuuid/ 
 #10 I wrote this a while back and it's worked pretty well (negatives and all included) 

 def code(number,base):
 try:
  int(number),int(base)
 except ValueError:
  raise ValueError('code(number,base): number and base must be in base10')
 else:
  number,base = int(number),int(base)
 if base &lt; 2:
  base = 2
 if base &gt; 62:
  base = 62
 numbers = [0,1,2,3,4,5,6,7,8,9,"a","b","c","d","e","f","g","h","i","j",
    "k","l","m","n","o","p","q","r","s","t","u","v","w","x","y",
    "z","A","B","C","D","E","F","G","H","I","J","K","L","M","N",
    "O","P","Q","R","S","T","U","V","W","X","Y","Z"]
 final = ""
 loc = 0
 if number &lt; 0:
  final = "-"
  number = abs(number)
 while base**loc &lt;= number:
  loc = loc + 1
 for x in range(loc-1,-1,-1):
  for y in range(base-1,-1,-1):
   if y*(base**x) &lt;= number:
    final = "{}{}".format(final,numbers[y])
    number = number - y*(base**x)
    break
 return final

def decode(number,base):
 try:
  int(base)
 except ValueError:
  raise ValueError('decode(value,base): base must be in base10')
 else:
  base = int(base)
 number = str(number)
 if base &lt; 2:
  base = 2
 if base &gt; 62:
  base = 62
 numbers = ["0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f",
    "g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v",
    "w","x","y","z","A","B","C","D","E","F","G","H","I","J","K","L",
    "M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"]
 final = 0
 if number.startswith("-"):
  neg = True
  number = list(number)
  del(number[0])
  temp = number
  number = ""
  for x in temp:
   number = "{}{}".format(number,x)
 else:
  neg = False
 loc = len(number)-1
 number = str(number)
 for x in number:
  if numbers.index(x) &gt; base:
   raise ValueError('{} is out of base{} range'.format(x,str(base)))
  final = final+(numbers.index(x)*(base**loc))
  loc = loc - 1
 if neg:
  return -final
 else:
  return final
 

 sorry about the length of it all