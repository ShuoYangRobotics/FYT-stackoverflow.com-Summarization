Question (ID-8682848): Assign function arguments to `self` I've noticed that a common pattern I use is to assign SomeClass.__init__() arguments to self attributes of the same name. Example: 

 class SomeClass():
 def __init__(self, a, b, c):
  self.a = a
  self.b = b
  self.c = c
 

 In fact it must be a common task for others as well as PyDev has a shortcut for this - if you place the cursor on the parameter list and click Ctrl+1 you're given the option to Assign parameters to attributes which will create that boilerplate code for you. 

 Is there a different, short and elegant way to perform this assignment? 
 Answers (Total-8): #0 I sympathize with your sense that boilerplate code is a bad thing. But in this case, I'm not sure there even could be a better alternative. Let's consider the possibilities. 

 If you're talking about just a few variables, then a series of self.x = x lines is easy to read. In fact, I think its explicitness makes that approach preferable from a readability standpoint. And while it might be a slight pain to type, that alone isn't quite enough to justify a new language construct that might obscure what's really going on. Certainly using vars(self).update() shenanigans would be more confusing than it's worth in this case. 

 On the other hand, if you're passing nine, ten, or more parameters to __init__ , you probably need to refactor anyway. So this concern really only applies to cases that involve passing, say, 5-8 parameters. Now I can see how eight lines of self.x = x would be annoying both to type and to read; but I'm not sure that the 5-8 parameter case is common enough or troublesome enough to justify using a different method. So I think that, while the concern you're raising is a good one in principle, in practice, there are other limiting issues that make it irrelevant. 

 To make this point more concrete, let's consider a function that takes an object, a dict, and a list of names, and assigns values from the dict to names from the list. This ensures that you're still being explicit about which variables are being assigned to self. (I would never suggest a solution to this problem that didn't call for an explicit enumeration of the variables to be assigned; that would be a rare-earth bug magnet): 

 &gt;&gt;&gt; def assign_attributes(obj, localdict, names):
...  for name in names:
...   setattr(obj, name, localdict[name])
...
&gt;&gt;&gt; class SomeClass():
...  def __init__(self, a, b, c):
...   assign_attributes(self, vars(), ['a', 'b', 'c'])
 

 Now, while not horribly unattractive, this is still harder to figure out than a straightforward series of self.x = x lines. And it's also longer and more trouble to type than one, two, and maybe even three or four lines, depending on circumstances. So you only get certain payoff starting with the five-parameter case. But that's also the exact moment that you begin to approach the limit on human short-term memory capacity (= 7 +/- 2 "chunks"). So in this case, your code is already a bit challenging to read, and this would only make it more challenging. 
 #1 Mod for @pcperini's answer: 

 &gt;&gt;&gt; class SomeClass():
  def __init__(self, a, b=1, c=2):
   for for name,value in vars().iteritems():
    if name != 'self':
     setattr(self,name,value)

&gt;&gt;&gt; s = SomeClass(7,8)
&gt;&gt;&gt; print s.a,s.b,s.c
7 8 2
 
 #2 You could do this, which has the virtue of simplicity: 

 &gt;&gt;&gt; class C(object):
 def __init__(self, **kwargs):
  self.__dict__ = dict(kwargs)
 

 This leaves it up to whatever code creates an instance of C to decide what the instance's attributes will be after construction, e.g.: 

 &gt;&gt;&gt; c = C(a='a', b='b', c='c')
&gt;&gt;&gt; c.a, c.b, c.c
('a', 'b', 'c')
 

 If you want all C objects to have a , b , and c attributes, this approach won't be useful. 

 (BTW, this pattern comes from Guido his own bad self, as a general solution to the problem of defining enums in Python. Create a class like the above called Enum , and then you can write code like Colors = Enum(Red=0, Green=1, Blue=2) , and henceforth use Colors.Red , Colors.Green , and Colors.Blue .) 

 It's a worthwhile exercise to figure out what kinds of problems you could have if you set self.__dict__ to kwargs instead of dict(kwargs) . 
 #3 You can do it via setattr(), like: 

 [setattr(self, key, value) for key, value in kwargs.items()] 

 Is not very beautiful, but can save some space :) 

 So, you'll get: 

 kwargs = { 'd':1, 'e': 2, 'z': 3, }

 class P():
  def __init__(self, **kwargs):
  [setattr(self, key, value) for key, value in kwargs.items()]

 x = P(**kwargs)
 dir(x)
 ['__doc__', '__init__', '__module__', 'd', 'e', 'z']
 
 #4 Your specific case could also be handled with a namedtuple : 

 &gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; SomeClass = namedtuple("SomeClass", "a b c")
&gt;&gt;&gt; sc = SomeClass(1, "x", 200)
&gt;&gt;&gt; print sc
SomeClass(a=1, b='x', c=200)
&gt;&gt;&gt; print sc.a, sc.b, sc.c
1 x 200
 
 #5 For that simple use-case I must say I like putting things explicitly (using the Ctrl+1 from PyDev), but sometimes I also end up using a bunch implementation, but with a class where the accepted attributes are created from attributes pre-declared in the class, so that I know what's expected (and I like it more than a namedtuple as I find it more readable -- and it won't confuse static code analysis or code-completion). 

 I've put on a recipe for it at: http://code.activestate.com/recipes/577999-bunch-class-created-from-attributes-in-class/ 

 The basic idea is that you declare your class as a subclass of Bunch and it'll create those attributes in the instance (either from default or from values passed in the constructor): 

 class Point(Bunch):
 x = 0
 y = 0

p0 = Point()
assert p0.x == 0
assert p0.y == 0

p1 = Point(x=10, y=20)
assert p1.x == 10
assert p1.y == 20
 

 Also, Alex Martelli also provided a bunch implementation: http://code.activestate.com/recipes/52308-the-simple-but-handy-collector-of-a-bunch-of-named/ with the idea of updating the instance from the arguments, but that'll confuse static code-analysis (and IMO can make things harder to follow) so, I'd only use that approach for an instance that's created locally and thrown away inside that same scope without passing it anywhere else). 
 #6 Disclaimer 

 Do not use this: I was simply trying to create the answer closest to OPs initial intentions. As pointed out in comments, this relies on entirely undefined behavior , and explicitly prohibited modifications of the symbol table. 

 It does work though, and has been tested under extremely basic circumstances . 

 Solution 

 class SomeClass():
 def __init__(self, a, b, c):
  vars(self).update(dict((k,v) for k,v in vars().iteritems() if (k != 'self')))

sc = SomeClass(1, 2, 3)
# sc.a == 1
# sc.b == 2
# sc.c == 3
 

 Using the vars() built-in function, this snippet iterates through all of the variables available in the __init__ method (which should, at this point, just be self , a , b , and c ) and set's self 's variables equal to the same, obviously ignoring the argument-reference to self (because self.self seemed like a poor decision.) 
 #7 Decorator magic!! 

 &gt;&gt;&gt; class SomeClass():
  @ArgsToSelf
  def __init__(a, b=1, c=2, d=4, e=5):
   pass

&gt;&gt;&gt; s=SomeClass(6,b=7,d=8)
&gt;&gt;&gt; print s.a,s.b,s.c,s.d,s.e
6 7 2 8 5
 

 while defining: 

 &gt;&gt;&gt; import inspect
&gt;&gt;&gt; def ArgsToSelf(f):
 def act(self, *args, **kwargs):
  arg_names,_,_,defaults = inspect.getargspec(f)
  defaults=list(defaults)
  for arg in args:
   setattr(self, arg_names.pop(0),arg)
  for arg_name,arg in kwargs.iteritems():
   setattr(self, arg_name,arg)
   defaults.pop(arg_names.index(arg_name))
   arg_names.remove(arg_name)
  for arg_name,arg in zip(arg_names,defaults):
   setattr(self, arg_name,arg)
  return f(*args, **kwargs)
 return act
 

 Of course you could define this decorator once and use it throughout your project. Also, This decorator works on any object function, not only __init__ .