Question (ID-7686194): Removing delimiters I have a file looking like this: 

 ('chr1', '1499102', '1500297')
('chr1', '1811177', '1812131')
('chr1', '2312420', '2313646')
('chr1', '6683999', '6684724')
 

 N number of rows. 

 I want to print it like this: 

 chr1 (tab) 1499102 (tab) 1500297
 

 Any one liner shell or python or perl. 
 Answers (Total-6): #0 perl -nE '$,="\t"; say eval' file.txt
 

 Making use of perl's output record separator, $, to provide the tabs. eval should be safe to use on single quoted strings, and is probably the best option. 
 #1 Perl one-liner here ^_^ 

 cat file.txt | perl -ni -e "printf qq{%s\t%s\t%s\n}, m/'([^']+)'/g;"
 
 #2 using python: 

 for line in open('filename'): print('%s\t%s\t%s'%(eval(line)))
 

 (of course, you need to pass this one-line python script to the python interpreter: python -c "..." ) 

 the eval() function is not safe and should be considered "evil" if you are going to process unverified user input through it. if this function is a real threat to you, you can use this version, which is much more restrictive with its input: 

 import ast
for line in open('filename'):
 print('%s\t%s\t%s'%(ast.literal_eval(line)))
 

 ( here is the documentation for ast.literal_eval() ) 
 #3 perl -pe "s/\('(.*)', \'([0-9]*)', '([0-9]*)'\)/$1\t$2\t$3/g" yourfile
 

 did the trick for me 
 #4 Would sed/awk work for you, too? 

 awk '{print $1"\t"$2"\t"$3}' your_file_with_stuff_in_it | sed "s/[')(,]//g"
 
 #5 awk -F "'" 'BEGIN {OFS="\t"} {print $2, $4, $6}' FILE