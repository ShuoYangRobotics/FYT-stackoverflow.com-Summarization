Question (ID-8670060): Python elements retrieved from container (list, dict, tuple etc) passed by reference or value? I have a function that updates data in a cache (implemented as a dictionary). 

 def updateCache(name, new_data):
 global cache
 info = cache[name] # is this being passed to me as a val or ref?
 datarows = info['datarows']
 datarows.append(new_data)

 # These will not be necessary if I was dealing with references ...?
 # or in other words, are the following statements redundant or required?
 info['datarows'] = datarows
 cache[name] = info
 

 As the comment in the snippet enquires, do I need to stick the new updated objects back into the cache, or am I dealing with references to the objects stored in the dict - in which case the last two statements are redundant? 
 Answers (Total-7): #0 Let's just try this out, shall we: 

 def updateCache(name, new_data):
 global cache
 info = cache[name]
 datarows = info['datarows']
 datarows.append(new_data)


cache = {'foo': {'datarows': []}, 'bar': {'datarows': []}}

print cache
updateCache('foo', 'bar')
print cache
 

 outputs: 

 {'foo': {'datarows': []}, 'bar': {'datarows': []}}
{'foo': {'datarows': ['bar']}, 'bar': {'datarows': []}}
 
 #1 
 or in other words, are the following statements redundant or required? 
 

 They are redundant, since almost everything in python is a reference. (Unless you don't play with some magic functions like __new__ ) 
 #2 There are actually three options. See this link for a description on the different copy flavors. See this post for a nice explanation for each of these. 

 
 the variable info is a reference to the same dict object as cache[name] 
 info holds a shallow copy of that dict 
 info holds a deep copy of that dict 
 

 For the determination of which option applies in this case, you need to investigate the properties of your object . In this case you have a mutable container object ( dict ). Which implies that you assign the object reference to the new name, as in (equivalent to c = d = {} ): 

 
 (Note that c = d = [] assigns the same object to both c and d.) 
 
 #3 info has a value assigned to it. A quick experiment in a Python command line will confirm: 

 &gt;&gt;&gt; cache = {'ProfSmiles':'LikesPython'}
&gt;&gt;&gt; name = 'ProfSmiles'
&gt;&gt;&gt; cache[name]
'LikesPython'
 

 therefore in this case if we did info = cache[name] , then type(info) would evaluate to &lt;type 'str'&gt; 
So yes, the last two lines are redundant 
 #4 If cache[name] evaluates to an instance of a value-type (numeric, string, or tuple) it will be passed by value. If it is a reference-type (dict, list, most other types), it will be passed by reference and your last two lines will be redundant. Of course, if the object is of a reference type but immutable, you'll have to do something else, like make a copy of it and replace the copy in the cache. 

 Edit: this is how I think about it, anyway. A possibly more technically correct explanation is that all types are passed by reference in Python, but some types like numerics, strings, and tuples are immutable (basically all hashable types), and therefore you can't make changes to the dereferenced object, and have to treat it as if it were pass-by-value. 

 Final edit: mutability is independent of hashability (though it would be odd to design a type that was immutable but unhashable), and it is mutability, not hashability, that matters in the OP's case. (Of course, name must be hashable to be a key in cache , but cache[name] could be anything.) 
 #5 As this answer to a related question explains: 

 
 All variables contain references to an object 
 All parameters receive references that are passed by value 
 Changes will have an effect in the outside world only when a mutable object state is modified 
 

 Hence, what has to be taken into account is when some statement changes the state of an object or creates a new one. 
 #6 There are two things that you need to consider here 

 
 All values passed to a python function is by Value and not by reference. 
 When a parameter is passed, it just passes a reference and the reference is a value. 
 

 This has interesting behavior when passing mutable and non mutable objects or a passed mutable reference is rebind-ed. Considering two sequence types list and tuples where the former is only mutable. 

 &gt;&gt;&gt; def foo(x):
 print id(x)
 x+=(2,) 
&gt;&gt;&gt; x=(1,)
&gt;&gt;&gt; foo(x)
37261808
&gt;&gt;&gt; x
(1,)
&gt;&gt;&gt; def bar(x):
 print id(x)
 x+=[2] 
&gt;&gt;&gt; x=[1]
&gt;&gt;&gt; bar(x)
43710624
&gt;&gt;&gt; x
[1, 2]
&gt;&gt;&gt; 
 

 See how the baviour is so different for bar and foo with tuples and lists? 

 So lets get back to your example. What you are passing is just a key to a global dictionary. You needn't worry whether name is passed by value or by reference . Because ultimately you are not changing name but a global dictionary cache which is not a part of the parameter.