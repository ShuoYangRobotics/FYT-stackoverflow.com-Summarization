Question (ID-8600161): How to execute periodic actions in Python? I am working on Windows. I want to execute a function foo() every 10 seconds. How do I do this? 
 Answers (Total-6): #0 At the end of foo() , create a Timer which calls foo() itself after 10 seconds. 
Because, Timer create a new thread to call foo() . 
 You can do other stuff without being blocked. 

 &gt;&gt;&gt; import time, threading
&gt;&gt;&gt; def foo():
... print(time.ctime())
... threading.Timer(10, foo).start()
...
&gt;&gt;&gt; foo()
Thu Dec 22 14:46:08 2011
&gt;&gt;&gt; Thu Dec 22 14:46:18 2011
Thu Dec 22 14:46:28 2011
Thu Dec 22 14:46:38 2011
 
 #1 Here's a nice implementation using the Thread class: http://g-off.net/software/a-python-repeatable-threadingtimer-class 

 the code below is a little more quick and dirty: 

 from threading import Timer
from time import sleep

def hello():
 print "hello, world"
 t = Timer(3,hello)
 t.start()

t = Timer(3, hello)
t.start() # after 3 seconds, "hello, world" will be printed

# timer will wake up ever 3 seconds, while we do something else
while True:
 print "do something else"
 sleep(10)
 
 #2 This will insert a 10 second sleep in between every call to foo() , which is approximately what you asked for when the call completes quickly. 

 import time
while True:
 foo()
 time.sleep(10)
 

 

 edit: To do other things while your foo() is being called in a background thread 

 import time
import sys
import threading

def foo():
 sys.stdout.write('({}) foo\n'.format(time.ctime()))

def foo_target():
 while True:
 foo()
 time.sleep(10)

t = threading.Thread(target=foo_target)
t.daemon = True
t.start()
raw_input('do other things...')
 
 #3 You can execute your task in a different thread. threading.Timer will let you execute a given callback once after some time has elapsed, if you want to execute your task, for example, as long as the callback returns True (this is actually what glib.timeout_add provides, but you might not have it installed in windows) or until you cancel it, you can use this code: 

 import logging, threading, functools
import time

logging.basicConfig(level=logging.NOTSET,
     format='%(threadName)s %(message)s')

class PeriodicTimer(object):
 def __init__(self, interval, callback):
  self.interval = interval

  @functools.wraps(callback)
  def wrapper(*args, **kwargs):
   result = callback(*args, **kwargs)
   if result:
    self.thread = threading.Timer(self.interval,
            self.callback)
    self.thread.start()

  self.callback = wrapper

 def start(self):
  self.thread = threading.Timer(self.interval, self.callback)
  self.thread.start()

 def cancel(self):
  self.thread.cancel()


def foo():
 logging.info('Doing some work...')
 return True

timer = PeriodicTimer(1, foo)
timer.start()

for i in range(2):
 time.sleep(2)
 logging.info('Doing some other work...')

timer.cancel()
 

 Example output: 

 Thread-1 Doing some work...
Thread-2 Doing some work...
MainThread Doing some other work...
Thread-3 Doing some work...
Thread-4 Doing some work...
MainThread Doing some other work...
 

 Note: The callback isn't executed every interval execution. Interval is the time the thread waits between the callback finished the last time and the next time is called. 
 #4 Perhaps the sched module will meet your needs. 

 Alternatively, consider using a Timer object . 
 #5 If you meant to run foo() inside a python script every 10 seconds, you can do something on these lines. 

 import time

def foo():
 print "Howdy"

while True:
 foo()
 time.sleep(10)