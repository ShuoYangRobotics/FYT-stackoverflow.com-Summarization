Question (ID-1800817): How can I get part of regex match as a variable in python? In Perl it is possible to do something like this (I hope the syntax is right...): 

 $string =~ m/lalala(I want this part)lalala/;
$whatIWant = $1;
 

 I want to do the same in Python and get the text inside the parenthesis in a string like $1. 
 Answers (Total-6): #0 See: python regex grouping 

 &gt;&gt;&gt; import re
&gt;&gt;&gt; p = re.compile("lalala(I want this part)lalala")
&gt;&gt;&gt; p.match("lalalaI want this partlalala").group(1)
'I want this part'
 
 #1 import re
data = "some input data"
m = re.search("some (input) data", data)
if m: # "if match was successful" / "if matched"
 print m.group(1)
 

 Check the docs for more. 
 #2 . 

 import re
astr='lalalabeeplalala'
match=re.search('lalala(.*)lalala',astr)
whatIWant=match.group(1) if match else None
print(whatIWant)
 

 A small note: in Perl, when you write 

 $string =~ m/lalala(.*)lalala/;
 

 the regexp can match anywhere in the string. The equivalent is accomplished with the re.search() function, not the re.match() function, which requires that the pattern match starting at the beginning of the string. 
 #3 import re
match = re.match('lalala(I want this part)lalala', 'lalalaI want this partlalala')
print match.group(1)
 
 #4 If you want to get parts by name you can also do this: 

 &gt;&gt;&gt; m = re.match(r"(?P&lt;first_name&gt;\w+) (?P&lt;last_name&gt;\w+)", "Malcom Reynolds")
&gt;&gt;&gt; m.groupdict()
{'first_name': 'Malcom', 'last_name': 'Reynolds'}
 

 The example was taken from the re docs 
 #5 there's no need for regex. think simple. 

 &gt;&gt;&gt; "lalala(I want this part)lalala".split("lalala")
['', '(I want this part)', '']
&gt;&gt;&gt; "lalala(I want this part)lalala".split("lalala")[1]
'(I want this part)'
&gt;&gt;&gt;