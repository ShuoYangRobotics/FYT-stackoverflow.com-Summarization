Question (ID-6918414): Finding an Insertion in a String What's the best way of checking if StringA = StringB with an another StringC inserted at some arbitrary point? 

 For example, given abcdef and abcXYZdef , I want to find that abcXYZdef is abcdef with XYZ inserted at position 4. 

 On the other hand, given abcdef and abRSTcdXYZef , I want to find that the first string cannot be turned into the second with only a single insertion. 

 I know I could go over StringA character by character, from both ends, and check if it covers the whole of StringB, but that would be rather tedious to write. It would also be rather slow to do this in Python (which i am working in) and I would rather not write a special C-extension just for this. 

 Are there any clever things I can do with Regex's or other standard string-manipulation functions that can do this for me? 

 edit: To clarify, StringC is completely unknown; There may not even be a valid StringC, and i will want to know if that is the case. 
 Answers (Total-6): #0 A very underappreciated gem in the standard lib is difflib ... 

 &gt;&gt;&gt; import difflib
&gt;&gt;&gt; s = difflib.SequenceMatcher(None, "GHSKWITNIFSI", "GHSKWAGDITNIFSI")
&gt;&gt;&gt; s.get_matching_blocks()[:-1]
[(0, 0, 5), (5, 8, 7)]
&gt;&gt;&gt; s = difflib.SequenceMatcher(None, "GHSKWITNIFSI", "GHSKWITNIFSI")
&gt;&gt;&gt; s.get_matching_blocks()[:-1]
[(0, 0, 12)]
 
 #1 This ... feels kludgy to a degree, and it's only probably half-way there, but it seems like it found the substring in your example and could probably be expanded a bit. I can revise it some in a minute with some more time to test, but it's an approach concept: 

 s1 = 'GHSKWITNIFSI'
s2 = 'GHSKWAGDITNIFSI'

l = len(s2) - len(s1)

for i in range(len(s1)):
 if s2[0:i] + s2[i + l:] == s1:
 print i
 break
 

 I don't like the use of range(len()) , but in this particular use scenario I think it's appropriate. It will print the index where an insertion took place if a single insertion will turn s1 into s2. 
 #2 I don't know, but you are trying to find the "edit distance". Checking Wikipedia: 

 http://en.wikipedia.org/wiki/Edit_distance 

 You might also look at Peter Norvig's spelling corrector: 

 http://norvig.com/spell-correct.html 

 I think you could adapt code from the spelling corrector to do what you need. 

 Good luck. 
 #3 def GetInsertedString(StringA, StringB):
 lenA = len(StringA)
 lenB = len(StringB)
 if lenA &gt; lenB:
  return None, None
 begincount = 0
 while begincount &lt; lenA and StringA[begincount] == StringB[begincount]:
  begincount += 1
 endcount = 0
 while endcount &lt; (lenA - begincount) and StringA[lenA-endcount-1] == StringB[lenB-endcount-1]:
  endcount += 1
 if begincount + endcount != lenA:
  return None, None
 return begincount, StringB[begincount:begincount+lenB-lenA]

&gt;&gt;&gt; GetInsertedString('GHSKWITNIFSI', 'GHSKWAGDITNIFSI')
(5, 'AGD')
&gt;&gt;&gt; GetInsertedString('GHSKWITNIFSI', 'GHSKWAGDTNIFSI')
(None, None)
 
 #4 from itertools import dropwhile

def get_inserted_substring(s1, s2):
 try:
  # diff is the first index at which the strings differ
  diff = dropwhile(lambda i: s1[i] == s2[i], xrange(len(s2))).next()
  if s2[diff:].endswith(s1[diff:]):
   return (diff, s2[diff:diff-len(s1)])
 except (StopIteration, IndexError):
  # the strings are the same or only differ at the end
  if len(s1) &lt;= len(s2):
   return (len(s1), s2[len(s1):])
 return (None, None)
 

 And examples... 

 &gt;&gt;&gt; get_inserted_substring('abcdef', 'abcXYZdef')
(3, 'XYZ')
&gt;&gt;&gt; get_inserted_substring('abcdef', 'abRSTcdXYZef')
(None, None)
&gt;&gt;&gt; get_inserted_substring('abcdef', 'abcdefXYZ')
(6, 'XYZ')
&gt;&gt;&gt; get_inserted_substring('abcdef', 'XYZabcdef')
(0, 'XYZ')
&gt;&gt;&gt; get_inserted_substring('abcdefXYZ', 'abcdef')
(None, None)
 
 #5 strA='foor'
strB='foobar'
strC='ba'

if strB.replace(strC,'') == strA:
 print strC,' at index ',len(strB.split(strC)[0])
 

 Possibly? Testing right now...