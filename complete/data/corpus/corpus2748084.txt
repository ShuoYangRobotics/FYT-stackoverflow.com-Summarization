Question (ID-2748084): MUD (game) design concept question about timed events I'm trying my hand at building a MUD (multiplayer interactive-fiction game) 

 I'm in the design/conceptualizing phase and I've run into a problem that I can't come up with a solution for. I'm hoping some more experienced programmers will have some advice. 

 Here's the problem as best I can explain it. When the player decides to perform an action he sends a command to the server. the server then processes the command, determines whether or not the action can be performed, and either does it or responds with a reason as to why it could not be done. One reason that an action might fail is that the player is busy doing something else. For instance, if a player is mid-fight and has just swung a massive broadsword, it might take 3 seconds before he can repeat this action. If the player attempts to swing again to soon, the game will respond indicating that he must wait x seconds before doing that. Now, this I can probably design without much trouble. The problem I'm having is how I can replicate this behavior from AI creatures. All of the events that are being performed by the server ON ITS OWN, aka not as an immediate reaction to something a player has done, will have to be time sensitive. Some evil monster has cast a spell on you but must wait 30 seconds before doing it again... I think I'll probably be adding all these events to some kind of event queue, but how can I make that event queue time sensitive? 
 Answers (Total-6): #0 MUDs actions are usually performed on 'ticks' rather than immediately - this allows for limited affect of latency and for monster's commands to be inserted in the queue and processed fairly. 

 Personally, I don't like this approach, but pretty much 99% of MUDs use it. You need to design a robust command queue &amp; event queue which can handle both AI and user commands. You can then add "virtual latency" to AI commands which may be predefined or an average of all users latency, or whatever you like. 
 #1 Well your AI-controlled entities have some sort of "what am I going to do next?" method, right? Just have that method return "I'm busy, keep doing what I was doing" result while another action is underway. 

 E.g. 

 class ToughGuy(AI):
 Action_Idle, Action_BroadswordSwing, Action_CastingMagic = range(3)

 MagicRange = 10
 MagicTime = 8
 MeleeRange = 4
 MeleeTime = 2

 def __init__(self):
  self.action = ToughGuy.Action_Idle
  self.actiontimer = 0

 def Update(self, timestep):
  if self.actiontimer &lt;= 0:
   self.action = ToughGuy.ActionIdle
  else
   self.actiontimer -= timestep

  if self.action == ToughGuy.Action_Idle:
   global player # don't do this
   if self.AmIFacing(player):
   distance = DistanceBetween(self, player)
   if distance &lt; ToughGuy.MeleeRange:
    self.action = ToughGuy.Action_BroadswordSwing
    self.actiontimer = ToughGuy.MeleeTime
   elif distance &lt; ToughGuy.MagicRange:
    self.action = ToughGuy.Action_CastingMagic
    self.actiontimer = ToughGuy.MagicTime
 

 etc. Sorry for the variable coding standards... ;) 
 #2 AI's are clients. 

 They're "part of the server" only in the most distant view. They're actually outside the main game engine. They're specialized clients with no human being. 

 An AI client has the same interface with the server that a human's client would. 
 #3 You could use threads to handle specific types of Mobs, and put all the instances into an array of some sort. Then, the thread simply goes through the list repeatedly applying logic. DelayTimeStart and Delay could be attributes of the parent Mob class, and when the thread goes through the loop, it can put off processing any instances of the Mob in which there is time remaining in the delay. 
 #4 May be you'll find examples of realization here: 

 
 Evennia MUD Server Alpha - Evennia is an open-source Python-based MUD 
 Simple Python MUD 
 Python MUD Game Example 
 Codebases at a glance 
 16K MUD competition 
 MUDServ 
 DjangoMUD - home page 
 
 #5 A basic approach would be to have a data structure representing the evil monster's instance of its spell, with a cooldown timer on it. When the power is used, the cooldown is set (presumably to a number of seconds defined by the master definition of the spell); an attempt to use it again will fail just like with the player ability. This can be integrated with an event queue by having the queue check cooldown, and if it hasn't expired, to wait for it to expire, or abort the action, or reschedule the action, as appropriate.