Question (ID-1034573): Python: most idiomatic way to convert None to empty string? What is the most idiomatic way to do the following? 

 def xstr(s):
 if s is None:
  return ''
 else:
  return s

s = xstr(a) + xstr(b)
 

 update: I'm incorporating Tryptich's suggestion to use str(s), which makes this routine work for other types besides strings. I'm awfully impressed by Vinay Sajip's lambda suggestion, but I want to keep my code relatively simple. 

 def xstr(s):
 if s is None:
  return ''
 else:
  return str(s)
 
 Answers (Total-10): #0 def xstr(s):
 return '' if s is None else str(s)
 
 #1 If you know that the value will always either be a string or None: 

 xstr = lambda s: s or ""

print xstr("a") + xstr("b") # -&gt; 'ab'
print xstr("a") + xstr(None) # -&gt; 'a'
print xstr(None) + xstr("b") # -&gt; 'b'
print xstr(None) + xstr(None) # -&gt; ''
 
 #2 return s or '' will work just fine for your stated problem! 
 #3 If you actually want your function to behave like the str() built-in, but return an empty string when the argument is None, do this: 

 def xstr(s):
 if s is None:
  return ''
 return str(s)
 
 #4 def xstr(s):
 return {None:''}.get(s, s)
 
 #5 Variation on the above if you need to be compatible with Python 2.4 

 xstr = lambda s: s is not None and s or ''
 
 #6 Functional way (one-liner) 

 xstr = lambda s: '' if s is None else s
 
 #7 def xstr(s):
 return s or ""
 
 #8 def xstr(s):
 return s if s else ''

s = "%s%s" % (xstr(a), xstr(b))
 
 #9 Use short circuit evaluation: 

 s = a or '' + b or ''
 

 Since + is not a very good operation on strings, better use format strings: 

 s = "%s%s" % (a or '', b or '')