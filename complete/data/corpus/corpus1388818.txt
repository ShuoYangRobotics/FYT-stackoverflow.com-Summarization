Question (ID-1388818): How can I compare two lists in python and return matches I want to take two lists and find the values that appear in both. 

 a = [1, 2, 3, 4, 5]
b = [9, 8, 7, 6, 5]

returnMatches(a, b)
 

 would return [5] , for instance. 
 Answers (Total-10): #0 Not the most efficient one, but by far the most obvious way to do it is: 

 &gt;&gt;&gt; a = [1, 2, 3, 4, 5]
&gt;&gt;&gt; b = [9, 8, 7, 6, 5]
&gt;&gt;&gt; set(a) &amp; set(b)
{5}
 

 if order is significant you can do it with list comprehensions like this: 

 &gt;&gt;&gt; [i for i, j in zip(a, b) if i == j]
[5]
 

 (only works for equal-sized lists, which order-significance implies). 
 #1 Use set.intersection(..) . 

 aa = set(a)
print aa.intersection(b)
# =&gt; set([5])
 
 #2 You can use 

 def returnMatches(a,b):
  return list(set(a) &amp; set(b))
 
 #3 I prefer the set based answers, but here's one that works anyway 

 [x for x in a if x in b]
 
 #4 The easiest way to do that is to use sets : 

 &gt;&gt;&gt; a = [1, 2, 3, 4, 5]
&gt;&gt;&gt; b = [9, 8, 7, 6, 5]
&gt;&gt;&gt; set(a) &amp; set(b)
set([5])
 
 #5 Quick way: 

 list(set(a).intersection(set(b)))
 
 #6 Do you want duplicates? If not maybe you should use sets instead: 

 
>>> set([1, 2, 3, 4, 5]).intersection(set([9, 8, 7, 6, 5]))
set([5])
 
 #7 
 
  
  s = ['a','b','c'] 
  f = ['a','b','d','c'] 
  ss= set(s) 
  fs =set(f) 
  print ss.intersection(fs) 
   set(['a', 'c', 'b']) 
  print ss.union(fs) 
  set(['a', 'c', 'b', 'd']) 
  print ss.union(fs) - ss.intersection(fs) 
   set(['d']) 
  
 
 
 #8 Also you can try this,by keeping common elements in a new list. 

 new_list = []
for element in a:
 if element in b:
  new_list.append(element)
 
 #9 Setz' answer seems complicated. Perhaps you would rather do 

 set(f) - set(s) 

 :)