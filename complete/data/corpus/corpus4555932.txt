Question (ID-4555932): "public" or "private" attribute in Python ? What is the best way? In Python, I have the following example class : 

 class Foo:
 self._attr = 0

 @property
 def attr(self):
  return self._attr

 @attr.setter
 def attr(self, value):
  self._attr = value

 @attr.deleter
 def attr(self):
  del self._attr
 

 As you can see, I have a simple "private" attribute "_attr" and a property to access it. There is a lot of codes to declare a simple private attribute and I think that it's not respecting the "KISS" philosophy to declare all attributes like that. 

 So, why not declare all my attributes as public attributes if I don't need a particular getter/setter/deleter ? 

 My answer will be :
Because the principle of encapsulation (OOP) says otherwise! 

 What is the best way ? 

 Thanks ! 
 Answers (Total-6): #0 Typically, Python code strives to adhere to the Uniform Access Principle . Specifically, the accepted approach is: 

 
 Expose your instance variables directly, allowing, for instance, foo.x = 0 , not foo.set_x(0) 
 If you need to wrap the accesses inside methods, for whatever reason, use @property , which preserves the access semantics. That is, foo.x = 0 now invokes foo.set_x(0) . 
 

 The main advantage to this approach is that the caller gets to do this: 

 foo.x += 1
 

 even though the code might really be doing: 

 foo.set_x(foo.get_x() + 1)
 

 The first statement is infinitely more readable. Yet, with properties, you can add (at the beginning, or later on) the access control you get with the second approach. 

 Note, too, that instance variables starting with a single underscore are conventionally private. That is, the underscore signals to other developers that you consider the value to be private, and they shouldn't mess with it directly; however, nothing in the language prevents them from messing with it directly. 

 If you use a double leading underscore (e.g., __x ), Python does a little obfuscation of the name. The variable is still accessible from outside the class, via its obfuscated name, however. It's not truly private. It's just kind of ... more opaque. And there are valid arguments against using the double underscore; for one thing, it can make debugging more difficult. 
 #1 As others have said, private attributes in Python are merely a convention. The use of property syntax should be used for special processing when attributes are bound, modified or deleted. The beauty of Python is that you can start off by just using normal attribute binding, e.g., self.attr = 0 and if at some later date you decide you want to restrict the value of attr to say 0 &lt;= attr &lt;=100 , you can make attr a property and define a method to make sure this condition is true without ever having to change any user code. 
 #2 Python doesn't have public OR private attributes. All attributes are accessible to all code. 

 self.attr = 0 #Done
 

 Your method isn't in any way making _attr private, it's just a bit of obfuscation. 
 #3 In Python, unless you need special behavior out of an attribute, there's no need to hide it behind accessor methods. If an attribute is for internal use only, prepend it with an underscore. 
 #4 The nice thing about properties is that they given you a really cool interface to work with. Sometimes it's handy to derive a property based on some other (ie. BMI is defined by weight and height). The user of the interface doesn't have to know this of course. 

 I prefer this way over having explicit getters and setters like in Java ie. Way nicer. :) 
 #5 Quite simply, the OOP principles are wrong. Why this is is a long discussion which leads to flamewars and is probably off topic for this site. :-) 

 In Python there is not private attributes, you can't protect them, and this is never a real problem. So don't. Easy! :) 

 Then comes the question: Should you have a leading underscore or not. And in the example you have here you should definitely not. A leading underscore in Python is a convention to show that something is internal, and not a part of the API, and that you should use it on your own risk. This is obviously not the case here, but it's a common and useful convention.