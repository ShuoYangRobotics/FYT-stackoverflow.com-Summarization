Question (ID-4140619): Bulk renaming of files based on lookup I have a folder full of image files such as 

 
 1500000704_full.jpg 
 1500000705_full.jpg 
 1500000711_full.jpg 
 1500000712_full.jpg 
 1500000714_full.jpg 
 1500000744_full.jpg 
 1500000745_full.jpg 
 1500000802_full.jpg 
 1500000803_full.jpg 
 

 I need to rename the files based on a lookup from a text file which has entries such as, 

 
 SH103239 1500000704 
 SH103240 1500000705 
 SH103241 1500000711 
 SH103242 1500000712 
 SH103243 1500000714 
 SH103244 1500000744 
 SH103245 1500000745 
 SH103252 1500000802 
 SH103253 1500000803 
 SH103254 1500000804 
 

 So, I want the image files to be renamed, 

 
 SH103239_full.jpg 
 SH103240_full.jpg 
 SH103241_full.jpg 
 SH103242_full.jpg 
 SH103243_full.jpg 
 SH103244_full.jpg 
 SH103245_full.jpg 
 SH103252_full.jpg 
 SH103253_full.jpg 
 SH103254_full.jpg 
 

 How can I do this job the easiest? Any one can write me a quick command or script which can do this for me please? I have a lot of these image files and manual change isnt feasible. 

 I am on ubuntu but depending on the tool I can switch to windows if need be. Ideally I would love to have it in bash script so that I can learn more or simple perl or python. 

 Thanks 

 EDIT: Had to Change the file names 
 Answers (Total-7): #0 This will work for your problem: 

 #!/usr/bin/perl
while (&lt;DATA&gt;) {
 my($new, $old) = split;
 rename("$old.jpg", "$new.jpg")
  || die "can't rename "$old.jpg", "$new.jpg": $!";
}
__END__
SH103239 1500000704
SH103240 1500000705
SH103241 1500000711
SH103242 1500000712
SH103243 1500000714
SH103244 1500000744
SH103245 1500000745
SH103252 1500000802
SH103253 1500000803
SH103254 1500000804
 

 Switch to ARGV from DATA to read the lines from a particular input file. 

 Normally for mass rename operations, I use something more like this: 

 #!/usr/bin/perl
# rename script by Larry Wall
#
# eg:
#  rename 's/\.orig$//' *.orig
#  rename 'y/A-Z/a-z/ unless /^Make/' *
#  rename '$_ .= ".bad"' *.f
#  rename 'print "$_: "; s/foo/bar/ if &lt;STDIN&gt; =~ /^y/i' *
#  find /tmp -name '*~' -print | rename 's/^(.+)~$/.#$1/'

($op = shift) || die "Usage: rename expr [files]\n";

chomp(@ARGV = &lt;STDIN&gt;) unless @ARGV;

for (@ARGV) {
 $was = $_;
 eval $op;
 die if $@; # means eval `failed'
 rename($was,$_) unless $was eq $_;
}
 

 Iâ€™ve a more full-featured version, but that should suffice. 
 #1 Here's a simple Python 2 script to do the rename. 

 #!/usr/bin/env python

import os

# A dict with keys being the old filenames and values being the new filenames
mapping = {}

# Read through the mapping file line-by-line and populate 'mapping'
with open('mapping.txt') as mapping_file:
 for line in mapping_file:
  # Split the line along whitespace
  # Note: this fails if your filenames have whitespace
  new_name, old_name = line.split()
  mapping[old_name] = new_name

suffix = '_full'

# List the files in the current directory
for filename in os.listdir('.'):
 root, extension = os.path.splitext(filename)
 if not root.endswith(suffix):
  # File doesn't end with this suffix; ignore it
  continue
 # Strip off the number of characters that make up suffix
 stripped_root = root[:-len(suffix)]
 if stripped_root in mapping:
  os.rename(filename, ''.join(mapping[stripped_root] + suffix + extension))
 

 Various bits of the script are hard-coded that really shouldn't be. These include the name of the mapping file ( mapping.txt ) and the filename suffix ( _full ). These could presumably be passed in as arguments and interpreted using sys.argv . 
 #2 A rewrite of Wesley's using generators: 

 import os, os.path

with open('mapping.txt') as mapping_file:
 mapping = dict(line.strip().split() for line in mapping_file)

rootextiter = ((filename, os.path.splitext(filename)) for filename in os.listdir('.'))
mappediter = (
 (filename, os.path.join(mapping[root], extension))
 for filename, root, extension in rootextiter
 if root in mapping
)
for oldname, newname in mappediter:
 os.rename(oldname, newname)
 
 #3 Read in the text file, create a hash with the current file name, so files['1500000704'] = 'SH103239' and so on. Then go through the files in the current directory, grab the new filename from the hash, and rename it. 
 #4 This is very straightforward to do in Bash assuming that there's an entry in the lookup file for each file and each file has a lookup entry. 

 #!/bin/bash
while read -r to from
do
 if [ -e "${from}_full.jpg" ]
 then
  mv "${from}_full.jpg" "${to}_full.jpg"
 fi
done &lt; lookupfile.txt
 

 If the lookup file has many more entries than there are files then this approach may be inefficient. If the reverse is true then an approach that iterates over the files may be inefficient. However, if the numbers are close then this may be the best approach since it doesn't have to actually do any lookups. 

 If you'd prefer a lookup version that's pure-Bash: 

 #!/bin/bash
while read -r to from
do
 lookup[from]=$to
done &lt; lookupfile.txt

for file in *.jpg
do
 base=${file%*_full.jpg}
 mv "$file" "${lookup[base]}_full.jpg"
done
 
 #5 #!/bin/bash

for FILE in *.jpg; do
 OLD=${FILE%.*} # Strip off extension.
 NEW=$(awk -v "OLD=$OLD" '$2==OLD {print $1}' map.txt)
 mv "$OLD.jpg" "$NEW.jpg"
done
 
 #6 Here's a fun little hack: 

 paste -d " " lookupfile.txt lookupfile.txt | cut -d " " -f 2,3 | sed "s/\([ ]\|$\)/_full.jpg /g;s/^/mv /" | sh