Question (ID-481144): How do you test if a point is inside a circle? In python, if you create a circle with:
newcircle = circle(center_x, center_y, radius) 

 How do you test if a given set of x/y coordinates are inside the circle? 
 Answers (Total-8): #0 In general, x and y must satisfy (x-center_x)^2 + (y - center_y)^2 &lt; radius^2 . 

 Please note that points that satisfy the above equation with &lt; replaced by == are considered the points on the circle, and the points that satisfy the above equation with &lt; replaced by &gt; are consider the exterior of the circle. 
 #1 You can use Pythagoras to measure the distance between your point and the centre and see if it's lower than the radius: 

 def in_circle(center_x, center_y, radius, x, y):
 dist = math.sqrt((center_x - x) ** 2 + (center_y - y) ** 2)
 return dist &lt;= radius
 

 EDIT (hat tip to Paul) 

 In practice, squaring is often much cheaper than taking the square root and since we're only interested in an ordering, we can of course forego taking the square root: 

 def in_circle(center_x, center_y, radius, x, y):
 square_dist = (center_x - x) ** 2 + (center_y - y) ** 2
 return square_dist &lt;= radius ** 2
 

 Also, Jason noted that &lt;= should be replaced by &lt; and depending on usage this may actually make sense even though I believe that it's not true in the strict mathematical sense . I stand corrected. 
 #2 You should check whether the distance from the center of the circle to the point is smaller than the radius, i.e. 

 if (x-center_x)**2 + (y-center_y)**2 &lt;= radius**2:
 # inside circle
 
 #3 Calculate the Distance 

 D = Math.Sqrt(Math.Pow(center_x - x, 2) + Math.Pow(center_y - y, 2))
return D &lt;= radius
 

 that's in C#...convert for use in python... 
 #4 D = Math.Pow(center_x - x, 2) + Math.Pow(center_y - y, 2);
return D &lt;= radius*radius
 

 This is more efficient, as it avoids the costly square root operation. 
 #5 Mathematically, Pythagoras is probably a simple method as many have already mentioned. 

 (x-center_x)^2 + (y - center_y)^2 &lt; radius^2
 

 Computationally, there are quicker ways: 

 dx = abs(x-center_x)
dy = abs(y-center_y)
R = radius
 

 
 If a point is more likely to be outside this circle then imagine a square drawn around it such that it's sides are tangents to this circle: 

 if dx>R then return false.
if dy>R then return false. 
 

 Now imagine a square diamond drawn inside this circle such that it's vertices touch this circle: 

 if dx + dy &lt;= R then return true.
 

 Now we have covered most of our space and only a small area of this circle remains in between our square and diamond to be tested. Here we revert to Pythagoras as above. 

 if dx^2 + dy^2 &lt;= R^2 then return true
else return false.
 

 
 If a point is more likely to be outside this circle then reverse order of first 3 steps: 

 if dx + dy &lt;= R then return true.
if dx > R then return false.
if dy > R then return false.
if dx^2 + dy^2 &lt;= R^2 then return true
else return false. 
 

 Alternate methods imagine a square inside this circle instead of a diamond but this requires slightly more tests and calculations with no computational advantage (inner square and diamonds have identical areas): 

 k = R/sqrt(2)
if dx &lt;= k and dy &lt;= k then return true.
 
 #6 As said above -- use Euclidean distance. 

 from math import hypot

def in_radius(c_x, c_y, r, x, y):
 return math.hypot(c_x-x, c_y-y) &lt;= r
 
 #7 Show two squares creating 8 points within a circle