Question (ID-4189766): Python: range with step of type float The documentation basically says that range must behave exactly as this implementation (for positive step ): 

 def range(start, stop, step):
 x = start
 while True:
 if x &gt;= stop: return
 yield x
 x += step
 

 It also says that its arguments must be integers. Why is that? Isn't that definition also perfectly valid if step is a float? 

 In my case, I am esp. needing a range function which accepts a float type as its step argument. Is there any in Python or do I need to implement my own? 

 

 More specific: How would I translate this C code directly to Python in a nice way (i.e. not just doing it via a while -loop manually): 

 for(float x = 0; x &lt; 10; x += 0.5f) { /* ... */ }
 
 Answers (Total-6): #0 You could use numpy.arange . 

 EDIT: The docs prefer numpy.linspace . Thanks @Droogans for noticing =) 
 #1 One explanation might be floating point rounding issues. For example, if you could call 

 range(0, 0.4, 0.1)
 

 you might expect an output of 

 [0, 0.1, 0.2, 0.3]
 

 but you in fact get something like 

 [0, 0.1, 0.2000000001, 0.3000000001]
 

 due to rounding issues. And since range is often used to generate indices of some sort, it's integers only. 

 Still, if you want a range generator for floats, you can just roll your own. 

 def xfrange(start, stop, step):
 while start &lt; stop:
  yield start
  start += step
 
 #2 When you add floating point numbers together, there's often a little bit of error. Would a range(0.0,2.2,1.1) return [0.0,1.1] or [0.0,1.1,2.199999999] ? There's no way to be certain. 

 The code you posted is a perfect work-around if you really need this. 
 #3 In order to be able to use decimal numbers in a range expression a cool way for doing it is the following:
[x * 0.1 for x in range(0, 10)] 
 #4 The problem with floating point is that you may not get the same number of items as you expected, due to inaccuracy. This can be a real problem if you are playing with polynomials where the exact number of items is quite important. 

 What you really want is an arithmetic progression; the following code will work quite happily for int , float and complex ... and strings, and lists ... 

 def arithmetic_progression(start, step, length):
 for i in xrange(length):
  yield start + i * step
 

 Note that this code stands a better chance of your last value being within a bull's roar of the expected value than any alternative which maintains a running total. 

 &gt;&gt;&gt; 10000 * 0.0001, sum(0.0001 for i in xrange(10000))
(1.0, 0.9999999999999062)
&gt;&gt;&gt; 10000 * (1/3.), sum(1/3. for i in xrange(10000))
(3333.333333333333, 3333.3333333337314)
 

 Correction: here's a competetive running-total gadget : 

 def kahan_range(start, stop, step):
 assert step &gt; 0.0
 total = start
 compo = 0.0
 while total &lt; stop:
  yield total
  y = step - compo
  temp = total + y
  compo = (temp - total) - y
  total = temp

&gt;&gt;&gt; list(kahan_range(0, 1, 0.0001))[-1]
0.9999
&gt;&gt;&gt; list(kahan_range(0, 3333.3334, 1/3.))[-1]
3333.333333333333
&gt;&gt;&gt;
 
 #5 Probably because you can't have part of an iterable. Also, floats are imprecise.