Question (ID-7961499): Best way to loop over python string backward What is the best way to loop over python string backward? 

 The following seems a little awkward for all the need of -1 offset: 

 string = "trick or treat"
for i in range(len(string)-1, 0-1, -1):
 print string[i]
 

 The following seems more succinct, but is it actually generate a reversed string so that there is a minor performance penalty? 

 string = "trick or treat"
for c in string[::-1]:
 print c
 
 Answers (Total-6): #0 Try the reversed builtin: 

 for c in reversed(string):
  print c
 

 The reversed() call will make an iterator rather than copying the entire string. 

 PEP 322 details the motivation for reversed() and its advantages over other approaches. 
 #1 Yes, the second syntax shortcut creates an intermediate string and has an associated performance penalty. 

 The first version is better written as: 

 for index, char in enumerate(reversed(s)):
 print "pos %d: %s" % (index, char)
 

 Which is easy to comprehend. Neither reversed nor enumerate ` need to make a copy of the string. 

 Also be careful about using string as a variable name, as it is also the name of a module in the standard library . 
 #2  string = "trick or treat"
 for c in string[::-1]:
  print c
 

 I would use that. It is probably quite fast although there may be a slightly better way (but I doubt it). 

 EDIT: 
Actually, with a second test using a program I hacked together, reversed is probably the way to go. 

 ==== Results ====
Sample 1: 0.0225071907043 # Using a for loop
Sample 2: 0.0100858211517 # Using reversed
 
 #3 Less code is usually faster in Python. Luckily, you don't have to guess: 

 python -mtimeit -s"s='x'*100000" "for x in s[::-1]: pass"
100 loops, best of 3: 1.99 msec per loop

python -mtimeit -s"s='x'*100000" "for x in reversed(s): pass"
1000 loops, best of 3: 1.97 msec per loop

python -mtimeit -s"s='x'*100000" "for i in xrange(len(s)-1, 0-1, -1): s[i]"
100 loops, best of 3: 4.95 msec per loop
 

 So the shorter code is a bit faster, but it comes with a memory overhead. 
 #4 reversed takes an iterable and and returns an iterator that moves backwards. string[::-1] is fine, but it creates a new, reversed string instead. If you just want to iterate, then this will probably better: 

 for c in reversed(string):
 print c
 

 If you want to use the reversed string afterwards, creating it once will be better. 
 #5 string = "trick or treat"
for c in reversed(string):
 print c
 

 Will do what I think you want. It uses an iterator. This should work with anything that has __reveresed__() or __len__() and __getitem__() implemented. __getitem__() would have to take int arguments starting at 0.