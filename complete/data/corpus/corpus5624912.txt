Question (ID-5624912): kwargs parsing best practice Is there a more compact/efficient way of doing this? 

  for key in kwargs:
  if key == 'log':
   self.log = kwargs[key]
  elif key == 'bin':
   self.bin = kwargs[key]
  elif key == 'pid':
   self.pid = kwargs[key]
  elif key == 'conf':
   self.conf = kwargs[key]
 
 Answers (Total-6): #0 self.log = kwargs.get('log', default_log)
self.bin = kwargs.get('bin', default_bin)
self.pid = kwargs.get('pid', default_pid)
self.conf = kwargs.get('conf', default_conf)
 

 This has the additional advantage that self.log is assigned in any case ( AttributeError means your code is broken as hell, nothing more. Always make sure everything is always assigned.). Without extra self.log = default_log lines. You can omit the default to get None . 
 #1 for key in ('log', 'bin', 'pid', 'conf'):
 if key in kwargs:
  setattr(self, key, kwargs[key])
 

 or 

 self.__dict__.update((key, kwargs[key])
      for key in ('log', 'bin', 'pid', 'conf')
      if key in kwargs)
 
 #2 If the key provided in get() is not in the dictionary the result is None . 

 self.log = kwargs.get('log')
self.bin = kwargs.get('bin')
self.pid = kwargs.get('pid')
self.conf = kwargs.get('conf')
 
 #3 for k,v in kwarg.iteritems():
 setattr(self, k, v)
 

 In which setattr(self, "bin", "val") is like calling self.bin = "val" 

 However it is more desirable to have a whitelist like @Sven Marnach has. 
 #4 for k,v in kw.items():
 setattr(self, k, v)
 
 #5 self.__dict__.update(kwargs)