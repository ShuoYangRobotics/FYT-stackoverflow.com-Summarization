Question (ID-109087): Python - Get Instance Variables Is there a built-in method in Python to get an array of all a class' instance variables? For example, if I have this code: 

 class hi:
 def __init__(self):
 self.ii = "foo"
 self.kk = "bar"
 

 Is there a way for me to do this: 

 &gt;&gt;&gt; mystery_method(hi)
["ii", "kk"]
 

 Thanks guys! 

 Edit: I originally had asked for class variables erroneously. Thanks to all who brought this to my attention! 
 Answers (Total-8): #0 Every object has a __dict__ variable containing all the variables and its values in it. 

 Try this 

 &gt;&gt;&gt; hi_obj = hi()
&gt;&gt;&gt; hi_obj.__dict__.keys()
 
 #1 Use vars() 

 class Foo(object):
 def __init__(self):
  self.a = 1
  self.b = 2

vars(Foo()) #==&gt; {'a': 1, 'b': 2}
vars(Foo()).keys() #==&gt; ['a', 'b']
 
 #2 You normally can't get instance attributes given just a class, at least not without instantiating the class. You can get instance attributes given an instance, though, or class attributes given a class. See the 'inspect' module. You can't get a list of instance attributes because instances really can have anything as attribute, and -- as in your example -- the normal way to create them is to just assign to them in the __init__ method. 

 An exception is if your class uses slots, which is a fixed list of attributes that the class allows instances to have. Slots are explained in http://www.python.org/2.2.3/descrintro.html , but there are various pitfalls with slots; they affect memory layout, so multiple inheritance may be problematic, and inheritance in general has to take slots into account, too. 
 #3 You can also test if an object has a specific variable with: 

 &gt;&gt;&gt; hi_obj = hi()
&gt;&gt;&gt; hasattr(hi_obj, "some attribute")
 
 #4 Suggest 

 &gt;&gt;&gt; print vars.__doc__
vars([object]) -&gt; dictionary

Without arguments, equivalent to locals().
With an argument, equivalent to object.__dict__.
 

 In otherwords, it essentially just wraps __dict__ 
 #5 Although not directly an answer to the OP question, there is a pretty sweet way of finding out what variables are in scope in a function. take a look at this code: 

 &gt;&gt;&gt; def f(x, y):
 z = x**2 + y**2
 sqrt_z = z**.5
 return sqrt_z

&gt;&gt;&gt; f.func_code.co_varnames
('x', 'y', 'z', 'sqrt_z')
&gt;&gt;&gt;
 

 The func_code attribute has all kinds of interesting things in it. It allows you todo some cool stuff. Here is an example of how I have have used this: 

 def exec_command(self, cmd, msg, sig):

 def message(msg):
  a = self.link.process(self.link.recieved_message(msg))
  self.exec_command(*a)

 def error(msg):
  self.printer.printInfo(msg)

 def set_usrlist(msg):
  self.client.connected_users = msg

 def chatmessage(msg):
  self.printer.printInfo(msg)

 if not locals().has_key(cmd): return
 cmd = locals()[cmd]

 try:
  if 'sig' in cmd.func_code.co_varnames and \
      'msg' in cmd.func_code.co_varnames: 
   cmd(msg, sig)
  elif 'msg' in cmd.func_code.co_varnames: 
   cmd(msg)
  else:
   cmd()
 except Exception, e:
  print '\n-----------ERROR-----------'
  print 'error: ', e
  print 'Error proccessing: ', cmd.__name__
  print 'Message: ', msg
  print 'Sig: ', sig
  print '-----------ERROR-----------\n'
 
 #6 Your example shows "instance variables", not really class variables. 

 Look in hi_obj.__class__.__dict__.items() for the class variables, along with other other class members like member functions and the containing module. 

 class Hi( object ):
 class_var = ( 23, 'skidoo' ) # class variable
 def __init__( self ):
  self.ii = "foo" # instance variable
  self.jj = "bar"
 

 Class variables are shared by all instances of the class. 
 #7 Both the Vars() and dict methods will work for the example the OP posted, but they won't work for "loosely" defined objects like: 

 class foo:
 a = 'foo'
 b = 'bar'
 

 To print all non-callable attributes, you can use the following function: 

 def printVars(object):
 for i in [v for v in dir(object) if not callable(getattr(object,v))]:
  print '\n%s:' % i
  exec('print object.%s\n\n') % i