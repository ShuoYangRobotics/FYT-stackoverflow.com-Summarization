Question (ID-2682745): Creating constant in Python Is there a way to declare a constant in Python. In java we can create constant in this manner: 

 public static final String CONST_NAME = "Name";
 

 What is the equivalent of the above java constant declaration in python ? 

 Cheers, 
 Answers (Total-6): #0 No there is not. You cannot declare a variable or value as constant. Just don't change it. 

 If you are in a class, the equivalent would be: 

 class Foo(object):
 CONST_NAME = "Name"
 

 if not, it is just 

 CONST_NAME = "Name"
 

 BUt you might want to have a look at the code snippet Constants in Python by Alex Martelli. 
 #1 There's no const keyword as in other languages, however it is possible to create a Property that has a "getter function" to read the data, but no "setter function" to re-write the data. This essentially protects the identifier from being changed. 

 Here is an alternative implementation using class property: 

 Note that the code is far from easy for a reader wondering about constants. See explanation below 

 def constant(f):
 def fset(self, value):
  raise SyntaxError
 def fget(self):
  return f()
 return property(fget, fset)

class _Const(object):
 @constant
 def FOO():
  return 0xBAADFACE
 @constant
 def BAR():
  return 0xDEADBEEF

CONST = _Const()

print CONST.FOO
##3131964110

CONST.FOO = 0
##Traceback (most recent call last):
## ...
## CONST.FOO = 0
##SyntaxError: None
 

 Code Explanation: 

 
 Define a function constant that takes an expression, and uses it to construct a "getter" - a function that solely returns the value of the expression. 
 The setter function raises a SyntaxError so it's read-only 
 Use the constant function we just created as a decoration to quickly define read-only properties. 
 

 

 And in some other more old-fashioned way: 

 (The code is quite tricky, more explanations below) 

 class _Const(object):
 @apply
 def FOO():
  def fset(self, value):
   raise SyntaxError
  def fget(self):
   return 0xBAADFACE
  return property(**locals())

CONST = _Const()

print CONST.FOO
##3131964110

CONST.FOO = 0
##Traceback (most recent call last):
## ...
## CONST.FOO = 0
##SyntaxError: None
 

 Note that the @apply decorator seems to deprecated. 

 
 To define the identifier FOO, firs define two functions (fset, fget - the names are at my choice). 
 Then use the built-in property function to construct an object that can be "set" or "get". 
 Note hat the property function's first two parameters are named fset and fget . 
 Use the fact that we chose these very names for our own getter &amp; setter and create a keyword-dictionary using the ** (double asterisk) applied to all the local definitions of that scope to pass parameters to the property function 
 
 #2 In python usually instead of language enforcing something, people use naming conventions e.g __method for private and using _method for protected methods i.e. generally not used from outside of class but derived class may override it. 

 So in same manner you can simply declare the constant as all caps e.g. 

 MY_CONSTANT = "one"
 

 If you want that this constant never changes, you can hook into attribute access and do tricks, but IMO a simpler approach is to declare a function 

 def MY_CONSTANT():
 return "one"
 

 Only problem is everywhere you will have to do MY_CONSTANT(), but again MY_CONSTANT = "one" is the correct way in python(usually). 
 #3 The Pythonic way of declaring "constants" is basically a module level variable: 

 RED = 1
GREEN = 2
BLUE = 3
 

 And then write your classes or functions. Since constants are almost always integers, and they are also immutable in Python, you have a very little chance of altering it. 

 Unless, of course, if you explicitly set RED = 2 . 
 #4 Python dictionaries are mutable, so they don't seem like a good way to declare constants: 

 &gt;&gt;&gt; constants = {"foo":1, "bar":2}
&gt;&gt;&gt; print constants
{'foo': 1, 'bar': 2}
&gt;&gt;&gt; constants["bar"] = 3
&gt;&gt;&gt; print constants
{'foo': 1, 'bar': 3}
 
 #5 A python dictionary is unchangeable once declared and can serve as constants. 

 my_consts={"TIMEOUT":300, "RETRIES":10, "STATE":"happy"}

i=301
if i &gt; my_consts["TIMEOUT"]:
 print "I've just timed out. Sorry folks."
 print "I tried, many times, " + str(my_consts["RETRIES"]) + " in fact."
 print "But I am still feeling quite " + my_consts["STATE"]