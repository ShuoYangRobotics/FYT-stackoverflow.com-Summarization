Question (ID-2727988): Python indentation in "empty lines" Which is preferred ("." indicating whitespace)? 

 A) 

 def foo():
 x = 1
 y = 2
....
 if True:
  bar()
 

 B) 

 def foo():
 x = 1
 y = 2

 if True:
  bar()
 

 My intuition would be B (that's also what vim does for me), but I see people using A) all the time. Is it just because most of the editors out there are broken? 
 Answers (Total-7): #0 If you use A , you could copy paste your block in python shell, B will get unexpected indentation error. 
 #1 The PEP 8 does not seem to be clear on this issue, although the statements about "blank lines" could be interpreted in favor of B. The PEP 8 style-checker (pep8.py) prefers B and warns if you use A; however, both variations are legal. My own view is that since Python will successfully interpret the code in either case that this doesn't really matter, and trying to enforce it would be a lot of work for very little gain. I suppose if you are very adamantly in favor of one or the other you could automatically convert the one to the other. Trying to fix all such lines manually, though, would be a huge undertaking and really not worth the effort, IMHO. 
 #2 That empty line belongs to foo() , so I would consider A to be the most natural. But I guess it's just a matter of opinion. 
 #3 My experience in open-source development is that one should never leave whitespace inside blank lines. Also one should never leave trailing white-space. 

 It's a matter of coding etiquette. 
 #4 Emacs does B) for me, but I really don't think it matters. A) means that you can add in a line at the correct indentation without any tabbing. 
 #5 I wouldn't necessarily call the first example "broken", because I know some people hate it when the cursor "jumps back" when moving the cursor up or down in code. E.g. Visual Studio (at least 2008) automatically prevents this from happening without using any whitespace characters on those lines. 
 #6 TextMate breaks block collapsing if you use B, and I prefer A anyway since it's more "logical".