Question (ID-2035733): how to modularize django settings.py? When you install a new django application, you have to add/modify your settings.py module. 

 For a project I'm trying to make that module a python subpackage and create a module for each application: 

 settings\
 __init__.py
 base.py
 admin.py
 feincms.py
 ...
 

 The problem I'm confronted with is how to merge settings.py attributes (INSTALLED_APPS for example is a tuple of values) that are getting values in the different submodules? 

 Thanks 

 

 Ok, I asked the wrong question (got the right answer for it though). My question should have been, how to get attributes from all submodules and merge them? Django will import settings and expects everything to be there. 
 Answers (Total-8): #0 "When you install a new django application, you have to add/modify your settings.py module." 

 I think this is fine as is. 

 I don't see any reason to change or modify this at all. 

 What we do, however, is to "subclass" the core settings module. 

 Our developer-specific and installation-specific files have names like settings_devxy_linux2 and settings_checkout_win32 , etc. 

 Each of these files starts with from settings import * to import the core settings and extend those core settings with overrides for a specific installation and platform. 

 It doesn't require any real work. It does, however, mean that we do most things with django-admin.py because our settings aren't called settings . 
 #1 You might be interested in this solution ; uses execfile() to load a series of settings files in order, where each file has full access to settings from previously-loaded files, to update, modify, etc. 
 #2 I've used this work-around: 

 settings.py : 

 INSTALLED_APPS = ('whatever',)
import more_settings
more_settings.modify(globals())
 

 more_settings.py : 

 def modify(settings):
 settings['INSTALLED_APPS'] += ('another_app',)
 
 #3 Presumably the best way to "merge" varies, attributes by attributes. For example, given several tuples (from the INSTALLED_APPS of various submodules), you might simply concatenate them into a new tuple (for the INSTALLED_APPS attribute of the package as a whole), or, if possible duplications are a problem, so something smarter to remove the duplications (in this case you may not care about ordering, so simply tuple(set(tup1+tup2+tup3)) might suffice). 

 For other cases ("merging" dictionaries, "merging" settings which are just scalars or strings, etc) you'll need different strategies (maybe successive .update calls for the dictionaries, pick just one according to some criteria for the scalars or strings, etc, etc) -- I just don't see a "one size fits all" approach working here. 
 #4 If you prefer more magic than in my previous more_settings.modify() approach, try this: 

 settings.py : 

 INSTALLED_APPS = ('whatever',)
import more_settings
more_settings.modify(globals())
 

 more_settings.py : 

 def config(INSTALLED_APPS=(), **other_settings):
 INSTALLED_APPS += ('another_app',)
 del other_settings
 return locals()

def modify(settings):
 settings.update(config(**settings))
 

 Pros: no need to refer to settings with dict notation 

 Cons: must define modified settings as kwargs for config() 
 #5 just put 

 from base import *
from admin import *
...
 

 in ur init .py
that should work 

 i used it for different sites 

 base/settings.py # common settings: db, apps, ...
base/sites/website1/settings.py # site_id, custom middleware 
base/sites/website2/settings.py # site_id, custom middleware
 

 the website settings import the common settings with 

 from base.settings import *
 

 and define custom attribtues 
 #6 I have the same structure of settings files and I do the following to import the settings of the submodules: 

 def load_settings_file(file):
 file = open(os.path.join(INSTALL_DIR, '&lt;projectname&gt;', 'settings', file + '.py'))
 content = file.read()
 file.close()
 return content

for submodule in ['base', 'admin', 'feincms']:
 exec(load_settings_file(submodule))
 
 #7 I created https://code.djangoproject.com/wiki/SplitSettings#SettingInheritancewithHierarchy as my preferred solution. Allows for inheritance from a common file in any deployment environment.