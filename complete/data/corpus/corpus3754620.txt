Question (ID-3754620): a basic question about "while true" level: beginner 

 def play_game(word_list):
 hand = deal_hand(HAND_SIZE) # random init
 while True:
  cmd = raw_input('Enter n to deal a new hand, r to replay the last hand, or e to end game: ')
  if cmd == 'n':
   hand = deal_hand(HAND_SIZE)
   play_hand(hand.copy(), word_list)
   print
  elif cmd == 'r':
   play_hand(hand.copy(), word_list)
   print
  elif cmd == 'e':
   break
  else:
   print "Invalid command."
 

 my question: while WHAT is True? 

 i reckon saying 'while true' is shorthand but for what? while the variable 'hand' is being assigned a value? and what if the variable 'hand' is not being assigned a value? 
 Answers (Total-14): #0 while True means loop forever. The while statement takes an expression and executes the loop body while the expression evaluates to (boolean) "true". True always evaluates to boolean "true" and thus executes the loop body indefinitely. It's an idiom that you'll just get used to eventually! Most languages you're likely to encounter have equivalent idioms. 

 Note that most languages usually have some mechanism for breaking out of the loop early. In the case of Python it's the break statement in the cmd == 'e' case of the sample in your question. 
 #1 
 my question: while WHAT is True? 
 

 While True is True . 

 The while loop will run as long as the conditional expression evaluates to True . 

 Since True always evaluates to True , the loop will run indefinitely, until something within the loop return s or break s. 
 #2 while True is true -- ie always. This is an infinite loop 

 Note the important distinction here between True which is a keyword in the language denoting a constant value of a particular type, and 'true' which is a mathematical concept. 
 #3 
 my question: while WHAT is True? 
 

 Everything inside the () of the while statement is going to be evaluated as a boolean. Meaning it gets converted into either true or false. 

 Consider in the statement while(6 &gt; 5) 

 It first evaluates the expression 6 &gt; 5 which is true so is the same as saying while(true) 

 Anything that is not FALSE, 0, an emptry string "", null, or undefined is likely to be evaluated to true. 

 When I first started programming I used to do things like if(foo == true) , I didn't realise that was virtually the same thing as if(foo) . 

 So when you say while(true) its like are saying while(true == true) 

 So to answer you question: While TRUE is True. 
 #4 In this context, I suppose it could be interpreted as 

 do
...
while cmd != 'e' 
 
 #5 A while loop takes a conditional argument (meaning something that is generally either true or false, or can be interpreted as such), and only executes while the condition yields True . 

 As for while True ? Well, the simplest true conditional is True itself! So this is an infinite loop, usually good in a game that requires lots of looping. (More common from my perspective, though, is to set some sort of "done" variable to false and then making that true to end the game, and the loop would look more like while not done: or whatever.) 
 #6 while loops continue to loop until the condition is false. For instance (pseudocode): 

 i = 0
while i &lt; 10
 i++
 

 With each iteration of the loop, i will be incremented by 1, until it is 10. At that point, the condition i &lt; 10 is no longer true, and the loop will complete. 

 Since the condition in while True is explicitly and always true , the loop will never end (until it is broken out of some other way, usually by a construct like break within the loop body). 
 #7 In some languages True is just and alias for the number. You can learn more why this is by reading more about boolean logic . 
 #8 Formally, True is a Python built-in constant of bool type. 

 You can use Boolean operations on bool types (at the interactive python prompt for example) and convert numbers into bool types: 

 &gt;&gt;&gt; print not True
False
&gt;&gt;&gt; print not False
True
&gt;&gt;&gt; print True or False
True
&gt;&gt;&gt; print True and False
False
&gt;&gt;&gt; a=bool(9)
&gt;&gt;&gt; print a
True
&gt;&gt;&gt; b=bool(0)
&gt;&gt;&gt; print b
False
&gt;&gt;&gt; b=bool(0.000000000000000000000000000000000001)
&gt;&gt;&gt; print b
True
 

 And there are "gotcha's" potentially with what you see and what the Python compiler sees: 

 &gt;&gt;&gt; n=0
&gt;&gt;&gt; print bool(n)
False
&gt;&gt;&gt; n='0'
&gt;&gt;&gt; print bool(n)
True
&gt;&gt;&gt; n=0.0
&gt;&gt;&gt; print bool(n)
False
&gt;&gt;&gt; n="0.0"
&gt;&gt;&gt; print bool(n)
True
 

 As a hint of how Python stores bool types internally, you can cast bool types to integers and True will come out to be 1 and False 0: 

 &gt;&gt;&gt; print True+0
1
&gt;&gt;&gt; print True+1
2
&gt;&gt;&gt; print False+0
0
&gt;&gt;&gt; print False+1
1
 

 But you should not rely on that ! It is just interesting. In many C programs, which lacks a bool type, there are commonly these definitions in standard header files to define TRUE and FALSE to be used logically in the C program: 

 #ifndef FALSE
#define FALSE (0)
#define TRUE (!(FALSE))
#endif
 

 or 

 #ifndef (TRUE)
#define TRUE (1)
#endif
 

 This is where the True==1 assumption came from I suppose. Python does have a bool type and it would be poor practice to assume any value for True other than True . 

 The more important part of your question is "What is while True ?" And an important corollary: What is false? 

 First, for every language you are learning, learn what the language considers TRUE and FALSE. Python considers Truth slightly differently than Perl Truth for example. Other languages have slightly different concepts of true / false. Know what your language considers to be True and False for different operations and flow control to avoid many headaches later! 

 There are many algorithms where you want to process something until you find what you are looking for. Hence the infinite loop or indefinite loop. Each language tend to have its own idiom for these constructs. Here are common C infinite loops, which also work for Perl: 

 for(;;) { /* loop until break */ }
while (1) {
 return if (function(arg) &gt; 3);
}
 

 The while True: form is common in Python for indefinite loops with some way of breaking out of the loop. Learn Python flow control to understand how you break out of while True loops. Unlike most languages, for example, Python can have an else clause on a loop. There is an example in the last link. 
 #9 True is always True , so while True will loop forever. 

 The while keyword takes an expression, and loops while the expression is true. True is an expression that is always true. 

 As a possibly clarifying example, consider the following: 

 a = 1
result = a == 1
 

 Here, a == 1 will return True , and hence put True into result . Hence, 

 a = 1
while a == 1:
 ...
 

 is equivalent to: 

 while True:
 ...
 

 provided you don't alter the value of a inside the while loop. 
 #10 Nothing evaluates to True faster than True . So, it is good if you use while True instead of while 1==1 etc. 
 #11 while True:
 ...
 

 means infinite loop. 

 The while statement is often used of a finite loop. But using the constant 'True' guarantees the repetition of the while statement without the need to control the loop (setting a boolean value inside the iteration for example), unless you want to break it. 

 In fact 

 True == (1 == 1)
 
 #12 while True mean infinite loop, this usually use by long process.
you can change 

 while True:
 

 with 

 while 1:
 
 #13 To answer your question directly: while the loop condition is True. Which it always is, in this particular bit of code.