Question (ID-8434838): Example where lambdas are very useful in Python I met lambda expressions in Python . I have seen already many easy examples (including examples on SE) where lambda expressions produce functions like adders of whatever but I can't see the real usefulness of them yet, e.g. some example where it would be pain to write the same peace of code without lambdas. 

 Could you show something for text processing where you would use lambda expressions and it would be hard to avoid lambda expressions? But something that is practical (not mathematical game). 
 Answers (Total-7): #0 One place I use them often: the key function of the sort and sorted functions: 

 &gt;&gt;&gt; person = lambda name, age: { "name": name, "age": age }
&gt;&gt;&gt; people = [ person("Joe", 61), person("Jane", 52) ]
&gt;&gt;&gt; people.sort(key=lambda person: person["age"])
 

 This will sort the list of people by their age. 

 Another place I use lambdas is with re.sub : 

 &gt;&gt;&gt; re.sub("0x([0-9a-f]+)", lambda match: "0x" + match.group(1).upper(), "0xfa")
'0xFA'
 
 #1 IN this case, it would have been painful to write out all lambda expressions as separate function. 

 What does this code does in briefly? Converts a custom excel table into insert statements for a custom database table. There is mapping between the excel table fields and the database fields and also there is a mapping between excel table fields and functions to be applied on the excel table value, before it gets inserted to the db. You do not really want to define a separate function for every field. 

 map_func = { 'ID' : lambda x : 'mig_farm_seq.nextval',
    'ENTERPRISE_NAME' : wrap_str,
    'TAX_NUMBER' : wrap_str,
    'FAMILY_NAME' : lambda x : wrap_str(x.split()[0]),
    'GIVEN_NAME' : lambda x : wrap_str(x.split()[1]),
    'ENTERPRISE_REGISTRATION_NUMBER' : wrap_str,
    'PREMISE_NAME' : wrap_str,
    'HOUSE_ID' : wrap_str,
    'POSTAL_CODE' : wrap_str,
    'PHONE_NUMBER_1' : lambda x : wrap_str(get_phone_number(x, True)),
    'PHONE_NUMBER_2' : lambda x : wrap_str(get_phone_number(x, False)),
    'FAX_NUMBER' : lambda x : wrap_str(x.replace(' ', '')),
    'BANK_IDENTIFIER' : lambda x : wrap_str(x.replace(' ', '').replace('-', '')[:3]),
    'BANK_ACCOUNT_NUMBER' : lambda x : wrap_str(x.replace(' ', '').replace('-', '')),
    'NUMBER_OF_EMPLOYEES' : wrap_null,
    'SETTLEMENT_NUMBER' : wrap_null,
    'REGISTRATION_NUMBER' : lambda x : insert_reg_number % x,
    'GENDER' : wrap_str,
    'ACTIVITY' : lambda x : '0',
    'REG_HOLDER_ACTIVITY' : lambda x : '0',
    'PROCESSED_BY_JOB' : lambda x : '0'
   }
 

 source: http://pastebin.com/MxEPBMaZ 
 #2 Instead of suggesting anything out here I would recommend to visit the lib directory of your Python Installation and grep for lambda . You will get enough examples to satisfy your appetite. 
 #3 Since you've asked about text processing, take a look at this example (and this one is similar). 

 Closures are almost always easier to handle than objects (since the environment is captured implicitly), but to those thinking in terms of OOP it is not that obvious. I'd recommend trying to learn at least one decent functional language (lambdas in python are too limited), and this way you'll understand how to apply those techniques efficiently in languages like Python. 
 #4 They are useful when you need a short function to compare two items or perform some other operation, and this will be passed as an argument, and there is no need for the function to have a name because it is only used as an argument. 

 They are useful when the function, written as a lambda, is shorter than the def line you would ordinarily use to name it and the return you would use at the end. 

 They are useful when you want to partially apply a function -- that is you have a function that you need to pass somewhere else, and want to provide some or all of the arguments to the passed function without actually calling it. Lamdda lets you do this without having to define and name a separate function for each variation you need. 
 #5 All of my Django projects include 2 strings (settings.py): 

 DIRNAME = os.path.dirname(__file__)
_rel = lambda x: os.path.join(DIRNAME, x)
 
 #6 One case where they're actually useful: 

 Say you're using PyQt, which allows you to connect signals to other slots (methods). Sometimes, I have the need to rather just execute a certain action, rather than write a function, so all I need is a throwaway function. 

 obj.signal.connect(lambda: doFoo(bar))
 

 Of course, that is contrasted with: 

 def doBoo():
 return doFoo(bar)
obj.signal.connect(doBoo)
 

 .. Much cleaner the former way.