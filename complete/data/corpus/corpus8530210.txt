Question (ID-8530210): Most Pythonic Way to Split an Array by Repeating Elements I have a list of items that I want to split based on a delimiter. I want all delimiters to be removed and the list to be split when a delimiter occurs twice . For example, if the delimiter is 'X' , then the following list: 

 ['a', 'b', 'X', 'X', 'c', 'd', 'X', 'X', 'f', 'X', 'g']
 

 Would turn into: 

 [['a', 'b'], ['c', 'd'], ['f', 'g']]
 

 Notice that the last set is not split. 

 I've written some ugly code that does this, but I'm sure there is something nicer. Extra points if you can set an arbitrary length delimiter (i.e. split the list after seeing N delimiters). 
 Answers (Total-12): #0 I don't think there's going to be a nice, elegant solution to this (I'd love to be proven wrong of course) so I would suggest something straightforward: 

 def nSplit(lst, delim, count=2):
 output = [[]]
 delimCount = 0
 for item in lst:
  if item == delim:
   delimCount += 1
  elif delimCount &gt;= count:
   output.append([item])
   delimCount = 0
  else:
   output[-1].append(item)
   delimCount = 0
 return output
 

 

 &gt;&gt;&gt; nSplit(['a', 'b', 'X', 'X', 'c', 'd', 'X', 'X', 'f', 'X', 'g'], 'X', 2)
[['a', 'b'], ['c', 'd'], ['f', 'g']]
 
 #1 Here's a way to do it with itertools.groupby() : 

 import itertools

class MultiDelimiterKeyCallable(object):
 def __init__(self, delimiter, num_wanted=1):
  self.delimiter = delimiter
  self.num_wanted = num_wanted

  self.num_found = 0

 def __call__(self, value):
  if value == self.delimiter:
   self.num_found += 1
   if self.num_found &gt;= self.num_wanted:
    self.num_found = 0
    return True
  else:
   self.num_found = 0

def split_multi_delimiter(items, delimiter, num_wanted):
 keyfunc = MultiDelimiterKeyCallable(delimiter, num_wanted)

 return (list(item
     for item in group
     if item != delimiter)
   for key, group in itertools.groupby(items, keyfunc)
   if not key)

items = ['a', 'b', 'X', 'X', 'c', 'd', 'X', 'X', 'f', 'X', 'g']

print list(split_multi_delimiter(items, "X", 2))
 

 I must say that cobbal's solution is much simpler for the same results. 
 #2 a = ['a', 'b', 'X', 'X', 'c', 'd', 'X', 'X', 'f', 'X', 'g']
b = [[b for b in q if b != 'X'] for q in "".join(a).split("".join(['X' for i in range(2)]))]
 

 this gives 

 [['a', 'b'], ['c', 'd'], ['f', 'g']] 

 where the 2 is the number of elements you want. there is most likely a better way to do this. 
 #3 Use a generator function to maintain state of your iterator through the list, and the count of the number of separator chars seen so far: 

 l = ['a', 'b', 'X', 'X', 'c', 'd', 'X', 'X', 'f', 'X', 'g'] 

def splitOn(ll, x, n):
 cur = []
 splitcount = 0
 for c in ll:
  if c == x:
   splitcount += 1
   if splitcount == n:
    yield cur
    cur = []
    splitcount = 0
  else:
   cur.append(c)
   splitcount = 0
 yield cur

print list(splitOn(l, 'X', 2))
print list(splitOn(l, 'X', 1))
print list(splitOn(l, 'X', 3))

l += ['X','X']
print list(splitOn(l, 'X', 2))
print list(splitOn(l, 'X', 1))
print list(splitOn(l, 'X', 3))
 

 prints: 

 [['a', 'b'], ['c', 'd'], ['f', 'g']]
[['a', 'b'], [], ['c', 'd'], [], ['f'], ['g']]
[['a', 'b', 'c', 'd', 'f', 'g']]
[['a', 'b'], ['c', 'd'], ['f', 'g'], []]
[['a', 'b'], [], ['c', 'd'], [], ['f'], ['g'], [], []]
[['a', 'b', 'c', 'd', 'f', 'g']]
 

 EDIT: I'm also a big fan of groupby, here's my go at it: 

 from itertools import groupby
def splitOn(ll, x, n):
 cur = []
 for isdelim,grp in groupby(ll, key=lambda c:c==x):
  if isdelim:
   nn = sum(1 for c in grp)
   while nn &gt;= n:
    yield cur
    cur = []
    nn -= n
  else:
   cur.extend(grp)
 yield cur
 

 Not too different from my earlier answer, just lets groupby take care of iterating over the input list, creating groups of delimiter-matching and not-delimiter-matching characters. The non-matching characters just get added onto the current element, the matching character groups do the work of breaking up new elements. For long lists, this is probably a bit more efficient, as groupby does all its work in C, and still only iterates over the list once. 
 #4 Very ugly, but I wanted to see if I could pull this off as a one-liner and I thought I would share. I beg you not to actually use this solution for anything of any importance though. The ('X', 3) at the end is the delimiter and the number of times it should be repeated. 

 (lambda delim, count: map(lambda x:filter(lambda y:y != delim, x), reduce(lambda x, y: (x[-1].append(y) if y != delim or x[-1][-count+1:] != [y]*(count-1) else x.append([])) or x, ['a', 'b', 'X', 'X', 'c', 'd', 'X', 'X', 'f', 'X', 'g'], [[]])))('X', 2)
 

 EDIT 

 Here's a breakdown. I also eliminated some redundant code that was far more obvious when written out like this. (changed above also) 

 # Wrap everything in a lambda form to avoid repeating values
(lambda delim, count:
 # Filter all sublists after construction
 map(lambda x: filter(lambda y: y != delim, x), reduce(
  lambda x, y: (
   # Add the value to the current sub-list
   x[-1].append(y) if
    # but only if we have accumulated the
    # specified number of delimiters
    y != delim or x[-1][-count+1:] != [y]*(count-1) else

    # Start a new sublist
    (x.append([]) and False)) or x,
  ['a', 'b', 'X', 'X', 'c', 'd', 'X', 'X', 'f', 'X', 'g'], [[]])
 )
)('X', 2)
 
 #5 Here's a clean nice solution using zip and generators 

 #1 define traditional sequence split function 
#if you only want it for lists, you can use indexing to make it shorter
def split(it, x):
 to_yield = []
 for y in it:
  if x == y:
   yield to_yield
   to_yield = []
  else:
   to_yield.append(y)
 if to_yield:
  yield to_yield

#2 zip the sequence with its tail 
#you could use itertools.chain to avoid creating unnecessary lists
zipped = zip(l, l[1:] + [''])

#3. remove ('X',not 'X')'s from the resulting sequence, and leave only the first position of each
# you can use list comprehension instead of generator expression
filtered = (x for x,y in zipped if not (x == 'X' and y != 'X'))

#4. split the result using traditional split
result = [x for x in split(filtered, 'X')]
 

 This way split() is more reusable. 

 It's surprising python doesn't have one built in. 

 edit: 

 You can easily adjust it for longer split sequences, repeating steps 2-3 and zipping filtered with l[i:] for 0&lt; i &lt;= n. 
 #6 Here's another way of doing this: 

 def split_multi_delimiter(items, delimiter, num_wanted):
 def remove_delimiter(objs):
  return [obj for obj in objs if obj != delimiter]

 ranges = [(index, index+num_wanted) for index in xrange(len(items))
    if items[index:index+num_wanted] == [delimiter] * num_wanted]

 last_end = 0
 for range_start, range_end in ranges:
  yield remove_delimiter(items[last_end:range_start])
  last_end = range_end

 yield remove_delimiter(items[last_end:])

items = ['a', 'b', 'X', 'X', 'c', 'd', 'X', 'X', 'f', 'X', 'g']
print list(split_multi_delimiter(items, "X", 2))
 
 #7 In [6]: input = ['a', 'b', 'X', 'X', 'cc', 'XX', 'd', 'X', 'ee', 'X', 'X', 'f']

In [7]: [s.strip('_').split('_') for s in '_'.join(input).split('X_X')]
Out[7]: [['a', 'b'], ['cc', 'XX', 'd', 'X', 'ee'], ['f']]
 

 This assumes you can use a reserved character such as _ which is not found in the input. 
 #8 Too clever by half, and only offered because the obvious right way to do it seems so brute-force and ugly: 

 class joiner(object):
 def __init__(self, N, data = (), gluing = False):
 self.data = data
 self.N = N
 self.gluing = gluing
 def __add__(self, to_glue):
 # Process an item from itertools.groupby, by either
 # appending the data to the last item, starting a new item,
 # or changing the 'gluing' state according to the number of
 # consecutive delimiters that were found.
 N = self.N
 data = self.data
 item = list(to_glue[1])
 # A chunk of delimiters;
 # return a copy of self with the appropriate gluing state.
 if to_glue[0]: return joiner(N, data, len(item) &lt; N)
 # Otherwise, handle the gluing appropriately, and reset gluing state.
 a, b = (data[:-1], data[-1] if data else []) if self.gluing else (data, [])
 return joiner(N, a + (b + item,))

def split_on_multiple(data, delimiter, N):
 # Split the list into alternating groups of delimiters and non-delimiters,
 # then use the joiner to join non-delimiter groups when the intervening
 # delimiter group is short.
 return sum(itertools.groupby(data, delimiter.__eq__), joiner(N)).data
 
 #9 Regex, I choose you! 

 import re

def split_multiple(delimiter, input):
 pattern = ''.join(map(lambda x: ',' if x == delimiter else ' ', input))
 filtered = filter(lambda x: x != delimiter, input)
 result = []
 for k in map(len, re.split(';', ''.join(re.split(',',
  ';'.join(re.split(',{2,}', pattern)))))):
  result.append([])
  for n in range(k):
   result[-1].append(filtered.__next__())
 return result

print(split_multiple('X',
 ['a', 'b', 'X', 'X', 'c', 'd', 'X', 'X', 'f', 'X', 'g']))
 

 Oh, you said Python, not Perl. 
 #10 import re 
map(list, re.sub('(?&lt;=[a-z])X(?=[a-z])', '', ''.join(lst)).split('XX'))
 

 This does a list -> string -> list conversion and assumes that the non-delimiter characters are all lower case letters. 
 #11 A very simple way to do this would be 

 sdata=[[]]
for d in data:
 if d == 'X':
  if len(sdata[-1])!=0:
   sdata.append([])
  else:
   continue
 else:
  sdata[-1].append(d)