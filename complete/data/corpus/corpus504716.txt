Question (ID-504716): Why is IronPython faster than the Official Python Interpreter According to this: 

 http://www.codeplex.com/IronPython/Wiki/View.aspx?title=IP20VsCPy25Perf&amp;referringTitle=IronPython%20Performance 

 IronPython (Python for .Net) is faster than regular Python (cPython) on the same machine. Why is this? I would think compiled C code would always be faster than the equivalent CLI bytecode. 
 Answers (Total-6): #0 Python code doesn't get compiled to C, Python itself is written in C and interprets Python bytecode. CIL gets compiled to machine code, which is why you see better performance when using IronPython. 
 #1 You're right, C is a lot faster. That's why in those results CPython is twice as fast when it comes to dictionaries, which are almost pure C. On the other hand, Python code is not compiled, it's interpreted. Function calls in CPython are terribly slow. 
But on the other hand: 

 TryRaiseExcept: +4478.9%
 

 Now, there's where IronPython get is horribly wrong. 

 And then, there is this PyPy project, with one of the objectives being Just-In-Time compiler. There is even subset of Python, called RPython (Reduced Python) which can be statically compiled. Which of course is a lot faster. 
 #2 Wandering off your question "Why?", to "Oh, really?" The "good at different things" (Jason Baker) is right on. For example, cpython beats IronPython hands down start up time. 

 c:\Python26\python.exe Hello.py
c:\IronPython\ipy.exe Hello.py
 

 Cpython executes a basic hello world nearly instantly(&lt;100ms), where IronPython has an startup overhead of 4 or 5 seconds. This annoys me, but not enough to keep me from using IronPython. 
 #3 I'm not sure exactly how you're drawing the conclusion that IronPython is faster than CPython. The link that you post seems to indicate that they're good at different things (like exceptions as has been pointed out). 
 #4 Could it be explained by this notation on the page you linked to: 

 
 Due to site caching in the Dynamic
 Language Runtime, IronPython performs
 better with more PyStone passes than
 the default value 
 
 #5 Ironpython is faster for certain types of operations, but slower on others.
Overall, it is still a little bit slower on average.