Question (ID-2397295): Web scraping with Python I'm currently trying to scrape a website that has fairly poorly-formatted HTML (often missing closing tags, no use of classes or ids so it's incredibly difficult to go straight to the element you want, etc.). I've been using BeautifulSoup with some success so far but every once and a while (though quite rarely), I run into a page where BeautifulSoup creates the HTML tree a bit differently from (for example) Firefox or Webkit. While this is understandable as the formatting of the HTML leaves this ambiguous, if I were able to get the same parse tree as Firefox or Webkit produces I would be able to parse things much more easily.
The problems are usually something like the site opens a &lt;b&gt; tag twice and when BeautifulSoup sees the second &lt;b&gt; tag, it immediately closes the first while Firefox and Webkit nest the &lt;b&gt; tags. 

 Is there a web scraping library for Python (or even any other language (I'm getting desperate)) that can reproduce the parse tree generated by Firefox or WebKit (or at least get closer than BeautifulSoup in cases of ambiguity). 
 Answers (Total-9): #0 Use BeautifulSoup as a tree builder for html5lib : 

 from html5lib import HTMLParser, treebuilders

parser = HTMLParser(tree=treebuilders.getTreeBuilder("beautifulsoup"))

text = "a&lt;b&gt;b&lt;b&gt;c"
soup = parser.parse(text)
print soup.prettify()
 

 Output: 

 &lt;html&gt;
 &lt;head&gt;
 &lt;/head&gt;
 &lt;body&gt;
 a
 &lt;b&gt;
 b
 &lt;b&gt;
 c
 &lt;/b&gt;
 &lt;/b&gt;
 &lt;/body&gt;
&lt;/html&gt;
 
 #1 You can drive a browser of your choice with SeleniumRC . 
 #2 You may want to take a look at Mechanize module: 

 http://wwwsearch.sourceforge.net/mechanize/ 
 #3 pyWebKitGTK looks like it might be of some help. 

 Also here is a dude that had to do the same thing but get the export of the content after javascript ran, execute javascript from python using pyWebKitGTK . 

 pyWebkitGTK at the cheeseshop . 

 You can also do this with pyQt . 
 #4 Well, WebKit is open source so you could use its own parser (in the WebCore component), if any language is acceptable 
 #5 Ian Bicking once wrote that surprisingly lxml could be better at parsing soups than BeautifulSoup: http://blog.ianbicking.org/2008/12/10/lxml-an-underappreciated-web-scraping-library/ (Just mentioning for reference, haven't tried that personally) 
 #6 have you tried scrapy ? 

 
 Scrapy is a fast high-level screen
 scraping and web crawling framework,
 used to crawl websites and extract
 structured data from their pages. It
 can be used for a wide range of
 purposes, from data mining to
 monitoring and automated testing. 
 
 #7 From the documentation it seems that ICantBelieveItsBeautifulSoup parser is what you want: 

 
 ICantBelieveItsBeautifulSoup is also a
 subclass of BeautifulSoup. It has HTML
 heuristics that conform more closely
 to the HTML standard, but ignore how
 HTML is used in the real world. For
 instance, it's valid HTML to nest &lt;B&gt;
 tags, but in the real world a nested
 &lt;B&gt; tag almost always means that the
 author forgot to close the first &lt;B&gt;
 tag. If you run into someone who
 actually nests &lt;B&gt; tags, then you can
 use ICantBelieveItsBeautifulSoup. 
 
 #8 this one looks good to me I am using it myself : link [http://code.google.com/p/webscraping/]