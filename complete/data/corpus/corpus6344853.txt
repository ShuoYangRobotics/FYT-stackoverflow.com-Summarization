Question (ID-6344853): python: unicode in Windows terminal, encoding used? I am using the Python interpreter in Windows 7 terminal. 
I am trying to wrap my head around unicode and encodings. 

 I type: 

 &gt;&gt;&gt; s='ë'
&gt;&gt;&gt; s
'\x89'
&gt;&gt;&gt; u=u'ë'
&gt;&gt;&gt; u
u'\xeb'
 

 Question 1 : Why is the encoding used in the string s different from the one used in the unicode string u ? 

 I continue, and type: 

 &gt;&gt;&gt; us=unicode(s)
Traceback (most recent call last):
 File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeDecodeError: 'ascii' codec can't decode byte 0x89 in position 0: ordinal
not in range(128)
&gt;&gt;&gt; us=unicode(s, 'latin-1')
&gt;&gt;&gt; us
u'\x89'
 

 Question2 : I tried using the latin-1 encoding on good luck to turn the string into an unicode string (actually, I tried a bunch of other ones first, including utf-8 ). How can I find out which encoding the terminal has used to encode my string? 

 Question 3 : how can I make the terminal print ë as ë instead of '\x89' or u'xeb' ? Hmm, stupid me. print(s) does the job. 

 I already looked at this related SO question, but no clues from there: Set Python terminal encoding on Windows 
 Answers (Total-6): #0 Unicode is not an encoding. You encode into byte strings and decode into Unicode: 

 &gt;&gt;&gt; '\x89'.decode('cp437')
u'\xeb'
&gt;&gt;&gt; u'\xeb'.encode('cp437')
'\x89'
&gt;&gt;&gt; u'\xeb'.encode('utf8')
'\xc3\xab'
 

 The windows terminal uses legacy code pages for DOS. For US Windows it is: 

 &gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.stdout.encoding
'cp437'
 

 Windows application use windows code pages. Python's IDLE will show the windows encoding: 

 &gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.stdout.encoding
'cp1252'
 

 Your results may vary. 
 #1 Read through this python HOWTO about unicode after you read this section from the tutorial 

 Creating Unicode strings in Python is just as simple as creating normal strings: 

 &gt;&gt;&gt; u'Hello World !'
u'Hello World !'
 

 To answer your first question, they are different because only when using u'' are you creating a unicode string. 

 2nd question: 

 sys.getdefaultencoding()
 

 returns the default encoding 

 But to quote from link : 

 
 Python users who are new to Unicode sometimes are attracted by default encoding returned by sys.getdefaultencoding(). The first thing you should know about default encoding is that you don't need to care about it. Its value should be 'ascii' and it is used when converting byte strings StrIsNotAString to unicode strings. 
 
 #2 
 Actually, unicode object has no
'encoding'. You should read up on
Unicode in python to avoid constant
confusion. This presentation looks
adequate -
 http://farmdev.com/talks/unicode/ . 
 You are on russian version of
windows, right? You terminal uses
cp1251. 
 
 #3 You've answered question 1 as you ask it: the first string is an encoded byte-string, but the second is not an encoding at all, it refers to a unicode code-point, which for "LATIN SMALL LETTER E WITH DIAERESIS" is hex eb . 

 Now, the question of what the first encoding is is an interesting one. I would normally expect it to be either utf-8, or, since you're on Windows, ISO-8859-1 or Win-1252 (which aren't exactly the same thing, but close enough). However, the normal representation of that letter in utf-8 is c3 ab and in Win-1252 it's actually the same as the unicode code-point - ie hex eb . So, it's a bit of a mystery. 
 #4 It appears you are using code page CP850 , which makes sense as this is the historical code page for DOS which has been carried forward to the terminal window. 

 &gt;&gt;&gt; s
'\x89'
&gt;&gt;&gt; us=unicode(s,'CP850')
&gt;&gt;&gt; us
u'\xeb'
 
 #5 As you've figured out:  

 &gt;&gt;&gt; a = "ё"
&gt;&gt;&gt; a
'\xf1'
&gt;&gt;&gt; print a
ё
 

 Do you open any file when get such errors?
If so, try to open it with 

 import codecs
f = codecs.open('filename.txt','r','utf-8')