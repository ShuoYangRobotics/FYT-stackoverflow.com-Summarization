Question (ID-6146963): When is del useful in python? I can't really think of any reason why python needs the del keyword (and most languages seem to not have a similar keyword). For instance, rather than deleting a variable, one could just assign None to it. And when deleting from a dictionary, a del method could be added. 

 Is there any reason to keep del in python, or is it a vestige of Python's pre-garbage collection days? 
 Answers (Total-6): #0 Firstly, you can del other things besides local variables 

 del list_item[4]
del dictionary["alpha"]
 

 Both of which should be clearly useful. Secondly, using del on a local variable makes the intent clearer. 

  del foo
 foo = None
 

 I know in the case of del foo that the intent is to remove the variable from scope. Its not clear that foo = None is doing that. If somebody just assigned foo = None I might think it was dead code. But I instantly know what somebody who codes del foo was trying to do. 
 #1 There's this part of what del does (from the Python Language Reference ): 

 
 Deletion of a name removes the binding of that name from the local or global namespace 
 

 Assigning None to a name does not remove the binding of the name from the namespace. 

 (I suppose there could be some debate about whether removing a name binding is actually useful , but that's another question.) 
 #2 
 When is del useful in python? 
 

 You can use it to remove a single element of an array instead of the slice syntax x[i:i+1]=[] . This may be useful if for example you are in os.walk and wish to delete an element in the directory. I would not consider a keyword useful for this though, since one could just make a [].remove(index) method (the .remove method is actually search-and-remove-first-instance-of-value). 
 #3 There is a specific example of when you should use del (there may be others, but I know about this one off hand) when you are using sys.exc_info() to inspect an exception. This function returns a tuple, the type of exception that was raised, the message, and a traceback. 

 The first two values are usually sufficient to diagnose an error and act on it, but the third contains the entire call stack between where the exception was raised and where the the exception is caught. In particular, if you do something like 

 try:
 do_evil()
except:
 exc_type, exc_value, tb = sys.exc_info()
 if something(exc_value):
  raise
 

 the traceback, tb ends up in the locals of the call stack, creating a circular reference that cannot be garbage collected. Thus, it is important to do: 

 try:
 do_evil()
except:
 exc_type, exc_value, tb = sys.exc_info()
 del tb
 if something(exc_value):
  raise
 

 to break the circular reference. In many cases where you would want to call sys.exc_info() , like with metaclass magic, the traceback is useful, so you have to make sure that you clean it up before you can possibly leave the exception handler. If you don't need the traceback, you should delete it immediately, or just do: 

 exc_type, exc_value = sys.exc_info()[:2]
 

 To avoid it all together. 
 #4 I think one of the reasons that del has its own syntax is that replacing it with a function might be hard in certain cases given it operates on the binding or variable and not the value it references. Thus if a function version of del were to be created a context would need to be passed in. del foo would need to become globals().remove('foo') or locals().remove('foo') which gets messy and less readable. Still I say getting rid of del would be good given its seemingly rare use. But removing language features/flaws can be painful. Maybe python 4 will remove it :) 
 #5 You can use __del__() to log warnings\errors if the object is deleted in an unexpected internal state.