Question (ID-1883980): Find the nth occurrence of substring in a string This seems like it should be pretty trivial, but I am new at Python and want to do it the most Pythonic way. 

 I want to find the n'th occurrence of a substring in a string. 

 There's got to be something equivalent to what I WANT to do which is 

 mystring.find("substring", 2nd) 

 How can you achieve this in Python? 
 Answers (Total-7): #0 Mark's iterative approach would be the usual way, I think. 

 Here's an alternative with string-splitting, which can often be useful for finding-related processes: 

 def findnth(haystack, needle, n):
 parts= haystack.split(needle, n+1)
 if len(parts)&lt;=n+1:
  return -1
 return len(haystack)-len(parts[-1])-len(needle)
 

 And here's a quick (and somewhat dirty, in that you have to choose some chaff that can't match the needle) one-liner: 

 'foo bar bar bar'.replace('bar', 'XXX', 1).find('bar')
 
 #1 Here's a more Pythonic version of the straightforward iterative solution: 

 def find_nth(haystack, needle, n):
 start = haystack.find(needle)
 while start &gt;= 0 and n &gt; 1:
  start = haystack.find(needle, start+len(needle))
  n -= 1
 return start
 

 Example: 

 &gt;&gt;&gt; find_nth("foofoofoofoo", "foofoo", 2)
6
 

 If you want to find the nth overlapping occurrence of needle , you can increment by 1 instead of len(needle) , like this: 

 def find_nth_overlapping(haystack, needle, n):
 start = haystack.find(needle)
 while start &gt;= 0 and n &gt; 1:
  start = haystack.find(needle, start+1)
  n -= 1
 return start
 

 Example: 

 &gt;&gt;&gt; find_nth_overlapping("foofoofoofoo", "foofoo", 2)
3
 

 This is easier to read than Mark's version, and it doesn't require the extra memory of the splitting version or importing regular expression module. It also adheres to a few of the rules in the Zen of python , unlike the various re approaches: 

 
 Simple is better than complex. 
 Flat is better than nested. 
 Readability counts. 
 
 #2 Understanding that regex is not always the best solution, I'd probably use one here: 

 &gt;&gt;&gt; import re
&gt;&gt;&gt; s = "ababdfegtduab"
&gt;&gt;&gt; [m.start() for m in re.finditer(r"ab",s)]
[0, 2, 11]
&gt;&gt;&gt; [m.start() for m in re.finditer(r"ab",s)][2] #index 2 is third occurrence 
11
 
 #3 I'd probably do something like this, using the find function that takes an index parameter: 

 def find_nth(s, x, n):
 i = -1
 for _ in range(n):
  i = s.find(x, i + len(x))
  if i == -1:
   break
 return i

print find_nth('bananabanana', 'an', 3)
 

 It's not particularly Pythonic I guess, but it's simple. You could do it using recursion instead: 

 def find_nth(s, x, n, i = 0):
 i = s.find(x, i)
 if n == 1 or i == -1:
  return i 
 else:
  return find_nth(s, x, n - 1, i + len(x))

print find_nth('bananabanana', 'an', 3)
 

 It's a functional way to solve it, but I don't know if that makes it more Pythonic. 
 #4 Here is another approach using re.finditer. 
The difference is that this only looks into the haystack as far as necessary 

 from re import finditer
from itertools import dropwhile
needle='an'
haystack='bananabanana'
n=2
next(dropwhile(lambda x: x[0]&lt;n, enumerate(re.finditer(needle,haystack))))[1].start()
 
 #5 &gt;&gt;&gt; s="abcdefabcdefababcdef"
&gt;&gt;&gt; j=0
&gt;&gt;&gt; for n,i in enumerate(s):
... if s[n:n+2] =="ab":
...  print n,i
...  j=j+1
...  if j==2: print "2nd occurence at index position: ",n
...
0 a
6 a
2nd occurence at index position: 6
12 a
14 a
 
 #6 Here's another re + itertools version that should work when searching for either a str or a RegexpObject . I will freely admit that this is likely over-engineered, but for some reason it entertained me. 

 import itertools
import re

def find_nth(haystack, needle, n = 1):
 """
 Find the starting index of the nth occurrence of ``needle`` in \
 ``haystack``.

 If ``needle`` is a ``str``, this will perform an exact substring
 match; if it is a ``RegexpObject``, this will perform a regex
 search.

 If ``needle`` doesn't appear in ``haystack``, return ``-1``. If
 ``needle`` doesn't appear in ``haystack`` ``n`` times,
 return ``-1``.

 Arguments
 ---------
 * ``needle`` the substring (or a ``RegexpObject``) to find
 * ``haystack`` is a ``str``
 * an ``int`` indicating which occurrence to find; defaults to ``1``

 &gt;&gt;&gt; find_nth("foo", "o", 1)
 1
 &gt;&gt;&gt; find_nth("foo", "o", 2)
 2
 &gt;&gt;&gt; find_nth("foo", "o", 3)
 -1
 &gt;&gt;&gt; find_nth("foo", "b")
 -1
 &gt;&gt;&gt; import re
 &gt;&gt;&gt; either_o = re.compile("[oO]")
 &gt;&gt;&gt; find_nth("foo", either_o, 1)
 1
 &gt;&gt;&gt; find_nth("FOO", either_o, 1)
 1
 """
 if (hasattr(needle, 'finditer')):
  matches = needle.finditer(haystack)
 else:
  matches = re.finditer(re.escape(needle), haystack)
 start_here = itertools.dropwhile(lambda x: x[0] &lt; n, enumerate(matches, 1))
 try:
  return next(start_here)[1].start()
 except StopIteration:
  return -1