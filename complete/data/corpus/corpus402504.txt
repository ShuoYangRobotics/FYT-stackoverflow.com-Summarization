Question (ID-402504): How to determine the variable type in Python I want to see the type of a variable whether it is unsigned 32 bit,signed 16 bit etc.
How to view... 
 Answers (Total-7): #0 Python doesn't have the same types as C/C++, which appears to be your question. 

 Try this: 

 &gt;&gt;&gt; i = 123
&gt;&gt;&gt; type(i)
&lt;type 'int'&gt;
&gt;&gt;&gt; type(i) is int
True
&gt;&gt;&gt; i = 123456789L
&gt;&gt;&gt; type(i)
&lt;type 'long'&gt;
&gt;&gt;&gt; type(i) is long
True
&gt;&gt;&gt; i = 123.456
&gt;&gt;&gt; type(i)
&lt;type 'float'&gt;
&gt;&gt;&gt; type(i) is float
True
 

 The distinction between int and long goes away in Python 3.0, though. 
 #1 The question is somewhat ambiguous -- I'm not sure what you mean by "view". If you are trying to query the type of a native Python object, @atzz 's answer will steer you in the right direction. 

 However, if you are trying to generate Python objects that have the semantics of primitive C-types, (such as uint32_t , int16_t ), use the struct module. You can determine the number of bits in a given C-type primitive thusly: 

 &gt;&gt;&gt; struct.calcsize('c') # char
1
&gt;&gt;&gt; struct.calcsize('h') # short
2
&gt;&gt;&gt; struct.calcsize('i') # int
4
&gt;&gt;&gt; struct.calcsize('l') # long
4
 

 This is also reflected in the array module, which can make arrays of these lower-level types: 

 &gt;&gt;&gt; array.array('c').itemsize # char
1
 

 The maximum integer supported (Python 2's int ) is given by sys.maxint . 

 &gt;&gt;&gt; import sys, math
&gt;&gt;&gt; math.ceil(math.log(sys.maxint, 2)) + 1 # Signedness
32.0
 

 There is also sys.getsizeof , which returns the actual size of the Python object in residual memory: 

 &gt;&gt;&gt; a = 5
&gt;&gt;&gt; sys.getsizeof(a) # Residual memory.
12
 

 For float data and precision data, use sys.float_info : 

 &gt;&gt;&gt; sys.float_info
sys.floatinfo(max=1.7976931348623157e+308, max_exp=1024, max_10_exp=308, min=2.2250738585072014e-308, min_exp=-1021, min_10_exp=-307, dig=15, mant_dig=53, epsilon=2.2204460492503131e-16, radix=2, rounds=1)
 
 #2 Python doesn't have such types as you describe. There are two types used to represent integral values: int , which corresponds to platform's int type in C, and long , which is an arbitrary precision integer (i.e. it grows as needed and doesn't have an upper limit). int s are silently converted to long if an expression produces result which cannot be stored in int . 
 #3 You may be looking for the type() function. 

 See the examples below, but there's no "unsigned" type in Python just like Java. 

 Positive integer: 

 &gt;&gt;&gt; v = 10
&gt;&gt;&gt; type(v)
&lt;type 'int'&gt;
 

 Large positive integer: 

 &gt;&gt;&gt; v = 100000000000000
&gt;&gt;&gt; type(v)
&lt;type 'long'&gt;
 

 Negative integer: 

 &gt;&gt;&gt; v = -10
&gt;&gt;&gt; type(v)
&lt;type 'int'&gt;
 

 Literal sequence of characters: 

 &gt;&gt;&gt; v = 'hi'
&gt;&gt;&gt; type(v)
&lt;type 'str'&gt;
 
 #4 It really depends on what level you mean. In Python 2.x, there are two integer types, int (constrained to sys.maxint ) and long (unlimited precision), for historical reasons. In Python code, this shouldn't make a bit of difference because the interpreter automatically converts to long when a number is too large. If you want to know about the actual data types used in the underlying interpreter, that's implementation dependent. (CPython's are located in Objects/intobject.c and Objects/longobject.c.) To find out about the systems types look at cdleary answer for using the struct module. 
 #5 print type(variable_name)
 

 I also highly recommend the IPython interactive interpreter when dealing with questions like this. It lets you type variable_name? and will return a whole list of information about the object including the type and the doc string for the type. 

 e.g. 

 In [9]: var = 123

In [10]: var?
Type: 	int
Base Class: &lt;type 'int'&gt;
String Form: 123
Namespace: Interactive
Docstring:
 int(x[, base]) -&gt; integer

 Convert a string or number to an integer, if possible. A floating point
 argument will be truncated towards zero (this does not include a string
 representation of a floating point number!) When converting a string, use
 the optional base. It is an error to supply a base when converting a
 non-string. If the argument is outside the integer range a long object
 will be returned instead.
 
 #6 Do you mean in python or using ctypes? 

 In the first case, you simply cannot - because python does not have signed/unsigned, 16/32 bit integers. 

 In the second case, you can use type(): 

 &gt;&gt;&gt; import ctypes
&gt;&gt;&gt; a = ctypes.c_uint() # unsigned int
&gt;&gt;&gt; type(a)
&lt;class 'ctypes.c_ulong'&gt;
 

 For more reference on ctypes, an its type, see official documentation .