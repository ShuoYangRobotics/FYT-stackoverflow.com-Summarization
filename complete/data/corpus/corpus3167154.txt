Question (ID-3167154): How to split a dos path into its components in Python I have a string variable which represents a dos path e.g: 

 var = "d:\stuff\morestuff\furtherdown\THEFILE.txt" 

 I want to split this string into: 

 [ "d", "stuff", "morestuff", "furtherdown", "THEFILE.txt" ] 

 I have tried using split() and replace() but they either only process the first backslash or they insert hex numbers into the string. 

 I need to convert this string variable into a raw string somehow so that I can parse it. 

 What's the best way to do this? 

 I should also add that the contents of var i.e. the path that I'm trying to parse, is actually the return value of a command line query. It's not path data that I generate myself. Its stored in a file, and the command line tool is not going to escape the backslashes. 
 Answers (Total-7): #0 I've been bitten loads of times by people writing their own path fiddling functions and getting it wrong. Spaces, slashes, backslashes, colons -- the possibilities for confusion are not endless, but mistakes are easily made anyway. So I'm a stickler for the use of os.path , and recommend it on that basis. 

 (However, the path to virtue is not the one most easily taken, and many people when finding this are tempted to take a slippery path straight to damnation. They won't realise until one day everything falls to pieces, and they -- or, more likely, somebody else -- has to work out why everything has gone wrong, and it turns out somebody made a filename that mixes slashes and backslashes -- and some person suggests that the answer is "not to do that". Don't be any of these people. Except for the one who mixed up slashes and backslashes -- you could be them if you like.) 

 You can get the drive and path+file like this: 

 drive,path_and_file=os.path.splitdrive(path)
 

 Get the path and the file: 

 path,file=os.path.split(path_and_file)
 

 Getting the individual folder names is not especially convenient, but it is the sort of honest middling discomfort that heightens the pleasure of later finding something that actually works well: 

 folders=[]
while 1:
 path,folder=os.path.split(path)

 if folder!="":
  folders.append(folder)
 else:
  if path!="":
   folders.append(path)

  break

folders.reverse()
 

 (This pops a "\" at the start of folders if the path was originally absolute. You could lose a bit of code if you didn't want that.) 
 #1 The problem here starts with how you're creating the string in the first place. 

 a = "d:\stuff\morestuff\furtherdown\THEFILE.txt"
 

 Done this way, Python is trying to special case these: \s , \m , \f , and \T'. In your case, \f` is being treated as a formfeed (0x0C) while the other backslashes are handled correctly. What you need to do is one of these: 

 b = "d:\\stuff\\morestuff\\furtherdown\\THEFILE.txt"  # doubled backslashes
c = r"d:\stuff\morestuff\furtherdown\THEFILE.txt"   # raw string, no doubling necessary
 

 Then once you split either of these, you'll get the result you want. 
 #2 It works for me: 

 &gt;&gt;&gt; a=r"d:\stuff\morestuff\furtherdown\THEFILE.txt"
&gt;&gt;&gt; a.split("\\")
['d:', 'stuff', 'morestuff', 'furtherdown', 'THEFILE.txt']
 

 Sure you might need to also strip out the colon from the first component, but keeping it makes it possible to re-assemble the path. 

 The r modifier marks the string literal as "raw"; notice how embedded backslashes are not doubled. 
 #3 The stuff about about mypath.split("\") would be better expressed as mypath.split(os.pathsep). pathsep is the path separator for your particular platform (e.g., \ for windows, / for unix, etc), and the python build knows which one to use. If you use pathsep, then your code will be platform agnostic. 
 #4 Let assume you have have a file filedata.txt with content: 

 d:\stuff\morestuff\furtherdown\THEFILE.txt
d:\otherstuff\something\otherfile.txt
 

 You can read and split the file paths: 

 &gt;&gt;&gt; for i in open("filedata.txt").readlines():
...  print i.strip().split("\\")
... 
['d:', 'stuff', 'morestuff', 'furtherdown', 'THEFILE.txt']
['d:', 'otherstuff', 'something', 'otherfile.txt']
 
 #5 use ntpath.split() 
 #6 Just like others explained - your problem stemmed from using \ , which is escape character in string literal/constant. OTOH, if you had that file path string from another source (read from file, console or returned by os function) - there wouldn't have been problem splitting on '\\' or r'\'. 

 And just like others suggested, if you want to use \ in program literal, you have to either duplicate it \\ or the whole literal has to be prefixed by r , like so r'lite\ral' or r"lite\ral" to avoid the parser converting that \ and r to CR (carriage return) character. 

 There is one more way though - just don't use backslash \ pathnames in your code! Since last century Windows recognizes and works fine with pathnames which use forward slash as directory separator / ! Somehow not many people know that.. but it works: 

 &gt;&gt;&gt; var = "d:/stuff/morestuff/furtherdown/THEFILE.txt"
&gt;&gt;&gt; var.split('/')
['d:', 'stuff', 'morestuff', 'furtherdown', 'THEFILE.txt']
 

 This by the way will make your code work on Unix, Windows and Mac... because all of them do use / as directory separator... even if you don't want to use the predefined constants of module os .