Question (ID-5447494): Best way to remove an item from a Python dictionary? What is the best way to remove an item from a dictionary? Here's a simple approach: 

 for key, item in some_dict.items():
 if item is item_to_remove:
  del some_dict[key]
 

 Are there better ways? Is there anything wrong with mutating (deleting items) from the dictionary while iterating it? 
 Answers (Total-6): #0 Be aware that you're currently testing for object identity ( is only returns True if both operands are represented by the same object in memory - this is not always the case with two object that compare equal with == ). If you are doing this on purpose, then you could rewrite your code as 

 some_dict = {key: value for key, value in some_dict.items() 
    if value is not value_to_remove}
 

 But this may not do what you want: 

 &gt;&gt;&gt; some_dict = {1: "Hello", 2: "Goodbye", 3: "You say yes", 4: "I say no"}
&gt;&gt;&gt; value_to_remove = "You say yes"
&gt;&gt;&gt; some_dict = {key: value for key, value in some_dict.items() if value is not value_to_remove}
&gt;&gt;&gt; some_dict
{1: 'Hello', 2: 'Goodbye', 3: 'You say yes', 4: 'I say no'}
&gt;&gt;&gt; some_dict = {key: value for key, value in some_dict.items() if value != value_to_remove}
&gt;&gt;&gt; some_dict
{1: 'Hello', 2: 'Goodbye', 4: 'I say no'}
 

 So you probably want != instead of is not . 
 #1 items() returns a list, and it is that list you are iterating, so mutating the dict in the loop doesn't matter here. If you were using iteritems() instead, mutating the dict in the loop would be problematic , and likewise for viewitems() in Python 2.7. 

 I can't think of a better way to remove items from a dict by value. 
 #2 &gt;&gt;&gt; dic = {'a':1, 'b':2}
&gt;&gt;&gt; dic
{'a': 1, 'b': 2}
&gt;&gt;&gt; dic.pop('c', 0)
0
&gt;&gt;&gt; dic.pop('a', 0)
1
&gt;&gt;&gt; dic
{'b': 2}
 
 #3 There is nothing wrong with deleting items from the dictionary while iterating, as you've proposed. Be careful about multiple threads using the same dictionary at the same time, which may result in a KeyError or other problems. 

 Of course, see the docs at http://docs.python.org/library/stdtypes.html#typesmapping 
 #4 a={'name':'your_name','class':4}
if a.has_key('name'):
 del a['name']
 
 #5 I'd build a list of keys that need removing, then remove them. It's simple, efficient and avoids any problem about simultaneously iterating over and mutating the dict. 

 keys_to_remove = [key for key, value in some_dict.iteritems()
     if value == value_to_remove]
for key in keys_to_remove:
 del some_dict[key]