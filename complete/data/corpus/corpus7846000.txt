Question (ID-7846000): Finding the label preceding the longest line in a file I have a file that follows a format of 

 _line 1
this is a string on a line
_line 2
this is another string
_line 3
short line
 

 I am trying to write some Python code to get me the _line X label of the string below it that has the longest string length. Can you help me fix my code please? Here is what I have so far. 

 f = open('test.txt', 'r')
print f

read="null"
top_read_line_length="0"
topreadline="null"
for line in f:
 checkifread=line.find('line')
 if checkifread==1:
  print "Read label found"
  #means we are on a read line
  currentread=line
 else:
  #We are on a sequence line for currentread.
  currentlength=len(line)
  print currentlength
 print top_read_line_length

 if int(top_read_line_length) &lt; int(currentlength):
  print topreadline
  topreadline=currentread#now topreadline label is the "_line" string
  topreadlinelength=int(currentlength)
  print topreadline

  #go to next line

print "Done"
print "Longest line is...."
print topreadline
 
 Answers (Total-12): #0 If all you wanted were the longest line in the file (like the question title says), then this one is shockingly simple in modern Python: 

 &gt;&gt;&gt; max(open('test.txt'), key=len)
 
 #1 To fetch the label of the longest line, build a mapping of labels to line-lengths 

 In your sample dataset, it looks like labels startwith "_line " and the corresponding line immediately follows: 

 label2linelength = {}
for line in open('test.txt'):
 if line.startswith('_line '):
  label = line
 else:
  label2linelength[label] = len(line)
 lastline = line
print max(label2linelength.items(), key=lambda kv: kv[1])
 
 #2 That is easy to achieve: 

 data = open('test.txt').readlines()
max_line_pos = data.index(max(data, key=len))
prev_line = data[max_line_pos-1]
print prev_line
 
 #3 I'd do something like: 

 label = None
maxlen = 0
maxstr = ''
maxlabel = None
with open('f.txt') as f:
 for line in f:
 line = line.rstrip()
 if line.startswith('_line'):
  label = line
 elif len(line) &gt; maxlen:
  maxlen = len(line)
  maxstr = line
  maxlabel = label
print maxlabel, maxstr
 

 It's a little bit more generic than the problem statement in that it allows multiple lines of text per label. 
 #4 I'd elaborate on Raymond's answer; if grouper() were available in the standard lib this answer would be quite close to a oneliner again; unluckily it isn't, grouper is only defined in itertools examples. 

 I think you'd prefer this version since it's functional. I didn't test its performance, but at least I'm not opening the file and seeking twice nor I'm keeping the whole contents in memory. 

 from itertools import izip_longest
def grouper(n, iterable, fillvalue=None):
 "grouper(3, 'ABCDEFG', 'x') --&gt; ABC DEF Gxx"
 args = [iter(iterable)] * n
 return izip_longest(fillvalue=fillvalue, *args)

max( grouper(2, open("test.txt")), key=lambda x:len(x[1]))[0]
 
 #5 Another concise variant: 

 from itertools import imap, izip
from operator import itemgetter
with open("a.py") as f:
 res = max(izip(f, imap(len, f)), key=itemgetter(1))[0]
 

 This treats every other line as a label. 
 #6 Here's my one. It works where a few of the other answers here would fail, e.g. an input file like 

 _line 1
abc
_line 2
defg
_line 3
hij
 

 But it does rely on the format of the file being just how you said it was. 

 with open('test.txt') as f:
 spam = f.readlines()

labels = spam[0::2]
lines = spam[1::2]

d = dict(zip(labels, lines))

longest_lines_label = max(d, key=lambda x: len(d[x]))

print "Longest line is...."
print longest_lines_label, d[longest_lines_label]
 
 #7 If you are sure the data is correct and don't need any error handling this should do the job: 

 lines = open('test.txt', 'r').readlines()
print max([(len(lines[i+1]), lines[i])
   for i in xrange(0, len(lines), 2)])[1].strip()
 
 #8 Here's an awk program that will do it: 

 BEGIN { best=""; best_length=0; current=""; }
/^_/ { current=$0; }
/^[^_]/ { if(length($0) &gt; best_length) { best=current; best_length=length($0); }}
END { print "Longest line: "best" with length: "best_length }
 

 (I like it better than the following python version, which more closely answers your question....) 

 best = ""
best_length = 0
current = ""
for line in f: #( assumes f = open(...) from your code )
 if line[:5] == '_line':
 current = line.strip()
 continue
 else:
 if len(line) &gt; best_length:
  best = current
  best_length = len(line.strip())
print "Longest line is: %s with length: %d" % (best,best_length)
 
 #9 This is fairly short, and works even if you have multiple lines of text after each label 

 content = list(open("test.txt"))
longest = content.index(max(content, key=len))
label = [ x for x in content[0:longest] if x.startswith("_line") ][-1]
print label.replace("_line ","")
 
 #10 And here's yet another way: 

 import re, mmap

with open("test.txt", "rb") as f:
 mm = mmap.mmap(f.fileno(), 0, mmap.MAP_PRIVATE, mmap.PROT_READ)
 print max(re.finditer(r'_line (\d+)\n(.*)', mm),
    key=lambda m: len(m.group(2))).group(1)
 
 #11 Here's your code, fixed: 

 f = open('test.txt', 'r')
print f

read = None
top_read_line_length = 0
topreadline = None
currentlength = 0
label_line = True
for line in f: 
 if label_line:
  label_line = False
  print "label line", line
  #means we are on a read line
  currentread = line
 else:
  label_line = True
  #We are on a sequence line for currentread.
  currentlength = len(line)
  print 'cl', currentlength
 print top_read_line_length

 if top_read_line_length &lt; currentlength:
  print 'trl', topreadline
  topreadline = currentread #now topreadline label is the "_line" string
  top_read_line_length = currentlength
  print 'trl', topreadline

  #go to next line

print "Done"
print "Longest line is...."
print topreadline
 

 I added a label_line boolean to switch back and forth between lable-lines and data-lines, but the important pieces were: 

 
 put enough info on your print lines to see what's going on; and 
 be consistent with your variable names 
 

 The problem was in the last if suite -- you were checking top_read_line_length but were setting topreadlinelength (no underscores).