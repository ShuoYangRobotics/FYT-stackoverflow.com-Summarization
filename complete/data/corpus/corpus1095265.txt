Question (ID-1095265): Matrix from Python to MATLAB I'm working with Python and MATLAB right now and I have a 2D array in Python that I need to write to a file and then be able to read it into MATLAB as a matrix. Any ideas on how to do this? 

 Thanks! 
 Answers (Total-7): #0 If you use numpy/scipy, you can use the scipy.io.savemat function: 

 import numpy, scipy.io

arr = numpy.arange(10)
arr = arr.reshape((3, 3)) # 2d array of 3x3

scipy.io.savemat('c:/tmp/arrdata.mat', mdict={'arr': arr})
 

 Now, you can load this data into MATLAB using File -> Load Data. Select the file and the arr variable (a 3x3 matrix) will be available in your environment. 

 Note: I did this on scipy 0.7.0. (scipy 0.6 has savemat in the scipy.io.mio module.) See the latest documentation for more detail: 

 http://docs.scipy.org/doc/scipy/reference/generated/scipy.io.savemat.html 

 EDIT: updated link thanks to gnovice . 
 #1 I think ars has the most straight-forward answer for saving the data to a .mat file from Python (using savemat ). To add just a little to their answer, you can also load the .mat file into MATLAB programmatically using the LOAD function instead of doing it by hand using the MATLAB command window menu... 

 You can use either the command syntax form of LOAD: 

 load c:/tmp/arrdata.mat
 

 or the function syntax form (if you have the file path stored in a string): 

 filePath = 'c:/tmp/arrdata.mat';
data = load(filePath);
 
 #2 I wrote a small function to do this same thing, without need for numpy. It takes a list of lists and returns a string with a MATLAB-formatted matrix. 

 def arrayOfArrayToMatlabString(array):
 return '[' + "\n ".join(" ".join("%6g" % val for val in line) for line in array) + ']'
 

 Write "myMatrix = " + arrayOfArrayToMatlabString(array) to a .m file, open it in matlab, and execute it. 
 #3 You could write the matrix in Python to a CSV file and read it in MATLAB using csvread. 
 #4 All solutions listed so far involve writing the data to disk. This is not essential, I have written a tool (not yet published, but the idea is simple) that uses a pipe to communicate the data. Matlab lacking pipe support, I write it to a named pipe from Python, and read it from the named pipe in Matlab. Like this I don't need unnecessary disk I/O and the solution should be considerably faster for large amounts of data. 

 However, I'm afraid I might have fallen into the trap so nicely formulated by Don. Knuth: Premature optimization is the root of all evil. 
 #5 You can also call matlab directly from python: 

 from mlabwrap import mlab
import numpy 
a = numpy.array([1,2,3])
mlab.plot(a)
 
 #6 I would probably use numpy.savetxt('yourfile.mat',yourarray) in Python
and then yourarray = load('yourfile.mat') in MATLAB.