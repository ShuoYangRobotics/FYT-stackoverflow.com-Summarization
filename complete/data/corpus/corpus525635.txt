Question (ID-525635): Regular expression: match start or whitespace Can a regular expression match whitespace or the start of a string? 

 I'm trying to replace currency the abbreviation GBP with a £ symbol. I could just match anything starting GBP, but I'd like to be a bit more conservative, and look for certain delimiters around it. 

 &gt;&gt;&gt; import re
&gt;&gt;&gt; text = u'GBP 5 Off when you spend GBP75.00'

&gt;&gt;&gt; re.sub(ur'GBP([\W\d])', ur'£\g&lt;1&gt;', text) # matches GBP with any prefix
u'\xa3 5 Off when you spend \xa375.00'

&gt;&gt;&gt; re.sub(ur'^GBP([\W\d])', ur'£\g&lt;1&gt;', text) # matches at start only
u'\xa3 5 Off when you spend GBP75.00'

&gt;&gt;&gt; re.sub(ur'(\W)GBP([\W\d])', ur'\g&lt;1&gt;£\g&lt;2&gt;', text) # matches whitespace prefix only
u'GBP 5 Off when you spend \xa375.00'
 

 Can I do both of the latter examples at the same time? 
 Answers (Total-7): #0 Use the OR " | " operator: 

 &gt;&gt;&gt; re.sub(r'(^|\W)GBP([\W\d])', u'\g&lt;1&gt;£\g&lt;2&gt;', text)
u'\xa3 5 Off when you spend \xa375.00'
 
 #1 This replaces GBP if it's preceded by the start of a string or a word boundary (which the start of a string already is), and after GBP comes a numeric value or a word boundary: 

 re.sub(u'\bGBP(?=\b|\d)', u'£', text)
 

 This removes the need for any unnecessary backreferencing by using a lookahead . Inclusive enough? 
 #2 \b is word boundary, which can be a white space, the beginning of a line or a non-alphanumeric symbol ( "\"GBP\"" ). 
 #3 I think you're looking for '(^|\W)GBP([\W\d])' 
 #4 Yes, why not? 

 re.sub(u'^\W*GBP...
 

 matches the start of the string, 0 or more whitespaces, then GBP... 

 edit : Oh, I think you want alternation, use the | : 

 re.sub(u'(^|\W)GBP...
 
 #5 You can always trim leading and trailing whitespace from the token before you search if it's not a matching/grouping situation that requires the full line. 
 #6 It works in Perl: 

 $text = 'GBP 5 off when you spend GBP75';
$text =~ s/(\W|^)GBP([\W\d])/$1\$$2/g;
printf "$text\n";
 

 The output is: 

 $ 5 off when you spend $75
 

 Note that I stipulated that the match should be global, to get all occurrences.