Question (ID-6294179): How to find all occurrences of an element in a list? index will just give the first occurrence. Is there a neat trick which returns all indices in a list 
 Answers (Total-6): #0 You can use a list comprehension: 

 indices = [i for i, x in enumerate(my_list) if x == "whatever"]
 
 #1 One more solution(sorry if duplicates) for all occurrences: 

 values = [1,2,3,1,2,4,5,6,3,2,1]
map(lambda val: (val, [i for i in xrange(len(values)) if values[i] == val]), values)
 
 #2 How about: 

 In [1]: l=[1,2,3,4,3,2,5,6,7]

In [2]: [i for i,val in enumerate(l) if val==3]
Out[2]: [2, 4]
 
 #3 occurrences = lambda s, lst: (i for i,e in enumerate(lst) if e == s)
list(occurrences(1, [1,2,3,1])) # = [0, 3]
 
 #4 While not a solution for lists directly, numpy really shines for this sort of thing: 

 import numpy as np
values = np.array([1,2,3,1,2,4,5,6,3,2,1])
searchval = 3
ii = np.where(values == searchval)[0]
 

 returns: 

 ii ==&gt;array([2, 8])
 

 This can be significantly faster for lists (arrays) with a large number of elements vs some of the other solutions. 
 #5 Edit (Idiotness): 

 Adding to the good answers. 

 def count(x, lst):
 ind = []
 for i in lst:
  if i == x:
   ind.append(lst.index(x))
 return ind