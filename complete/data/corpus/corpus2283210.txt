Question (ID-2283210): Python function pointer I have a function name stored in a variable like this: 

 myvar = 'mypackage.mymodule.myfunction'
 

 and I now want to call myfunction like this 

 myvar(parameter1, parameter2)
 

 What's the easiest way to achieve this? 
 Answers (Total-6): #0 funcdict = {
 'mypackage.mymodule.myfunction': mypackage.mymodule.myfunction,
 ....
}

funcdict[myvar](parameter1, parameter2)
 
 #1 It's much nicer to be able to just store the function itself, since they're first-class objects in python. 

 import mypackage

myfunc = mypackage.mymodule.myfunction
myfunc(parameter1, parameter2)
 

 But, if you have to import the package dynamically, then you can achieve this through: 

 mypackage = __import__('mypackage')
mymodule = getattr(mypackage, 'mymodule')
myfunction = getattr(mymodule, 'myfunction')

myfunction(parameter1, parameter2)
 

 Bear in mind however, that all of that work applies to whatever scope you're currently in. If you don't persist them somehow, you can't count on them staying around if you leave the local scope. 
 #2 def f(a,b):
 return a+b

xx = 'f'
print eval('%s(%s,%s)'%(xx,2,3))
 

 OUTPUT 

 5
 
 #3 Easiest 

 eval(myvar)(parameter1, parameter2)
 

 You don't have a function "pointer". You have a function "name". 

 While this works well, you will have a large number of folks telling you it's "insecure" or a "security risk". 
 #4 modname, funcname = myvar.rsplit('.', 1)
getattr(sys.modules[modname], funcname)(parameter1, parameter2)
 
 #5 Why not store the function itself? myvar = mypackage.mymodule.myfunction is much cleaner.