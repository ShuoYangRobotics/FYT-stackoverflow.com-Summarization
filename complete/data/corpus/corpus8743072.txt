Question (ID-8743072): When adding to list why does Python copy values instead of pointers? What I was trying to do (C code): 

 int a = 2, b = 3, c = 4;

int* arr[3] = {&amp;a, &amp;b, &amp;c};

for (int i = 0; i &lt; 3; ++i) {
 if (*(arr[i]) &gt; 1) {
  *(arr[i]) = 1
 }
}
 

 I was expecting Python to do similar pointer like behavior with this piece of code. 

 &gt;&gt;&gt; a = 2
&gt;&gt;&gt; b = 3
&gt;&gt;&gt; c = 4
&gt;&gt;&gt; for x in [a, b, c]:
...  if x &gt; 1:
...    x = 1
... 
&gt;&gt;&gt; a,b,c
(2, 3, 4)
 

 How can the C code like behavior be achieved in Python? 
 Answers (Total-6): #0 Python doesn't have pointers in that sense. 

 Python variables are names bound to a value not a location in memory, so changing the value for one variable does not change the value for another variable with the same value. 

 You can achieve something a bit like you want using locals : 

 &gt;&gt;&gt; a = 2
&gt;&gt;&gt; b = 3
&gt;&gt;&gt; c = 4
&gt;&gt;&gt; for x in 'a','b','c':
... if locals()[x] &gt; 1:
...  locals()[x] = 1
... 
&gt;&gt;&gt; a
1
 

 However, I'd strongly recommend against doing this . If you post another question explaining the problem you're try to solve you'll get a more "Pythonic" way of doing it. 

 It may just be a case of storing your values in a dict : 

 &gt;&gt;&gt; vals = { 'a' : 2, 'b' : '3', 'c' : 4 }
&gt;&gt;&gt; for key,value in vals.items():
...  if value &gt; 1:
...  vals[key] = 1
... 
&gt;&gt;&gt; vals
{'a': 1, 'c': 1, 'b': 1}
 
 #1 You should use mutable objects for that. 
For example: 

 a = 2
b = 3
c = 4

ls = [a, b, c]

for i, val in enumerate(ls):
  if val &gt; 1:
  ls[i] = 1

print ls
 

 gives you: 

 [1, 1, 1]
 

 if you need a, b, c: 

 &gt;&gt;&gt; [a, b, c] = ls
&gt;&gt;&gt; a
1
 
 #2 Maybe this be helpfull 

 a,b,c = [ 1 if i&gt;1 else i for i in [ a, b, c ] ]
a,b,c = map( lambda x: 1 if x&gt;1 else x, [a,b,c] ) #lambda or name of some function
 
 #3 When you do x = 5 you change the reference, not the underlying value. Now x reference is pointing to value 5 (which is usually only single object in interpreter). 

 In python you code differently. What you are trying to achieve is done with a following way: 

 arr = [2, 3 , 4]
def foo(x):
 return x if x &gt; 1 else x
arr = [foo(a) for a in arr]
 

 Or can be even done in a one liner: 

 &gt;&gt;&gt; [1 if a &gt; 1 else a for a in arr]
[1, 1, 1]
 
 #4 I assume that what you're actually trying to do is inspect and modify some set of variables, rather than some list of values. If not, you probably want to do one of the other things listed here, namely using an actual list instead of the individual variables. I would strongly not recommend this sort of technique for most code, but it can be useful for certain metaprogramming problems. 

 So, with that out of the way, you can throw caution to the wind and manipulate the variables by name: 

 a, b, c = 2, 3, 4

for name in ['a','b','c']:
 if locals()[name] &gt; 1:
  locals()[name] = 1

print a, b, c
 
 #5 As other answers has quite explained as why your expectations cannot be done 

 Here is one solution that might add to the bouquet 

 a,b,c = [1 if i &gt; 1 else i for i in [a,b,c]]