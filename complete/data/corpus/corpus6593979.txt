Question (ID-6593979): How to convert a set to a list in python? Am trying to convert a set to a list using this syntax: 

 first_list = [1,2,3,4]
my_set=set(first_list)
my_list = list(my_set)
 

 but i get a stack trace 

 Traceback (most recent call last):
 File "&lt;console&gt;", line 1, in &lt;module&gt;
TypeError: 'set' object is not callable
 

 How do i do this?
Am using python 2.6 

 Gath 
 Answers (Total-6): #0 It is already a list 

 type(my_set)
&gt;&gt;&gt; &lt;type 'list'&gt;
 

 Do you want something like 

 my_set = set([1,2,3,4])
my_list = list(my_set)
print my_list
&gt;&gt; [1, 2, 3, 4]
 

 EDIT : 
Output of your last comment 

 &gt;&gt;&gt; my_list = [1,2,3,4]
&gt;&gt;&gt; my_set = set(my_list)
&gt;&gt;&gt; my_new_list = list(my_set)
&gt;&gt;&gt; print my_new_list
[1, 2, 3, 4]
 

 I'm wondering if you did something like this : 

 &gt;&gt;&gt; set=set()
&gt;&gt;&gt; set([1,2])
Traceback (most recent call last):
 File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'set' object is not callable
 
 #1 Review your first line. Your stack trace is clearly not from the code you've pasted here, so I don't know precisely what you've done. 

 &gt;&gt;&gt; my_set=([1,2,3,4])
&gt;&gt;&gt; my_set
[1, 2, 3, 4]
&gt;&gt;&gt; type(my_set)
&lt;type 'list'&gt;
&gt;&gt;&gt; list(my_set)
[1, 2, 3, 4]
&gt;&gt;&gt; type(_)
&lt;type 'list'&gt;
 

 What you wanted was set([1, 2, 3, 4]) . 

 &gt;&gt;&gt; my_set = set([1, 2, 3, 4])
&gt;&gt;&gt; my_set
set([1, 2, 3, 4])
&gt;&gt;&gt; type(my_set)
&lt;type 'set'&gt;
&gt;&gt;&gt; list(my_set)
[1, 2, 3, 4]
&gt;&gt;&gt; type(_)
&lt;type 'list'&gt;
 

 The "not callable" exception means you were doing something like set()() - attempting to call a set instance. 
 #2 I'm not sure that you're creating a set with this ([1, 2]) syntax, rather a list. To create a set, you should use set([1, 2]) . 

 These brackets are just envelopping your expression, as if you would have written: 

 if (condition1
 and condition2 == 3):
 print something
 

 There're not really ignored, but do nothing to your expression. 

 Note: (something, something_else) will create a tuple (but still no list). 
 #3 [EDITED]
It's seems you earlier have redefined "list", using it as a variable name, like this: 

 list = set([1,2,3,4]) # oops
#...
first_list = [1,2,3,4]
my_set=set(first_list)
my_list = list(my_set)
 

 And you'l get 

 Traceback (most recent call last):
 File "&lt;console&gt;", line 1, in &lt;module&gt;
TypeError: 'set' object is not callable
 
 #4 Python is a dynamically typed language, which means that you cannot define the type of the variable as you do in C or C++: 

 type variable = value
 

 or 

 type variable(value)
 

 In Python, you use coercing if you change types, or the init functions (constructors) of the types to declare a variable of a type: 

 my_set = set([1,2,3])
type my_set
 

 will give you &lt;type 'set'&gt; for an answer. 

 If you have a list, do this: 

 my_list = [1,2,3]
my_set = set(my_list)
 
 #5 Hmmm I bet that in some previous lines you have something like: 

 list = set(something)
 

 Am I wrong ?