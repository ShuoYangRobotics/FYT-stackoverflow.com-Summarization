Question (ID-196876): Is there a better way to get a named series of constants (enumeration) in Python? Just looking at ways of getting named constants in python. 

 class constant_list:
 (A_CONSTANT, B_CONSTANT, C_CONSTANT) = range(3)
 

 Then of course you can refer to it like so: 

 constant_list.A_CONSTANT
 

 I suppose you could use a dictionary, using strings: 

 constant_dic = {
 "A_CONSTANT" : 1,
 "B_CONSTANT" : 2,
 "C_CONSTANT" : 3,}
 

 and refer to it like this: 

 constant_dic["A_CONSTANT"]
 

 

 My question, then, is simple. Is there any better ways of doing this? Not saying that these are inadequate or anything, just curious - any other common idioms that I've missed? 

 Thanks in advance. 
 Answers (Total-6): #0 For 2.3 or after: 

 class Enumerate(object):
 def __init__(self, names):
 for number, name in enumerate(names.split()):
  setattr(self, name, number)
 

 To use: 

 codes = Enumerate('FOO BAR BAZ')
 

 codes.BAZ will be 2 and so on. 

 If you only have 2.2, precede this with: 

 from __future__ import generators

 def enumerate(iterable):
 number = 0
 for name in iterable:
  yield number, name
  number += 1
 

 ( This was taken from here ) 
 #1 I find the enumeration class recipe (Active State, Python Cookbook ) to be very effective. 

 Plus it has a lookup function which is nice. 

 Pev 
 #2 An alternative construction for constant_dic: 

 constants = ["A_CONSTANT", "B_CONSTANT", "C_CONSTANT"]
constant_dic = dict([(c,i) for i, c in enumerate(constants)])
 
 #3 The following acts like a classisc "written in stone" C enum -- once defined, you can't change it, you can only read its values. Neither can you instantiate it. All you have to do is "import enum.py" and derive from class Enum. 

 # this is enum.py
class EnumException( Exception ):
 pass

class Enum( object ):
 class __metaclass__( type ):
  def __setattr__( cls, name, value ):
   raise EnumException("Can't set Enum class attribute!")
  def __delattr__( cls, name ):
   raise EnumException("Can't delete Enum class attribute!")

 def __init__( self ):
  raise EnumException("Enum cannot be instantiated!")
 

 This is the test code: 

 # this is testenum.py
from enum import *

class ExampleEnum( Enum ):
 A=1
 B=22
 C=333

if __name__ == '__main__' :

 print "ExampleEnum.A |%s|" % ExampleEnum.A
 print "ExampleEnum.B |%s|" % ExampleEnum.B
 print "ExampleEnum.C |%s|" % ExampleEnum.C
 z = ExampleEnum.A
 if z == ExampleEnum.A:
  print "z is A"

 try:
  ExampleEnum.A = 4 
  print "ExampleEnum.A |%s| FAIL!" % ExampleEnum.A
 except EnumException:
  print "Can't change Enum.A (pass...)"

 try:
  del ExampleEnum.A
 except EnumException:
  print "Can't delete Enum.A (pass...)"

 try:
  bad = ExampleEnum()
 except EnumException:
  print "Can't instantiate Enum (pass...)"
 
 #4 This is the best one I have seen: "First Class Enums in Python" 

 http://code.activestate.com/recipes/413486/ 

 It gives you a class, and the class contains all the enums. The enums can be compared to each other, but don't have any particular value; you can't use them as an integer value. (I resisted this at first because I am used to C enums, which are integer values. But if you can't use it as an integer, you can't use it as an integer by mistake so overall I think it is a win.) Each enum is a unique object. You can print enums, you can iterate over them, you can test that an enum value is "in" the enum. It's pretty complete and slick. 
 #5 In Python, strings are immutable and so they are better for constants than numbers. The best approach, in my opinion, is to make an object that keeps constants as strings: 

 class Enumeration(object):
 def __init__(self, possibilities):
  self.possibilities = set(possibilities.split())

 def all(self):
  return sorted(self.possibilities)

 def __getattr__(self, name):
  if name in self.possibilities:
   return name
  raise AttributeError("Invalid constant: %s" % name)
 

 You could then use it like this: 

 &gt;&gt;&gt; enum = Enumeration("FOO BAR")
&gt;&gt;&gt; print enum.all()
['BAR', 'FOO']
&gt;&gt;&gt; print enum.FOO
FOO
&gt;&gt;&gt; print enum.FOOBAR
Traceback (most recent call last):
 File "enum.py", line 17, in &lt;module&gt;
 print enum.FOOBAR
 File "enum.py", line 11, in __getattr__
 raise AttributeError("Invalid constant: %s" % name)
AttributeError: Invalid constant: FOOBAR