Question (ID-8606130): How to store cumulative output in a list? I am using the following code to get frequency of letters in a text: 

 for s in 'abcdefghijklmnopqrstuvwxyz ':
 count = 0
 for char in rawpunct.lower():
  if s == char:
   count +=1
 result = s, '%.3f' % (count*100/len(rawpunct.lower()))
 f_list.append(result)
 

 And the result is : 

 ['0.061', '0.012', '0.017', '0.030', '0.093', '0.016', '0.016', 
'0.049', '0.050', '0.001', '0.006', '0.034', '0.018', '0.052', '0.055',
 '0.013', '0.001', '0.041', '0.050', '0.069', '0.021', '0.007', '0.017',
 '0.001', '0.013', '0.000', '0.159']
 

 but I want to store the cumulative frequencies, i.e create this list : 

 ['0.061', '0.073', '0.100', '0.130' ............ ]
 

 Anyone know how to do this? 
 Answers (Total-7): #0 You can use import numpy 
and then make result an array results=numpy.array(result) 
and finally ' f_list=numpy.cumsum(results) ' 
 #1 letters = 'abcdefghijklmnopqrstuvwxyz '
counts = dict.fromkeys(letters, 0)
for char in rawpunct.lower():
 try:
  counts[char] += 1
 except KeyError:
  pass
  # this character in rawpunct should not be counted!
f_list = [0]
for s in letters:
 f_list.append(f_list[-1] + counts[s])
str_list = ['{0:.3f}'.format(f) for f in f_list[1:]]
 

 My f_list is a list of floats (it is easier to calculate sums with floats than with their string representations!). At the end I create the str_list , which is a list of string representations of these floats. Since you don't want to start your list with a zero, this will be removed at the end (only f_list[1:] is taken). 

 This solution is faster if your input text is long, because it reads it just once. 
 #2 Just for the fun of the one-liner : 

 original = ['0.061', '0.012', '0.017', '0.030', '0.093', '0.016', '0.016', 
'0.049', '0.050', '0.001', '0.006', '0.034', '0.018', '0.052', '0.055',
 '0.013', '0.001', '0.041', '0.050', '0.069', '0.021', '0.007', '0.017',
 '0.001', '0.013', '0.000', '0.159']

result = [sum(float(item) for item in original[0:rank+1]) for rank in xrange(len(original))]

&gt;&gt;&gt; [0.061, 0.073, 0.09, 0.12, 0.213, 0.22899999999999998, 0.245, 0.294, 0.344, 0.345, 0.351, 0.385, 0.403, 0.455, 0.51, 0.523, 0.524, 0.5650000000000001, 0.6150000000000001, 0.6840000000000002, 0.7050000000000002, 0.7120000000000002, 0.7290000000000002, 0.7300000000000002, 0.7430000000000002, 0.7430000000000002, 0.9020000000000002]
 
 #3 if len(f_list) == 0:
 f_list.append(result)
else:
 f_list.append(f_list[-1] + result)
 
 #4 f_list = [0]
for s in 'abcdefghijklmnopqrstuvwxyz ':
 count = 0
 for char in rawpunct.lower():
  if s == char:
   count +=1
 result = s, '%.3f' % (count*100/len(rawpunct.lower()))
 f_list.append(result + f_list[-1])
 f_list = list(f_list[1:])
 
 #5 My cumsum version, using reduce : 

 In [1]: x = [1,2,3]
In [2]: reduce(lambda acc, x: acc + [acc[-1] + x], x[1:], x[:1])
Out[2]: [1, 3, 6]
 

 It works for empty lists, too: 

 In [3]: x = []
In [4]: reduce(lambda acc, x: acc + [acc[-1] + x], x[1:], x[:1])
Out[4]: []
 
 #6 I guess rawpunct is the string cotaining your Text. I replaced it with text in my proposal: 

 from string import lowercase

text='Some arbitrary Text with NonNSense! @#!.+-'.lower()
chmap = lowercase+' '
cooked_text = ''.join([i for i in text if i in chmap])
chdict = dict.fromkeys(chmap, 0)  #set totals-dict up 
frequencies = dict.fromkeys(chmap, 0) #set fractions dict up

for ch in cooked_text: #toals per char
 chdict[ch] += 1

for char in chdict.keys(): #relative to text-length
 frequencies[char] = float(chdict[char]) / len(cooked_text)

frequency_list = [frequencies[char] for char in chmap]
frequency_strlist = ['%.3f' % f for f in frequency_list]
print frequency_strlist