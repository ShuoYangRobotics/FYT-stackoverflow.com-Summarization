Question (ID-37479): How can I simply inherit methods from an existing instance? below I have a very simple example of what I'm trying to do. I want to be able to use HTMLDecorator with any other class. Ignore the fact it's called decorator, it's just a name. 

 import cgi

class ClassX(object):
 pass # ... with own __repr__

class ClassY(object):
 pass # ... with own __repr__

inst_x=ClassX()

inst_y=ClassY()

inst_z=[ i*i for i in range(25) ]

inst_b=True

class HTMLDecorator(object):
 def html(self): # an "enhanced" version of __repr__
  return cgi.escape(self.__repr__()).join(("&lt;H1&gt;","&lt;/H1&gt;"))

print HTMLDecorator(inst_x).html()
print HTMLDecorator(inst_y).html()
wrapped_z = HTMLDecorator(inst_z)
inst_z[0] += 70
wrapped_z[0] += 71
print wrapped_z.html()
print HTMLDecorator(inst_b).html()
 

 Output: 

 Traceback (most recent call last):
 File "html.py", line 21, in 
 print HTMLDecorator(inst_x).html()
TypeError: default __new__ takes no parameters 

 Is what I'm trying to do possible? If so, what am I doing wrong? 
 Answers (Total-6): #0 
 Very close, but then I lose everything from ClassX. Below is something a collegue gave me that does do the trick, but it's hideous. There has to be a better way. 
 

 Looks like you're trying to set up some sort of proxy object scheme. That's doable, and there are better solutions than your colleague's, but first consider whether it would be easier to just patch in some extra methods. This won't work for built-in classes like bool , but it will for your user-defined classes: 

 def HTMLDecorator (obj):
 def html ():
  sep = cgi.escape (repr (obj))
  return sep.join (("&lt;H1&gt;", "&lt;/H1&gt;"))
 obj.html = html
 return obj
 

 And here is the proxy version: 

 class HTMLDecorator(object):
 def __init__ (self, wrapped):
  self.__wrapped = wrapped

 def html (self):
  sep = cgi.escape (repr (self.__wrapped))
  return sep.join (("&lt;H1&gt;", "&lt;/H1&gt;"))

 def __getattr__ (self, name):
  return getattr (self.__wrapped, name)

 def __setattr__ (self, name, value):
  if not name.startswith ('_HTMLDecorator__'):
   setattr (self.__wrapped, name, value)
   return
  super (HTMLDecorator, self).__setattr__ (name, value)

 def __delattr__ (self, name):
  delattr (self.__wraped, name)
 
 #1 Both of John's solutions would work. Another option that allows HTMLDecorator to remain very simple and clean is to monkey-patch it in as a base class. This also works only for user-defined classes, not builtin types: 

 import cgi

class ClassX(object):
 pass # ... with own __repr__

class ClassY(object):
 pass # ... with own __repr__

inst_x=ClassX()
inst_y=ClassY()

class HTMLDecorator:
 def html(self): # an "enhanced" version of __repr__
  return cgi.escape(self.__repr__()).join(("&lt;H1&gt;","&lt;/H1&gt;"))

ClassX.__bases__ += (HTMLDecorator,)
ClassY.__bases__ += (HTMLDecorator,)

print inst_x.html()
print inst_y.html()
 

 Be warned, though -- monkey-patching like this comes with a high price in readability and maintainability of your code. When you go back to this code a year later, it can become very difficult to figure out how your ClassX got that html() method, especially if ClassX is defined in some other library. 
 #2 
 Is what I'm trying to do possible? If so, what am I doing wrong? 
 

 It's certainly possible. What's wrong is that HTMLDecorator.__init__() doesn't accept parameters. 

 Here's a simple example: 

 def decorator (func):
 def new_func ():
  return "new_func %s" % func ()
 return new_func

@decorator
def a ():
 return "a"

def b ():
 return "b"

print a() # new_func a
print decorator (b)() # new_func b
 
 #3 @John (37448): 

 Sorry, I might have misled you with the name (bad choice). I'm not really looking for a decorator function, or anything to do with decorators at all. What I'm after is for the html(self) def to use ClassX or ClassY's __repr__ . I want this to work without modifying ClassX or ClassY. 
 #4 Ah, in that case, perhaps code like this will be useful? It doesn't really have anything to do with decorators, but demonstrates how to pass arguments to a class's initialization function and to retrieve those arguments for later. 

 import cgi

class ClassX(object):
 def __repr__ (self):
  return "&lt;class X&gt;"

class HTMLDecorator(object):
 def __init__ (self, wrapped):
  self.__wrapped = wrapped

 def html (self):
  sep = cgi.escape (repr (self.__wrapped))
  return sep.join (("&lt;H1&gt;", "&lt;/H1&gt;"))

inst_x=ClassX()
inst_b=True

print HTMLDecorator(inst_x).html()
print HTMLDecorator(inst_b).html()
 
 #5 @John (37479): 

 Very close, but then I lose everything from ClassX. Below is something a collegue gave me that does do the trick, but it's hideous. There has to be a better way. 

 import cgi
from math import sqrt

class ClassX(object): 
 def __repr__(self): 
 return "Best Guess"

class ClassY(object):
 pass # ... with own __repr__

inst_x=ClassX()

inst_y=ClassY()

inst_z=[ i*i for i in range(25) ]

inst_b=True

avoid="__class__ __init__ __dict__ __weakref__"

class HTMLDecorator(object):
 def __init__(self,master):
  self.master = master
  for attr in dir(self.master):
   if ( not attr.startswith("__") or 
    attr not in avoid.split() and "attr" not in attr):
    self.__setattr__(attr, self.master.__getattribute__(attr))

 def html(self): # an "enhanced" version of __repr__
  return cgi.escape(self.__repr__()).join(("&lt;H1&gt;","&lt;/H1&gt;"))

 def length(self):
  return sqrt(sum(self.__iter__()))

print HTMLDecorator(inst_x).html()
print HTMLDecorator(inst_y).html()
wrapped_z = HTMLDecorator(inst_z)
print wrapped_z.length()
inst_z[0] += 70
#wrapped_z[0] += 71
wrapped_z.__setitem__(0,wrapped_z.__getitem__(0)+ 71)
print wrapped_z.html()
print HTMLDecorator(inst_b).html()
 

 Output: 

 &lt;H1&gt;Best Guess&lt;/H1&gt;
&lt;H1&gt;&lt;__main__.ClassY object at 0x891df0c&gt;&lt;/H1&gt;
70.0
&lt;H1&gt;[141, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576]&lt;/H1&gt;
&lt;H1&gt;True&lt;/H1&gt;