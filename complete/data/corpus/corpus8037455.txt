Question (ID-8037455): Modifying python collections I was wondering, if there is way in Python to modify collections without creating new ones. E.g.: 

 lst = [1, 2, 3, 4, 5, 6]
new_lst = [i for i in lst if i &gt; 3]
 

 Works just fine, but a new collection is created. Is there a reason, that Python collections lack a filter() method (or similar) that would modify the collection object in place? 
 Answers (Total-6): #0 If you want to do this in place, just use 

 lst[:] = [i for i in lst if i &gt; 3]
 

 This won't be faster or save any memory , but it changes the object in place, if this is the semantics you need. 
 #1 The other answers are correct; if you want all the names pointing to the old list to point to the new list you can use slice assignment. 

 However, that's not truly in-place creation; the new list is first created elsewhere. The link in Sven's answer is good. 

 The reason there isn't one that truly operates in-place is that while making a new list like that is O(n), each truly in-place item removal would be O(k) by itself , where k is the length of the list from the removal point on. The only way to avoid that with Python lists is to use some temporary storage, which is what you're doing by using slice assignment. 

 An example of an in-place O(n) filter on a collections.deque , in case you don't need to store your data in a list : 

 from collections import deque

def dequefilter(deck, condition):
 for _ in xrange(len(deck)):
  item = deck.popleft()
  if condition(item):
   deck.append(item)

deck = deque((1, 2, 3, 4, 5))
dequefilter(deck, lambda x: x &gt; 2) # or operator.gt(2)
print deck
# deque([3, 4, 5])
 
 #2 Correcting @larsmans original solution , you could either do 

 i = 0
while i &lt; len(lst):
 if lst[i] &lt;= 3:
  del lst[i]
 else
  i += 1
 

 or 

 i = len(lst)
while i &gt; 0:
 if lst[i-1] &lt;= 3:
  del lst[i-1]
 i -= 1
 

 Reason is the "index shift" which happens with the del . If I del at a ceratin index, I have to re-examine that index because it now holds a different value. 
 #3 Because it's not needed . 

 lst[:] = [i for i in lst if i &gt; 3]
 
 #4 The lst[:] solution by @Sven Marnach is one option. You can also perform this operation in-place, using constant extra memory, with 

 &gt;&gt;&gt; i = 0
&gt;&gt;&gt; while i &lt; len(lst):
... if lst[i] &lt;= 3:
... del lst[i]
... else:
... i += 1
... 
&gt;&gt;&gt; lst
[4, 5, 6]
 

 ... but this solution is not very readable and takes quadratic time due to all the element shifting involved. 
 #5 I think it's in place transformation; 

 lst = [1,2,3,4,5,6,7,8,9,10,11]
to_exclude = [8,4,11,9]
print 'lst == %s\nto_exclude == %s' % (lst,to_exclude)

for i in xrange(len(lst)-1,-1,-1):
 if lst[i] in to_exclude:
  lst.pop(i)

print '\nlst ==',lst
 

 result 

 lst == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
to_exclude == [8, 4, 11, 9]

lst == [1, 2, 3, 5, 6, 7, 10]