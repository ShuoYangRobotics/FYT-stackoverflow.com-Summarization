Question (ID-1261875): Python nonlocal statement What does it do, in Python 3.0? There's no documentation on the official Python website and help("nonlocal") does not work, either. 
 Answers (Total-7): #0 Compare this, without using nonlocal: 

 &gt;&gt;&gt; def outer():
  x = 1
  def inner():
   x = 2
   print("inner:", x)
  inner()
  print("outer:", x)


&gt;&gt;&gt; outer()
inner: 2
outer: 1
 

 To this, using nonlocal: 

 &gt;&gt;&gt; def outer():
  x = 1
  def inner():
   nonlocal x
   x = 2
   print("inner:", x)
  inner()
  print("outer:", x)


&gt;&gt;&gt; outer()
inner: 2
outer: 2
 
 #1 It's documented in the Language Reference here . 
 #2 In short, it lets you assign values to a variable in an outer (but non-global) scope. See PEP 3104 for all the gory details. 
 #3 A google search for "python nonlocal" turned up the Proposal, PEP 3104 , which fully describes the syntax and reasoning behind the statement. in short, it works in exactly the same way as the global statement, except that it is used to refer to variables that are neither global nor local to the function. 

 Here's a brief example of what you can do with this. The counter generator can be rewritten to use this so that it looks more like the idioms of languages with closures. 

 def make_counter():
 count = 0
 def counter():
  nonlocal count
  count += 1
  return count
 return counter
 

 Obviously, you could write this as a generator, like: 

 def counter_generator():
 count = 0
 while True:
  count += 1
  yield count
 

 But while this is perfectly idiomatic python, it seems that the first version would be a bit more obvious for beginners. Properly using generators, by calling the returned function, is a common point of confusion. The first version explicitly returns a function. 
 #4 @ooboo: 

 It takes the one "closest" to the point of reference in the source code.
This is called "Lexical Scoping" and is standard for >40 years now. 

 Python's class members are really in a dictionary called __dict__ and will never be reached by lexical scoping. 

 If you don't specify nonlocal but do x = 7 , it will create a new local variable "x".
If you do specify nonlocal , it will find the "closest" "x" and assign to that.
If you specify nonlocal and there is no "x", it will give you an error message. 

 The keyword global has always seemed strange to me since it will happily ignore all the other "x" except for the outermost one. Weird. 
 #5 My personal understanding of the "nonlocal" statement (and do excuse me as I am new to Python and Programming in general) is that the "nonlocal" is a way to use the Global functionality within iterated functions rather than the body of the code itself. A Global statement between functions if you will. 
 #6 help('nonlocal')
The nonlocal statement 

 

 nonlocal_stmt ::= "nonlocal" identifier ("," identifier)* 

 The nonlocal statement causes the listed identifiers to refer to
previously bound variables in the nearest enclosing scope. This is
important because the default behavior for binding is to search the
local namespace first. The statement allows encapsulated code to
rebind variables outside of the local scope besides the global
(module) scope. 

 Names listed in a nonlocal statement, unlike to those listed in a
 global statement, must refer to pre-existing bindings in an
enclosing scope (the scope in which a new binding should be created
cannot be determined unambiguously). 

 Names listed in a nonlocal statement must not collide with pre-
existing bindings in the local scope. 

 See also: 

 PEP 3104 - Access to Names in Outer Scopes
  The specification for the nonlocal statement. 

 Related help topics: global, NAMESPACES