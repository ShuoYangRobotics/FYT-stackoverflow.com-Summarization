Question (ID-757532): Shell: insert a blank/new line two lines above pattern I have a text file and it requires some formatting. 
I know that if you want to add a blank line above every line that matches your regexp, you can use: 

 sed '/regexp/{x;p;x;}'
 

 But I'd like to add a blank line, not one line above, but two lines above the line which matches my regexp. 

 The pattern I'll be matching is a postal code, in the address line. 

 Here is (part of) the format that the file has. 

 
 dynamic line (belongs to previous business) 
 name of a new business 
 address of new business 
 

 And an example: 

 
 Languages Spoken: English 
 Arnold's Cove, Nfld (sub To Clarenville) 
 Nile Road, Arnolds Cove, NL, A0B1N0 
 

 I'd like to have the new line above the business name. Thus: 

 
 Languages Spoken: English 
 
 Arnold's Cove, Nfld (sub To Clarenville) 
 Nile Road, Arnolds Cove, NL, A0B1N0 
 

 Solutions in Python or Perl are good as well. 
 Answers (Total-6): #0 More readable Perl, and handles multiple files sanely. 

 #!/usr/bin/env perl
use constant LINES =&gt; 2;
my @buffer = ();
while (&lt;&gt;) {
 /pattern/ and unshift @buffer, "\n";
 push @buffer, $_;
 print splice @buffer, 0, -LINES;
}
continue {
 if (eof(ARGV)) {
  print @buffer;
  @buffer = ();
 }
}
 
 #1 Something a bit like your original approach in sed: 

 sed '/regexp/i\

$H
x'
 

 The basic idea is to print everything delayed by one line ( x change the hold and pattern spaces - printing is implicit). That needs to be done because until we check whether the next line matches the regexp we don't know whether to i nsert a newline or not. 

 (The $H there is just a trick to make the last line print. It appends the last line into the hold buffer so that the final implicit print command outputs it too.) 
 #2 Simple: 

 sed '1{x;d};$H;/regexp/{x;s/^/\n/;b};x'
 

 Describe it 

 #!/bin/sed

# trick is juggling previous and current line in hold and pattern space

1 {   # at firs line
 x   # place first line to hold space
 d   # skip to end and avoid printing
}
$H   # append last line to hold space to force print
/regexp/ { # regexp found (in current line - pattern space)
 x   # swap previous and current line between hold and pattern space
 s/^/\n/ # prepend line break before previous line
 b   # jump at end of script which cause print previous line
}
x   # if regexp does not match just swap previous and current line to print previous one
 

 Edit : Little bit simpler version. 

 sed '$H;/regexp/{x;s/^/\n/;b};x;1d'
 
 #3 perl -ne 'END{print @x} push@x,$_; if(@x&gt;2){splice @x,1,0,"\n" if /[[:alpha:]]\d[[:alpha:]]\s?\d[[:alpha:]]\d/;print splice @x,0,-2}'
 

 If I cat your file into this, I get what you want... it's ugly, but you wanted shell (i.e., one-liner) :-) If I were to do this in full perl, I'd be able to clean it up a lot to make it approach readable. :-) 
 #4 Here's an approach that works for Python. 

 import sys
def address_change( aFile ):
 address= []
 for line in aFile:
  if regex.match( line ):
   # end of the address
   print address[0]
   print 
   print address[1:]
   print line
   address= []
   else:
   address.append( line )
address_change( sys.stdin )
 

 This allows you to reformat a complete address to your heart's content. You can expand this to create define an Address class if your formatting is complex. 
 #5 I tried 

 sed '/regexp/a\\n'
 

 but it inserted two newlines. If that does not bother you, take it. 

 
 echo -e "a\nb\nc" | sed '/^a$/a\n' 
 a 
 
 b 
 c 
 

 Edit: 
Now that you state that you need to insert two lines above the matching regexp the suggested regex won't work. 

 I am not even sure if it would work at all with sed, as you need to remember past lines. Sounds like a job for a higher level language like python or perl :-)