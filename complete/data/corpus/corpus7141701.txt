Question (ID-7141701): Retrieving tail-end of a file path I can't find an effective way to do this. The best way to describe what I'm trying to do is by example, so where we go (assuming /bar/ is the parent): 

 C:\foo\bar\baz\text.txt
 

 will be my path. I'm interested in everything up to the top-level parent directory of the path. What I need is a script that will do just that. In other words, I want to only grab the 

 \bar\baz\text.txt
 

 Split doesn't work for me. It will split the file and the path, but it won't give the output like this. Is there an inbuilt function I'm missing or am I SOL? Thanks! 
 Answers (Total-6): #0 You could always use string.split() : 

 &gt;&gt;&gt; print '\\' + path.split('\\', 2)[-1]
\bar\baz\text.txt
 
 #1 I'm not sure what you mean when you say "top-level parent directory". Your top-level directory is C:\ . Parent of what? If you're trying to get a relative path that starts with the parent of your current working directory, try this: 

 import os.path
os.path.relpath("C:\\foo\\bar\\baz\\text.txt", os.path.dirname(os.path.realpath('..')))
 
 #2 In [44]: path = 'a/b/c'

In [45]: back = os.path.relpath('.', os.path.join(path, '..'))

In [46]: back
Out[46]: '..\\..'

In [47]: tail = os.path.relpath(path, os.path.join(path, back)))

In [48]: tail
Out[48]: 'b\\c'
 

 Aka no not that I know of. 
 #3 I would keep it simple. Convert both cwd and your input path into absolute paths and then just use startswith and slicing 

 path = os.path.abspath(path)
#Make sure you finish curDir with a path separator
#to avoid incorrect partial matches
curDir = os.path.abspath(".") + os.path.sep
if path.startswith(curDir):
 whatYouWant = path[len(curDir) - 1:]
 
 #4 does this suit your requirement? 

 &gt;&gt;&gt; x = r'C:\foo\bar\baz\text.txt'
&gt;&gt;&gt; print x.split(':')[-1]
\foo\bar\baz\text.txt
 
 #5 Not sure what you want, but you may be able to use the little known rsplit , which splits from the right side of the string. 

 &gt;&gt;&gt; filepath = r"C:\foo\bar\baz\text.txt"
&gt;&gt;&gt; directories_deep = 3
&gt;&gt;&gt; os.path.sep.join(filepath.rsplit(os.path.sep, directories_deep)[-directories_deep:])
'bar\\baz\\text.txt'