Question (ID-5943425): Is there a dataset in python similar to structs in C++? Is there a dataset in python similar to structs in C++? I like the struct feature myStruct.someName . I know, that classes have this, but I don't want to write a class everytime I need a "container" for some data. =) 
 Answers (Total-6): #0 Why not? Classes are fine for that. 

 If you want to save some memory, you might also want to use __slots__ so the objects don't have a __dict__ . See http://docs.python.org/reference/datamodel.html#slots for details and Python __slots__ for some useful information. 

 For example, a class holding only two values ( a and b ) could looks like this: 

 class AB(object):
 __slots__ = ('a', 'b')
 

 

 If you actually want a dict but with obj.item access instead of obj['item'] , you could subclass dict and implement __getattr__ and __setattr__ to behave like __getitem__ and __setitem__ . 
 #1 Please realise that in C++, the only difference between a class and a struct is that the elements of a class are by default private, as is the inheritance. The following are equivalent: 

 class D : public B {
 public:
 ...
}; 

struct D {
 ...
};
 

 In Python, it would make most sense to use a class if you want to use the dot operator to access elements. In fact, it's even easier, as you only have to initialise the members you currently want, and can add/remove members later. Therefore, the following would work: 

 class D(object):
 pass
 

 You can then add as many members as you want simply by assigning to them. 
 #2 In addition to the dict type, there is a namedtuple type that behaves somewhat like a struct. 

 MyStruct = namedtuple('MyStruct', ['someName', 'anotherName'])
aStruct = MyStruct('aValue', 'anotherValue')

print aStruct.someName, aStruct.anotherName
 
 #3 I believe you're looking for a dict . 

 d = dict({
  'name': 'myname',
  'val': 'myval'
  })

print d
print d['name']
 
 #4 Try using a dict . 

 Here's a simplistic demonstration. 

 &gt;&gt;&gt; something = {}
&gt;&gt;&gt; something['x'] = 42
&gt;&gt;&gt; something['y'] = 'cheese'
&gt;&gt;&gt; something
{'y': 'cheese', 'x': 42}
&gt;&gt;&gt; something['x']
42
&gt;&gt;&gt; something['y']
'cheese'
 
 #5 You can always go for the dynamic approach: 

 class foo(object):
 def __init__(self,**kwargs):
  self.__dict__.update(kwargs)
 

 This'll make a class with the same methods that you pass in as a dict: 

 bar = foo(bill="yo",heather="hi",sam="piss off")
 

 leaving you with the following perfectly valid calls on bar : 

 bar.bill
&gt;&gt; "yo"
bar.heater
&gt;&gt; "hi"
 

 you get the idea...