Question (ID-3687682): Python define dynamic functions I have functions like this: 

 def activate_field_1():
 print 1

def activate_field_2():
 print 2

def activate_field_3():
 print 3
 

 How do I define activate_field_[x] for x=1:10 , without typing out each one of them? I'd much rather pass a parameter, of course, but for my purposes this is not possible. 

 Thanks! 
 Answers (Total-6): #0 Do you want to define these individually in your source file, statically? Then your best option would be to write a script to generate them. 

 If on the other hand you want these functions at runtime you can use a higher order function. For e.g. 

 &gt;&gt;&gt; def make_func(value_to_print):
 def _function():
  print value_to_print
 return _function

&gt;&gt;&gt; f1 = make_func(1)
&gt;&gt;&gt; f1()
1
&gt;&gt;&gt; f2 = make_func(2)
&gt;&gt;&gt; f2()
2
&gt;&gt;&gt; 
 

 You can generate a list of these and store, again at runtime. 

 &gt;&gt;&gt; my_functions = [make_func(i) for i in range(1, 11)]
&gt;&gt;&gt; for each in my_functions:
 each()


1
2
3
...
 
 #1 Here's another two line answer that produces function names exactly like you wanted (and is a bit simpler than the "Dynamic/runtime method creation" answer pointed out by @Goutham): 

 fntemplate = """def activate_field_%d(): print %d"""
for x in range(1, 11): exec fntemplate % (x,x)

&gt;&gt;&gt; activate_field_1()
1
&gt;&gt;&gt; activate_field_7()
7
 
 #2 Maybe you could adapt this recipe for your needs. 

 from functools import partial
class FunctionPool:
 def __init__(self,function):
  self.function = function
 def __getitem__(self,item):
  return partial(self.function,item)

&gt;&gt;&gt; @FunctionPool
def func(item,param):
 print "function#{item} called with {param}".format(
  item = item,
  param = param )
&gt;&gt;&gt; f = func[2]
&gt;&gt;&gt; f(3)
function#2 called with 3
 
 #3 You may put new symbols into the dictionary of current variable bindings returned by vars() : 

 for i in range(1, 11):
 def f(x):
  def g():
   print x
  return g
 vars()['activate_field_%d' % i] = f(i)

&gt;&gt;&gt; activate_field_3()
3
 

 But this trick is generally not recommented unless you definitely sure you need it. 
 #4 How about: 

 from __future__ import print_function

activate_field_ = [lambda i=i: print(i) for i in range(11)]

for x in range(1, 11):
 activate_field_[x]()
 

 This creates one extra function, activate_field_[0] which prints '0', but you can just not use it. 
 #5 There's already a thread that talks about dynamic code generation in detail. Refer: http://stackoverflow.com/questions/533382/dynamic-runtime-method-creation-code-generation-in-python