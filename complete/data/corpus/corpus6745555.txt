Question (ID-6745555): Can you use bit shift operations in a 'for-loop'? I have the following C for loop using bit shifts, that I want to reimplement in python. 

 n = 64
for(int stride = n&gt;&gt;1; stride &gt;0; stride &gt;&gt;=1)
 {...
 

 So wow would this loop look in python? 

 I know that n&gt;&gt;1 stands for division by 2, but I find it hard to model that with range() . 
 Answers (Total-8): #0 Think simpler: 

 &gt;&gt;&gt; n = 64
&gt;&gt;&gt; while n:
...  print n
...  n = n &gt;&gt; 1
...
64
32
16
8
4
2
1
 
 #1 I'd write a simple generator function: 

 &gt;&gt;&gt; def strider(x):
...  while x:
...   x &gt;&gt;= 1
...   yield x
... 
&gt;&gt;&gt; for x in strider(64):
...  print x
... 
32
16
8
4
2
1
0
 
 #2 First thing that comes to mind is: 

 while stride&gt;0:
 # do your stuff
 stride&gt;&gt;=1
 

 I don't think it is a good idea to try and use for-loops in this case. In Python for-loops work much like for-each loops in other languages. They act on sequences. Although we could easily turn the range of values for stride into a sequence, the while IMHO is a much simpler and more natural way of expressing the idea. 
 #3 All for(;;) loops can be rewritten as while loops, and vice versa. 

 n = 64
stride = n &gt;&gt; 1
while stride &gt; 0:
 # stuff
 stride &gt;&gt;= 1
 

 EDITED to reflect the change in the original 
 #4 You could write your own generator for use in the for loop 
 #5 Since you do not have many iterations: 

 for stride in [32, 16, 8, 4, 2, 1, 0]:
 # ...
 
 #6 How about using a logarithm? 

 for i in range(int(math.log(n, 2)), -1, -1):
 # stride is 2**i
 
 #7 Well, closest is to use itertools module: 

 &gt;&gt;&gt; from itertools import takewhile, imap, count
&gt;&gt;&gt; n = 64
&gt;&gt;&gt; for i in takewhile(bool, imap(lambda x:n &gt;&gt; x, count(1))):
...  print i
... 
32
16
8
4
2
1