Question (ID-409783): socket.shutdown vs socket.close I recently saw a bit of code that looked like this (with sock being a socket object of course): 

 sock.shutdown(socket.SHUT_RDWR)
sock.close()
 

 What exactly is the purpose of calling shutdown on the socket and then closing it? If it makes a difference, this socket is being used for non-blocking IO. 
 Answers (Total-6): #0 Calling close and shutdown have two different affects on the underlying socket. 

 The first thing to point out is that the socket is a resource in the underlying OS and multiple processes can have a handle for the same underlying socket. 

 When you call close it decrements the handle count by one and if the handle count has reached zero then the socket and associated connection goes through the normal close procedure (effectively sending a FIN / EOF to the peer) and the socket is deallocated. 

 The thing to pay attention to here is that if the handle count does not reach zero because another process still has a handle to the socket then the connection is not closed and the socket is not deallocated. 

 On the other hand calling shutdown for reading and writing closes the underlying connection and sends a FIN / EOF to the peer regardless of how many processes have handles to the socket. However, it does not deallocate the socket and you still need to call close afterward. 
 #1 Here's one explanation : 

 
 Once a socket is no longer required,
 the calling program can discard the
 socket by applying a close subroutine
 to the socket descriptor. If a
 reliable delivery socket has data
 associated with it when a close takes
 place, the system continues to attempt
 data transfer. However, if the data is
 still undelivered, the system discards
 the data. Should the application
 program have no use for any pending
 data, it can use the shutdown
 subroutine on the socket prior to
 closing it. 
 
 #2 Explanation of shutdown and close: Graceful shutdown (msdn) 

 Shutdown (in your case) indicates to the other end of the connection there is no further intention to read from or write to the socket. Then close frees up any memory associated with the socket. 

 Omitting shutdown may cause the socket to linger in the OSs stack until the connection has been closed gracefully. 

 IMO the names 'shutdown' and 'close' are misleading, 'close' and 'destroy' would emphasise their differences. 
 #3 there are some flavours of shutdown: http://msdn.microsoft.com/en-us/library/system.net.sockets.socket.shutdown.aspx . *nix is similar. 
 #4 Shutdown(1) , forces the socket no to send any more data 

 This is usefull in 

 1- Buffer flushing 

 2- Strange error detection 

 3- Safe guarding 

 Let me explain more , when you send a data from A to B , it's not guaranteed to be 
sent to B , it's only guaranteed to be sent to the A os buffer , 
which in turn sends it to the B os buffer 

 So by calling shutdown(1) on A , you flush A's buffer and an error is raised 
if the buffer is not empty ie: data has not been sent to the peer yet 

 Howoever this is irrevesable , so you can do that after you completely 
sent all your data and you want to be sure that it's atleast at the peer 
os buffer 
 #5 Isn't this code above wrong? 

 The close call directly after the shutdown call might make the kernel discard all outgoing buffers anyway. 

 According to
 http://blog.netherlabs.nl/articles/2009/01/18/the-ultimate-so_linger-page-or-why-is-my-tcp-not-reliable 
one needs to wait between the shutdown and the close until read returns 0.