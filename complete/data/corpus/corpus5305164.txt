Question (ID-5305164): Get difference from 2 lists. Python I have two lists, l1 and l2 . I need items from l1 which are not in l2 . 

 l1=[2,3,4,5]
l2=[0,1,2,3]
 

 I wanna get only [4,5] only new values in l1. 

 [i for i in l1 if not i in l2 ]
 

 Can i do that without iteration? 
 Answers (Total-7): #0 You can't do it without iteration. Even if you call a single method, internally that will iterate. 

 Your approach is fine for small list, but you could use this approach instead for larger lists: 

 s2 = set(l2)
result = [i for i in l1 if not i in s2 ]
 

 This will be fast, and also preserve the original order of the elements in l1. 
 #1 If you don't care about the order of the elements, you can use sets: 

 l1 = set([2, 3, 4, 5])
l2 = set([0, 1, 2, 3])
print l1 - l2
 

 prints 

 set([4, 5])
 
 #2 Short answer, yes: list(set(l1) - set(l2)) , though this will not keep order. 

 Long answer, no, since internally the CPU will always iterate. Though if you use set() that iteration will be done highly optimized and will be much faster then your list comprehension (not to mention that checking for membership value in list is much faster with sets then lists). 
 #3 you can use use set_1.difference_update(set_2) for in place difference: 

 &gt;&gt;sl1 = set([2, 3, 4, 5])
&gt;&gt;sl2 = set([0, 1, 2, 3])
&gt;&gt;sl1.difference_update(sl2)
&gt;&gt;sl1
set([4, 5])
 
 #4 Convert them to sets, use the difference operator: 

 l1=[2,3,4,5]
l2=[0,1,2,3]

answer = set(l1) - set(l2)
 
 #5 You can do this simply as follows: 

 list( set(l1) - set(l2) )
 

 This should do the trick. 
 #6 The conversion to sets is great when your list elements can be converted to sets. Otherwise you'll need something like Mark's solution above. If you have large lists to compare you might not want to pay the memory allocation overhead and simplify his line to: 

 [l1.remove(m) for m in l1 if m in l2]