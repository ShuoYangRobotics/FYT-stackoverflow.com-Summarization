Question (ID-6889726): Subtract and add two lists without changing their order in Python If I have the list [68,31,93,35,10] (all the numbers will be different) and the list [93,0,22,10,99,33,21,9] (again, all the numbers will be different, but may overlap the other list), I need to be able to get exactly [68,31,93,35,10,0,22,99,33,21,9] , where the second list is appended to the first list without duplicates. I also need to be able to get exactly [68,31,35] where the first list has all duplicates in the second list removed. The output always should be the same order as the input. How do I go about this? (A one liner would be nice if it were simple.) 
 Answers (Total-6): #0 l1 = [68, 31, 93, 35,10]
l2 = [93, 0, 22, 10, 99, 33, 21,9]

l1 + [x for x in l2 if not x in l1]
# [68, 31, 93, 35, 10, 0, 22, 99, 33, 21, 9]

[x for x in l1 if not x in l2]
# [68, 31, 35]
 

 EDIT: for long lists, you don't want to do all those list lookups. Here are two other recipes: 

 union: 

 from collections import OrderedDict
OrderedDict().fromkeys(l1+l2).keys()
# [68, 31, 93, 35, 10, 0, 22, 99, 33, 21, 9]
 

 difference: 

 s = set(l2)
[x for x in l1 if not x in s]
# [68, 31, 35]
 
 #1 Assuming inputs l1 and l2 , you can calculate their ordered union with: 

 l1 + filter(lambda x: x not in l1, l2)
 

 To get the ordered difference l1 - l2, write 

 filter(lambda x: x not in l2, l1)
 

 Alternatively, use list comprehensions: 

 &gt;&gt;&gt; l1 = [68,31,93,35,10]
&gt;&gt;&gt; l2 = [93,0,22,10,99,33,21,9]
&gt;&gt;&gt; l1 + [el2 for el2 in l2 if el2 not in l1]
[68, 31, 93, 35, 10, 0, 22, 99, 33, 21, 9]
&gt;&gt;&gt; [el1 for el1 in l1 if el1 not in l2]
[68, 31, 35]
 

 If you're doing this with very large list (where performance is an issue), construct a set for faster lookup: 

 &gt;&gt;&gt; sl1 = set(s1)
&gt;&gt;&gt; l1 + [el2 for el2 in l2 if el2 not in sl1]
[68, 31, 93, 35, 10, 0, 22, 99, 33, 21, 9]
&gt;&gt;&gt; sl2 = set(s2)
&gt;&gt;&gt; [el1 for el1 in l1 if el1 not in sl2]
[68, 31, 35]
 
 #2 def unique_chain(*iters):
 seen = set()
 for it in iters:
  for item in it:
   if item not in seen:
    yield item
    seen.add(item)

print list(unique_chain([68, 31, 93, 35,10], [93, 0, 22, 10, 99, 33, 21,9]))
 
 #3 &gt;&gt;&gt; a = [68,31,93,35,10]
&gt;&gt;&gt; b = [93,0,22,10,99,33,21,9]
&gt;&gt;&gt; result= []
&gt;&gt;&gt; temp = a + b
&gt;&gt;&gt; [result.append(x) for x in temp if x not in result]
&gt;&gt;&gt; result
 [68, 31, 93, 35, 10, 0, 22, 99, 33, 21, 9]
&gt;&gt;&gt; a = set(a)
&gt;&gt;&gt; b = set(b)
&gt;&gt;&gt; a - b
 set([35, 68, 31])
 
 #4 Maybe you could use an OrderedSet 

 import collections

class OrderedSet(collections.MutableSet):
 def __init__(self, iterable, *args, **kwargs):
  super(OrderedSet, self).__init__(*args, **kwargs)
  self._data = collections.OrderedDict()
  self.update(iterable)

 def update(self, iterable):
  self._data.update((x, None) for x in iterable)

 def __iter__(self):
  return iter(self._data)

 def __contains__(self, value):
  return value in self._data

 def __len__(self):
  return len(self._data)

 def __le__(self, other):
  if isinstance(other, OrderedSet):
   return self._data &lt;= other._data
  return super(OrderedSet, self).__le__(other)

 def __and__(self, other):
  # Overrided by make the order of self the preferred one
  if isinstance(other, collections.Set):
   return self._from_iterable(value for value in self 
            if value in other)
  return self &amp; set(other)

 def __ior__(self, other):
  self.update(other)
  return self

 def add(self, value):
  self._data[value] = None

 def discard(self, value):
  self._data.pop(value, None)

 def __repr__(self):
  return "%s(%r)" % (type(self).__name__, self._data.keys())
 
 #5 After defining the first two lists as such, 

 a = [68,31,93,35,10]
b = [93,0,22,10,99,33,21,9]
 

 Here is the one-line solution to the first problem, 

 c = [x for x in a+b if x not in set(a).intersection(set(b))]
 

 And the one-liner to the second problem, 

 d = [x for x in a+b if x not in b]