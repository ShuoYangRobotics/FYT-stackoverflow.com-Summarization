Question (ID-1411417): How do I stop getting ImportError: Could not import settings 'mofin.settings' when using django with wsgi? I can't get wsgi to import my settings file for my project 'mofin'. 

 The list of errors from the apache error log are as follows 

 mod_wsgi (pid=4001): Exception occurred within WSGI script '/var/www/wsgi-scripts/django.wsgi'.
Traceback (most recent call last):
 File "/usr/lib/python2.5/site-packages/django/core/handlers/wsgi.py", line 228, in __call__
 self.load_middleware()
 File "/usr/lib/python2.5/site-packages/django/core/handlers/base.py", line 31, in load_middleware
 for middleware_path in settings.MIDDLEWARE_CLASSES:
 File "/usr/lib/python2.5/site-packages/django/conf/__init__.py", line 28, in __getattr__
 self._import_settings()
 File "/usr/lib/python2.5/site-packages/django/conf/__init__.py", line 59, in _import_settings
 self._target = Settings(settings_module)
 File "/usr/lib/python2.5/site-packages/django/conf/__init__.py", line 94, in __init__
 raise ImportError, "Could not import settings '%s' (Is it on sys.path? Does it have syntax errors?): %s" % (self.SETTINGS_MODULE, e)
ImportError: Could not import settings 'mofin.settings' (Is it on sys.path? Does it have syntax errors?): No module named mofin.settings
 

 I got the "hello world!" wsgi app listed here( http://code.google.com/p/modwsgi/wiki/QuickConfigurationGuide ) to work fine. 

 The settings.py file loads fine with python manage.py (runserver|shell|syncdb|test store)
as does the application. 

 Here is my wsgi file: 

 import os
import sys
sys.path.append('/home/django/mofin/trunk')
sys.path.append('/home/django/mofin/trunk/mofin')
print &gt;&gt; sys.stderr, sys.path
os.environ['DJANGO_SETTINGS_MODULE'] = 'mofin.settings'

import django.core.handlers.wsgi
application = django.core.handlers.wsgi.WSGIHandler()
 

 the sys.path as printed in the error log is 

 ['/usr/lib/python25.zip', '/usr/lib/python2.5', '/usr/lib/python2.5/plat-linux2', '/usr/lib/python2.5/lib-tk', '/usr/lib/python2.5/lib-dynload', '/usr/lib/python2.5/site-packages', '/usr/lib/python2.5/site-packages/gtk-2.0', '/home/django/mofin/trunk', '/home/django/mofin/trunk/mofin'] 

 if I open an interactive shell with manage.py, sys.path is 

 ['/home/django/mofin/trunk/mofin', '/usr/lib/python25.zip', '/usr/lib/python2.5', '/usr/lib/python2.5/plat-linux2', '/usr/lib/python2.5/lib-tk', '/usr/lib/python2.5/lib-dynload', '/usr/lib/python2.5/site-packages', '/usr/lib/python2.5/site-packages/gtk-2.0'] 

 My django settings file looks like this:
 # Django settings for mofin project. 

 DEBUG = True
TEMPLATE_DEBUG = DEBUG

ADMINS = (
 # ('Dan xxxx', 'xxxx@yyyyyyyyyy.com'),
)

MANAGERS = ADMINS

DATABASE_ENGINE = 'mysql'   # 'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.
DATABASE_NAME = 'mofin'    # Or path to database file if using sqlite3.
DATABASE_USER = 'aaaaaa'    # Not used with sqlite3.
DATABASE_PASSWORD = 'bbbbbb'   # Not used with sqlite3.
DATABASE_HOST = ''    # Set to empty string for localhost. Not used with sqlite3.
DATABASE_PORT = ''    # Set to empty string for default. Not used with sqlite3.

# Local time zone for this installation. Choices can be found here:
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# although not all choices may be available on all operating systems.
# If running in a Windows environment this must be set to the same as your
# system time zone.
TIME_ZONE = 'Europe/London'

# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
LANGUAGE_CODE = 'en-GB'

SITE_ID = 1

# If you set this to False, Django will make some optimizations so as not
# to load the internationalization machinery.
USE_I18N = True

# Absolute path to the directory that holds media.
# Example: "/home/media/media.lawrence.com/"
MEDIA_ROOT = '/home/django/media/'

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash if there is a path component (optional in other cases).
# Examples: "http://media.lawrence.com", "http://example.com/media/"
MEDIA_URL = 'http://mofin.mywebsite.co.uk/media/'

# URL prefix for admin media -- CSS, JavaScript and images. Make sure to use a
# trailing slash.
# Examples: "http://foo.com/media/", "/media/".
ADMIN_MEDIA_PREFIX = '/admin_media/'

# Make this unique, and don't share it with anybody.
SECRET_KEY = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'

# List of callables that know how to import templates from various sources.
TEMPLATE_LOADERS = (
 'django.template.loaders.filesystem.load_template_source',
 'django.template.loaders.app_directories.load_template_source',
#  'django.template.loaders.eggs.load_template_source',
)

MIDDLEWARE_CLASSES = (
 'django.middleware.common.CommonMiddleware',
 'django.contrib.sessions.middleware.SessionMiddleware',
 'django.contrib.auth.middleware.AuthenticationMiddleware',
)

ROOT_URLCONF = 'mofin.urls'

TEMPLATE_DIRS = (
 # Put strings here, like "/home/html/django_templates" or "C:/www/django/templates".
 # Always use forward slashes, even on Windows.
 # Don't forget to use absolute paths, not relative paths.
)

INSTALLED_APPS = (
 'django.contrib.auth',
 'django.contrib.contenttypes',
 'django.contrib.sessions',
 'django.contrib.sites',
 'django.contrib.admin',
 'mofin.store'
)
 

 Any answers / ideas gratefully accepted 

 Thanks 

 Dan 
 Answers (Total-10): #0 I had a similar permissions problem, and although my settings.py had the right permissions, the .pyc's did not!!! So watch out for this. 
 #1 This can also happen if you have an application (subdirectory to the project with an init file in it) named the same thing as the project. Your settings.py file may be in your project folder, but it seems that a part of the django system looks first for a module inside the project by the same name as the project and when it can't find a settings.py in there, it fails with a misleading message. 

 -name 

 ---settings.py 

 ---manage.py 

 ---application1 

 -----file.py 

 -----file2.py 

 ---name (the problem, rename this) 

 -----file.py 

 -----file2.py 

 Just something else to check for anyone else having this problem. Applies to Django 1.3 and probably others. 
 #2 I found the answer... file permissions. /home/django was set to 700. i.e. only django can view the contents. apache runs as Apache and so can't get past /home/django. 

 Dan 
 #3 Hey, just adding an additional answer to this problem. I had the exact same issue, but it wasn't file permissions. I was appending "path/to/project", but not also appending "path/to". Linked below is mod_wsgi's Django integration explanation that showed me the answer. 

 http://code.google.com/p/modwsgi/wiki/IntegrationWithDjango 
 #4 Possible problem: 

 you forgot the __init__.py file, which must be in your project and in all directories which you consider a python module for import. 

 Other thing you could try is to add the path directly into the manage.py file, like : 

 import sys

...
...

sys.path.insert(0, '/home/django/mofin/trunk')
 

 I hope it helps 
 #5 I think you need to have a trailing forward slash on that its what I have to do in my wsgi script in apache before I load up django. 

 import os
import sys
sys.path.append('/home/django/mofin/trunk/')
sys.path.append('/home/django/mofin/trunk/mofin/')
print &gt;&gt; sys.stderr, sys.path
os.environ['DJANGO_SETTINGS_MODULE'] = 'mofin.settings'

import django.core.handlers.wsgi
application = django.core.handlers.wsgi.WSGIHandler()
 

 In my case 

 import os
import sys
if os.uname()[1] == 'vivien':
 sys.path.append('/home/www/sitebuilder.blacknight.ie/web/')
 os.environ['DJANGO_SETTINGS_MODULE'] = 'gibo.dev_settings'
elif os.uname()[1] == 'thingy':
 sys.path.append('/home/www/sitebuilder.blacknight.ie/web/')
 os.environ['DJANGO_SETTINGS_MODULE'] = 'gibo.dev_settings'
else:
 sys.path.append('/home/www/sitebuilder.blacknight.ie/web/')
 os.environ['DJANGO_SETTINGS_MODULE'] = 'gibo.settings'

import django.core.handlers.wsgi
application = django.core.handlers.wsgi.WSGIHandler()
 
 #6 At first look I'd say the python path is wrong but compared to interactive shell it looks ok.
So maybe try this: 

 from django.core.management import setup_environ
from mofin import settings

setup_environ(settings)
 
 #7 I was going to say that you can just insert/append your project directory to your sys.path in your wsgi file but if your settings file is at 

 /home/django/mofin/trunk/mofin/settings.py
 

 Then you should be good there. 

 Is it on sys.path? Does it have syntax errors?
 

 That pretty much sums up what you are looking for. 

 Interesting that the error propagates though: 

 for middleware_path in settings.MIDDLEWARE_CLASSES:
 

 but you have what appears to be the exact default . 

 You might want to check which python interpreter is pointed to by wsgi. Are you intending to use a virtualenv but wsgi is looking at your system install? 

 You can also set the user and group that wsgi is running under. I use something like: 

 WSGIDaemonProcess mysite.com user=skyl group=skyl processes=n threads=N python-path=/home/skyl/pinax/pinax-env2/lib/python2.6/site-packages 
 #8 I had the same problem but another solution : 

 My project folder was named exactly as one of my application. 

 I had : 

 /home/myApp 
/home/myApp/settings.py 
/home/myApp/manage.py 
/home/myApp/rights.py 
/home/myApp/static/ 
/home/myApp/static/ 
/home/myApp/ myApp /model.py 
/home/myApp/ myApp /admin.py 
/home/myApp/ myApp /views.py 

 This kind of tree doesn't seems to be possible easily.
I changed the name of my project root folder and the problem was solved! 
 #9 (I wrote up this same answer for Django deployment problem in Apache/mod_wsgi. ImportError: Could not import settings &#39;site.settings&#39; in case someone only finds this question.) 

 This doesn't appear to be the problem in your case, but I ran smack into the same ImportError when I used the WSGIPythonPath directive (instead of the .wsgi file) to set up sys.path . That worked fine until I switched to running WSGI in daemon mode. Once you do that, you have to use the python-path argument to the WSGIDaemonProcess directive instead.