Question (ID-2545820): Optimization Techniques in Python Recently i have developed a billing application for my company with Python/Django. For few months everything was fine but now i am observing that the performance is dropping because of more and more users using that applications. Now the problem is that the application is now very critical for the finance team. Now the finance team are after my life for sorting out the performance issue. I have no other option but to find a way to increase the performance of the billing application. 

 So do you guys know any performance optimization techniques in python that will really help me with the scalability issue 

 Guys we are using mysql database and its hosted on apache web server on Linux box. Secondly what i have noticed more is the over all application is slow and not the database transactional part. For example once the application is loaded then it works fine but if they navigate to other link on that application then it takes a whole lot of time. 

 And yes we are using HTML, CSS and Javascript 
 Answers (Total-9): #0 As I said in comment, you must start by finding what part of your code is slow. 

 Nobody can help you without this information. 

 You can profile your code with the Python profilers then go back to us with the result. 

 If it's a Web app, the first suspect is generally the database. If it's a calculus intensive GUI app, then look first at the calculations algo first. 

 But remember that perf issues car be highly unintuitive and therefor, an objective assessment is the only way to go. 
 #1 ok, not entirely to the point, but before you go and start fixing it, make sure everyone understands the situation. it seems to me that they're putting some pressure on you to fix the "problem". 

 well first of all, when you wrote the application, have they specified the performance requirements? did they tell you that they need operation X to take less than Y secs to complete? Did they specify how many concurrent users must be supported without penalty to the performance? If not, then tell them to back off and that it is iteration (phase, stage, whatever) one of the deployment, and the main goal was the functionality and testing. phase two is performance improvements. let them (with your help obviously) come up with some non functional requirements for the performance of your system. 

 by doing all this, a) you'll remove the pressure applied by the finance team (and i know they can be a real pain in the bum) b) both you and your clients will have a clear idea of what you mean by "performance" c) you'll have a base that you can measure your progress and most importantly d) you'll have some agreed time to implement/fix the performance issues. 

 PS. that aside, look at the indexing... :) 
 #2 A surprising feature of Python is that the pythonic code is quite efficient... So a few general hints: 

 
 Use built-ins and standard functions whenever possible, they're already quite well optimized. 
 Try to use lazy generators instead one-off temporary lists. 
 Use numpy for vector arithmetic. 
 Use psyco if running on x86 32bit. 
 Write performance critical loops in a lower level language (C, Pyrex, Cython, etc.). 
 When calling the same method of a collection of objects, get a reference to the class function and use it, it will save lookups in the objects dictionaries (this one is a micro-optimization, not sure it's worth) 
 

 And of course, if scalability is what matters: 

 
 Use O(n) (or better) algorithms! Otherwise your system cannot be linearly scalable. 
 Write multiprocessor aware code. At some point you'll need to throw more computing power at it, and your software must be ready to use it! 
 
 #3 before you can "fix" something you need to know what is "broken". In software development that means profiling, profiling, profiling. Did I mention profiling. Without profiling you don't know where CPU cycles and wall clock time is going. Like others have said to get any more useful information you need to post the details of your entire stack. Python version, what you are using to store the data in (mysql, postgres, flat files, etc), what web server interface cgi, fcgi, wsgi, passenger, etc. how you are generating the HTML, CSS and assuming Javascript. Then you can get more specific answers to those tiers. 
 #4 You may be interested in this document I've found some time ago.
As personal advice, be as more pythonic as you can: lazy evaluation is the keyword, so learn to use iterators and generators. 
 #5 For the type of application you are describing (a web application probably backed by a database) your performance problems are unlikely to be language specific . They are far more likely to stem from design or architecture issues , though they could be simple coding problems too. 

 To sort this out you need to figure out where the bottlenecks are in your application and for that you need some sort of profiler . 

 Once you have found your bottlenecks you will be in a much better position. You can evaluate then problem areas for common issues including: 

 
 Design and Architecture issues 
 SQL anti-patterns 
 Incorrect usage of your framework (perhaps relying on inappropriate defaults) 
 Badly structured algorithms 
 

 The specifics of any solution are going to depend on the specifics of the bottlenecks your find. 
 #6 http://wiki.python.org/moin/PythonSpeed/PerformanceTips 

 I optimized some python code a while back, the most surprising thing to me was how much each function call costs. If you minimize function calls or replace loops with builtins you'll be running much faster. 
 #7 There are some great suggestions hereâ€¦ So let me suggest an implementation detail. I have found the runprofileserver command found in django-command-extensions very convenient for profiling my Django code. 
 #8 I am not sure if this would solve the problem but you should have a look at psyco