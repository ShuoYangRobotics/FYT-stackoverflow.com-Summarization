Question (ID-3678869): Pythonic way to combine two lists in an alternating fashion? I have two lists, the first of which is guaranteed to contain exactly one more item than the second . I would like to know the most Pythonic way to create a new list whose even-index values come from the first list and whose odd-index values come from the second list. 

 # example inputs
list1 = ['f', 'o', 'o']
list2 = ['hello', 'world']

# desired output
['f', 'hello', 'o', 'world', 'o']
 

 This works, but isn't pretty: 

 list3 = []
while True:
 try:
  list3.append(list1.pop(0))
  list3.append(list2.pop(0))
 except IndexError:
  break
 

 How else can this be achieved? What's the most Pythonic approach? 
 Answers (Total-13): #0 There's a recipe for this in the itertools documentation : 

 def roundrobin(*iterables):
 "roundrobin('ABC', 'D', 'EF') --&gt; A D E B F C"
 # Recipe credited to George Sakkis
 pending = len(iterables)
 nexts = cycle(iter(it).next for it in iterables)
 while pending:
  try:
   for next in nexts:
    yield next()
  except StopIteration:
   pending -= 1
   nexts = cycle(islice(nexts, pending))
 
 #1 This should do what you want: 

 &gt;&gt;&gt; iters = [iter(list1), iter(list2)]
&gt;&gt;&gt; print list(it.next() for it in itertools.cycle(iters))
['f', 'hello', 'o', 'world', 'o']
 
 #2 Here's one way to do it by slicing: 

 &gt;&gt;&gt; list1 = ['f', 'o', 'o']
&gt;&gt;&gt; list2 = ['hello', 'world']
&gt;&gt;&gt; result = [None]*(len(list1)+len(list2))
&gt;&gt;&gt; result[::2] = list1
&gt;&gt;&gt; result[1::2] = list2
&gt;&gt;&gt; result
['f', 'hello', 'o', 'world', 'o']
 
 #3 def combine(list1, list2):
 lst = []
 len1 = len(list1)
 len2 = len(list2)

 for index in range( max(len1, len2) ):
  if index+1 &lt;= len1:
   lst += [list1[index]]

  if index+1 &lt;= len2:
   lst += [list2[index]]

 return lst
 
 #4 I'd do the simple: 

 chain.from_iterable( izip( list1, list2 ) )
 

 It'll come up with an iterator without creating any additional storage needs. 
 #5 I'm too old to be down with list comprehensions, so: 

 import operator
list3 = reduce(operator.add, zip(list1, list2))
 
 #6 Here's a one liner that does it: 

 list3 = [ item for pair in zip(list1, list2 + [0]) for item in pair][:-1] 
 #7 Here's a one liner using list comprehensions, w/o other libraries: 

 list3 = [sub[i] for i in range(len(list2)) for sub in [list1, list2]] + [list1[-1]]
 

 Here is another approach, if you allow alteration of your initial list1 by side effect: 

 [list1.insert((i+1)*2-1, list2[i]) for i in range(len(list2))]
 
 #8 My take: 

 a = "hlowrd"
b = "el ol"

def func(xs, ys):
 ys = iter(ys)
 for x in xs:
  yield x
  yield ys.next()

print [x for x in func(a, b)]
 
 #9 Stops on the shortest: 

 def interlace(*iters, next = next) -&gt; collections.Iterable:
 """
 interlace(i1, i2, ..., in) -&gt; (
  i1-0, i2-0, ..., in-0,
  i1-1, i2-1, ..., in-1,
  .
  .
  .
  i1-n, i2-n, ..., in-n,
 )
 """
 return map(next, cycle([iter(x) for x in iters]))
 

 Sure, resolving the next/_ next _ method may be faster. 
 #10 Without itertools and assuming l1 is 1 item longer than l2: 

 &gt;&gt;&gt; sum(zip(l1, l2+[0]), ())[:-1]
('f', 'hello', 'o', 'world', 'o')
 

 Using itertools and assuming that lists don't contain None: 

 &gt;&gt;&gt; filter(None, sum(itertools.izip_longest(l1, l2), ()))
('f', 'hello', 'o', 'world', 'o')
 
 #11 c=[]
for i, j in zip(list1,list2):
 c.append(i)
 c.append(j)
c.append(list1[-1])
 
 #12 zip(list1, list2)