Question (ID-969121): Eclipse + local CVS + PyDev I tried several Python IDEs (on Windows platform) but finally I found only Eclipse + PyDev meeting my needs. This set of tools is really comfortable and easy to use. I'm currently working on a quite bigger project. I'd like to have a possibility to use CVS or any other version control system which would be installed on my local harddrive (I recently moved my house and don't have yet an access to internet.) 

 It doesn't matter for me if it'd be CVS - can also be any other version control system. It'd be great if it will be not too hard to configure with Eclipse. Can anyone give me some possible solution? Any hints? 

 Regards and thanks in advance for any clues. Please forgive my English ;) 
 Answers (Total-9): #0 Last time I tried this, Eclipse did not support direct access to local repositories in the same way that command line cvs does because command line cvs has both client and server functionality whereas Eclipse only has client functionality and needs to go through (e.g.) pserver, so you would probably need to have a cvs server running. 

 Turns out that I didn't really need it anyway as Eclipse keeps its own history of all changes so I only needed to do an occasional manual update to cvs at major milestones. 

 [Eventually I decided not to use cvs at all with Eclipse under Linux as it got confused by symlinks and started deleting my include files when it "synchronised" with the repository.] 
 #1 If you don't mind a switch to Subversion, Eclipse has its SubClipse plugin. 
 #2 I tried Eclipse+Subclipse and Eclipse+Bazaar plugin. Both work very well, but I have found that Tortoise versions of those version source control tools are so good that I resigned from Eclipse plugins. On Windows Tortoise XXX are my choice. They integrate with shell (Explorer or TotalCommander), changes icon overlay if file is changed, shows log, compare revisions etc. etc. 
 #3 As others have indicated, there are plugins available for Eclipse for SVN, Bazar, Mercurial and Git. 

 Even so, despite their presence, I find using the command line the most comfortable. 

 svn commit -m 'now committing'
 

 Assuming you are not committing for more than several times a day, this should work well enough. Is there anything specific that is preventing you from using the command line? 
 #4 I would definitely recommend switching over to a different VCSâ€”I prefer Mercurial , along with a lot of the Python community. That way, you'll be able to work locally, but still have the ability to publish your changes to the world later. 

 You can install TortoiseHg for Windows Explorer, and the MercurialEclipse plugin for Eclipse. 

 There's even a Mercurial for CVS users document to help you change over, and a list of mostly-equivalent commands . 
 #5 I believe Eclipse does have CVS support built in - or at least it did have when I last used it a couple of years ago. 

 For further information on how to use CVS with Eclipse see the Eclipse CVS FAQ 
 #6 
 I recently moved my house and don't have yet an access to internet. 
 

 CVS and SVN are the Centralized Version control systems. Rather than having to install them on your local system just for single version control, you could use DVCS like Mercurial or Git. 

 When you clone a Mercurial Repository, you have literally all versions of all the repo files available locally. 
 #7 I use Eclipse with a local CVS repository without issue. The only catch is that you cannot use the ":local:" CVS protocol. Since you're on Windows, I recommend installing TortoiseCVS and then configuring the included CVSNT server as follows: 

 
 Control Panel: CVSNT
 
 Repository configuration: create a repository and publish it 
 Note the Server Name and make sure it matches your hostname 
 
 Eclipse: Create a new repository location using the :pserver: connection type and point it to your local hostname 
 

 This (or any actual source control system) has the advantage over the Eclipse Local History of being able to associate checkin comments with changes, group changes into change sets, etc. You can use the Eclipse Local History to recover from minor mistakes, but it's no replacement for source control (and expires as well: see Window->Preferences General->Workspace->Local History). 
 #8 Here's a Tut: 

 http://android-er.blogspot.com/2009/07/configure-eclipse-to-work-with-this.html