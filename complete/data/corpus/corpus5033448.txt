Question (ID-5033448): "y" or "yes" -- expectations not met In the following code, answer() works as expected and returns true if input is "y" and false when not, but in answer2() , it always returns true. 

 Can someone explain why this is the case? 

 def answer():
 answer = raw_input()
 if answer == "y":
  return True
 else:
  return False


def answer2():
 answer = raw_input()
 if answer == "y" or "yes": # &lt;- notice the extra: or "yes"
  return True
 else:
  return False


if answer() == True:
 print "true"
else:
 print "false"


if answer2() == True:
 print "true"
else:
 print "false"
 
 Answers (Total-7): #0 The expression, "y" or "yes" will evaluate to "y" . What you want is: 

 if answer in ('y', 'yes'):
 return True
 
 #1 I'm not a Python expert, but I suspect in answer2 it should be: 

 if answer == "y" or answer == "yes": # &lt;- notice the extra: or "yes"
 

 In other words, I suspect it's currently parsing it as: 

 if (answer == "y") or ("yes")
 

 and just converting "yes" into True, effectively... which is why it's always returning True. 
 #2 You want 

 if answer == "y" or answer == "yes":
 

 you have to test it that way. 

 Or better still, have a list of affirmative responses and test inclusion; 

 affirmatives = ["yes","y","ja","oui"]
if answer in affirmatives:
 

 It's all to do with boolean (True/False) operators. Check out the following: 

 &gt;&gt;&gt; "yes" == "yes" or "fnord"
True
&gt;&gt;&gt; "no" == "yes" or "fnord"
'fnord'
 

 If the first part is True, you get True - if the first part is False, you get the right-hand side of the 'or'. Now, by having: 

 answer == "y" or answer == "yes"
 

 you can see how if the first == returns False it returns the second == test... 
 #3 you need to say: 

 if answer == "y" or answer == "yes"
 

 how you did it evaluates as: 

 if (answer == "y") or "yes"
 

 which will always be true as "yes" is a non-empty string. 
 #4 if answer == "y" or "yes":
 

 Note that this is different that: 

 if answer == "y" or answer == "yes":
 

 Because "yes" is a non-zero value, the first one will always return True. 
 #5 Here's the issue: 

 answer == 'y' or 'yes' 
 

 is always going to return True or 'yes' (effectively True since it is not 0 or None),because it's being evaluated as: 

 if (answer == 'y') or 'yes'
 

 so you are always going to trigger the 'if' block and return True. 
 #6 Lots of people have explained the problem, so I won't repeat their explanation; but note that this is the (IMO) best way to test for multiple equivalent phrases: 

 def answer(response):
 return response.upper() in ["Y", "YES", "TRUE", "T"] # and so on
 

 EDIT: or even better: 

 def answer2(response):
 return any(s.startswith(response.upper()) for s in ["YES", "TRUE"])