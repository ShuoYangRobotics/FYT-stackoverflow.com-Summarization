Question (ID-8286554): list, strings, anagrams , python If I have a list of strings for example: 

 ["car", "tree", "boy", "girl", "arc"....]
 

 What should I do in order to find anagrams in that list? For example (car, arc) .
I tried using for loop for each string and I used if in order to ignore strings in different lengths but I can't get the right result. 

 How can I go over each letter in the string and compare it to others in the list in different order? 

 I have read several similiar questions, but the answares were too advance, I can't import anything and I can only use basic functions. 

 Any suggestions? 
 Answers (Total-6): #0 Create a dictionary of (sorted word, list of word). All the words that are in the same list are anagrams of each other. 

 from collections import defaultdict

def load_words():
 with open('/usr/share/dict/american-english') as f:
  return [word.rstrip() for word in f]

def find_anagrams():
 d = defaultdict(list)
 for word in load_words():
  d["".join(sorted(word))].append(word)
 for k, v in d.iteritems():
  if len(v) &gt; 1:
   print k, v
 
 #1 Sort each element then look for duplicates. There's a built-in function for sorting so you do not need to import anything 
 #2 In order to do this for 2 strings you can do this: 

 def isAnagram(str1, str2):
 str1_list = list(str1)
 str1_list.sort()
 str2_list = list(str2)
 str2_list.sort()

 return (str1_list == str2_list)
 

 As for the iteration on the list, it is pretty straight forward 
 #3 One solution is to sort the word you're searching anagrams for (for example using sorted ), sort the alternative and compare those. 

 So if you would be searching for anagrams of 'rac' in the list ['car', 'girl', 'tofu', 'rca'] , your code could look like this: 

 word = sorted('rac')
alternatives = ['car', 'girl', 'tofu', 'rca']

for alt in alternatives:
 if word == sorted(alt):
  print alt
 
 #4 &gt;&gt;&gt; words = ["car", "race", "rac", "ecar", "me", "em"]
&gt;&gt;&gt; anagrams = {}
... for word in words:
...  reverse_word=word[::-1]
...  if reverse_word in words:
...   anagrams[word] = (words.pop(words.index(reverse_word)))
&gt;&gt;&gt; anagrams
20: {'car': 'rac', 'me': 'em', 'race': 'ecar'}
 

 Logic: 

 
 Start from first word and reverse the word. 
 Check the reversed word is present in the list. 
 If present, find the index and pop the item and store it in the dictionary, word as key and reversed word as value. 
 
 #5 Create a dictionary with key = words, value = sorted(words)
and then search the dictionary using Set Comprehension. This will be faster than using Loops. 

 yourList=['car', 'tree', 'boy', 'girl', 'arc', 'yob']
d={x:''.join(sorted(x)) for x in yourList}
set([k1 for k in d for k1 in d if d[k]==d[k1] and k!=k1])
 

 Line1 is your List 

 Line2 uses dictionary comprehension to create a dictionary with key = words, value = sorted(words) 

 Line3 Uses set comprehension (to remove duplicates) to search for entries where the sorted values are the same. You can add an extra condition to compare length if you want. 

 Note** Set and Dictionary Comprehension is new to Python 2.7