Question (ID-1425493): Convert hex to binary I have ABC123EFFF, I want to have 01010101010001010101. 

 How? 
 Answers (Total-10): #0 bin(int("abc123efff", 16))[2:]
 
 #1 import binascii

binary_string = binascii.unhexlify(hex_string)
 

 Read 

 binascii.unhexlify 

 Return the binary data represented by the hexadecimal string specified as the parameter. 
 #2 For solving the left-side trailing zero problem: 

 

 my_hexdata = "1a"

scale = 16 ## equals to hexadecimal

num_of_bits = 8

bin(int(my_hexdata, scale))[2:].zfill(num_of_bits)
 

 

 It will give 00011010 instead of the trimmed version. 
 #3 hex --> decimal then decimal --> binary 

 #decimal to binary 
def d2b(n):
 bStr = ''
 if n &lt; 0: raise ValueError, "must be a positive integer"
 if n == 0: return '0'
 while n &gt; 0:
  bStr = str(n % 2) + bStr
  n = n &gt;&gt; 1 
 return bStr

#hex to binary
def h2b(hex):
 return d2b(int(hex,16))
 
 #4 Replace each hex digit with the corresponding 4 binary digits: 

 1 - 0001
2 - 0010
...
a - 1010
b - 1011
...
f - 1111
 
 #5 Here's a fairly raw way to do it using bit fiddling to generate the binary strings. 

 The key bit to understand is: 

 (n & (1 &lt;&lt; i)) and 1 

 Which will generate either a 0 or 1 if the i'th bit of n is set. 

 
import binascii

def byte_to_binary(n):
 return ''.join(str((n & (1 &lt;&lt; i)) and 1) for i in reversed(range(8)))

def hex_to_binary(h):
 return ''.join(byte_to_binary(ord(b)) for b in binascii.unhexlify(h))

print hex_to_binary('abc123efff')

>>> 1010101111000001001000111110111111111111
 
 #6 Another way: 

 import math

def hextobinary(hex_string):
 s = int(hex_string, 16) 
 num_digits = int(math.ceil(math.log(s) / math.log(2)))
 digit_lst = ['0'] * num_digits
 idx = num_digits
 while s &gt; 0:
 	idx -= 1
 	if s % 2 == 1: digit_lst[idx] = '1'
 	s = s / 2
 return ''.join(digit_lst)

print hextobinary('abc123efff')
 
 #7 unhexlify 
 #8 bin(0xabc123eff)[2:]
 
 #9 This is a slight touch up to Glen Maynard's solution, which I think is the right way to do it. It just adds the padding element. 

 
 def hextobin(self, hexval):
  '''
  Takes a string representation of hex data with
  arbitrary length and converts to string representation
  of binary. Includes padding 0s
  '''
  thelen = len(hexval)*4
  binval = bin(int(hexval, 16))[2:]
  while ((len(binval)) &lt thelen):
   binval = '0' + binval
  return binval

 

 Pulled it out of a class. Just take out self, if you're working in a stand-alone script.