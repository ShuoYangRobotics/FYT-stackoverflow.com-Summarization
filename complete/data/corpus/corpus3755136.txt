Question (ID-3755136): Pythonic way to check if a list is sorted or not Is there a pythonic way to check if a list is already sorted in AESC or DESC. 

 listtimestamps=[1,2,3,5,6,7] 

 something like listtimestamps.isSorted() that returns True or False. 

 EDIT: I want to input a list of timestamps for some messages and check if the the transactions appeared in the correct order. 

 and I can write a custom function too :) , Thanks 

 EDIT: Thanks for pointing out camel case issues :) 

 EDIT: Also I am sorry if I wasn't clear I don't need to sort it afterwards, I just need to check if the list is sorted, I am using it to solve a decision problem 
 Answers (Total-6): #0 Actually we are not giving the answer anijhaw is looking for. Here is the one liner: 

 all(l[i] &lt;= l[i+1] for i in xrange(len(l)-1))
 
 #1 This iterator form is 10-15% faster than using integer indexing: 

 from itertools import izip
isSorted = lambda l : all(a &lt;= b for a,b in izip(l[:-1],l[1:]))
 
 #2 I would just use 

 if sorted(lst) == lst:
 # code here
 

 unless it's a very big list in which case you might want to create a custom function. 

 if you are just going to sort it if it's not sorted, then forget the check and sort it. 

 lst.sort()
 

 and don't think about it too much. 

 if you want a custom function, you can do something like 

 def is_sorted(lst, key=lambda x, y: x &lt; y):
 for i, el in enumerate(lst[1:]):
  if key(el, lst[i-1]):
   return False
 return True
 

 This will be O(n) if the list is already sorted though (and O(n) in a for loop at that!) so, unless you expect it to be not sorted (and fairly random) most of the time, I would, again, just sort the list. 
 #3 SapphireSun is quite right. You can just use lst.sort() . Python's sort implementation (TimSort) check if the list is already sorted. If so sort() will completed in linear time. Sounds like a Pythonic way to ensure a list is sorted ;) 
 #4 I ran a benchmark and sorted(lst, reverse=True) == lst was the fastest for long lists, and all(l[i] &gt;= l[i+1] for i in xrange(len(l)-1)) was the fastest for short lists . These benchmarks were run on a MacBook Pro 2010 13" (Core2 Duo 2.66GHz, 4GB 1067MHz DDR3 RAM, Mac OS X 10.6.5). 

 UPDATE: I revised the script so that you can run it directly on your own system. The previous version had bugs. Also, I have added both sorted and unsorted inputs. 

 
 Best for short sorted lists: all(l[i] &gt;= l[i+1] for i in xrange(len(l)-1)) 
 Best for long sorted lists: sorted(l, reverse=True) == l 
 Best for short unsorted lists: all(l[i] &gt;= l[i+1] for i in xrange(len(l)-1)) 
 Best for long unsorted lists: all(l[i] &gt;= l[i+1] for i in xrange(len(l)-1)) 
 

 So in most cases there is a clear winner. 

 UPDATE: aaronsterling's answers (#6 and #7) are actually the fastest in all cases. #7 is the fastest because it doesn't have a layer of indirection to lookup the key. 

 #!/usr/bin/env python

import itertools
import time

def benchmark(f, *args):
 t1 = time.time()
 for i in xrange(1000000):
  f(*args)
 t2 = time.time()
 return t2-t1

L1 = range(4, 0, -1)
L2 = range(100, 0, -1)
L3 = range(0, 4)
L4 = range(0, 100)

# 1.
def isNonIncreasing(l, key=lambda x,y: x &gt;= y): 
 return all(key(l[i],l[i+1]) for i in xrange(len(l)-1))
print benchmark(isNonIncreasing, L1) # 2.47253704071
print benchmark(isNonIncreasing, L2) # 34.5398209095
print benchmark(isNonIncreasing, L3) # 2.1916718483
print benchmark(isNonIncreasing, L4) # 2.19576501846

# 2.
def isNonIncreasing(l):
 return all(l[i] &gt;= l[i+1] for i in xrange(len(l)-1))
print benchmark(isNonIncreasing, L1) # 1.86919999123
print benchmark(isNonIncreasing, L2) # 21.8603689671
print benchmark(isNonIncreasing, L3) # 1.95684289932
print benchmark(isNonIncreasing, L4) # 1.95272517204

# 3.
def isNonIncreasing(l, key=lambda x,y: x &gt;= y): 
 return all(key(a,b) for (a,b) in itertools.izip(l[:-1],l[1:]))
print benchmark(isNonIncreasing, L1) # 2.65468883514
print benchmark(isNonIncreasing, L2) # 29.7504849434
print benchmark(isNonIncreasing, L3) # 2.78062295914
print benchmark(isNonIncreasing, L4) # 3.73436689377

# 4.
def isNonIncreasing(l):
 return all(a &gt;= b for (a,b) in itertools.izip(l[:-1],l[1:]))
print benchmark(isNonIncreasing, L1) # 2.06947803497
print benchmark(isNonIncreasing, L2) # 15.6351969242
print benchmark(isNonIncreasing, L3) # 2.45671010017
print benchmark(isNonIncreasing, L4) # 3.48461818695

# 5.
def isNonIncreasing(l):
 return sorted(l, reverse=True) == l
print benchmark(isNonIncreasing, L1) # 2.01579380035
print benchmark(isNonIncreasing, L2) # 5.44593787193
print benchmark(isNonIncreasing, L3) # 2.01813793182
print benchmark(isNonIncreasing, L4) # 4.97615599632

# 6.
def isNonIncreasing(l, key=lambda x, y: x &gt;= y): 
 for i, el in enumerate(l[1:]):
  if key(el, l[i-1]):
   return False
 return True
print benchmark(isNonIncreasing, L1) # 1.06842684746
print benchmark(isNonIncreasing, L2) # 1.67291283607
print benchmark(isNonIncreasing, L3) # 1.39491200447
print benchmark(isNonIncreasing, L4) # 1.80557894707

# 7.
def isNonIncreasing(l):
 for i, el in enumerate(l[1:]):
  if el &gt;= l[i-1]:
   return False
 return True
print benchmark(isNonIncreasing, L1) # 0.883186101913
print benchmark(isNonIncreasing, L2) # 1.42852401733
print benchmark(isNonIncreasing, L3) # 1.09229516983
print benchmark(isNonIncreasing, L4) # 1.59502696991
 
 #5 Here's an other way with eval and chained comparison from python : 

 a=[3,4,5,1]
isSorted = eval("&lt;".join([str(v) for v in a]))
 

 EDIT : Limitations : 

 This way is actually more a funny way to use chained comparison because there's a lot of problems : 

 
 For a=[x] it returns x 
 For big arrays, it raises a SystemError (com_backpatch: offset too large) (cf. here )