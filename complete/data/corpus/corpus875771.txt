Question (ID-875771): How does one encode and decode a string with Python for use in a URL? I have a string like this: 

 String A: [ 12234_1_Hello'World_34433_22acb_4554344_accCC44 ]
 

 I would like to encrypt String A to be used in a clean URL. something like this: 

 String B: [ cYdfkeYss4543423sdfHsaaZ ]
 

 Is there a encode API in python, given String A, it returns String B?
Is there a decode API in python, given String B, it returns String A? 
 Answers (Total-8): #0 One way of doing the encode/decode is to use the package base64, for an example: 

 import base64
import sys

encoded = base64.b64encode(sys.stdin.read())
print encoded

decoded = base64.b64decode(encoded)
print decoded
 

 Is it what you were looking for? With your particular case you get: 

 input: 12234_1_Hello'World_34433_22acb_4554344_accCC44 

 encoded: MTIyMzRfMV9IZWxsbydXb3JsZF8zNDQzM18yMmFjYl80NTU0MzQ0X2FjY0NDNDQ= 

 decoded: 12234_1_Hello'World_34433_22acb_4554344_accCC44 
 #1 To make it really short -> just insert a row into the database. Store something like a list of (id auto_increment, url) tuples. Then you can base64 encode the id to get a "proxy url". Decode it by decoding the id and looking up the proper url in the database. Or if you don't mind the identifiers looking sequential, just use the numbers. 
 #2 note that theres a huge difference between encoding and encryption. 

 if you want to send sensitive data, then dont use the encoding mentioned above ;) 
 #3 Are you after encryption, compression, or just urlencoding? The string can be passed after urlencoding, but that will not make it smaller as in your example. Compression might shrink it, but you would still need to urlencode the result. 

 Do you actually need to hide the string data from the viewer (e.g. sensitive data, should not be viewable by someone reading the URL over your shoulder)? 
 #4 The base64 module provides encoding and decoding for a string to and from different bases, since python 2.4. 

 In you example, you would do the following: 

 import base64
string_b = base64.b64encode(string_a)
string_a = base64.b64decode(string_b)
 

 For full API:
 http://docs.python.org/library/base64.html 
 #5 It's hard to reduce the size of a string and preserve arbitrary content. 

 You have to restrict the data to something you can usefully compress. 

 Your alternative is to do the following. 

 
 Save "all the arguments in the URL" in a database row. 
 Assign a GUID key to this collection of arguments. 
 Then provide that shortened GUID key. 
 
 #6 Are you looking to encrypt the string or encode it to remove illegal characters for urls?
If the latter, you can use urllib.quote : 

 &gt;&gt;&gt; quoted = urllib.quote("12234_1_Hello'World_34433_22acb_4554344_accCC44")
&gt;&gt;&gt; quoted
'12234_1_Hello%27World_34433_22acb_4554344_accCC44'

&gt;&gt;&gt; urllib.unquote(quoted)
"12234_1_Hello'World_34433_22acb_4554344_accCC44"
 
 #7 Another method that would also shorten the string would be to calculate the md5/sha1 hash of the string (concatenated with a seed if you wished): 

 import hashlib
&gt;&gt;&gt; hashlib.sha1("12234_1_Hello'World_34433_22acb_4554344_accCC44").hexdigest()
'e1153227558aadc00a2e90b5013fdd6b0804fdfb'
 

 In theory you should get a set of strings with very few collisions and with a fixed length. The hashlib library has an array of different hash functions you can use in this manner, with different output sizes. 

 Edit: You also said that you needed a reversible string, so this wouldn't work for that. Afaik, however, many web platforms that use clean URLs like you seem to want to implement use hash functions to calculate a shortened URL and then store that URL along with the page's other data to provide the reverse lookup capability.