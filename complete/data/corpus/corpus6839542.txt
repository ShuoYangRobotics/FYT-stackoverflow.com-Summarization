Question (ID-6839542): How to use more than one condition in Python for loop? How to use more than one condition in Python for loop? 

 for example in java:
 int[] n={1,2,3,4,6,7};
 for(int i=0;i&lt;n.length &amp;&amp; i&lt;5 ;i++){
  //do sth
 }
 

 How dose the python for loop do this? 
 Answers (Total-7): #0 The Python for loop does not, itself, have any support for this. You can get the same effect using a break statement: 

 for i in range(1, 8):
 if i &gt;= 5:
  break
 # do something
 

 In Python, a for is really a foreach that iterates over some "iterator" or some "iterable object". In Python 2.x, the above for loop builds a list with the numbers 1 through 7 inclusive, then iterates over the list; in Python 3.x, the above loop gets an "iterator object" that yields up the values 1 through 7 inclusive, one at a time. (The difference is in the range() function and what it returns. In Python 2.x you can use xrange() to get an iterator object instead of allocating a list.) 

 I didn't show your n object because i will be set to the same values that would have been in it. If you actually had some list to iterate over, it is good Python to iterate over it directly rather than using a variable i to index the list. If you still need an index variable you can get it with enumerate() like so: 

 n = [3, 5, 10, "cat", "dog", 3.0, 4.0] # list can contain different types
for i, value in enumerate(n):
 if i &gt;= 5:
  break
 # do something with value
 
 #1 The direct equivalent of your Java code is a while loop: 

 n = [1, 2, 3, 4, 6, 7]
i = 0
while i &lt; len(n) and i &lt; 5:
 # do sth
 i += 1
 

 You could also do: 

 n = [1, 2, 3, 4, 6, 7]
for x in n[:5]:
 # do sth
 
 #2 You can write a while loop with the same sort of logic (but in Python, &amp;&amp; is spelled and , and || is spelled or ); or you can use a for loop that iterates over a sequence and then add extra logic to break out of the loop. 

 In Python, we prefer not to use integers to index into a container. This would actually break a lot of our code, because we do not check the data types at compile-time, and some containers cannot be indexed into. Wanting to index into a container is already a design smell: the fact that everything is in a sequential container is supposed to mean that none of the elements are "special", or we would have kept them separate. Iteration is iteration, and we should not go out of our way to make it more complicated. 
 #3 Assuming that you want the ith item of n somewhere in the loop, enumerate saves us from typing n[i] all over the place - the value will be stored in the variable item 

 n = [1,2,3,4,6,7]
for i, item in enumerate(n):
 if i&gt;=5:
 break
 # do something
 print item  # for example
 

 Note that the loop will terminate automatically if the length of n is less than 5 
 #4 Here is one way to have two or more conditions with the for loop, which is what the question actually asks . The point I am trying to make is that it can be done, but isn't very pythonic and it's generally not a good idea to try to rewrite code from another language line by line. 

 from itertools import takewhile, count
n=[1,2,3,4,6,7]
for i in takewhile(lambda i:i&lt;len(n) and i&lt;5, count()):
  print(i)
 
 #5 Python's for is not like the for in languages based on C syntax. In Python, for iterates over a sequence, whereas in C it loops while a condition is true. This is a profound difference. 

 The C-like for can be replaced roughly with the following code: 

 i = 0;
while (i &lt; n.length &amp;&amp; i &lt; 5) {
 // do sth
 i++;
}
 

 (There are some complications from break and continue , but let's ignore those for now.) 

 This rewrite also indicates a way to do what you want in Python: use while : 

 i = 0
while i &lt; len(n) and i &lt; 5:
 // do something
 i += 1
 

 In your particular case, however, it is easiest to use for with a suitable list of indexes: 

 for i in range(min(len(n), 5)):
 // do something
 

 range will return a list of integers (0, 1, 2, ...) and what you want is to have the list go up to 5, or the length of your array, whichever is smaller. The above code achieves that. 
 #6 The for statement in Python iterates a "list" of objects (I put list in quotes because I mean it in the generic sense, it can iterate over anything that is iterable). 

 To code a conditional loop (rather than iterating until completion), use while: 

 n = [1, 2, 3, 4, 6, 7]
i = 0
while i &lt; len(n) and i &lt; 5:
 # do stuff
 i += 1
 

 Now just to be complete, your example could also be written as: 

 n = [1, 2, 3, 4, 6, 7]
for i in range(0,min(len(n),5)):
 # do stuff
 

 or: 

 n = [1, 2, 3, 4, 6, 7]
for i in range(0,len(n)):
 if i &gt;= 5:
  break
 # do stuff