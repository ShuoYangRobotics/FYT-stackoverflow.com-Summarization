Question (ID-32404): Can I run a Python script as a service (in Windows)? How? I am sketching the architecture for a set of programs that share various interrelated objects stored in a database. I want one of the programs to act as a service which provides a higher level interface for operations on these objects, and the other programs to access the objects through that service. 

 I am currently aiming for Python and the Django framework as the technologies to implement that service with. I'm pretty sure I figure how to daemonize the Python program in Linux. However, it is an optional spec item that the system should support Windows. I have little experience with Windows programming and no experience at all with Windows services. 

 Can I run Python programs as a Windows service (i. e. run it automatically without user login)? I won't necessarily have to implement this part, but I need a rough idea how it would be done in order to decide whether to design along these lines. 

 Edit: Thanks for all the answers so far, they are quite comprehensive. I would like to know one more thing: How is Windows aware of my service? Can I manage it with the native Windows utilities? Basically, what is the equivalent of putting a start/stop script in /etc/init.d? 
 Answers (Total-7): #0 Yes you can. I do it using the pythoncom libraries that come included with ActivePython 

 This is a basic skeleton for a simple service: 

 import pythoncom
import win32serviceutil
import win32service
import win32event
import servicemanager
import socket


class AppServerSvc (win32serviceutil.ServiceFramework):
 _svc_name_ = "TestService"
 _svc_display_name_ = "Test Service"

 def __init__(self,args):
  win32serviceutil.ServiceFramework.__init__(self,args)
  self.hWaitStop = win32event.CreateEvent(None,0,0,None)
  socket.setdefaulttimeout(60)

 def SvcStop(self):
  self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)
  win32event.SetEvent(self.hWaitStop)

 def SvcDoRun(self):
  servicemanager.LogMsg(servicemanager.EVENTLOG_INFORMATION_TYPE,
        servicemanager.PYS_SERVICE_STARTED,
        (self._svc_name_,''))
  self.main()

 def main(self):
  pass

if __name__ == '__main__':
 win32serviceutil.HandleCommandLine(AppServerSvc)
 

 Your code would go in the main() method, usually with some kind of infinite loop that might be interrumped by checking a flag, that you set in the SvcStop method 
 #1 There are a couple alternatives for installing as a service virtually any Windows executable. 

 Method 1: Use instsrv and srvany from rktools.exe 

 For Windows Home Server or Windows Server 2003 (works with WinXP too), the Windows Server 2003 Resource Kit Tools comes with utilities that can be used in tandem for this, called instsrv.exe and srvany.exe . See this Microsoft KB article KB137890 for details on how to use these utils. 

 For Windows Home Server, there is a great user friendly wrapper for these utilities named aptly " Any Service Installer ". 

 Method 2: Use ServiceInstaller for Windows NT 

 There is another alternative using ServiceInstaller for Windows NT ( download-able here ) with python instructions available . Contrary to the name, it works with both Windows 2000 and Windows XP as well. Here are some instructions for how to install a python script as a service. 

 
 Installing a Python script 
 
 Run ServiceInstaller to create a new
 service. (In this example, it is
 assumed that python is installed at
 c:\python25) 

 Service Name : PythonTest
Display Name : PythonTest 
Startup : Manual (or whatever you like)
Dependencies : (Leave blank or fill to fit your needs)
Executable : c:\python25\python.exe
Arguments : c:\path_to_your_python_script\test.py
Working Directory : c:\path_to_your_python_script
 
 
 After installing, open the Control
 Panel's Services applet, select and
 start the PythonTest service. 
 

 After my initial answer, I noticed there were closely related Q&amp;A already posted on SO. See also: 

 Can I run a Python script as a service (in Windows)? How? 

 How do I make Windows aware of a service I have written in Python? 
 #2 Check this Windows Service template it uses the win32service API . 
 #3 see Python Win Service 
 #4 You will need some "windows service wrapper", you could write it yourself or just check out srvany.exe . Here is some tutorial how to use it . 
 #5 This article on Codeproject contains a program that can start other non-service applications as if they were a service. 

 Otherwise you must design a real service application which is different from a normal windows application. 
 #6 Or use Tim Golden's WMI module for Python:
 http://timgolden.me.uk/python/wmi/tutorial.html#creating-wmi-objects