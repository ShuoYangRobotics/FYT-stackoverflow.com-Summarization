Question (ID-1488372): Mimic Python's strip() function in C I started on a little toy project in C lately and have been scratching my head over the best way to mimic the strip() functionality that is part of the python string objects. 

 Reading around for fscanf or sscanf says that the string is processed upto the first whitespace that is encountered. 

 fgets doesn't help either as I still have newlines sticking around.
I did try a strchr() to search for a whitespace and setting the returned pointer to '\0' explicitly but that doesn't seem to work. 
 Answers (Total-6): #0 Python strings' strip method removes both trailing and leading whitespace. The two halves of the problem are very different when working on a C "string" (array of char, \0 terminated). 

 For trailing whitespace: set a pointer (or equivalently index) to the existing trailing \0. Keep decrementing the pointer until it hits against the start-of-string, or any non-white character; set the \0 to right after this terminate-backwards-scan point. 

 For leading whitespace: set a pointer (or equivalently index) to the start of string; keep incrementing the pointer until it hits a non-white character (possibly the trailing \0); memmove the rest-of-string so that the first non-white goes to the start of string (and similarly for everything following). 
 #1 There is no standard C implementation for a strip() or trim() function. That said, here's the one included in the Linux kernel: 

 char *strstrip(char *s)
{
  size_t size;
  char *end;

  size = strlen(s);

  if (!size)
    return s;

  end = s + size - 1;
  while (end &gt;= s &amp;&amp; isspace(*end))
    end--;
  *(end + 1) = '\0';

  while (*s &amp;&amp; isspace(*s))
    s++;

  return s;
}
 
 #2 Seems like you want something like trim, a quick search on google leads to this forum thread. 
 #3 If you want to remove, in place , the final newline on a line, you can use this snippet: 

 size_t s = strlen(buf);
if (s &amp;&amp; (buf[s-1] == '\n')) buf[--s] = 0;
 

 To faithfully mimic Python's str.strip([chars]) method (the way I interpreted its workings), you need to allocate space for a new string, fill the new string and return it. After that, when you no longer need the stripped string you need to free the memory it used to have no memory leaks. 

 Or you can use C pointers and modify the initial string and achieve a similar result. 
Suppose your initial string is "____forty two____\n" and you want to strip all underscores and the '\n' 

 ____forty two___\n
^ ptr
 

 If you change ptr to the 'f' and replace the first '_' after two with a '\0' the result is the same as Python's "____forty two____\n".strip("_\n"); 

 ____forty two\0___\n
 ^ptr
 

 Again, this is not the same as Python. The string is modified in place, there's no 2nd string and you cannot revert the changes (the original string is lost). 
 #4 I wrote C code to implement this function. I also wrote a few trivial tests to make sure my function does sensible things. 

 This function writes to a buffer you provide, and should never write past the end of the buffer, so it should not be prone to buffer overflow security issues. 

 Note: only Test() uses stdio.h, so if you just need the function, you only need to include ctype.h (for isspace()) and string.h (for strlen()). 

 // strstrip.c -- implement white space stripping for a string in C
//
// This code is released into the public domain.
//
// You may use it for any purpose whatsoever, and you don't need to advertise
// where you got it, but you aren't allowed to sue me for giving you free
// code; all the risk of using this is yours.



#include &lt;ctype.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;



// strstrip() -- strip leading and trailing white space from a string
//
// Copies from sIn to sOut, writing at most lenOut characters.
//
// Returns number of characters in returned string, or -1 on an error.
// If you get -1 back, then nothing was written to sOut at all.

int
strstrip(char *sOut, unsigned int lenOut, char const *sIn)
{
 char const *pStart, *pEnd;
 unsigned int len;
 char *pOut;

 // if there is no room for any output, or a null pointer, return error!
 if (0 == lenOut || !sIn || !sOut)
  return -1;

 pStart = sIn;
 pEnd = sIn + strlen(sIn) - 1;

 // skip any leading whitespace
 while (*pStart &amp;&amp; isspace(*pStart))
  ++pStart;

 // skip any trailing whitespace
 while (pEnd &gt;= sIn &amp;&amp; isspace(*pEnd))
  --pEnd;

 pOut = sOut;
 len = 0;

 // copy into output buffer
 while (pStart &lt;= pEnd &amp;&amp; len &lt; lenOut - 1)
 {
  *pOut++ = *pStart++;
  ++len;
 }


 // ensure output buffer is properly terminated
 *pOut = '\0';
 return len;
}


void
Test(const char *s)
{
 int len;
 char buf[1024];

 len = strstrip(buf, sizeof(buf), s);

 if (!s)
  s = "**null**"; // don't ask printf to print a null string
 if (-1 == len)
  *buf = '\0'; // don't ask printf to print garbage from buf

 printf("Input: \"%s\" Result: \"%s\" (%d chars)\n", s, buf, len);
}


main()
{
 Test(NULL);
 Test("");
 Test(" ");
 Test(" ");
 Test("x");
 Test(" x");
 Test(" x ");
 Test(" x y z ");
 Test("x y z");
}
 
 #5 I asked a very similar question long ago. See here ; there are ways to do it both in-place and with a new copy.