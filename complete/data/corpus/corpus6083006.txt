Question (ID-6083006): What is the fastest / easiest way to count large number of files in a directory (in Linux)? I had some directory, with large number of files. Every time I tried to access the list of files within it, I was not able to do that or there was significant delay. I was trying to use ls command within comman-line on Linux and web interface from my hosting provider did not help also. 

 The problem is, that when I just do ls , it takes significant ammount of time to even start displaying something. Thus, ls | wc -l would not help also. 

 After some research I came up with this code (in this example it counts number of new emails on some server): 

 print sum([len(files) for (root, dirs, files) in walk('/home/myname/Maildir/new')])
 

 The above code is written in Python. I used Python's command-line tool and it worked pretty fast (returned result instantly). 

 I am interested in the answer to the following question: is it possible to count files in a directory (without subdirectories) faster? What is the fastest way to do that? 
 Answers (Total-6): #0 ls does a stat(2) call for every file. Other tools, like find(1) and the shell wildcard expansion, may avoid this call and just do readdir . One shell command combination that might work is find dir -maxdepth 1|wc -l , but it will gladly list the directory itself and miscount any filename with a newline in it. 

 From Python, the straight forward way to get just these names is os.listdir(directory) . Unlike os.walk and os.path.walk, it does not need to recurse, check file types, or make further Python function calls. 

 Addendum: It seems ls doesn't always stat. At least on my GNU system, it can do only a getdents call when further information (such as which names are directories) is not requested. getdents is the underlying system call used to implement readdir in GNU/Linux. 
 #1 Total number of files in the given directory 

 find . -maxdepth 1 -type f | wc -l
 

 Total number of files in the given directory and all subdirectories under it 

 find . -type f | wc -l
 

 For more details drop into a terminal and do man find 
 #2 I think ls is spending most of its time before displaying the first line because it has to sort the entries, so ls -U should display the first line much faster (though it may not be that much better in total). 
 #3 I'm not sure about speed, but if you want to just use shell builtins this should work: 

 #!/bin/sh
COUNT=0;
for file in /path/to/directory/*
do
COUNT=$(($COUNT+1));
done
echo $COUNT
 
 #4 This should be pretty fast in Python: 

 from os import listdir
from os.path import isfile, join
directory = '/home/myname/Maildir/new'
print sum(1 for entry in listdir(directory) if isfile(join(directory,entry)))
 
 #5 The fastest way would be to avoid all the overhead of interpreted languages and write some code that directly addresses your problem. Doing so is difficult to do in a portable way, but pretty straightforward. At the moment I'm on an OS X box, but converting the following to Linux should be extremely straightforward. (I opted to ignore hidden files and only count regular files...modify as necessary or add command line switches to get the functionality you want.) 

 

&#35;include &#60;dirent.h&#62;
&#35;include &#60;stdio.h&#62;
&#35;include &#60;stdlib.h&#62;

int
main( int argc, char &#42;&#42;argv )
{
 DIR &#42;d;
 struct dirent &#42;f;
 int count = 0;
 char &#42;path = argv[ 1 ];

 if( path == NULL ) {
  fprintf( stderr, "usage: %s path", argv[ 0 ]);
  exit( EXIT&#95;FAILURE );
 }
 d = opendir( path );
 if( d == NULL ) { perror( path );exit( EXIT&#95;FAILURE ); }
 while( ( f = readdir( d ) ) != NULL ) {
  if( f-&#62;d&#95;name[ 0 ] != '.' && f-&#62;d&#95;type == DT&#95;REG )
   count += 1;
 }
 printf( "%d\n", count );
 return EXIT&#95;SUCCESS;
}