Question (ID-5093075): How can I log current line, and stack info with Python? I have logging function as follows. 

 logging.basicConfig(
 filename = fileName,
 format = "%(levelname) -10s %(asctime)s %(message)s",
 level = logging.DEBUG
)

def printinfo(string):
 if DEBUG:
  logging.info(string)

def printerror(string):
 if DEBUG:
  logging.error(string)
 print string
 

 I need to login the line number, stack information. For example: 

 1: def hello():
2: goodbye()
3:
4: def goodbye():
5: printinfo()

---&gt; Line 5: goodbye()/hello()
 

 How can I do this with Python? 

 SOLVED 

 def printinfo(string):
 if DEBUG:
  frame = inspect.currentframe()
  stack_trace = traceback.format_stack(frame)
  logging.debug(stack_trace[:-1])
 if LOG:
  logging.info(string)
 

 gives me this info which is exactly what I need. 

 DEBUG  2011-02-23 10:09:13,500 [
 ' File "/abc.py", line 553, in &lt;module&gt;\n runUnitTest(COVERAGE, PROFILE)\n', 
 ' File "/abc.py", line 411, in runUnitTest\n printinfo(string)\n']
 
 Answers (Total-6): #0 import inspect
import traceback

def method():
 frame = inspect.currentframe()
 stack_trace = traceback.format_stack(frame)
 print ''.join(stack_trace)
 

 Use stack_trace[:-1] to avoid including method/printinfo in the stack trace. 
 #1 Use the traceback module. 

 logging.error(traceback.format_exc())
 
 #2 Current function name, module and line number you can do simply by changing your format string to include them. 

 logging.basicConfig(
 filename = fileName,
 format = "%(levelname) -10s %(asctime)s %(module)s:%(lineno)s %(funcName)s %(message)s",
 level = logging.DEBUG
)
 

 Most people only want the stack when logging an exception, and the logging module does that automatically if you call logging.exception() . If you really want stack information at other times then you will need to use the traceback module for extract the additional information you need. 
 #3 As of Python 3.2, this can be simplified to passing the stack_info=True flag to the logging calls . However, you'll need to use one of the above answers for any earlier version. 
 #4 Look at traceback module 

 &gt;&gt;&gt; import traceback
&gt;&gt;&gt; def test():
&gt;&gt;&gt;  print "/".join( str(x[2]) for x in traceback.extract_stack() )
&gt;&gt;&gt; def main():
&gt;&gt;&gt;  test()
&gt;&gt;&gt; main()
&lt;module&gt;/launch_new_instance/mainloop/mainloop/interact/push/runsource/runcode/&lt;module&gt;/main/test
 
 #5 Here is an example that i hope it can help you: 

 import inspect
import logging

logging.basicConfig(
 format = "%(levelname) -10s %(asctime)s %(message)s",
 level = logging.DEBUG
)

def test():

 caller_list = []
 frame = inspect.currentframe()
 this_frame = frame # Save current frame.

 while frame.f_back:
  caller_list.append('{0}()'.format(frame.f_code.co_name))
  frame = frame.f_back

 caller_line = this_frame.f_back.f_lineno
 callers = '/'.join(reversed(caller_list))

 logging.info('Line {0} : {1}'.format(caller_line, callers))

def foo():
 test()

def bar():
 foo()

bar()
 

 Result: 

 INFO  2011-02-23 17:03:26,426 Line 28 : bar()/foo()/test()