Question (ID-362808): django is very slow on my machine I have a fresh install of django 1.0 and a simple page served from it takes 5 secs to load. On my colleague's computer it takes almost no time. 

 I start the server using 

 
python manage.py testserver
 

 I can see each GET request (PNGs and style sheets) take about half a second. 

 Another weird thing, which I think is related, is that the functional tests for the app run much slower on my machine with MySQL (on order of 100 times slower than on my colleague's machine). When I set the app to use sqlite, they run pretty quickly. I would like to exclaim that sqlite doesn't much change the time it takes to load a page, but it does speed up server startup. 

 It looks like IO problem, but I don't see general performance problems on my machine, apart from django at least. 

 Django runs on python2.4, I'm running Vista. I have also checked python2.5. 

 Thanks ΤΖΩΤΖΙΟΥ, It must totaly be a DNS problem, because the page loads up quickly as soon as
instead of http://localhost:8000/app I go to http://127.0.0.1:8000/app . 

 But what could it be caused by? My host file has only two entries: 

 
127.0.0.1 localhost
::1   localhost
 
 Answers (Total-11): #0 Firefox has a problem browsing to localhost on some Windows machines. You can solve it by switching off ipv6, which isn't really recommended. Using 127.0.0.1 directly is another way round the problem. 
 #1 Since you report your friend's machine has no delays, and I assume yours and his are comparable computers, it could be a DNS related issue. Try to add both the client's and the server's IP address to the server's hosts file. 

 If you run Django on *nix, it's the /etc/hosts file. If run it on MS Windows, it's the %WINDIR%\SYSTEM32\DRIVERS\ETC\HOSTS file. (They are text files and can be edited by your favourite text editor.) 
 #2 I think it's the development server, it's not optimized for speed nor security. I noticed that specially serving static files (i.e. media) is slow. 
 #3 And if all else fails, you can always cProfile your application and see where exactly is the bottleneck. 
 #4 I have had the same problem in the past. It can be solved by removing the following line from your hosts file. 

 ::1   localhost
 

 Once that's gone you should be able to use localhost again, quickly. 
 #5 Had the same problem too, I've noticed it with Firefox on Vista and Windows 7 machines. Accessing the development server 127.0.0.1:8000 solved the problem. 
 #6 None of these posts helped me but in my specific case Justin Carmony gave me the answer. 

 Problem 

 I was mapping [hostname].local to 127.0.0.1 in my /etc/hosts file for easy development purposes and dns requests were taking 5 seconds at to resolve. Sometimes they would resolve quickly, other times they wouldn't. 

 Solution 

 Apple is using .local to do some bonjour magic on newer Snow Leopard builds (I think i started noticing it after updating to 10.6.8) and Mac OS X Lion. If you change your dev hostname to start with local instead of end with local you should be all set. Additionally, you can pretty much use any TLD besides local and it will work without conflict. 

 Example 

 test.local could become: 

 
 local.test.com 
 test.dev 
 test.[anything but local] 
 

 and your hosts file entry would read: 

 local.test.com 127.0.0.1
 

 Note: This solution has the added benefit of being a subdomain of [hostname].com which makes it easier to specify an app domain name for Facebook APIs, etc. 

 Might also want to run dscacheutil -flushcache in the terminal for good measure after you update /etc/hosts 
 #7 Disable AV Scanning &amp; see if that makes a difference. It could also be caused by Vista. Upgrade to the latest service pack and try again. 
 #8 To completely bypass localhost without altering the hosts file or any settings in Firefox you can install the addon Redirector and make a rule to redirect from localhost to 127.0.0.1. Use these settings 

 Include pattern : http://localhost*
Redirect to  : http://127.0.0.1$1
 

 Leave the other fields empty. 
 #9 I had the same problem but it was caused by mysqld. 

 The app worked pretty fast on production with wsgi and a mysql server in the same host but slow in the development environtment with the django runserver option and a remote mysql server. 

 I noticed using "show processlist" that connections in database where stuck in the state "login" with user "unauthenticated user" and this make me notice that the problem where in the authentication process. 

 Looking for the real problem, I finally noticed that mysqld was trying to get the dns name of my ip and disabling the name dns resolution, I fixed the problem. 

 To do that, you can add this line into my.cnf file: 

 
 skip-name-resolve 
 
 #10 i got the same problem. 

 the solution was : 

 
 I was trying to start localy a version that was usualy deployed on a webserver in production. 
 The static files in production were served by an apache config and not with django static serve 
 

 so I just uncommented back my static serve urls :/