Question (ID-1349367): Parse an HTTP request Authorization header with Python I need to take a header like this: 

 Authorization: Digest qop="chap",
  realm="testrealm@host.com",
  username="Foobear",
  response="6629fae49393a05397450978507c4ef1",
  cnonce="5ccc069c403ebaf9f0171e9517f40e41"
 

 And parse it into this using Python: 

 {'protocol':'Digest',
 'qop':'chap',
 'realm':'testrealm@host.com',
 'username':'Foobear',
 'response':'6629fae49393a05397450978507c4ef1',
 'cnonce':'5ccc069c403ebaf9f0171e9517f40e41'}
 

 Is there a library to do this, or something I could look at for inspiration? 

 I'm doing this on Google App Engine, and I'm not sure if the Pyparsing library is available, but maybe I could include it with my app if it is the best solution. 

 Currently I'm creating my own MyHeaderParser object and using it with reduce() on the header string. It's working, but very fragile. 

 Brilliant solution by nadia below: 

 import re

reg = re.compile('(\w+)[=] ?"?(\w+)"?')

s = """Digest
realm="stackoverflow.com", username="kixx"
"""

print str(dict(reg.findall(s)))
 
 Answers (Total-9): #0 You can also use urllib2 as CheryPy does. 

 here is the snippet: 

 input= """
 Authorization: Digest qop="chap",
	 realm="testrealm@host.com",
	 username="Foobear",
	 response="6629fae49393a05397450978507c4ef1",
	 cnonce="5ccc069c403ebaf9f0171e9517f40e41"
"""
import urllib2
field, sep, value = input.partition("Authorization: Digest ")
if value:
	items = urllib2.parse_http_list(value)
	opts = urllib2.parse_keqv_list(items)
	opts['protocol'] = 'Digest'
	print opts
 

 it outputs: 

 {'username': 'Foobear', 'protocol': 'Digest', 'qop': 'chap', 'cnonce': '5ccc069c403ebaf9f0171e9517f40e41', 'realm': 'testrealm@host.com', 'response': '6629fae49393a05397450978507c4ef1'}
 
 #1 A little regex: 

 import re
reg=re.compile('(\w+)[:=] ?"?(\w+)"?')

&gt;&gt;&gt;dict(reg.findall(headers))

{'username': 'Foobear', 'realm': 'testrealm', 'qop': 'chap', 'cnonce': '5ccc069c403ebaf9f0171e9517f40e41', 'response': '6629fae49393a05397450978507c4ef1', 'Authorization': 'Digest'}
 
 #2 Here's my pyparsing attempt: 

 text = """Authorization: Digest qop="chap",
 realm="testrealm@host.com",  
 username="Foobear",  
 response="6629fae49393a05397450978507c4ef1",  
 cnonce="5ccc069c403ebaf9f0171e9517f40e41" """

from pyparsing import *

AUTH = Keyword("Authorization")
ident = Word(alphas,alphanums)
EQ = Suppress("=")
quotedString.setParseAction(removeQuotes)

valueDict = Dict(delimitedList(Group(ident + EQ + quotedString)))
authentry = AUTH + ":" + ident("protocol") + valueDict

print authentry.parseString(text).dump()
 

 which prints: 

 ['Authorization', ':', 'Digest', ['qop', 'chap'], ['realm', 'testrealm@host.com'],
 ['username', 'Foobear'], ['response', '6629fae49393a05397450978507c4ef1'], 
 ['cnonce', '5ccc069c403ebaf9f0171e9517f40e41']]
- cnonce: 5ccc069c403ebaf9f0171e9517f40e41
- protocol: Digest
- qop: chap
- realm: testrealm@host.com
- response: 6629fae49393a05397450978507c4ef1
- username: Foobear
 

 I'm not familiar with the RFC, but I hope this gets you rolling. 
 #3 If those components will always be there, then a regex will do the trick: 

 test = '''Authorization: Digest qop="chap", realm="testrealm@host.com", username="Foobear", response="6629fae49393a05397450978507c4ef1", cnonce="5ccc069c403ebaf9f0171e9517f40e41"'''

import re

re_auth = re.compile(r"""
 Authorization:\s*(?P&lt;protocol&gt;[^ ]+)\s+
 qop="(?P&lt;qop&gt;[^"]+)",\s+
 realm="(?P&lt;realm&gt;[^"]+)",\s+
 username="(?P&lt;username&gt;[^"]+)",\s+
 response="(?P&lt;response&gt;[^"]+)",\s+
 cnonce="(?P&lt;cnonce&gt;[^"]+)"
 """, re.VERBOSE)

m = re_auth.match(test)
print m.groupdict()
 

 produces: 

 { 'username': 'Foobear', 
 'protocol': 'Digest', 
 'qop': 'chap', 
 'cnonce': '5ccc069c403ebaf9f0171e9517f40e41', 
 'realm': 'testrealm@host.com', 
 'response': '6629fae49393a05397450978507c4ef1'
}
 
 #4 I would recommend finding a correct library for parsing http headers unfortunately I can't reacall any. :( 

 For a while check the snippet below (it should mostly work): 

 input= """
 Authorization: Digest qop="chap",
	 realm="testrealm@host.com",
	 username="Foob,ear",
	 response="6629fae49393a05397450978507c4ef1",
	 cnonce="5ccc069c403ebaf9f0171e9517f40e41"
"""

field, sep, value = input.partition(":")
if field.endswith('Authorization'):
 protocol, sep, opts_str = value.strip().partition(" ")

 opts = {}
 for opt in opts_str.split(",\n"):
		key, value = opt.strip().split('=')
		key = key.strip(" ")
		value = value.strip(' "')
		opts[key] = value

 opts['protocol'] = protocol

 print opts
 
 #5 The http digest Authorization header field is a bit of an odd beast. Its format is similar to that of rfc 2616 's Cache-Control and Content-Type header fields, but just different enough to be incompatible. If you're still looking for a library that's a little smarter and more readable than the regex, you might try removing the Authorization: Digest part with str.split() and parsing the rest with parse_dict_header() from Werkzeug 's http module. (Werkzeug can be installed on App Engine.) 
 #6 If your response comes in a single string that that never varies and has as many lines as there are expressions to match , you can split it into an array on the newlines called authentication_array and use regexps: 

 pattern_array = ['qop', 'realm', 'username', 'response', 'cnonce']
i = 0
parsed_dict = {}

for line in authentication_array:
 pattern = "(" + pattern_array[i] + ")" + "=(\".*\")" # build a matching pattern
 match = re.search(re.compile(pattern), line)   # make the match
 if match:
  parsed_dict[match.group(1)] = match.group(2)
 i += 1
 
 #7 Your original concept of using PyParsing would be the best approach. What you've implicitly asked for is something that requires a grammar... that is, a regular expression or simple parsing routine is always going to be brittle, and that sounds like it's something you're trying to avoid. 

 It appears that getting pyparsing on google app engine is easy: http://stackoverflow.com/questions/1341137/how-do-i-get-pyparsing-set-up-on-the-google-app-engine 

 So I'd go with that, and then implement the full HTTP authentication/authorization header support from rfc2617. 
 #8 Nadia's regex only matches alphanumeric characters for the value of a parameter. That means it fails to parse at least two fields. Namely, the uri and qop. According to RFC 2617, the uri field is a duplicate of the string in the request line (i.e. the first line of the HTTP request). And qop fails to parse correctly if the value is "auth-int" due to the non-alphanumeric '-'. 

 This modified regex allows the URI (or any other value) to contain anything but ' ' (space), '"' (qoute), or ',' (comma). That's probably more permissive than it needs to be, but shouldn't cause any problems with correctly formed HTTP requests. 

 reg re.compile('(\w+)[:=] ?"?([^" ,]+)"?')
 

 Bonus tip: From there, it's fairly straight forward to convert the example code in RFC-2617 to python. Using python's md5 API, "MD5Init()" becomes "m = md5.new()", "MD5Update()" becomes "m.update()" and "MD5Final()" becomes "m.digest()".