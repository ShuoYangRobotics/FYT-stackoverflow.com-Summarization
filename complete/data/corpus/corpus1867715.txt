Question (ID-1867715): Iteration in a single line I have some code of the form: 

 for i in range(nIterations):
 y = f(y)
 

 Where f is a function defined elsewhere. hopefully the idea of that code is that after it's run y will have had f applied to it nIterations times. 

 Is there a way in python to write this in a single line? 
 Answers (Total-11): #0 like this? 

 for i in range(nIterations): y = f(y)
 

 A for loop with one command can be written as a single line. 

 EDIT 

 Or maybe slightly cleaner: 

 for _ in xrange(nIterations): y = f(y)
 

 Since you don't want to have a something that can be split into two separate statements (i think), here's another one: 

 reduce(lambda y, _: f(y), xrange(nIterations), initValue)
 

 Still, I would recommend to just use your original code , which is much more intuitive and readable. Also note what Guido van Rossum has to say on loops versus repeat .
Note by the way that (in python 2.x) xrange is more efficient than range for large nIterations as it returns an actual iterator and not an allocated list. 
 #1 So like this you mean? 

 for i in range(nIterations): y = f(y)
 

 While this might seem nice and pretty, I'd argue (as has been done in the comments below your post) that this doesn't improve readability, and is best off left as 2 lines. 
 #2 Just stick it all on one line like this: for i in range(nIterations): y = f(y) 

 The decision to have code on one line or multiple has been an argument for years - there is no performance increase - just lay it out how you like it and how you can read it best. 
 #3 Your question lacks context, but this could be rewritten using map function or list comprehension (both one-liners) 
 #4 Not exactly one line, but once you define the power operation for functions: 

 def f_pow(f, n):
 if n == 1:
 return f
 else:
 return lambda x: f_pow(f, n-1)(f(x))
 

 you can write this: 

 f_pow(f, nIterations)(y)
 
 #5 reduce(lambda y,_: f(y),xrange(niterations),y) 
 #6 Ok this is probably a very weird an incomprehensible use of the reduce function, so for real code I'd stick with what you have. But just for the fun of it, here goes: 

 reduce(lambda a, b: f(a), range(nIterations), y)
 
 #7 If you make y mutable, then you can use list comprehension. But this isn't something I'd use in real code, unless really necessary. 

 def f(y):
 y[0] += 5

y = [0]
[f(y) for _ in xrange(10)]
print y[0] # =&gt; 50
 
 #8 While I'd suggest you keep the original code snippet as it is much clearer, you can accomplish this with a single line of code using the reduce function: 

 reduce(lambda a,b: f(a), xrange(nIterations), y)
 
 #9 You can create such snippets using semicolons ; if you need to execute more than one instruction inside the loop, here is an example: 

 for i in xrange(nIterations): x=f(i); y=f(x); z=f(y)
 
 #10 y=[f(y) for i in range(niteration)] 

 hope that helps ;)