Question (ID-4229235): python regex CIDR matching m = re.findall("\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}",s)
 

 probably very easy question for somebody who knows regex, how do I modify it so it will match not only IPv4, but also something with CIDR like 10.10.10.0/24 

 ? 

 thanks 
 Answers (Total-6): #0 (?:\d{1,3}\.){3}\d{1,3}(?:/\d\d?)? 
 #1 I had problems using a regex similar to yours. It was matching 1.2.3.4.5 (as 1.2.3.4) and 1111.2.3.4 (as 111.2.3.4). To avoid matching these, I added look ahead/behind assertions: 

 IP_RE  = re.compile(r"(?&lt;!\d\.)(?&lt;!\d)(?:\d{1,3}\.){3}\d{1,3}(?!\d|(?:\.\d))")
IP_CIDR_RE = re.compile(r"(?&lt;!\d\.)(?&lt;!\d)(?:\d{1,3}\.){3}\d{1,3}/\d{1,2}(?!\d|(?:\.\d))")
 

 The (?&lt;!\d\.)(?&lt;!\d) checks that there isn't a number or octet before your first octet (ie: no 1 before 111.2.3.4).
And (?!\d|(?:\.\d)) checks that there isn't a number/octet after your last (ie: no .5 after 1.2.3.4). 

 Then, to check that the strings these match are valid IPs (eg: not 277.1.1.1), you can use 

 socket.inet_aton(ip) #raises exception if IP is invalid 
 #2 Append "(?:/\d{1,2})?" . 

 That gets you r"\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}(?:/\d{1,2})?" for a pattern. 
 #3 this extends your existing expression 

 \d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\\\d{1,2}
 
 #4 This page seems to have a solution http://hse-at-work.blogspot.com/2006/11/regular-expression-to-match-ipv4.html 
 #5 \d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}(?:/\d{1,2}|) 

 Tested in Expresso 

 Matched: 

 64.33.232.212
64.33.232.212/30