Question (ID-401025): Define css class in django Forms Assume I have a form 

 class SampleClass(forms.Form):
 name = forms.CharField(max_length=30)
 age = forms.IntegerField()
 django_hacker = forms.BooleanField(required=False)
 

 Is there a way for me to define css classes on each field such that I can then use jQuery based on class in my rendered page? 

 I was hoping not to have to manually build the form. 
 Answers (Total-7): #0 Answered my own question. Sigh 

 http://docs.djangoproject.com/en/dev/ref/forms/widgets/#django.forms.Widget.attrs 

 I didn't realize it was passed into the widget constructor. 
 #1 Here is another solution for adding class definitions to the widgets after declaring the fields in the class. 

 def __init__(self, *args, **kwargs):
 super(SampleClass, self).__init__(*args, **kwargs)
 self.fields['name'].widget.attrs['class'] = 'my_class'
 
 #2 Yet another solution that doesn't require changes in python code and so is better for designers and one-off presentational changes: https://bitbucket.org/kmike/django-widget-tweaks . Hope somebody will find it useful. 
 #3 Here is Simple way to alter in view. add below in view just before passing it into template. 

 form = MyForm(instance = instance.obj)
form.fields['email'].widget.attrs = {'class':'here_class_name'}
 
 #4 Here is a variation on the above which will give all fields the same class (e.g. jquery nice rounded corners). 

 # Simple way to assign css class to every field
 def __init__(self, *args, **kwargs):
 super(TranslatedPageForm, self).__init__(*args, **kwargs)
 for myField in self.fields:
  self.fields[myField].widget.attrs['class'] = 'ui-state-default ui-corner-all'
 
 #5 Expanding on the method pointed to at docs.djangoproject.com: 

 class MyForm(forms.Form): 
 comment = forms.CharField(
   widget=forms.TextInput(attrs={'size':'40'}))
 

 I thought it was troublesome to have to know the native widget type for every field, and thought it funny to override the default just to put a class name on a form field. This seems to work for me: 

 class MyForm(forms.Form): 
 #This instantiates the field w/ the default widget
 comment = forms.CharField()

 #We only override the part we care about
 comment.widget.attrs['size'] = '40'
 

 This seems a little cleaner to me. 
 #6 I'm not really familiar wit jQuery, but I do know that Firefox (and thus any good browser) will render CSS for any element that has CSS and exists in the HTML. In other words, I can make the following: 

 &lt; 

 &lt;form&gt;
&lt;name&gt;Name:&lt;input type="text" /&gt;&lt;/name&gt;
&lt;age&gt;Age:&lt;input type="text" /&gt;&lt;/age&gt;
&lt;favcolor&gt;Favorite Color:&lt;input type="text" /&gt;&lt;favcolor&gt;
&lt;/form&gt;
 

 And then have my css, instead of written to modify a class/id, can be written to modify anything inside that element. Like: 

 name {
color: black;
}

name input {
background-color: yellow;
border: 3px dotted black;
}