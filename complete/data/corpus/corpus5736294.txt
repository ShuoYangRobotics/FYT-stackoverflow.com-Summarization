Question (ID-5736294): De-greedifying a regular expression in python I'm trying to write a regular expression that will convert a full path filename to a short filename for a given filetype, minus the file extension. 

 For example, I'm trying to get just the name of the .bar file from a string using 

 re.search('/(.*?)\.bar$', '/def_params/param_1M56/param/foo.bar')
 

 According to the Python re docs, *? is the ungreedy version of * , so I was expecting to get 

 'foo'
 

 returned for match.group(1) but instead I got 

 'def_params/param_1M56/param/foo'
 

 What am I missing here about greediness? 
 Answers (Total-7): #0 What you're missing isn't so much about greediness as about regular expression engines: they work from left to right, so the / matches as early as possible and the .*? is then forced to work from there. In this case, the best regex doesn't involve greediness at all (you need backtracking for that to work; it will, but could take a really long time to run if there are a lot of slashes), but a more explicit pattern: 

 '/([^/]*)\.bar$'
 
 #1 I would suggest changing your regex so that it doesn't rely on greedyness. 

 You want only the filename before the extension .bar and everything after the final / . This should do: 

 re.search(`/[^/]*\.bar$`, '/def_params/param_1M56/param/foo.bar')
 

 What this does is it matches / , then zero or more characters (as much as possible) that are not / and then .bar . 
 #2 I don't claim to understand the non-greedy operators all that well, but a solution for that particular problem would be to use ([^/]*?) 
 #3 The regular expressions starts from the right. Put a .* at the start and it should work. 
 #4 I like regex but there is no need of one here. 

 path = '/def_params/param_1M56/param/foo.bar'
print path.rsplit('/',1)[1].rsplit('.')[0]

path = '/def_params/param_1M56/param/fululu'
print path.rsplit('/',1)[1].rsplit('.')[0]

path = '/def_params/param_1M56/param/one.before.two.dat'
print path.rsplit('/',1)[1].rsplit('.',1)[0]
 

 result 

 foo
fululu
one.before.two
 
 #5 Other people have answered the regex question, but in this case there's a more efficient way than regex: 

 file_name = path[path.rindex('/')+1 : path.rindex('.')]
 
 #6 try this one on for size: 

 match = re.search('.*/(.*?).bar$', '/def_params/param_1M56/param/foo.bar')