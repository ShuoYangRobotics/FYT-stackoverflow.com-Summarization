Question (ID-7677275): List assignment with [:] What's the difference between 

 list = range(100)
 

 and 

 list[:] = range(100)
 

 in Python? 

 EDIT 

 I should have mentioned that before that assignment list variable was already assigned to a list: 

 list = [1, 2, 3]
list = range(100)
 

 or 

 list = [1, 2, 3]
list[:] = range(100)
 
 Answers (Total-6): #0 When you do 

 lst = anything
 

 You're pointing the name lst at an object. It doesn't change the old object lst used to point to in any way , though if nothing else pointed to that object its reference count will drop to zero and it will get deleted. 

 When you do 

 lst[:] = whatever
 

 You're iterating over whatever and assigning each item to an index in the already existing lst object. That means if multiple names point to the same object, you will see the change reflected when you reference any of the names, just as if you use append or extend or any of the other in-place operations. 

 An example of the difference: 

 &gt;&gt;&gt; lst = range(1, 4)
&gt;&gt;&gt; id(lst)
74339392
&gt;&gt;&gt; lst = [1, 2, 3]
&gt;&gt;&gt; id(lst) # different; you pointed lst at a new object
73087936
&gt;&gt;&gt; lst[:] = range(1, 4)
&gt;&gt;&gt; id(lst) # the same, you iterated over the list returned by range
73087936
&gt;&gt;&gt; lst = xrange(1, 4)
&gt;&gt;&gt; lst
xrange(1, 4) # not a list, an xrange object
&gt;&gt;&gt; id(lst) # and different
73955976
&gt;&gt;&gt; lst = [1, 2, 3]
&gt;&gt;&gt; id(lst) # again different
73105320
&gt;&gt;&gt; lst[:] = xrange(1, 4) # remember this doesn't make a list
&gt;&gt;&gt; id(lst) # the same, because you iterated over the xrange
73105320
&gt;&gt;&gt; lst # and still a list
[1, 2, 3]
 

 So, when you're assigning from an iterable / iterator / generator like xrange , you don't have to store all the items in memory before assigning to lst . That is, when you do normal assignment of an range to a list , and the list already exists, both objects have to exist in memory at the same time -- the old one can't go away until the new one is assigned to the name lst . When you do it with slice assignment and an xrange , you get one item from the xrange at a time and assign it to an index in lst , so you don't have to have much additional memory. 

 When it comes to speed, slice assignment is slower, though it could theoretically be faster if not using it forced you to swap pages out to disk. 
 #1 The first one redefines the built-in name list to point to some list. 

 The second fails with TypeError: 'type' object does not support item assignment . 
 #2 list[:] will only work if there is already an object named list that allows slice assignment. 

 Also, you shouldn't name variables list because there is a built-in named list which is the list type itself. 
 #3 list[:] = range(100)
 

 won't work on uninitialized variable, as it is modifying it. The [:] specifies the whole list/touple. 
 #4 [:] is also useful to make a deep copy of the list. 

 def x(l):
 f=l[:]
 g=l
 l.append(8)
 print "l", l
 print "g", g
 print "f", f

l = range(3)

print l
 #[0, 1, 2]

x(l)
 #l [0, 1, 2, 8]
 #g [0, 1, 2, 8]
 #f [0, 1, 2]

print l
#[0, 1, 2, 8]
 

 Modification to l is get reflected in g (because, both point to same list, in fact, both g and l are just names in python), not in f(because, it's a copy of l) 

 But, in your case, It doesn't make any difference. (Though, I'm not eligible to comment on any memory usage of both methods.) 

 Edit 

 h = range(3)
id(h) #141312204 
h[:]=range(3)
id(h) #141312204 
h=range(3)
id(h) #141312588 
 

 list[:] = range(100) updates the list 
list = range(100) creates new list. 

 @agf: thanks for pointing my error 
 #5 list[:] specifies a range within the list, in this case it defines the complete range of the list, i.e. the whole list and changes them. list=range(100) , on the other hand, kind of wipes out the original contents of list and sets the new contents. 

 But try the following: 

 a=[1,2,3,4]

a[0:2]=[5,6]

a # prints [5,6,3,4]
 

 You see, we changed the first two elements with the assignment. This means, using this notation, you can change several elements in the list once.