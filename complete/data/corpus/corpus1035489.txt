Question (ID-1035489): Python garbage collection I have created some python code which creates an object in a loop, and in every iteration overwrites this object with a new one of the same type. This is done 10.000 times, and Python takes up 7mb of memory every second until my 3gb RAM is used. Does anyone know of a way to remove the objects from memory? 
 Answers (Total-6): #0 You haven't provided enough information - this depends on the specifics of the object you are creating and what else you're doing with it in the loop. If the object does not create circular references, it should be deallocated on the next iteration. For example, the code 

 for x in range(100000):
 obj = " " * 10000000
 

 will not result in ever-increasing memory allocation. 
 #1 This is an old error that was corrected for some types in python 2.5. What was happening was that python was not so good at collecting things like empty lists/dictionaries/tupes/floats/ints. In python 2.5 this was fixed...mostly. However floats and ints are singletons for comparisons so once one of those is created it stays around as long as the interpreter is alive. I've been bitten by this worst when dealing with large amount of floats since they have a nasty habit of being unique. This was characterized for python 2.4 and updated about it being folded into python 2.5 

 The best way I've found around it is to upgrade to python 2.5 or newer to take care of the lists/dictionaries/tuples issue. For numbers the only solution is to not let large amounts of numbers get into python. I've done it with my own wrapper to a c++ object, but I have the impression that numpy.array will give similar results. 

 As a post script I have no idea what has happened to this in python 3, but I'm suspicious that numbers are still part of a singleton. So the memory leak is actually a feature of the language. 
 #2 Here's one thing you can do at the REPL to force a dereferencing of a variable: 

 &gt;&gt;&gt; x = 5
&gt;&gt;&gt; x
5
&gt;&gt;&gt; del x
&gt;&gt;&gt; x
Traceback (most recent call last):
 File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'x' is not defined
 
 #3 If you're creating circular references, your objects won't be deallocated immediately, but have to wait for a GC cycle to run. 

 You could use the weakref module to address this problem, or explicitly del your objects after use. 
 #4 I think this is circular reference (though the question isn't explicit about this information.) 

 One way to solve this problem is to manually invoke garbage collection. When you manually run garbage collector, it will sweep circular referenced objects too. 

 import gc

for i in xrange(10000):
 j = myObj()
 processObj(j)
 #assuming count reference is not zero but still
 #object won't remain usable after the iteration

 if !(i%100):
  gc.collect()
 

 Here don't run barrage collector too often because it has its own overhead, e.g. if you run garbage collector in every loop, interpretation will become extremely slow. 
 #5 I found that in my case (with Python 2.5.1), with circular references involving classes that have __del__() methods, not only was garbage collection not happening in a timely manner, the __del__() methods of my objects were never getting called, even when the script exited. So I used weakrefs to break the circular references and all was well. 

 Kudos to Miles who provided all the information in his comments for me to put this together.