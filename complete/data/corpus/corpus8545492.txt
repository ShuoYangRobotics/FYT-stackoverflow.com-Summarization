Question (ID-8545492): Find the position of difference between to strings If I have two strings og equal length, ex 'HELPMEPLZ' and 'HELPNEPLX', and I need to give the position of the difference, this is 4 and 8, how do I do that? 
 Answers (Total-6): #0 Pair up the strings character-by-character and iterate over this collection together with a counting index. Test whether the characters in each pair differ; if they do, output the index of where. 

 Using Python builtin functions you can do this neatly in one line: 

 &gt;&gt;&gt; x = 'HELPMEPLZ'
&gt;&gt;&gt; y = 'HELPNEPLX'
&gt;&gt;&gt; {i for i, (left, right) in enumerate(zip(x,y)) if left != right}
{8, 4}
 
 #1 &gt;&gt;&gt; from itertools import izip
&gt;&gt;&gt; s1 = 'HELPMEPLZ'
&gt;&gt;&gt; s2 = 'HELPNEPLX'
&gt;&gt;&gt; [i for i,(a1,a2) in enumerate(izip(s1,s2)) if a1!=a2]
[4, 8]
 
 #2 Try this: 

 s1 = 'HELPMEPLZ'
s2 = 'HELPNEPLX'
[i for i in xrange(len(s1)) if s1[i] != s2[i]]
 

 It will return: 

 &gt; [4, 8]
 

 The above solution will return a list with the indexes in sorted order, won't create any unnecessary intermediate data structures and it will work on Python 2.3 - 2.7. For Python 3.x replace xrange for range . 
 #3 If you store the two strings in a and b , you can loop through all the items and check for inequality. 

 python interactive interpreter: 

 &gt;&gt;&gt; for i in range(len(a)):
... if a[i] != b[i]: print i, a[i], b[i]
... 
4 M N
8 Z X
 

 

 Another way to do this is with list comprehensions. It's all in one line, and the output is a list. 

 &gt;&gt;&gt; [i for i in range(len(a)) if a[i] != b[i]]
[4, 8]
 

 That makes it really easy to wrap into a function, which makes calling it on a variety of inputs easy. 

 &gt;&gt;&gt; def dif(a, b):
...  return [i for i in range(len(a)) if a[i] != b[i]]
...
&gt;&gt;&gt; dif('HELPMEPLZ', 'HELPNEPLX')
[4, 8]
&gt;&gt;&gt; dif('stackoverflow', 'stacklavaflow')
[5, 6, 7, 8]
 
 #4 Easiest way is to split data into two char arrays and then loop through comparing the letters and return the index when the two chars do not equal each other. 

 This method will work fine as long as both strings are equal in length. 
 #5 Python really comes with batteries included. Have a look at difflib 

 &gt;&gt;&gt; import difflib
&gt;&gt;&gt; a='HELPMEPLZ'
&gt;&gt;&gt; b='HELPNEPLX'
&gt;&gt;&gt; s = difflib.SequenceMatcher(None, a, b)
&gt;&gt;&gt; for block in s.get_matching_blocks():
...  print block
Match(a=0, b=0, size=4)
Match(a=5, b=5, size=3)
Match(a=9, b=9, size=0)
 

 difflib is very powerful and a some study of the documentation is really recommended.