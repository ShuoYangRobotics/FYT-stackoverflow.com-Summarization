Question (ID-4940032): Search for string in txt file Python I want to check if a string is in a txt-file. If it is, do X. If it's not, do Y. However, this code always returns True for some reason. Anyone who see what is wrong? 

 def check():
  datafile = file('example.txt')
  found = False
  for line in datafile:
   if blabla in line:
    found = True
    break

check()
if True:
 print "true"
else:
 print "false"
 
 Answers (Total-7): #0 As Jeffrey Said, you are not checking the value of check() . In addition, your check() function is not returning anything. Note the difference: 

 def check():
  datafile = file('example.txt')
  found = False #this isn't really necessary 
  for line in datafile:
   if blabla in line:
    #found = True #not necessary 
    return True
  return False #because you finished the search without finding anything


if check():
 print "true"
else:
 print "false"
 
 #1 The reason why you always got True has already been given, so I'll just offer another suggestion: 

 If your file is not too large, you can read it into a string, and just use that (easier and often faster than reading and checking line per line): 

 if 'blabla' in open('example.txt').read():
 print "true"
 

 Another trick: you can alleviate the possible memory problems by using mmap.mmap() to create a "string-like" object that uses the underlying file (instead of reading the whole file in memory): 

 import mmap
f = open('example.txt')
s = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)
if 'blabla' in s:
 print 'true'
 
 #2 if True:
 print "true"
 

 This always happens because True is always True. 

 You want something like this: 

 if check():
 print "true"
else:
 print "false"
 

 Good luck! 
 #3 Your check function should return the found boolean and use that to determine what to print. 

 def check():
  datafile = file('example.txt')
  found = False
  for line in datafile:
   if blabla in line:
    found = True
    break

  return found

found = check()
if found:
 print "true"
else:
 print "false"
 

 the second block could also be condensed to: 

 if check():
 print "true"
else:
 print "false"
 
 #4 Two problems: 

 
 Your function does not return anything; a function that does not explicitly return anything returns None (which is falsy) 
 True is always True - you are not checking the result of your function 
 

 . 

 def check(fname, txt):
 with open(fname) as dataf:
  return any(txt in line for line in dataf)

if check('example.txt', 'blabla'):
 print "true"
else:
 print "false"
 
 #5 if check() then do something
else do something else 
 #6 found = False 

 def check():
 datafile = file('example.txt')
 for line in datafile:
  if blabla in line:
   found = True
   break
 return found

if check():
 print "true"
else:
 print "false"