Question (ID-4251732): Fast algorithm to calculate delta of two list I have two list of album names, ordered by some score. 

 albums_today = ['album1', 'album2', 'album3']
albums_yesterday = ['album2', 'album1', 'album3']
 

 How can I calculate the change of list order and get something like 

 {'album1':1, 'album2':-1, 'album3':0}
 
 Answers (Total-7): #0 &gt;&gt;&gt; albums_today = ['album1', 'album2', 'album3']
&gt;&gt;&gt; albums_yesterday = ['album2', 'album1', 'album3']
&gt;&gt;&gt; D = dict((k,v) for v,k in enumerate(albums_yesterday))
&gt;&gt;&gt; dict((k,D[k]-v) for v,k in enumerate(albums_today))
{'album1': 1, 'album3': 0, 'album2': -1}
 

 In Python2.7 or Python3 it can be written even more simply 

 &gt;&gt;&gt; albums_today = ['album1', 'album2', 'album3']
&gt;&gt;&gt; albums_yesterday = ['album2', 'album1', 'album3']
&gt;&gt;&gt; D = {k:v for v,k in enumerate(albums_yesterday)}
&gt;&gt;&gt; {k:D[k]-v for v,k in enumerate(albums_today)}
{'album1': 1, 'album3': 0, 'album2': -1}
 
 #1 how about this: 

 def delta(a, b):
 rank_a = dict((k, v) for v, k in enumerate(a))
 rank_b = enumerate(b)
 return dict((k, rank_a[k]-i) for i, k in rank_b)
 

 which only creates a single dict to look things up into. 

 Well, as long as every entry in both lists are present exactly once each, then we know that once we look a key up in the rank_a collection, we don't need it anymore. We can delete it. Also, to save space, we don't have to populate that collection until the moment a particular key is needed. 

 class LookupOnce:
 def __init__(self, seq):
  self.cache = {}
  self.seq = iter(seq)
 def get(self, key):
  if key in self.cache:
   value = self.cache[key]
   del self.cache[key]
   return value
  for v,k in self.seq:
   if k == key:
    return v
   self.cache[k] = v
  raise KeyError


def delta(a, b):
 rank_a = LookupOnce(enumerate(a))
 rank_b = enumerate(b)
 result = {}
 for i, k in rank_b:
  result[k] = i - rank_a.get(k)
 return result
 
 #2 you could also use the same algorithm as i wrote above and just use a single hashmap. 

 def findDelta1(today,yesterday):
 results = {}
 ypos = 0
 for i,title in enumerate(today):
  if title in results:
   results[title] = results[title] - i
  else:
   for ypos in xrange(ypos,len(yesterday)):
    if yesterday[ypos] == title:
      results[title] = ypos - i
      ypos = ypos + 1
      break
    else:
      results[yesterday[ypos]] = ypos
 return results
 

 still O(N), potentially faster and less RAM than my version above. 
 #3 &gt;&gt;&gt; def transform(albums):
...  return dict((album, i) for i, album in enumerate(albums))
... 
&gt;&gt;&gt; def show_diffs(album1, album2):
...  album_dict1, album_dict2 = transform(album1), transform(album2)
...  for k, v in sorted(album_dict1.iteritems()):
...   print k, album_dict2[k] - v
... 
&gt;&gt;&gt; albums_today = ['album1', 'album2', 'album3']
&gt;&gt;&gt; albums_yesterday = ['album2', 'album1', 'album3']
&gt;&gt;&gt; show_diffs(albums_today, albums_yesterday)
album1 1
album2 -1
album3 0
 
 #4 well, depending on what the sizes of your lists are, there are a number of different approaches. without knowing how big your datasets are, i'd suggest that the simplest (perhaps unnecessarily optimized) method is something like: 

 albums_yesterday_lookup = new HashMap();
differences = new HashMap();
foreach(albums_yesterday as position =&gt; album_title)
 albums_yesterday_lookup.put(album_title,position);

foreach(albums_today as position =&gt; album_title)
 differences.put(album_title, albums_yesterday_lookup.get(album_title) - position);
 

 which runs as O(N). 
 #5 New and Improved and not O(n 2 ) : But still slower than two of the other answers. 

 The only advantage of this solution is memory savings. It avoids building a big dict and instead stores only what is necessary at the time. TokenMacGuy's second solution does this as well but this is slightly faster. 

 def get_deltas_aas(today, yesterday):
 deltas = {}
 for (new_rank, new_album), (old_rank, old_album) in \
   itertools.izip(enumerate(today), enumerate(yesterday)):
  if old_album in deltas:
   #Believe it or not, this is faster than deltas.pop(old_album) + old_rank
   yield (old_album, deltas[old_album] + old_rank)
   del deltas[old_album] 
  else:
   deltas[old_album] = old_rank

  if new_album in deltas:
   yield (new_album, deltas[new_album] - new_rank)
   del deltas[new_album]
  else:
   deltas[new_album] = -new_rank
 

 Here's some timing results for most of the answers here (all of the ones in Python unless I missed something). dict ordering is in effect. If anybody wants me to change their code in any way, just ping me. 

 get_deltas_token1: 1.08131885529 msecs
get_deltas_gnibbler: 1.06443881989 msecs
get_deltas_tyler: 1.61993408203 msecs
get_deltas_token2: 1.52525019646 msecs
get_deltas_hughdbrown: 3.27240777016 msecs
get_deltas_aas: 1.39379096031 msecs
 

 The code I used to do the timing is here . I'm pleased with the timing framework I tossed together for it on top of timeit. Should be useful in the future after refactoring the code for running the tests. 
 #6 D = dict((title, rank) for rank, title in enumerate(albums_yesterday))
for rank, title in enumerate(albums_today):
 D[title] = D[title] - rank