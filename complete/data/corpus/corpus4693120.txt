Question (ID-4693120): use of "global" keyword in python What I understand for reading the documentation is that python has a separate namespace for functions, and if I want to use a global variable in that function I need to use "global". 

 I'm using python 2.7 and I tired this little test 

 &gt;&gt;&gt; sub = ['0', '0', '0', '0']
&gt;&gt;&gt; def getJoin():
...  return '.'.join(sub)
...
&gt;&gt;&gt; getJoin()
'0.0.0.0'
 

 It seems things are working fine even without global. I was able to access global variable without any problem. 

 Am I missing anything? Also following is from python documentation: 

 
 Names listed in a global statement
 must not be defined as formal
 parameters or in a for loop control
 target, class definition, function
 definition, or import statement. 
 

 While formal parameters and class definition makes sens to me, I'm not able to understand the restriction on for loop control target and function definition. 
 Answers (Total-7): #0 The keyword global is only useful to change or create global variables in a local context, although creating global variables is seldom considered a good solution. 

 def bob():
 me = "locally defined" # Defined only in local context
 print me

bob()
print me  # Asking for a global variable
 

 The above will give you: 

 locally defined
Traceback (most recent call last):
 File "file.py", line 9, in &lt;module&gt;
 print me
NameError: name 'me' is not defined
 

 While if you use the global statement, the variable will become available "outside" the scope of the function, effectively becoming a global variable. 

 def bob():
 global me
 me = "locally defined" # Defined locally but declared as global
 print me

bob()
print me  # Asking for a global variable
 

 So the above code will give you: 

 locally defined
locally defined
 

 In addition, due to the nature of python, you could also use global to declare functions, classes or other objects in a local context. Although I would advise against it since it causes nightmares if something goes wrong or needs debugging. 
 #1 Accessing a name and assigning a name are different. In your case, you are just accessing a name. 

 If you assign to a variable within a function, that variable is assumed to be local unless you declare it global. In the absence of that, it is assumed to be global. 

 &gt;&gt;&gt; x = 1   # global 
&gt;&gt;&gt; def foo():
  print x  # accessing it, it is global

&gt;&gt;&gt; foo()
1
&gt;&gt;&gt; def foo(): 
  x = 2  # local x
  print x 

&gt;&gt;&gt; x   # global x
1
&gt;&gt;&gt; foo()  # prints local x
2
 
 #2 While you can access global variables without the global keyword, if you want to assign to them you have to it. 

 foo = 1
def test():
 foo = 2 # new local foo

def blub():
 global foo
 foo = 3 # changes the value of the global foo
 

 In your case you're just accessing the list sub . 
 #3 This is the difference between accessing the name and binding it within a scope. 

 If you're just looking up a variable to read its value, you've got access to global as well as local scope. 

 However if you assign to a variable who's name isn't in local scope, you are binding that name into this scope (and if that name also exists as a global, you'll hide that). 

 If you want to be able to assign to the global name, you need to tell the parser to use the global name rather than bind a new local name - which is what the 'global' keyword does. 

 Binding anywhere within a block causes the name everywhere in that block to become bound, which can cause some rather odd looking consequences (e.g. UnboundLocalError suddenly appearing in previously working code). 

 &gt;&gt;&gt; a = 1
&gt;&gt;&gt; def p():
 print(a) # accessing global scope, no binding going on
&gt;&gt;&gt; def q():
 a = 3 # binding a name in local scope - hiding global
 print(a)
&gt;&gt;&gt; def r():
 print(a) # fail - a is bound to local scope, but not assigned yet
 a = 4
&gt;&gt;&gt; p()
1
&gt;&gt;&gt; q()
3
&gt;&gt;&gt; r()
Traceback (most recent call last):
 File "&lt;pyshell#35&gt;", line 1, in &lt;module&gt;
 r()
 File "&lt;pyshell#32&gt;", line 2, in r
 print(a) # fail - a is bound to local scope, but not assigned yet
UnboundLocalError: local variable 'a' referenced before assignment
&gt;&gt;&gt; 
 
 #4 Any variable declared outside of a function is assumed to be global, it's only when declaring them from inside of functions (except constructors) that you must specify that the variable be global. 
 #5 It means that you should not do the following: 

 x = 1

def myfunc():
 global x

 # formal parameter
 def localfunction(x):
 return x+1

 # import statement
 import os.path as x

 # for loop control target
 for x in range(10):
 print x

 # class definition
 class x(object):
 def __init__(self):
  pass

 #function definition
 def x():
 print "I'm bad"
 
 #6 The other answers answer your question. Another important thing to know about names in Python is that they are either local or global on a per-scope basis. 

 Consider this, for example: 

 value = 42

def doit():
 print value
 value = 0

doit()
print value
 

 You can probably guess that the value = 0 statement will be assigning to a local variable and not affect the value of the same variable declared outside the doit() function. You may be more surprised to discover that the code above won't run. The statement print value inside the function produces an UnboundLocalError. 

 The reason is that Python has noticed that, elsewhere in the function, you define the name value and value is not declared global . That makes it a local variable. But when you try to print it, the local name hasn't been defined yet. Python in this case does not fall back to looking for the name as a global variable, as some other languages do. Essentially, you cannot access a global variable if you have defined a local variable of the same name anywhere in the function. 

 This tripped me up many times, and I hope to avoid you tripping over the same thing.