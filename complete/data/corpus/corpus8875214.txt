Question (ID-8875214): How can I name a block of code in Python so I can execute it multiple times by calling that name? I have some code that is basically 5 print statements that i would like to call several times throughout the script. I was thinking I could save some space and make the code easier to maintain if I wrote the code once, then called it later. A function would work but it prints None after it is done and that is annoying. Any suggestions? 

 Here is kinda what I am trying to do... 

 name = "Bob"
House = "HOME"

print "hello,"
print name
print house
print "is where you are"
 

 That is just an example, it is way more complicated than that, but i would like to put all of the print statements into a named "bucket" of sorts and then call that bucket. 

 And some of the code would not just be print statements, but also if statements as well. 

 Thanks in advance! 
 Answers (Total-6): #0 If it prints None it is probably because you're printing the result of the function, as well as letting the function print expressions. 

 e.g. 

 def print_stuff():
 print "Hello, World"

print print_stuff()
&gt; Hello, World
&gt; None

# But print_stuff prints stuff, so you don't need to print it too:

print_stuff()
&gt; Hello, World
 
 #1 A function works - 

 A function does not "print None" - a function, without an explicit return statement returns "None" implicitly - and if you call it on the interactive shell, the __repr__ of the returned None is printed to the console. 

 If youc all a function in a running program, the value returned, which is the result of of evaluating the expression that is the function call, does not print anything, just as inserting a line like 2 + 2 in th emidle of the code won't print anything. 

 So, for your lines above, you can just do: 

 def printer(name, house):
 print "hello,"
 print name
 print house
 print "is where you are"

printer("Bob", "Home")
 

 And re-use it with as may calls to "printer" as you want. 
 #2 Yes, it's called a function. 

 def foo(name, house):
 print 'hello,', name, house, 'is where you are'

foo('bob', 'home')
 

 Function doesn't print anything that you don't print inside it. 
 #3 I think you can do that with a function (would be the obvious way to do), and I don't usually see None being printed after execution of functions containing print. In this case, probably you don't need a return statement: 

 def printblock(name, house):
 print "hello,"
 print name
 print house
 print "is where you are"

printblock("Bob", "HOME")
 
 #4 def hello(name, house):
 print "hello,"
 print name
 print house
 print "is where you are"
 return

hello("Bob", "Home")
 

 This is a standard python function. It shouldn't print anything unless you explicitly tell it to. 
 #5 &gt;&gt;&gt; from string import Template
&gt;&gt;&gt; x=Template('Hello \n$name \n$house \nis where you are')
&gt;&gt;&gt; name='bob'
&gt;&gt;&gt; house='here'
&gt;&gt;&gt; print x.safe_substitute(name=name,house=house)
Hello
bob
here
is where you are
 

 Hi there, as i recall from your question that you would need to use it several times, you may use the Template functionality of Python. you may kep all your variable in a list or dictionary and call the above given print statement using the for loop. 

 hope this helps, also explore the the template function. thank you :)