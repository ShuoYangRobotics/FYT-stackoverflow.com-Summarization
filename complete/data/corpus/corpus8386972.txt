Question (ID-8386972): Create a list of tuples from list of tuples I have 4 lists 

 l1 = [('x',20),('y',10),('z',40)]
l2 = [('x',30),('r',90),('z',10),('s',20)]
l3 = [('y',20),('z',40),('x',39)]
l4 = [('s',10),('p',20),('z',20)]
 

 from the above lists I want to get the fifth list as 

 l_final = [('x',39),('y',20),('z',40),('r',90),('s',20),('p',20)] 
 

 where all the values in the tuple are maximum i.e. in the l_final list the value in tuple ('x',39) 39 is max value for x related tuple. 

 Also, I am able to solve it upto 2 lists. But not able to do it for 5 lists.
Also suggest any other workaround for this. 

 I am adding my code upto 2 lists code here 

 l1 = [('x',142),('y',523),('r',278),('p',5)]
l2 = [('r',156),('y',663),('s',145),('x',867)]

mylist = []
for i in l1:
 flag = False
 for j in l2:
    if i[0]== j[0]:
    flag = True
    max1 = max(i[1],j[1])
    mylist.append((i[0],max1))
 if flag == False:
  mylist.append((i[0],i[1]))
  flag = True


for i in l2:
 flag = False
 for j in mylist:
  if i[0] == j[0]:
   flag = True
 if flag == False:
   mylist.append((i[0],i[1]))
 
 Answers (Total-6): #0 l1 = [('x',20),('y',10),('z',40)]
l2 = [('x',30),('r',90),('z',10),('s',20)]
l3 = [('y',20),('z',40),('x',39)]
l4 = [('s',10),('p',20),('z',20)]

d = {}
for k, v in l1+l2+l3+l4:
 d.setdefault(k, []).append(v)

mylist = [(k, max(v)) for k, v in d.items()]
 

 mylist is now: [('p', 20), ('s', 20), ('r', 90), ('y', 20), ('x', 39), ('z', 40)] . 

 If you need it in the order you gave us, change the last line: 

 mylist = [(k, max(d[k])) for k in 'xyzrsp']

[('x', 39), ('y', 20), ('z', 40), ('r', 90), ('s', 20), ('p', 20)]
 
 #1 import collections, itertools

class Minimum(object):
 # simulates negative infinity to some degree
 def __cmp__(self, other):
  return -1

def max_elements(*lists): # no idea how to call it
 values = collections.defaultdict(Minimum)
 for key, value in itertools.chain(*lists):
  values[key] = max(values[key], value)
 return values.items()

l1 = [('x',20),('y',10),('z',40)]
l2 = [('x',30),('r',90),('z',10),('s',20)]
l3 = [('y',20),('z',40),('x',39)]
l4 = [('s',10),('p',20),('z',20)]

print max_elements(l1, l2, l3, l4)
# [('p', 20), ('s', 20), ('r', 90), ('y', 20), ('x', 39), ('z', 40)]
 
 #2 Assuming that all the numbers are positive 

 import collections

l1 = [('x',20),('y',10),('z',40)]
l2 = [('x',30),('r',90),('z',10),('s',20)]
l3 = [('y',20),('z',40),('x',39)]
l4 = [('s',10),('p',20),('z',20)]

d = collections.defaultdict(int)

for k,v in l1 + l2 + l3 + l4:
 if d[k] &lt; v: d[k] = v

result = list(d.iteritems())
 

 result is 

 [('p', 20), ('s', 20), ('r', 90), ('y', 20), ('x', 39), ('z', 40)]
 
 #3 may be you can try this 

 &gt;&gt;&gt; d={}
&gt;&gt;&gt; for l in zip(l1,l2,l3,l4):
  for t in l:
   if d.has_key(t[0]):
    d[t[0]]=max(d[t[0]],t[1])
   else:
    d[t[0]]=t[1]
&gt;&gt;&gt; [(k,v) for k,v in d.iteritems()]
[('p', 20), ('s', 10), ('r', 90), ('y', 20), ('x', 39), ('z', 40)]   
 
 #4 Just whipped this up. Should do what you want. Try adding a 5th list and running it: 

 def maxmerge(d1, d2):
 for k in d2.keys():
  if not d1.has_key(k):
   d1[k] = d2[k]
  elif d2[k] &gt; d1[k]:
   d1[k] = d2[k]

def maxtup(*lists):
 r = dict()
 for l in lists:
  maxmerge(r, dict(l))
 return r.items()

l1 = [('x',20),('y',10),('z',40)]
l2 = [('x',30),('r',90),('z',10),('s',20)]
l3 = [('y',20),('z',40),('x',39)]
l4 = [('s',10),('p',20),('z',20)]
print maxtup(l1,l2,l3,l4)
 
 #5 Assuming the order of the final list doesn't matter. 

 From the documentation for the built-in dict type: 

 dict(seq) -&gt; new dictionary initialized as if via:
 d = {}
 for k, v in seq:
  d[k] = v
 

 Thus, if we initialize with multiple equal keys, the last one in the seq will take precedence. 

 We can exploit that by joining our lists into one, sorting it in increasing order of the numeric values, and then building the dictionary. 

 Thus, the whole thing is a very short one-liner: 

 dict(sorted(l1+l2+l3+l4, key=lambda x:x[1])).items()
 

 (Or if you prefer, use operator.itemgetter to implement the key.)