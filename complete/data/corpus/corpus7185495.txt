Question (ID-7185495): python range() with duplicates? So everybody knows that I can get a list of numbers with range like so: 

 &gt;&gt;&gt; range(5)
[0, 1, 2, 3, 4]
 

 And if I want, say, 3 copies of each number I could use: 

 &gt;&gt;&gt; range(5)*3
[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]
 

 But suppose I wanted them like this instead? 

 [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]
 

 Is there a quick and elegant built-in way to get that? 
 Answers (Total-8): #0 You can do: 

 &gt;&gt;&gt; [i for i in range(5) for _ in range(3)]
[0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]
 

 the range(3) part should be replaced with your number of repetitions... 

 BTW, you should use generators 

 

 Just to make it clearer, the _ is a variable name for something you don't care about (any name is allowed). 

 This list comprehension uses nested for loops and are just like that: 

 for i in range(5):
 for j in range(3):
  #your code here
 
 #1 Try this: 

 itertools.chain.from_iterable(itertools.repeat(x, 3) for x in range(5))
 
 #2 from itertools import chain, izip
list(chain(*izip(*[xrange(5)]*3)))
 

 Gives 

 [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]
 

 Leave off the list and you have a generator. 

 EDIT: or even better (leaves out a function call to izip): 

 list(chain(*([x]*3 for x in xrange(5))))
 
 #3 &gt;&gt;&gt; from itertools import chain, izip, tee
&gt;&gt;&gt; list(chain.from_iterable(izip(*tee(range(5), 3))))
[0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]
 
 #4 A cool iterator using another approach: 

 &gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; Counter(range(5) * 3).elements()
 
 #5 import itertools
[x for tupl in itertools.izip(*itertools.tee(range(0,5),3)) for x in tupl]
 

 Or: 

 [x for tupl in zip(range(0,5), range(0,5), range(0,5)) for x in tupl]
 
 #6 I like to Keep It Simple :) 

 &gt;&gt;&gt; sorted(list(range(5)) * 3)
[0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]
 
 #7 Another way 

 from itertools import repeat
[[elem for elem in [i for i in repeat(lists, lim)]] for lists in range(lim)]
 

 This actually makes them separate lists, which I think is more useful. 

 You don't need to make it a generator if you don't need it to be lazy, but you can if you want it.