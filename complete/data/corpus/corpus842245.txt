Question (ID-842245): Which is more accurate, x**.5 or math.sqrt(x)? I recently discovered that x**.5 and math.sqrt(x) do not always produce the same result in Python: 

 Python 2.6.1 (r261:67517, Dec 4 2008, 16:51:00) [MSC v.1500 32 bit (Intel)]
on win32
&gt;&gt;&gt; 8885558**.5 - math.sqrt(8885558)
-4.5474735088646412e-13
 

 Checking all integers below 10**7 produced an error rate of almost exactly 0.1%, with the size of the error increasing (slowly) for larger numbers. 

 So the question is, which method is more accurate? 

 Edit: For the record, this isn't current causing me issues, nor do I know of a case where it might. But it's a slow Friday afternoon, so I ask out of curiosity and in the name of best practices. :-) 
 Answers (Total-9): #0 Neither one is more accurate, they both diverge from the actual answer in equal parts: 

 &gt;&gt;&gt; (8885558**0.5)**2
8885557.9999999981
&gt;&gt;&gt; sqrt(8885558)**2
8885558.0000000019

&gt;&gt;&gt; 2**1023.99999999999
1.7976931348498497e+308

&gt;&gt;&gt; (sqrt(2**1023.99999999999))**2
1.7976931348498495e+308
&gt;&gt;&gt; ((2**1023.99999999999)**0.5)**2
1.7976931348498499e+308

&gt;&gt;&gt; ((2**1023.99999999999)**0.5)**2 - 2**1023.99999999999
1.9958403095347198e+292
&gt;&gt;&gt; (sqrt(2**1023.99999999999))**2 - 2**1023.99999999999
-1.9958403095347198e+292
 

 http://mail.python.org/pipermail/python-list/2003-November/238546.html 

 
 The math module wraps the platform C
 library math functions of the same
 names; math.pow() is most useful if
 you need (or just want) high
 compatibility with C extensions
 calling C's pow() . 
 
 __builtin__.pow() is the implementation of Python's infix ** 
 operator, and deals with complex
 numbers, unbounded integer powers, and
 modular exponentiation too (the C
 pow() doesn't handle any of those). 
 

 ** is more complete. math.sqrt is probably just the C implementation of sqrt which is probably related to pow . 
 #1 Both the pow function and the math.sqrt() function can calculate results that are more accurate than what the default float type can store. I think the errors you're seeing is a result of the limitations of floating point math rather than inaccuracies of the functions. Also, since when is a difference of ~10^(-13) a problem when taking the square root of a 7 digit number? Even the most accurate physics calculations seldom requires that many significant digits... 

 Another reason to use math.sqrt() is that it's easier to read and understand, which generally is a good reason to do things a certain way. 
 #2 Use decimal to find more precise square roots: 

 &gt;&gt;&gt; import decimal
&gt;&gt;&gt; decimal.getcontext().prec = 60
&gt;&gt;&gt; decimal.Decimal(8885558).sqrt()
Decimal("2980.86531061032678789963529280900544861029083861907705317042")
 
 #3 Any time you are given a choice between two functions which are built into a language, the more specific function will almost always be equal to or better than the generic one (since if it was worse, the coders would've just implemented it in terms of the generic function). Sqrt is more specific than generic exponentiation so you can expect it's a better choice. And it is, at least in terms of speed. In terms of accuracy, you aren't dealing with enough precision in your numbers to be able to tell. 

 Note: To clarify, sqrt is faster in Python 3.0. It's slower in older versions of Python. See J.F. Sebastians measurements at http://stackoverflow.com/questions/327002/python-which-is-faster-x-5-or-math-sqrtx . 
 #4 I got the same issue with you on Win XP Python 2.5.1, while I don't on 32-bit Gentoo Python 2.5.4. It's a matter of C library implementation. 

 Now, on Win, math.sqrt(8885558)**2 gives 8885558.0000000019 , while (8885558**.5)**2 gives 8885557.9999999981 , which seem to amount to the same epsilon. 

 I say that one cannot really say which one is the "better" option. 
 #5 This has to be some kind of platform-specific thing because I get different results: 

 Python 2.5.1 (r251:54863, Jan 13 2009, 10:26:13) 
[GCC 4.0.1 (Apple Inc. build 5465)] on darwin
&gt;&gt;&gt; 8885558**.5 - math.sqrt(8885558)
0.0
 

 What version of python are you using and what OS? 

 My guess is that it has something to do with promotion and casting. In other words, since you're doing 8885558**.5, 8885558 has to be promoted to a float. All this is handled differently depending on the operating system, processor, and version of Python. Welcome to the wonderful world of floating point arithmetic. :-) 
 #6 I don't get the same behavior. Perhaps the error is platform specific?
On amd64 I get this: 

 
Python 2.5.2 (r252:60911, Mar 10 2008, 15:14:55) 
[GCC 3.3.5 (propolice)] on openbsd4
Type "help", "copyright", "credits" or "license" for more information.
>>> import math
>>> math.sqrt(8885558) - (8885558**.5)
0.0
>>> (8885558**.5) - math.sqrt(8885558)
0.0
 
 #7 In theory math.sqrt should have a higher precision then math.pow. See Newton's method to compute square roots [0]. However the limitation in the number of decimal digits of the python float (or the C double) will probably mask the difference. 

 [0] http://en.wikipedia.org/wiki/Integer_square_root 
 #8 If you've already tested all the integers below 10**7, why don't you tell us?