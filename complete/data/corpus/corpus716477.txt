Question (ID-716477): join list of lists in python Is the a short syntax for joining a list of lists into a single list( or iterator) in python? 

 For example I have a list as follows and I want to iterate over a,b and c. 

 x = [["a","b"], ["c"]]
 

 The best I can come up with is as follows. 

 result = []
[ result.extend(el) for el in x] 

for el in result:
 print el
 
 Answers (Total-14): #0 import itertools
a = [["a","b"], ["c"]]
print list(itertools.chain(*a))
 
 #1 x = [["a","b"], ["c"]]

result = sum(x, [])
 
 #2 If you're only going one level deep, a nested comprehension will also work: 

 &gt;&gt;&gt; x = [["a","b"], ["c"]]
&gt;&gt;&gt; [inner
...  for outer in x
...   for inner in outer]
['a', 'b', 'c']
 

 On one line, that becomes: 

 &gt;&gt;&gt; [j for i in x for j in i]
['a', 'b', 'c']
 
 #3 This is known as flattening, and there are a LOT of implementations out there: 

 
 More on python flatten 
 Python tricks 
 Flattening lists in Python 
 

 How about this, although it will only work for 1 level deep nesting: 

 &gt;&gt;&gt; x = [["a","b"], ["c"]]
&gt;&gt;&gt; for el in sum(x, []):
...  print el
...
a
b
c
 

 From those links, apparently the most complete-fast-elegant-etc implementation is the following: 

 def flatten(l, ltypes=(list, tuple)):
 ltype = type(l)
 l = list(l)
 i = 0
 while i &lt; len(l):
  while isinstance(l[i], ltypes):
   if not l[i]:
    l.pop(i)
    i -= 1
    break
   else:
    l[i:i + 1] = l[i]
  i += 1
 return ltype(l)
 
 #4 This works recursively for infinitely nested elements: 

 def iterFlatten(root):
 if isinstance(root, (list, tuple)):
  for element in root:
   for e in iterFlatten(element)
    yield e
 else:
  yield root
 

 Result: 

 
>>> b = [["a", ("b", "c")], "d"]
>>> list(iterFlatten(b))
['a', 'b', 'c', 'd']
 
 #5 What you're describing is known as flattening a list, and with this new knowledge you'll be able to find many solutions to this on Google (there is no built-in flatten method). Here is one of them, from http://www.daniel-lemire.com/blog/archives/2006/05/10/flattening-lists-in-python/ : 

 def flatten(x):
 flat = True
 ans = []
 for i in x:
  if ( i.__class__ is list):
   ans = flatten(i)
  else:
   ans.append(i)
 return ans
 
 #6 There's always reduce (being deprecated to functools): 

 &gt;&gt;&gt; x = [ [ 'a', 'b'], ['c'] ]
&gt;&gt;&gt; for el in reduce(lambda a,b: a+b, x, []):
... print el
...
__main__:1: DeprecationWarning: reduce() not supported in 3.x; use functools.reduce()
a
b
c
&gt;&gt;&gt; import functools
&gt;&gt;&gt; for el in functools.reduce(lambda a,b: a+b, x, []):
... print el
...
a
b
c
&gt;&gt;&gt;
 

 Unfortunately the plus operator for list concatenation can't be used as a function -- or fortunate, if you prefer lambdas to be ugly for improved visibility. 
 #7 Or a recursive operation: 

 def flatten(input):
 ret = []
 if not isinstance(input, (list, tuple)):
  return [input]
 for i in input:
  if isinstance(i, (list, tuple)):
   ret.extend(flatten(i))
  else:
   ret.append(i)
 return ret
 
 #8 Late to the party but ... 

 I'm new to python and come from a lisp background. This is what I came up with (check out the var names for lulz): 

 def flatten(lst):
 if lst:
  car,*cdr=lst
  if isinstance(car,(list,tuple)):
   if cdr: return flatten(car) + flatten(cdr)
   return flatten(car)
  if cdr: return [car] + flatten(cdr)
  return [car]
 

 Seems to work. Test: 

 flatten((1,2,3,(4,5,6,(7,8,(((1,2)))))))
 

 returns: 

 [1, 2, 3, 4, 5, 6, 7, 8, 1, 2]
 
 #9 Sadly, Python doesn't have a simple way to flatten lists. Try this: 

 def flatten(some_list):
 for element in some_list:
  if type(element) in (tuple, list):
   for item in flatten(element):
    yield item
  else:
   yield element
 

 Which will recursively flatten a list; you can then do 

 result = []
[ result.extend(el) for el in x] 

for el in flatten(result):
  print el
 
 #10 l = []
map(l.extend, list_of_lists)
 

 shortest! 
 #11 I think this is the most readable way to do it: 

 import operator
x = [["a","b"], ["c"]]
result = reduce(operator.add, x) #["a", "b", "c"]
 

 This only goes one level deep, though. 
 #12 If you meant using "join": 

 print '\n'.join(map(str, listOfLists or listOfTuples)) 
 #13 For one-level flatten, if you care about speed, this is faster than any of the previous answers under all conditions I tried. (That is, if you need the result as a list. If you only need to iterate through it on the fly then the chain example is probably better.) It works by pre-allocating a list of the final size and copying the parts in by slice (which is a lower-level block copy than any of the iterator methods): 

 def join(a):
 """Joins a sequence of sequences into a single sequence. (One-level flattening.)
 E.g., join([(1,2,3), [4, 5], [6, (7, 8, 9), 10]]) = [1,2,3,4,5,6,(7,8,9),10]
 This is very efficient, especially when the subsequences are long.
 """
 n = sum([len(b) for b in a])
 l = [None]*n
 i = 0
 for b in a:
  j = i+len(b)
  l[i:j] = b
  i = j
 return l