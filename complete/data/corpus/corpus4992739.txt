Question (ID-4992739): how to traverse through dict? records = {'foo':foo, 'bar':bar, 'baz':baz}
 

 I want to change the values to 0 if it is None . How can I do this? 

 eg: 

 records = {'foo':None, 'bar':None, 'baz':1}
 

 I want to change foo and bar to 0 .
Final dict: 

 records = {'foo':0, 'bar':0, 'baz':1}
 
 Answers (Total-6): #0 for k in records:
 if records[k] is None:
  records[k] = 0
 
 #1 Another way 

 records.update((k, 0) for k,v in records.iteritems() if v is None)
 

 Example 

 &gt;&gt;&gt; records
{'bar': None, 'baz': 1, 'foo': None}
&gt;&gt;&gt; records.update((k, 0) for k,v in records.iteritems() if v is None)
&gt;&gt;&gt; records
{'bar': 0, 'baz': 1, 'foo': 0}
 
 #2 Try 

 for key, value in records.iteritems():
 if value is None:
  records[key] = 0
 
 #3 If you want to intimidate or annoy other code maintainers, there's an ugly one-liner that will do the trick: 

 records.update(map(lambda (k,v):(k,{v:v,None:0}[v]), records.items()))
 

 Example use: 

 &gt;&gt;&gt; records = {"hey":None, "you":0}
&gt;&gt;&gt; records.update(map(lambda (k,v):(k,{v:v,None:0}[v]), records.items()))
&gt;&gt;&gt; records
{'you': 0, 'hey': 0}
 
 #4 for k, v in records.items():
 if v is None:
  records[k] = 0
 
 #5 records = dict( (k,0 if v is None else v) for k, v in records.items() )

def zero_if_none( x ):
 return 0 if z is None else x
records = dict( (k, zero_if_none(records[k])) for k in records )