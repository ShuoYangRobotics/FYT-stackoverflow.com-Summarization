Question (ID-2136928): Integer Field Math in Django from django.db import models
from django.contrib.auth.models import User

class Product(models.Model):
name = models.CharField(max_length = 127)
description = models.TextField()
code = models.CharField(max_length = 30)
lot_no = models.CharField(max_length = 30)
inventory = models.IntegerField()
commited = models.IntegerField()
available = models.IntegerField()
reorder = models.IntegerField()
created_date = models.DateField(auto_now_add = True)
comment_user = models.ForeignKey(User, null=True)
comment_txt = models.TextField()

def __unicode__(self):
 return self.code + " - " + self.name + " - " + self.lot_no + " - " + str(self.created_date)

@property
def available(self):
 return self.inventory - self.commited
 

 Im trying to have available calculated by (inventory - self) when a person enters in the data for inventory and commited in django admin template. But I'm not sure how. 

 Thanks,
Jon 
 Answers (Total-6): #0 Try overriding the save method on the model: 

 def save(self, *args, **kwargs):
 "update number available on save"
 self.available = self.inventory - self.committed

 super(Product, self).save(*args, **kwargs)
 

 You could also put logic in there that would do something if self.available became negative. 
 #1 You've bound both a Django field and a vanilla Python property to the same name on your model. One of these attributes is masking the other, which is why you're getting unexpected behavior in the Django admin. This is almost certainly not what you want . 

 Override the save method and remove your def available property entirely. 

 Ignacio is trying to help you keep your data normalized by not storing information in your DB twice. It's a good practice to follow in the general case, but there are many times when you want to store calculated values in your DB. This seems like a practical use of data duplication. 
 #2 Don is correct that you have the name available duplicated, because you have both a field and a property. Drop the field. 

 This is what I said when I gave you the solution to this problem in your original question - I explicitly said "drop the existing 'available' field". Following half a solution is never going to work. 

 However I fundamentally disagree with Seth and Don who recommend overriding the save() function to calculate this value. That is a totally unnecessary duplication of data. The property is the correct solution. 
 #3 It seems like you may have two problems; the overlapping available property+field and availability not showing up as you expect in the admin. 

 Choose one way (property or field) to represent the availability and go with it. Don and Seth have shown a way to do it using a field and Daniel and Ignacio have suggested going with a property. 

 Since you really want this field to show up in the admin just go with the field; give it a helpful help_text="...", remove the @property, and override save(). 

 class Product(models.Model):
 # ...
 availability = models.IntegerField(help_text="(updated on save)")

 # Use Seth's save()
 def save(self, *args, **kwargs):
  self.availability = self.inventory - self.commited
  super(Product, self).save(*args, **kwargs)
 

 This is not the best way to do things in terms of normalized data but it will probably be the simplest solution to your current problem. 

 If you are using trunk instead of Django-1.1.1, you can also use readonly_fields in the admin. 
 #4 The property is actually removing the available integer field off the admin page it seems 
 #5 See the Django documentation for model properties