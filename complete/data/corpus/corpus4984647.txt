Question (ID-4984647): Accessing dict keys like an attribute in Python? I find it more conveniant to access dict keys as obj.foo instead of obj['foo'] , so I wrote this snippet: 

 class AttributeDict(dict):
 def __getattr__(self, attr):
  return self[attr]
 def __setattr__(self, attr, value):
  self[attr] = value
 

 However, I assume there must be some reason that Python doesn't provide this functionality out of the box. What would be the caveats and pitfalls of accessing dict keys in this manner? 
 Answers (Total-6): #0 From This other SO question there's a great implementation example that simplifies your existing code. How about: 

 class AttributeDict(dict): 
 __getattr__ = dict.__getitem__
 __setattr__ = dict.__setitem__
 

 Much more concise and doesn't leave any room for extra cruft getting into your __getattr__ and __setattr__ functions in the future. 
 #1 It doesn't work in generality. Not all valid dict keys make addressable attributes ("the key"). So, you'll need to be careful. 

 Python objects are all basically dictionaries. So I doubt there is much performance or other penalty. 
 #2 tuples can be used dict keys. How would you access tuple in your construct? 

 Also, namedtuple is a convenient structure which can provide values via the attribute access. 
 #3 You can have all legal string characters as part of the key if you use array notation.
For example, obj['!#$%^&amp;*()_'] 
 #4 What if you wanted a key which was a method, such as __eq__ or __getattr__ ? 

 And you wouldn't be able to have an entry that didn't start with a letter, so using 0343853 as a key is out. 

 And what if you didn't want to use a string? 
 #5 No need to write your own as
 setattr() and getattr() already exist. 

 The advantage of class objects probably comes into play in class definition and inheritance.