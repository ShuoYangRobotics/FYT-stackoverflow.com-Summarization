Question (ID-6737846): Python regex replace to create smiley faces I'd like to create a regex string that would turn this text: 

 Hello this is a mighty fine day today
 

 into 

 8===D 8==D 8D D 8====D 8==D 8=D 8===D
 

 is this possible with a python re.sub oneliner? 
 Answers (Total-6): #0 No need for regexes: 

 s = 'Hello this is a mighty fine day today'
' '.join('%s%sD'%('8' if len(w) &gt; 1 else '', '='*(len(w)-2)) for w in s.split())
# '8===D 8==D 8D D 8====D 8==D 8=D 8===D'
 

 Edit: debugged ;) Thanks for the pointer @tg 
 #1 The question is asking for a re.sub one-liner, so here is one that does the job: 

 In [1]: import re

In [2]: s = "Hello this is a mighty fine day today"
In [3]: print re.sub(r"\w+", lambda x:("8"+"="*1000)[:len(x.group())-1]+"D", s)
8===D 8==D 8D D 8====D 8==D 8=D 8===D
 

 For educational purposes only! 8=D 
 #2 Here is a re.sub oneliner as requested (split for clarity): 

 import re 

print re.sub( r'\w(\w?)(\w*)', \
    lambda m: '8'*len(m.group(1)) + '='*len(m.group(2)) + 'D', \
    "Hello this is a mighty fine day today" )
 
 #3 Here's your one-liner (sorry, no regex): 

 for word in sentence.split(' '): print '8' + '=' * (len(word) - 2) + 'D',
 
 #4 import re

string = "Hello this is a mighty fine day today"

def repl(matchobj):
 word = matchobj.group()
 return ('8' if len(word) &gt; 1 else '') + '=' * (len(word) - 2) + 'D'

result = re.sub(r'\w+', repl, string)

print(result)
 

 This gives exactly what you specified (just 'D' for the one char case) and doesn't need to make a 1000 character string of '='s :P 
 #5 I don't think there is any reason to use regular expression as in the previous solutions. Try this instead: 

 def pen(string):
 return ' '.join([("%s%s%s"%('8','='*(len(word)-2),'D'))[-len(word):] \
   for word in string.split()])
 

 It seems to work much faster than one of the regex ones that I chose arbitrarily.