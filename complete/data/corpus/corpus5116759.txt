Question (ID-5116759): Is it a simplest substring in python? Below is my code which get code(always in brackets, and always has 3 chars) from string : 

 raw_text='Spain (BCN)' #another examples: 'Italy (BGN)' , 'Germany (SXF)'
formatted_text=raw_text[raw_text.index('(')+1:len(raw_text)-1] # BCN,BGN,SFX
 

 Can I write it simpler? 
 Answers (Total-7): #0 import re
raw_text='Spain (BCN)'
formatted_text = re.search(r"""
 (?&lt;=\() # assert that the preceding character is a (
 \w{3} # match three alphanumeric characters
 (?=\)) # assert that the following character is a )""", 
 raw_text, re.VERBOSE).group(0)
 

 would be another way of doing it (with a regular expression). 
 #1 If you are certain to have this format why not just use: 

 s.strip()[-4: -1]
 

 Of course, it does not check the format of your string. If you want to do that, use the re module (regular expressions). 

 Hope this helps, 

 Dimi 
 #2 Yip there sure is. 

 raw_text='Spain (BCN) '
print raw_text.rstrip(" ")[-4:-1] 
 

 Use rstrip to remove trailing spaces, eg trim.
Then simply go back 4 chars, to -1 chars. 
 #3 splicing a string is [start:stop] and you are stopping on len(raw_text)-1 - always the second-last character. If you know the code continues to the end of the string, and as you've said it is always three characters long, then: 

 formatted_text=raw_text[-4:-1]
 

 will extract the three characters that start 4 from the end of the string 
 #4 &gt;&gt;&gt; raw_text='Spain (BCN)'
&gt;&gt;&gt; formatted_text=raw_text[raw_text.index('(')+1:len(raw_text)-1]
&gt;&gt;&gt; formatted_text
'BCN'
&gt;&gt;&gt; raw_text[raw_text.index('(')+1:-1]
'BCN'
&gt;&gt;&gt;
 

 What an allegedly non-brittle does: 

 &gt;&gt;&gt; str = 'abcdefgh'
&gt;&gt;&gt; str[str.find('(')+1:str.find(')')]
'abcdefg'
&gt;&gt;&gt;
 
 #5 No, this is good enough. You could make a function that accepts a string and returns it formatted. 

 Also, don't go with len(raw_text)-1, because that will fail on bad data like "Italy (BGN) ". 

 def get_code(str):
  return str[str.find('(')+1:str.find(')')]

formatted_text = get_code(raw_text)
 
 #6 You can use a regex 

 &gt;&gt;&gt; import re
&gt;&gt;&gt; re.search('\((.{3})\)', 'Spain (BCN)').group(0)
'BCN'