Question (ID-4246377): In python, how could I make this three line code into a one line code? Here's the code 

 from sys import argv
script,from_file, to_file = argv
open(to_file,'w').write(open(from_file).read())
 

 I'm new to python, and I'm Learning Python the Hard Way , on the extra credit for one problem, it says the writer of the book was able to make the code one line long, so I managed to get it down to 3 lines, but I'm stuck. 

 Care to help? 

 Oh, and the code copies the contents of one file to another, or it is meant to. That's my goal. 
 Answers (Total-7): #0 It is possible to do this as one expression i.e. without needing semicolons: 

 __import__('shutil').copy(__import__('sys').argv[1], __import__('sys').argv[2])
 

 or 

 open(__import__('sys').argv[2], "w").write(open(__import__('sys').argv[1]).read())
 

 

 Of course, nobody in their right mind would prefer this to your sample code. The only change I would make is that there's no reason to assign the file names to temporary variables: 

 from sys import argv
open(argv[1],'w').write(open(argv[2]).read())
 

 A more Pythonic way of writing this would be: 

 import sys
with open(sys.argv[1]) as src, open(sys.argv[2]) as dest:
 for line in src:
  dest.write(line)
 

 and then you could start using argparse to make the command-line reading more robust... 
 #1 You can use semicolon to keep the import statement on the same line. And reference the items in argv directly instead of using variables. 

 from sys import argv; open(argv[2],'w').write(open(argv[1]).read())
 
 #2 Two things that you need to know: 

 1) You can include multiple python statements on the same line by separating them with semicolons 

 2) You don't need to move the command line parameters into separate variables in order to use them. 
 #3 To avoid the multiple __import__ of @katrielalex you could do: 

 (lambda a:open(a[2],"w").write(open(a[1]).read()))(__import__('sys').argv) 

 It's shorter, but it's ugly. 
 #4 You can get rid of the second line and reference argv directly in the third. To combine the remaining lines, you could use a semicolon. It's kind of cheating, but I don't see any better solution as you must import sys. 

 from sys import argv; open(argv[2],'w').write(open(argv[1]).read())
 
 #5 open(argv[2], 'w').write(open(argv[1]).read())
 

 i guess the import line is not counted... 

 EDIT: 

 i hope the import line is not counted, because it means your manual encourage to use semicolons with import statement, that's horrible... you should avoid this in python..you must ;) 

 PEP8 also discourage to use lines like 

 import os, sys
 

 instead of the right way: 

 import os
import sys
 

 so, don't use semicolons 
 #6 import sys

open(sys.argv[3], 'w').write(open(sys.argv[2]).read())
 

 is probably the best you can do.