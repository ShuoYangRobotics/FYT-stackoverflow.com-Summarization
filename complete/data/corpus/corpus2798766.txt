Question (ID-2798766): I need to change a zip code into a series of dots and dashes (a barcode), but I can't figure out how Here's what I've got so far: 

 def encodeFive(zip):

 zero = "||:::"

 one = ":::||"

 two = "::|:|"

 three = "::||:"

 four = ":|::|"

 five = ":|:|:"

 six = ":||::"

 seven = "|:::|"

 eight = "|::|:"

 nine = "|:|::"

 codeList = [zero,one,two,three,four,five,six,seven,eight,nine]

 allCodes = zero+one+two+three+four+five+six+seven+eight+nine

 code = ""
 digits = str(zip)
 for i in digits:

  code = code + i 

 return code
 

 With this I'll get the original zip code in a string, but none of the numbers are encoded into the barcode. I've figured out how to encode one number, but it wont work the same way with five numbers. 
 Answers (Total-7): #0 codeList = ["||:::", ":::||", "::|:|", "::||:", ":|::|",
 ":|:|:", ":||::", "|:::|", "|::|:", "|:|::" ]
barcode = "".join(codeList[int(digit)] for digit in str(zipcode))
 
 #1 Perhaps use a dictionary: 

 barcode = {'0':"||:::",
   '1':":::||",
   '2':"::|:|",
   '3':"::||:",
   '4':":|::|",
   '5':":|:|:",
   '6':":||::",
   '7':"|:::|",
   '8':"|::|:",
   '9':"|:|::",
   }

def encodeFive(zipcode):
 return ''.join(barcode[n] for n in str(zipcode))

print(encodeFive(72353))
# |:::|::|:|::||::|:|:::||:
 

 PS. It is better not to name a variable zip , since doing so overrides the builtin function zip . And similarly, it is better to avoid naming a variable code , since code is a module in the standard library. 
 #2 You're just adding i (the character in digits ) to the string where I think you want to be adding codeList[int(i)] . 

 The code would probably be much simpler by just using a dict for lookups. 
 #3 I find it easier to use split() to create lists of strings: 

 codes = "||::: :::|| ::|:| ::||: :|::| :|:|: :||:: |:::| |::|: |:|::".split()

def zipencode(numstr): 
 return ''.join(codes[int(x)] for x in str(numstr))

print zipencode("32345") 
 
 #4 I don't know what language you are usingm so I made an example in C#: 

 int zip = 72353;

string[] codeList = {
 "||:::", ":::||", "::|:|", "::||:", ":|::|",
 ":|:|:", ":||::", "|:::|", "|::|:", "|:|::"
};
string code = String.Empty;
while (zip &gt; 0) {
 code = codeList[zip % 10] + code;
 zip /= 10;
}
return code;
 

 Note: Instead of converting the zip code to a string, and the convert each character back to a number, I calculated the digits numerically. 

 Just for fun, here's a one-liner: 

 return String.Concat(zip.ToString().Select(c =&gt; "||::::::||::|:|::||::|::|:|:|::||::|:::||::|:|:|::".Substring(((c-'0') % 10) * 5, 5)).ToArray());
 
 #5 This is made in python. 

 number = ["||:::",
 ":::||",
 "::|:|",
 "::||:",
 ":|::|",
 ":|:|:",
 ":||::",
 "|:::|",
 "|::|:",
 "|:|::"
 ]
def encode(num):
 return ''.join(map(lambda x: number[int(x)], str(num)))

print encode(32345)
 
 #6 It appears you're trying to generate a "postnet" barcode. Note that the five-digit ZIP postnet barcodes were obsoleted by ZIP+4 postnet barcodes, which were obsoleted by ZIP+4+2 delivery point postnet barcodes, all of which are supposed to include a checksum digit and leading and ending framing bars. In any case, all of those forms are being obsoleted by the new "intelligent mail" 4-state barcodes, which require a lot of computational code to generate and no longer rely on straight digit-to-bars mappings. Search USPS.COM for more details.