Question (ID-156230): Python Dependency Injection Framework Is there a framework equivalent to Guice ( http://code.google.com/p/google-guice ) for Python? 
 Answers (Total-8): #0 Spring Python is an offshoot of the Java-based Spring Framework and Spring Security, targeted for Python. This project currently contains the following features: 

 
 Inversion Of Control (dependency injection) - use either classic XML, or the python @Object decorator (similar to the Spring JavaConfig subproject) to wire things together. While the @Object format isn't identical to the Guice style (centralized wiring vs. wiring information in each class), it is a valuable way to wire your python app. 
 Aspect-oriented Programming - apply interceptors in a horizontal programming paradigm (instead of vertical OOP inheritance) for things like transactions, security, and caching. 
 DatabaseTemplate - Reading from the database requires a monotonous cycle of opening cursors, reading rows, and closing cursors, along with exception handlers. With this template class, all you need is the SQL query and row-handling function. Spring Python does the rest. 
 Database Transactions - Wrapping multiple database calls with transactions can make your code hard to read. This module provides multiple ways to define transactions without making things complicated. 
 Security - Plugin security interceptors to lock down access to your methods, utilizing both authentication and domain authorization. 
 Remoting - It is easy to convert your local application into a distributed one. If you have already built your client and server pieces using the IoC container, then going from local to distributed is just a configuration change. 
 Samples - to help demonstrate various features of Spring Python, some sample applications have been created:
 
 PetClinic - Spring Framework's sample web app has been rebuilt from the ground up using python web containers including: CherryPy . Go check it out for an example of how to use this framework. (NOTE: Other python web frameworks will be added to this list in the future). 
 Spring Wiki - Wikis are powerful ways to store and manage content, so we created a simple one as a demo! 
 Spring Bot - Use Spring Python to build a tiny bot to manage the IRC channel of your open source project. 
 
 
 #1 As an alternative to monkeypatching, I like DI. A nascent project such as http://code.google.com/p/snake-guice/ may fit the bill. 

 Or see the blog post Dependency Injection in Python by Dennis Kempin (Aug '08). 
 #2 Besides that: 

 
 Zope component architekture 
 pyContainer 
 
 #3 I haven't used it, but the Spring Python framework is based on Spring and implements Inversion of Control . 

 There also appears to be a Guice in Python project: snake-guice 
 #4 If you just want to do dependency injection in Python, you don't need a framework. Have a look at Dependency Injection the Python Way . It's really quick and easy, and only c. 50 lines of code. 
 #5 There is a somewhat Guicey python-inject project. It's quite active, and a LOT less code then Spring-python, but then again, I haven't found a reason to use it yet. 
 #6 If you prefer a really tiny solution there's a little function, it is just a dependency setter. 

 https://github.com/liuggio/Ultra-Lightweight-Dependency-Injector-Python 
 #7 Here is a small example for a dependency injection container that does constructor injection based on the constructor argument names: 

 http://code.activestate.com/recipes/576609-non-invasive-dependency-injection/