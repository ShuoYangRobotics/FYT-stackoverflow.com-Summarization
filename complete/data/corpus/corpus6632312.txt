Question (ID-6632312): All but the last N elements of iterator in Python What is the best way to get all but the last N elements of an iterator in Python? Here is an example of it in theoretical action: 

 &gt;&gt;&gt; list(all_but_the_last_n(range(10), 0))
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; list(all_but_the_last_n(range(10), 2))
[0, 1, 2, 3, 4, 5, 6, 7]
 
 Answers (Total-6): #0 Use a collections.deque . Push N items from the source on the first invocation. On each subsequent invocation, pop an item out, push an item in from the source, and yield the popped item. 
 #1 Just for the fun of it, here's a variation on Ignacio's solution that doesn't require a deque. 

 &gt;&gt;&gt; def truncate(it, n):
...  cache = [next(it) for i in range(n)]
...  index = 0
...  for val in it:
...   val, cache[index] = cache[index], val
...   index = (index + 1) % n
...   yield val
 

 I wasn't especially concerned with speed when I wrote the above... but perhaps this would be a tad faster: 

 def truncate(it, n):
 cache = [next(it) for i in range(n)]
 index = 0
 for val in it:
  yield cache[index]
  cache[index] = val
  index = (index + 1) % n
 
 #2 Based on Ignacio Vazquez-Abrams's description: 

 from collections import deque

def all_but_the_last_n(iterable, count):
 q = deque()
 i = iter(iterable)
 for n in range(count):
  q.append(i.next())
 for item in i:
  q.append(item)
  yield q.popleft()
 

 I wondered whether it was better to use the deque right to left (append, popleft) or left to right (appendleft, pop). So i timed it with python 2.5.2 and found that rtl was 3.59 usec while ltr was 3.53 usec . The difference of 0.06 usec is not significant. the test was to append a single item and pop a single item. 
 #3 l = [0, 3, 5, 5, 2]
last = l[0:-2] # Where 2 is N-1 (I think -1, you might want to check that
 
 #4 Using Ignacio's solution. 

 import collections
def all_but_the_last_n(iterable, n):
 it = iter(iterable)
 fifo = collections.deque()
 for _, i in zip(range(n), it):
  fifo.append(i)
 for i in it:
  fifo.append(i)
  yield fifo.popleft()

print(list(all_but_the_last_n(range(10), 3)))
print(list(all_but_the_last_n('abcdefghijkl', 3)))
 

 It is unfortunate that collections does not have a circular buffer. This would be more efficient from a cache miss standpoint with one. 
 #5 elements[:-N] 

 or list(elements)[:-N] 

 {Edit} 

 And iterator based solution: 

 from itertools import islice
elements = xrange(10)
N = 2
crop = islice(elements, len(elements)-N)
 

 if elements is an iterator, you may not have len ...