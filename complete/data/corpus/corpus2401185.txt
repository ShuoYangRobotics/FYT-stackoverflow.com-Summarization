Question (ID-2401185): Python Vector Class I'm coming from a C# background where this stuff is super easyâ€”trying to translate into Python for Maya. 

 There's gotta' be a better way to do this. Basically, I'm looking to create a Vector class that will simply have x, y and z coordinates, but it would be ideal if this class returned a tuple with all 3 coordinates and if you could edit the values of this tuple through x, y and z properties, somehow. 

 This is what I have so far, but there must be a better way to do this than using an exec statement, right? I hate using exec statements. 

 class Vector(object):
 '''Creates a Maya vector/triple, having x, y and z coordinates as float values'''

 def __init__(self, x=0, y=0, z=0):
  self.x, self.y, self.z = x, y, z

 def attrsetter(attr):
  def set_float(self, value):
   setattr(self, attr, float(value))
  return set_float

 for xyz in 'xyz':
  exec("%s = property(fget=attrgetter('_%s'), fset=attrsetter('_%s'))" % (xyz, xyz, xyz))
 
 Answers (Total-7): #0 If I understand your question correctly, you want something like this ? 

 class Vector(object):

 def __init__(self, x=0, y=0, z=0):
  self._x, self._y, self._z = x, y, z

 def setx(self, x): self._x = float(x)
 def sety(self, y): self._y = float(y)  
 def setz(self, z): self._z = float(z)  

 x = property(lambda self: float(self._x), setx)
 y = property(lambda self: float(self._y), sety)
 z = property(lambda self: float(self._z), setz)
 

 This uses _x, _y and _z to (internally) store the incoming values and exposes them via the use of property (with getters, setters); I abbreviated the 'getters' using a lambda statement. 

 Note that in Python it would be very common to manipulate these values (say: x, y, z) on the object itself directly (I guess you want ensure the explicit float casts?) 
 #1 I may be misreading your question, but I think what you want is already made for you in collections.namedtuple : 

 &gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; Vector = namedtuple('Vector', 'x y z')
&gt;&gt;&gt; v = Vector(0, 0, 0)
&gt;&gt;&gt; v
Vector(x=0, y=0, z=0)
&gt;&gt;&gt; v.x = 10
&gt;&gt;&gt; v
Vector(x=10, y=0, z=0)
&gt;&gt;&gt; tuple(v)
(10, 0, 0)
&gt;&gt;&gt; v._asdict()
{'x': 10, 'y': 0, 'z': 0}
&gt;&gt;&gt;
 

 Does that look about right? 

 For shame, I forgot that tuples are immutable. Curse me for not upgrading from Python 2.5 so I could have actually tested the code I wrote. Anyway, you may want something quite similar to collections.namedtuple , except more like a hypothetical namedlist . Or you may want to discard that idea entirely and use something different. The point is that this answer was wrong, and I would delete it, except I feel obligated to the people who upvoted me to correct my mistake. 
 #2 Edit: I've modified the code with my answer a bit more from @unutbu's original to simplify it and make what is being done clearer. In the latest version, the @staticmethod 's have been eliminated altogether and replaced with nested one-liners. The outer function and nested class have been renamed AutoFloatProperties and _AutoFloatProperties to reflect their specialized behavior of converting and storing the values assigned as floats. Despite all this, @unutbu's own revised answer using a class decorator instead of a metaclass is a slightly simpler solution, although the internals and usage are very similar. 

 def AutoFloatProperties(*props):
 '''metaclass'''
 class _AutoFloatProperties(type):
  # Inspired by autoprop (http://www.python.org/download/releases/2.2.3/descrintro)
  def __init__(cls, name, bases, cdict):
   super(_AutoFloatProperties, cls).__init__(name, bases, cdict)
   for attr in props:
    def fget(self, _attr='_'+attr): return getattr(self, _attr)
    def fset(self, value, _attr='_'+attr): setattr(self, _attr, float(value))
    setattr(cls, attr, property(fget, fset))
 return _AutoFloatProperties

class Vector(object):
 '''Creates a Maya vector/triple, having x, y and z coordinates as float values'''
 __metaclass__ = AutoFloatProperties('x','y','z')
 def __init__(self, x=0, y=0, z=0):
  self.x, self.y, self.z = x, y, z # values converted to float via properties

if __name__=='__main__':
 v=Vector(1,2,3)
 print(v.x)
 # 1.0
 v.x=4
 print(v.x)
 # 4.0
 
 #3 Edit: My previous answer tried to make a generalized AutoProperties metaclass which I hoped could be of general use. As @martineau's answer shows a solution specialized to the Vector class can make things simpler. 

 Here's another idea along those lines (specialized simplicity over generalized complexity). It uses a class decorator (which I think is slightly simpler to understand than a metaclass) and @martineau's idea of simplifying the getters and setters with default values: 

 def AutoProperties(*props):
 def _AutoProperties(cls):
  for attr in props:
   def getter(self,_attr='_'+attr):
    return getattr(self, _attr)
   def setter(self, value, _attr='_'+attr):
    setattr(self, _attr, float(value))
   setattr(cls,attr,property(getter,setter))
  return cls
 return _AutoProperties

@AutoProperties('x','y','z')
class Vector(object):
 '''Creates a Maya vector/triple, having x, y and z coordinates as float values'''
 def __init__(self, x=0, y=0, z=0):
  self._x, self._y, self._z = map(float,(x, y, z))
 

 Original answer: 
Here is a way to avoid repeating boiler-plate code when defining many similar properties. 

 I've tried to make the solution reasonably general, so it might be of use to people in other situations beside this particular one. 

 To use it you need to do 2 things:
 
 Put 

  __metaclass__=AutoProperties(('x','y','z'))
 

 at the beginning of the definition of your class. You can list (as strings) as many attributes (e.g. x , y , z ) as you wish. AutoProperties will turn them into properties. 

 Your class, e.g. Vector , needs to define staticmethods _auto_setter and _auto_getter . They take one argument, the attribute name as a string, and return the setter or getter function, respectively, for that attribute.
 

 The idea of using metaclasses to automatically set up properties comes from Guido Rossum's essay on properties and metaclasses . There he defines an autoprop metaclass similar to what I use below. The main difference is that AutoProperties expects the user to define getter and setter factories instead of manually defined getters and setters. 

 def AutoProperties(props):
 class _AutoProperties(type):
  # Inspired by autoprop (http://www.python.org/download/releases/2.2.3/descrintro/)
  def __init__(cls, name, bases, cdict):
   super(_AutoProperties, cls).__init__(name, bases, cdict)
   for attr in props:
    fget=cls._auto_getter(attr)
    fset=cls._auto_setter(attr)
    setattr(cls,attr,property(fget,fset))
 return _AutoProperties

class Vector(object):
 '''Creates a Maya vector/triple, having x, y and z coordinates as float values'''
 __metaclass__=AutoProperties(('x','y','z'))
 def __init__(self, x=0, y=0, z=0):
  # I assume you want the initial values to be converted to floats too.
  self._x, self._y, self._z = map(float,(x, y, z))
 @staticmethod
 def _auto_setter(attr):
  def set_float(self, value):
   setattr(self, '_'+attr, float(value))
  return set_float
 @staticmethod 
 def _auto_getter(attr):
  def get_float(self):
   return getattr(self, '_'+attr)
  return get_float

if __name__=='__main__':
 v=Vector(1,2,3)
 print(v.x)
 # 1.0
 v.x=4
 print(v.x)
 # 4.0
 
 #4 I don't really understand the question. You have a Vector which describes a point in space with 3 coordinates. Your implementation already allows you to change the values: 

 v = Vector()
v.x = 10 # now x is 10
 

 why should it return a tuple? What would you use it for? That said, a tuple is immutable so can't be modified, but you could use a list. Changing the numbers in that list will not reflect in Vector though. 

 If you do need to ensure the type is a float, consider property setters : 

 class C(object):
 def __init__(self):
  self._x = None

 @property
 def x(self):
  """I'm the 'x' property."""
  return self._x

 @x.setter
 def x(self, value):
  print "x set to ", value
  self._x = value

c = C()
c.x = 10

print c.x, c._x
 
 #5 Is this what you're looking for? 

 class vector(object):
 def __init__(self, x,y,z):
  self.x = x
  self.y = y
  self.z = z

 # overload []
 def __getitem__(self, index):
  data = [self.x,self.y,self.z]
  return data[index]

 # overload set []
 def __setitem__(self, key, item):
  if (key == 0):
   self.x = item
  elif (key == 1):
   self.y = item
  elif (key == 2):
   self.z = item
  #TODO: Default should throw excetion
 

 This is the most naive way of doing it. I'm sure some Python guru will come along sneer at my code and replace it with a one-liner. 

 Examples of this code: 

 v = vector(1,2,3)
v[1] = 4
v[2] = 5

v.x = 1
v.z= 66
 
 #6 I understand that 

 
 you want to have a filter that transform the input values into floats 
 you don't want to write the property three times 
 

 You could use the following code: 

 class Vector(object):
 def __init__(self, x,y,z):
   self._x = x

def mangle(name):
return '_'+name

for name in ['x','y','z']:
 def set_xyz(self, value):
  self.__setattr__(mangle(name), float(value))
 def get_xyz(self):
  return self.__getattribute__(mangle(name))
 prop = property(get_xyz, set_xyz)
 setattr(Vector,name, prop)