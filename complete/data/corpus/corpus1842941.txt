Question (ID-1842941): Translating python dictionary to C++ I have python code that contains the following code. 

 d = {}

d[(0,0)] = 0
d[(1,2)] = 1
d[(2,1)] = 2
d[(2,3)] = 3
d[(3,2)] = 4

for (i,j) in d:
 print d[(i,j)], d[(j,i)]
 

 Unfortunately looping over all the keys in python isn't really fast enough for my purpose, and I would like to translate this code to C++. What is the best C++ data structure to use for a python dictionary that has tuples as its keys? What would be the C++ equivalent of the above code? 

 I looked at sparse matrices in the boost library, but couldn't find an easy way to loop only over the non-zero elements. 
 Answers (Total-6): #0 A dictionary would be a std::map in c++, and a tuple with two elements would be a std::pair. 

 The python code provided would translate to: 

 #include &lt;iostream&gt;
#include &lt;map&gt;

typedef std::map&lt;std::pair&lt;int, int&gt;, int&gt; Dict;
typedef Dict::const_iterator It;

int main()
{
 Dict d;

 d[std::make_pair(0, 0)] = 0;
 d[std::make_pair(1, 2)] = 1;
 d[std::make_pair(2, 1)] = 2;
 d[std::make_pair(2, 3)] = 3;
 d[std::make_pair(3, 2)] = 4;

 for (It it(d.begin()); it != d.end(); ++it)
 {
  int i(it-&gt;first.first);
  int j(it-&gt;first.second);
  std::cout &lt;&lt;it-&gt;second &lt;&lt;' '
    &lt;&lt;d[std::make_pair(j, i)] &lt;&lt;'\n';
 }
}
 
 #1 The type is 

 std::map&lt; std::pair&lt;int,int&gt;, int&gt;
 

 The code to add entries to map is like here: 

 typedef std::map&lt; std::pair&lt;int,int&gt;, int&gt; container;

container m;

m[ make_pair(1,2) ] = 3; //...

for(container::iterator i = m.begin(); i != m.end(); ++i){
 std::cout &lt;&lt; i.second &lt;&lt; ' '; 
 // not really sure how to translate [i,j] [j,i] idiom here easily
}
 
 #2 std::map or more likely std::tr1::unordered_map / boost::unordered_map (aka hash_map ) is what you want. 

 Also, as kriss said, Boost.Python is a good idea to look at here. It provides a C++ version of python's dict class already, so if you're doing cross-language stuff, it might be useful. 
 #3 Have a look at Boost.python . It's for interaction between python and C++ (basically building python libs using C++, but also for embedding python in C++ programs). Most pythons data structures and their C++ equivalents are described (didn't checked for the one you want). 
 #4 Do you want to call an optimized C++ routine via Python? If so, read on: 

 Often times I use PyYaml when dealing with dictionaries in Python. Perhaps you could link in something like LibYAML or yamlcpp to: 

 
 Translate a Python dictionary into a YAML string 
 Use Python to call a C++ function wrapped using something like SWIG , taking the YAML string as a parameter. 
 Use a C++ library to parse the YAML &amp; obtain a std::map object 
 Operate on std::map object 
 

 Warning: I have never tried this, but using everyone's favorite search engine on "yaml std::map" yields lots of interesting links 
 #5 As a direct answer to your question (for the python part look at my other answer). You can forget the tuple part if you want. You can use any mapping type key/value (hash, etc.) in C++, you just have to find a unique key function. In some cases that can be easy. For instance if you two integers are integers between 1 and 65536 you just could use a 32 bits integer with each 16 bits part one of the keys. A simple shift and an 'or' or + to combine the two values would do the trick and it's very efficient.