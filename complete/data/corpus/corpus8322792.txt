Question (ID-8322792): Adding a string to a list &gt;&gt;&gt; b = []
&gt;&gt;&gt; c = '1234'
&gt;&gt;&gt; b += c
&gt;&gt;&gt; b
['1', '2', '3', '4']
&gt;&gt;&gt; 
 

 What is happening here ? This should not work, right ? or am I missing something obvious? 

 &gt;&gt;&gt; b = []
&gt;&gt;&gt; c = '1234'
&gt;&gt;&gt; b + c
Traceback (most recent call last):
 File "&lt;pyshell#7&gt;", line 1, in &lt;module&gt;
 b + c
TypeError: can only concatenate list (not "str") to list
&gt;&gt;&gt; 
 

 Then a += b is not always equivalent to a = a + b ? 
 Answers (Total-7): #0 Strings are iterable: the elements are the string's characters. When you add an iterable to a list, the iterable's elements get appended to the list. 

 Either of the following will do what you're expecting (i.e. append the string, not extend the list with the string's characters): 

 b += [c]
 

 or 

 b.append(c)
 
 #1 The += operator extends a list instead of appending to it: 

 &gt;&gt;&gt; b = []
&gt;&gt;&gt; c = "1234"
&gt;&gt;&gt; b.append(c)
&gt;&gt;&gt; b
['1234']
&gt;&gt;&gt; b.extend(c)
&gt;&gt;&gt; b
['1234', '1', '2', '3', '4']
&gt;&gt;&gt; b += c
&gt;&gt;&gt; b
['1234', '1', '2', '3', '4', '1', '2', '3', '4']
&gt;&gt;&gt; b += [c]
&gt;&gt;&gt; b
['1234', '1', '2', '3', '4', '1', '2', '3', '4', '1234']
 
 #2 This is an answer not to the original question (which I think has been adequately answered), but to the numerous questions that have been asked in the comments about the semantics of augmented assignment ( += and similar operations). 

 In a nutshell: Augmented assignment works differently for mutable types than for immutable ones. 

 str , tuple , and the numeric types, among others, are immutable. The contents of a tuple cannot be changed once it has been created, so you get this behavior: 

 &gt;&gt;&gt; a = (1, 2)
&gt;&gt;&gt; b = a
&gt;&gt;&gt; a += (3, 4)
&gt;&gt;&gt; a
(1, 2, 3, 4)
&gt;&gt;&gt; b
(1, 2)
 

 str has the same semantics. Basically, a += b is equivalent to a = a + b if a is immutable. 

 Most other types, including list , are mutable. A list's contents can be changed in place, and augmented assignment does exactly that. Hence: 

 &gt;&gt;&gt; a = [1, 2]
&gt;&gt;&gt; b = a
&gt;&gt;&gt; a += [3, 4]
&gt;&gt;&gt; a
[1, 2, 3, 4]
&gt;&gt;&gt; b
[1, 2, 3, 4]
 

 Whereas if the third line were replaced with a = a + [3, 4] , a new list would be created and b would be [1, 2] . 

 For a user-defined class, the semantics depend on how it was implemented, but this is how it's supposed to be done per PEP 203. 
 #3 A string is a sequence of characters. The list operation += takes any sequence and appends each of the sequence's elements to the list. 

 (Actually += takes any iterable.) 
 #4 += is syntactic sugar for extend, but + is just list concatenation. If you extend, you'll iterate over the argument, which in this case is a string. But you can't concatenate a string to a list, hence + fails. 
 #5 What did you expect? If you want to add c as string you must to do: 

 b.append(c)
 

 Cheers! 
 #6 In essence, the += operator on the list will retrieve c's iterator, which will yield the individual characters in order. If you intended to add the actual string to the list, yielding the result ['1234'], you can use b.append('1234') instead.