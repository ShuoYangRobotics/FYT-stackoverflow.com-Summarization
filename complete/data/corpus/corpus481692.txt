Question (ID-481692): Can a lambda function call itself recursively in Python? A regular function can contain a call to itself in its definition, no problem. I can't figure out how to do it with a lambda function though for the simple reason that the lambda function has no name to refer back to. Is there a way to do it? How? 
 Answers (Total-6): #0 The only way I can think of to do this amounts to giving the function a name: 

 fact = lambda x: 1 if x == 0 else x * fact(x-1)
 

 or alternately, for earlier versions of python: 

 fact = lambda x: x == 0 and 1 or x * fact(x-1)
 

 Update : using the ideas from the other answers, I was able to wedge the factorial function into a single unnamed lambda: 

 &gt;&gt;&gt; map(lambda n: (lambda f, *a: f(f, *a))(lambda rec, n: 1 if n == 0 else n*rec(rec, n-1), n), range(10))
[1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880]
 

 So it's possible, but not really recommended! 
 #1 You can't directly do it, because it has no name. But with a helper function like the Y-combinator Lemmy pointed to, you can create recursion by passing the function as a parameter to itself (as strange as that sounds): 

 # helper function
def recursive(f, *p, **kw):
 return f(f, *p, **kw)

def fib(n):
 # The rec parameter will be the lambda function itself
 return recursive((lambda rec, n: rec(rec, n-1) + rec(rec, n-2) if n&gt;1 else 1), n)

# using map since we already started to do black functional programming magic
print map(fib, range(10))
 

 This prints the first ten Fibonacci numbers: [1, 1, 2, 3, 5, 8, 13, 21, 34, 55] , 
 #2 I have never used Python, but this is probably what you are looking for. 
 #3 Yes. I have two ways to do it, and one was already covered. This is my preferred way. 

 (lambda v: (lambda n: n * __import__('types').FunctionType(
  __import__('inspect').stack()[0][0].f_code, 
  dict(__import__=__import__, dict=dict)
 )(n - 1) if n &gt; 1 else 1)(v))(5)
 
 #4 If you were truly masochistic, you might be able to do it using C extensions, but to echo Greg (hi Greg!), this exceeds the capability of a lambda (unnamed, anonymous) functon. 

 No. (for most values of no). 
 #5 without reduce, map, named lambdas or python internals: 

 (lambda a:lambda v:a(a,v))(lambda s,x:1 if x==0 else x*s(s,x-1))(10)