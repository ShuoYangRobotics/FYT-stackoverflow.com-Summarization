Question (ID-4484255): Python print() output discrepancy I'm messing around with python, following this tutorial: 

 http://en.wikibooks.org/wiki/Non-Programmer%27s_Tutorial_for_Python_3/Hello,_World 

 According to it, my output for the following code: 

 print("Single String")
print("Concat", "String")
 

 Should look like this: 

 Single String
Concat String
 

 But it looks like this: 

 Single String
('Concat', 'String')
 

 Why is this? I'm on OSX with Python 2.6. 

 EDIT: I just realized the guide is for 3.0, and I have 2.6. Is that causing the issue? What is the quickest way to upgrade my Python install? 

 EDIT 2: An upgrade fixed it :) Accepted answer explains the differences. 
 Answers (Total-6): #0 print("Concat", "String")
 

 This is a tuple . When you put the , it becomes a tuple and hence Python outputs it the same way. 

 &gt;&gt;&gt; t = ('Let', 'Us', 'Test')
&gt;&gt;&gt; type(t)
&lt;type 'tuple'&gt;
 

 A tuple consists of a number of values separated by commas. 
 #1 Not an answer to the OP's original question, which I think sukhbir answered quite well, but to the follow up question. 

 I believe the quickest way to upgrade would be to go to the Python website and download v3. 
 #2 If you are using Python 2.x you can just use 

 print "Single", "String"
 

 Python 3.x changes the way print works, previously it was a statement and now it is a function. 
 #3 The reason is that you are running a Python 3 tutorial with Python 2. 
 #4 To get the behaviour you want, you need to print a string representation of the tuple. You can get this by using the join method on strings: 

 print ' '.join(('a', 'b'))
 

 The reason the behaviour is not as expected is that in Python 2, print is a keyword. In Python 3, it has been replaced by a function (also print ), so the latter syntax calls the function instead of printing a tuple. You can replicate the behaviour you have see in Python 3 with 

 print(('a', 'b'))
 

 One set of parentheses for the function call, and one for the tuple. 
 #5 In Python 2.6 you can also say 

 from __future__ import print_statement
 

 to get the 3.x syntax.