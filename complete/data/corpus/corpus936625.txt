Question (ID-936625): Creating connection between two computers in python The question: How do I create a python application that can connect and send packets over the internet to another computer running the same application? Is there any existing code/library I could use? 

 The background: I am pretty new to programming (HS senior). I've created a lot of simple things in python but I've recently decided to start on a bigger project. I'm considering creating a Magic: the Gathering booster draft simulator, but I'm not sure if it is feasible given my skill set so I'm asking around before I get started. The application would need to send data between computers about which cards are being picked/passed. 

 Thanks! 
 Answers (Total-6): #0 Twisted is a python event-driven networking engine licensed under MIT. Means that a single machine can communicate with one or more other machines, while doing other things between data being received and sent, all asynchronously, and running a in a single thread/process. 

 It supports many protocols out of the box, so you can just as well using an existing one. That's better because you get support for the protocol from 3rd party software (i.e. using HTTP for communication means middleware software that uses HTTP will be compatible: proxies etc.) 

 It also makes easy to create your own communication protocol, if that's what you want. 

 The documentation is filled with examples. 
 #1 The standard library includes SocketServer (documented here ), which might do what you want. 

 However I wonder if a better solution might be to use a message queue. Lots of good implementations already exist, including Python interfaces. I've used RabbitMQ before. The idea is that the computers both subscribe to the queue, and can either post or listen for events. 
 #2 A great place to start looking is the Python Standard Library . In particular there are a few sections that will be relevant: 

 
 18. Interprocess Communication and Networking 
 19. Internet Data Handling 
 21. Internet Protocols and Support 
 

 Since you mentioned that you have no experience with this, I'd suggest starting with a HTTP based implementation. The HTTP protocol is fairly simple and easy to work with. In addition, there are nice frameworks to support this operation, such as webpy for the server and HTTPLib from the standard library for the client. 

 If you really want to dive into networking, then a socket based implementation might be educational. This will teach you the underlying concepts that are used in lots of networking code while resulting in an interface that is similar to a file stream. 
 #3 Communication will take place with sockets, one way or another. Just a question of whether you use existing higher-level libraries, or roll your own. 

 If you're doing this as a learning experience, probably want to start as low-level as you can, to see the real nuts and bolts. Which means you probably want to start with a SocketServer , using a TCP connection (TCP is basically guaranteed delivery of data; UDP is not). 

 Google for some simple example code. Setting one up is very easy. But you will have to define all the details of your communications protocol: which end sends when and what, which end listens and when, what exactly the listener will expect, does it reply to confirm receipt, etc. 
 #4 It's also worth looking at Kamaelia for this sort of thing - it's original usecase was network systems, and makes building such things relatively intuitive.
Some links: Overview of basic TCP system , Simple Chat server , Building a layered protocol , walk-through of how to evolve new components . Other extreme: P2P radio system: source , peer . 

 If it makes any difference, we've tested whether the system is accessible to novices through involvement in google summer of code 3 years in a row, actively taking on both experienced and inexperienced developers. All of them managed to build useful systems. 

 Essentially, if you've ever played with unix pipelines the ideas should be familiar. 

 Caveat: I wrote major chunks of Kamaelia :-) 

 If you want to learn how to do these things though, playing with a few different approaches makes sense, and you should definitely check out Twisted (the standard answer to this question), Pyro &amp; the standard library tools. Each has a different approach, and learning them will definitely benefit you! 

 However, like nosklo, I would recommend against using the socket library directly and use a library instead - simply because it is much much harder to get sockets programming correct than people tend to realise. 
 #5 Also, check out Pyro (Python remoting objects). Se this answer for more details. 

 Pyro basically allows you to publish Python object instances as services that can be called remotely. Pyro is probably the easiest way to implement Python-to-python process communication.