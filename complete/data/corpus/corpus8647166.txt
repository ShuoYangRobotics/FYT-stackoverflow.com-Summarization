Question (ID-8647166): how to replace specific word in a sentence with python I have a sentence for example "hello this is hello stackoverflow hello". What I need to do is keep the first hello but remove other "hello"s in the sentence. How would I go about doing this? 
 Answers (Total-7): #0 parts = old.split("hello")
parts[1:1] = "hello"
new = "".join(parts)
 

 Seems like there should be a better way... 
 #1 Must be faster than Ned's one, but the price is readability: 

 &gt;&gt;&gt; idx = s.find('hello') + len('hello')
&gt;&gt;&gt; s[:idx] + s[idx:].replace('hello', '')
'hello this is stackoverflow '
 
 #2 &gt;&gt;&gt; s = 'hello this is hello stackoverflow hello'
&gt;&gt;&gt; head, sep, tail = s.partition('hello')
&gt;&gt;&gt; head + sep + tail.replace('hello', '')
'hello this is stackoverflow '
 
 #3 Very bad way: 

 s = "hello this is hello stackoverflow hello"
s = s.replace("hello", "world").replace("world", "hello", 1)
 

 It will replace all the hello by world , then replace only the first world by hello 
 #4 s = "hello this is hello stackoverflow hello"
t = "hello"

i = s.index(t) + len(t) + 1
s = s[:i] + s[i:].replace(t, "")

print s # hello this is stackoverflow 
 
 #5 Firstly, everyone will see this as a matching pattern conundrum, so the question is why does hello repeat? 

 If the first hello is assumed then a simple filtering of the string can fix the problem 

 s = 'hello this is hello stackoverflow hello'
l = s.split(' ')
"hello %s" % " ".join(filter (lambda a: a != 'hello', l))
'hello this is stackoverflow'
 

 Or: 

 import re
s = 'hello this is hello stackoverflow hello'
re.sub('\shello\s?', ' ', s).strip()
'hello this is stackoverflow'
 
 #6 a = "hello this is hello stackoverflow hello"
a[::-1].replace('hello'[::-1],'',1)[::-1]
'hello this is hello stackoverflow '
 

 Basically, reverse the string and replace the first occurrence and reverse it again.