Question (ID-2217488): Age from birthdate in python How can I find an age in python from today's date and a persons birthdate? The birthdate is a from a DateField in a Django model. 
 Answers (Total-6): #0 def calculate_age(born):
 today = date.today()
 try: # raised when birth date is February 29 and the current year is not a leap year
  birthday = born.replace(year=today.year)
 except ValueError:
  birthday = born.replace(year=today.year, day=born.day-1)
 if birthday &gt; today:
  return today.year - born.year - 1
 else:
  return today.year - born.year
 
 #1 from datetime import date
days_in_year = 365.25

age = int((date.today() - birth_date).days/days_in_year)
 
 #2 Unfortunately, you cannot just use timedelata as the largest unit it uses is day and leap years will render you calculations invalid. Therefore, let's find number of years then adjust by one if the last year isn't full: 

 from datetime import date
birth_date = date(1980, 5, 26)
years = date.today().year - birth_date.year
if (datetime.now() - birth_date.replace(year=datetime.now().year)).days &gt;= 0:
 age = years
else:
 age = years - 1
 

 Upd: 

 This solution really causes an exception when Feb, 29 comes into play. Here's correct check: 

 from datetime import date
birth_date = date(1980, 5, 26)
today = date.today()
years = today.year - birth_date.year
if all((x &gt;= y) for x,y in zip(today.timetuple(), birth_date.timetuple()):
 age = years
else:
 age = years - 1
 

 Upd2: 

 Calling multiple calls to now() a performance hit is ridiculous, it does not matter in all but extremely special cases. The real reason to use a variable is the risk of data incosistency. 
 #3 The classic gotcha in this scenario is what to do with people born on the 29th day of February. Example: you need to be aged 18 to vote, drive a car, buy alcohol, etc ... if you are born on 2004-02-29, what is the first day that you are permitted to do such things: 2022-02-28, or 2022-03-01? AFAICT, mostly the first, but a few killjoys might say the latter. 

 Here's code that caters for the 0.068% (approx) of the population born on that day: 

 def age_in_years(from_date, to_date, leap_day_anniversary_Feb28=True):
 age = to_date.year - from_date.year
 try:
  anniversary = from_date.replace(year=to_date.year)
 except ValueError:
  assert from_date.day == 29 and from_date.month == 2
  if leap_day_anniversary_Feb28:
   anniversary = datetime.date(to_date.year, 2, 28)
  else:
   anniversary = datetime.date(to_date.year, 3, 1)
 if to_date &lt; anniversary:
  age -= 1
 return age

if __name__ == "__main__":
 import datetime

 tests = """

 2004 2 28 2010 2 27 5 1
 2004 2 28 2010 2 28 6 1
 2004 2 28 2010 3 1 6 1

 2004 2 29 2010 2 27 5 1
 2004 2 29 2010 2 28 6 1
 2004 2 29 2010 3 1 6 1

 2004 2 29 2012 2 27 7 1
 2004 2 29 2012 2 28 7 1
 2004 2 29 2012 2 29 8 1
 2004 2 29 2012 3 1 8 1

 2004 2 28 2010 2 27 5 0
 2004 2 28 2010 2 28 6 0
 2004 2 28 2010 3 1 6 0

 2004 2 29 2010 2 27 5 0
 2004 2 29 2010 2 28 5 0
 2004 2 29 2010 3 1 6 0

 2004 2 29 2012 2 27 7 0
 2004 2 29 2012 2 28 7 0
 2004 2 29 2012 2 29 8 0
 2004 2 29 2012 3 1 8 0

 """

 for line in tests.splitlines():
  nums = [int(x) for x in line.split()]
  if not nums:
   print
   continue
  datea = datetime.date(*nums[0:3])
  dateb = datetime.date(*nums[3:6])
  expected, anniv = nums[6:8]
  age = age_in_years(datea, dateb, anniv)
  print datea, dateb, anniv, age, expected, age == expected
 

 Here's the output: 

 2004-02-28 2010-02-27 1 5 5 True
2004-02-28 2010-02-28 1 6 6 True
2004-02-28 2010-03-01 1 6 6 True

2004-02-29 2010-02-27 1 5 5 True
2004-02-29 2010-02-28 1 6 6 True
2004-02-29 2010-03-01 1 6 6 True

2004-02-29 2012-02-27 1 7 7 True
2004-02-29 2012-02-28 1 7 7 True
2004-02-29 2012-02-29 1 8 8 True
2004-02-29 2012-03-01 1 8 8 True

2004-02-28 2010-02-27 0 5 5 True
2004-02-28 2010-02-28 0 6 6 True
2004-02-28 2010-03-01 0 6 6 True

2004-02-29 2010-02-27 0 5 5 True
2004-02-29 2010-02-28 0 5 5 True
2004-02-29 2010-03-01 0 6 6 True

2004-02-29 2012-02-27 0 7 7 True
2004-02-29 2012-02-28 0 7 7 True
2004-02-29 2012-02-29 0 8 8 True
2004-02-29 2012-03-01 0 8 8 True
 
 #4 As I did not see the correct implementation, I recoded mine this way... 

  def age_in_years(from_date, to_date=datetime.date.today()):
 if (DEBUG):
 logger.debug("def age_in_years(from_date='%s', to_date='%s')" % (from_date, to_date))

 if (from_date&gt;to_date): # swap when the lower bound is not the lower bound
 logger.debug('Swapping dates ...')
 tmp = from_date
 from_date = to_date
 to_date = tmp

 age_delta = to_date.year - from_date.year
 month_delta = to_date.month - from_date.month
 day_delta = to_date.day - from_date.day

 if (DEBUG):
 logger.debug("Delta's are : %i / %i / %i " % (age_delta, month_delta, day_delta))

 if (month_delta&gt;0 or (month_delta==0 and day_delta&gt;=0)): 
 return age_delta 

 return (age_delta-1)
 

 Assumption of being "18" on the 28th of Feb when born on the 29th is just wrong.
Swapping the bounds can be left out ... it is just a personal convenience for my code :) 
 #5 import datetime 

 def age(date_of_birth):
 if date_of_birth &gt; datetime.date.today().replace(year = date_of_birth.year):
  return datetime.date.today().year - date_of_birth.year - 1
 else:
  return datetime.date.today().year - date_of_birth.year
 

 In your case: 

 import datetime

# your model
def age(self):
 if self.birthdate &gt; datetime.date.today().replace(year = self.birthdate.year):
  return datetime.date.today().year - self.birthdate.year - 1
 else:
  return datetime.date.today().year - self.birthdate.year