Question (ID-701429): Library/tool for drawing ternary/triangle plots I need to draw ternary/triangle plots representing mole fractions ( x , y , z ) of various substances/mixtures ( x + y + z = 1). Each plot represents iso-valued substances, e.g. substances which have the same melting point. The plots need to be drawn on the same triangle with different colors/symbols and it would be nice if I could also connect the dots. 

 I have looked at matplotlib, R and gnuplot, but they don't seem to be able to draw this kind of plot. The 3rd party ade4 package for R seems to be able to draw it, but I'm not sure if I can draw multiple plots on the same triangle. 

 I need something that runs under Linux or Windows. I'm open to any suggestions, including libraries for other languages, e.g. Perl, PHP, Ruby, C# and Java. 
 Answers (Total-7): #0 R has an external package called VCD which should do what you want. The documentation is very good (122 page manual distributed w/ the package); there's also a book by the same name, Visual Display of Quantitative Information , by the package's author (Michael Friendly). 

 To create ternary plots using vcd, just call 'ternaryplot()' and pass in an n x 3 matrix. To generate the diagram below, i just created some fake data to represent four different chemical mixtures, each comprised of varying fractions of three substances (x, y, z). I scaled the input (so x + y + z = 1) but the function will do it for you if you pass in a value for its 'scale' parameter (in fact, the default is 1, which i believe is what your question requires). I used different colors &amp; symbols to represent the four data points, but you can also just use a single color/symbol and label each point (via the 'id' argument). 

 
 #1 Created a very basic script for generating ternary (or more) plots. No gridlines or ticklines, but those wouldn't be too hard to add using the vectors in the "basis" array. 

 (Sorry no image - not a member.) 

 from pylab import *


def ternaryPlot(
   data,

   # Scale data for ternary plot (i.e. a + b + c = 1)
   scaling=True,

   # Direction of first vertex.
   start_angle=90,

   # Orient labels perpendicular to vertices.
   rotate_labels=True,

   # Labels for vertices.
   labels=('one','two','three'),

   # Can accomodate more than 3 dimensions if desired.
   sides=3,

   # Offset for label from vertex (percent of distance from origin).
   label_offset=0.10,

   # Any matplotlib keyword args for plots.
   edge_args={'color':'black','linewidth':2},

   # Any matplotlib keyword args for figures.
   fig_args = {'figsize':(8,8),'facecolor':'white','edgecolor':'white'},
  ):
 '''
 This will create a basic "ternary" plot (or quaternary, etc.)
 '''
 basis = array(
     [
      [
       cos(2*_*pi/sides + start_angle*pi/180),
       sin(2*_*pi/sides + start_angle*pi/180)
      ] 
      for _ in range(sides)
     ]
    )

 # If data is Nxsides, newdata is Nx2.
 if scaling:
  # Scales data for you.
  newdata = dot((data.T / data.sum(-1)).T,basis)
 else:
  # Assumes data already sums to 1.
  newdata = dot(data,basis)

 fig = figure(**fig_args)
 ax = fig.add_subplot(111)

 for i,l in enumerate(labels):
  if i &gt;= sides:
   break
  x = basis[i,0]
  y = basis[i,1]
  if rotate_labels:
   angle = 180*arctan(y/x)/pi + 90
   if angle &gt; 90 and angle &lt;= 270:
    angle = mod(angle + 180,360)
  else:
   angle = 0
  ax.text(
    x*(1 + label_offset),
    y*(1 + label_offset),
    l,
    horizontalalignment='center',
    verticalalignment='center',
    rotation=angle
   )

 # Clear normal matplotlib axes graphics.
 ax.set_xticks(())
 ax.set_yticks(())
 ax.set_frame_on(False)

 # Plot border
 ax.plot(
  [basis[_,0] for _ in range(sides) + [0,]],
  [basis[_,1] for _ in range(sides) + [0,]],
  **edge_args
 )

 return newdata,ax


if __name__ == '__main__':
 k = 0.5
 s = 1000

 data = vstack((
  array([k,0,0]) + rand(s,3), 
  array([0,k,0]) + rand(s,3), 
  array([0,0,k]) + rand(s,3)
 ))
 color = array([[1,0,0]]*s + [[0,1,0]]*s + [[0,0,1]]*s)

 newdata,ax = ternaryPlot(data)

 ax.scatter(
  newdata[:,0],
  newdata[:,1],
  s=2,
  alpha=0.5,
  color=color
  )
 show()
 
 #2 ChloÃ« Lewis developed a triangle-plot general class, meant to support the soil texture triangle 
with Python and Matplotlib. It's available here http://nature.berkeley.edu/~chlewis/Sourcecode.html 
 #3 There seems to be an implementation at work here in gnuplot:
 
 #4 I just discovered a tool which uses Python/Matplotlib to generate ternary plots called wxTernary. It's available via http://wxternary.sourceforge.net/ -- I was able to successfully generate a ternary plot on the first try. 
 #5 Find a vector drawing library and draw it from scratch if you can't find an easier way to do it. 
 #6 there is a R package named soiltexture (http://cran.r-project.org/web/packages/soiltexture/index.html) it's aimed at soil texture triangle plot, but can be customized for some aspects