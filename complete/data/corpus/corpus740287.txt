Question (ID-740287): Python Check if one of the following items is in a list I'm trying to find a short way to see if any of the following items is in a list, but my first attempt does not work. Besides writing a function to accomplish this, is the any short way to check if one of multiple items is in a list. 

 &gt;&gt;&gt; a = [2,3,4]
&gt;&gt;&gt; print (1 or 2) in a
False
&gt;&gt;&gt; print (2 or 1) in a
True
 
 Answers (Total-7): #0 &gt;&gt;&gt; L1 = [2,3,4]
&gt;&gt;&gt; L2 = [1,2]
&gt;&gt;&gt; [i for i in L1 if i in L2]
[2]


&gt;&gt;&gt; S1 = set(L1)
&gt;&gt;&gt; S2 = set(L2)
&gt;&gt;&gt; S1.intersection(S2)
set([2])
 

 Both empty lists and empty sets are False, so you can use the value directly as a truth value. 
 #1 Ah, Tobias you beat me to it. I was thinking of this slight variation on your solution: 

 print any(x in a for x in b)
 
 #2 Think about what the code actually says! 

 &gt;&gt;&gt; (1 or 2)
1
&gt;&gt;&gt; (2 or 1)
2
 

 That should probably explain it. :) Python apparently implements "lazy or", which should come as no surprise. It performs it something like this: 

 def or(x, y):
 if x: return x
 if y: return y
 return False
 

 In the first example, x == 1 and y == 2 . In the second example, it's vice versa. That's why it returns different values depending on the order of them. 
 #3 This will do it in one line. 

 &gt;&gt;&gt; a=[2,3,4]
&gt;&gt;&gt; b=[1,2]
&gt;&gt;&gt; bool(sum(map(lambda x: x in b, a)))
True
 
 #4 Best I could come up with: 

 any([True for e in (1, 2) if e in a])
 
 #5 In some cases (e.g. unique list elements), set operations can be used. 

 &gt;&gt;&gt; a=[2,3,4]
&gt;&gt;&gt; set(a) - set([2,3]) != set(a)
True
&gt;&gt;&gt;
 

 Or, using set.isdisjoint() , 

 &gt;&gt;&gt; not set(a).isdisjoint(set([2,3]))
True
&gt;&gt;&gt; not set(a).isdisjoint(set([5,6]))
False
&gt;&gt;&gt;
 
 #6 Maybe a bit more lazy: 

 a = [1,2,3,4]
b = [2,7]

print any((True for x in a if x in b))