Question (ID-1276764): Stripping everything but alphanumeric chars from a string in Python What is the best way to strip all non alphanumeric characters from a string, using Python? 

 The solutions presented in the PHP variant of this question will probably work with some minor adjustments, but don't seem very 'pythonic' to me. 

 For the record, I don't just want to strip periods and commas (and other punctuation), but also quotes, brackets, etc. 
 Answers (Total-6): #0 I just timed some functions out of curiosity 

 $ python -m timeit -s \
  "import string" \
  "''.join(ch for ch in string.printable if ch.isalnum())" 
10000 loops, best of 3: 57.6 usec per loop

$ python -m timeit -s \
 "import string" \
 "filter(str.isalnum, string.printable)"     
10000 loops, best of 3: 37.9 usec per loop

$ python -m timeit -s \
 "import re, string" \
 "re.sub('[\W_]', '', string.printable)"
10000 loops, best of 3: 27.5 usec per loop

$ python -m timeit -s \
 "import re, string" \
 "re.sub('[\W_]+', '', string.printable)"    
100000 loops, best of 3: 15 usec per loop

$ python -m timeit -s \
 "import re, string; pattern = re.compile('[\W_]+')" \
 "pattern.sub('', string.printable)" 
100000 loops, best of 3: 11.2 usec per loop
 
 #1 Regular expressions to the rescue: 

 import re
re.sub(r'\W+', '', your_string)
 
 #2 Use the str.translate() method. 

 Presuming you will be doing this often: 

 (1) Once, create a string containing all the characters you wish to delete: 

 delchars = ''.join(c for c in map(chr, range(256)) if not c.isalnum())
 

 (2) Whenever you want to scrunch a string: 

 scrunched = s.translate(None, delchars)
 

 The setup cost probably compares favourably with re.compile; the marginal cost is way lower: 

 C:\junk&gt;\python26\python -mtimeit -s"import string;d=''.join(c for c in map(chr,range(256)) if not c.isalnum());s=string.printable" "s.translate(None,d)"
100000 loops, best of 3: 2.04 usec per loop

C:\junk&gt;\python26\python -mtimeit -s"import re,string;s=string.printable;r=re.compile(r'[\W_]+')" "r.sub('',s)"
100000 loops, best of 3: 7.34 usec per loop
 

 Note: Using string.printable as benchmark data gives the pattern '[\W_]+' an unfair advantage ; all the non-alphanumeric characters are in one bunch ... in typical data there would be more than one substitution to do: 

 C:\junk&gt;\python26\python -c "import string; s = string.printable; print len(s),repr(s)"
100 '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!"#$%&amp;\'()*+,-./:;=&gt;?@[\\]^_`{|}~ \t\n\r\x0b\x0c'
 

 Here's what happens if you give re.sub a bit more work to do: 

 C:\junk&gt;\python26\python -mtimeit -s"d=''.join(c for c in map(chr,range(256)) if not c.isalnum());s='foo-'*25" "s.translate(None,d)"
1000000 loops, best of 3: 1.97 usec per loop

C:\junk&gt;\python26\python -mtimeit -s"import re;s='foo-'*25;r=re.compile(r'[\W_]+')" "r.sub('',s)"
10000 loops, best of 3: 26.4 usec per loop
 
 #3 You could try: 

 print ''.join(ch for ch in some_string if ch.isalnum())
 
 #4 &gt;&gt;&gt; import re
&gt;&gt;&gt; string = "Kl13@Â£$%[};'\""
&gt;&gt;&gt; pattern = re.compile('\W')
&gt;&gt;&gt; string = re.sub(pattern, '', string)
&gt;&gt;&gt; print string
Kl13
 
 #5 How about: 

 def ExtractAlphanumeric(InputString):
 from string import ascii_letters, digits
 return "".join([ch for ch in InputString if ch in (ascii_letters + digits)])
 

 This works by using list comprehension to produce a list of the characters in InputString if they are present in the combined ascii_letters and digits strings. It then joins the list together into a string.