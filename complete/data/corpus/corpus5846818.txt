Question (ID-5846818): python string manipulation I have a string s with nested brackets: s = "AX(p&gt;q)&amp;E((-p)Ur)" 

 I want to remove all characters between all pairs of brackets and store in a new string like this: new_string = AX&amp;E 

 i tried doing this: 

 p = re.compile("\(.*?\)", re.DOTALL)
new_string = p.sub("", s)
 

 It gives output: AX&amp;EUr) 

 Is there any way to correct this, rather than iterating each element in the string? 
 Answers (Total-7): #0 Another simple option is removing the innermost parentheses at every stage, until there are no more parentheses: 

 p = re.compile("\([^()]*\)")
count = 1
while count:
 s, count = p.subn("", s)
 

 Working example: http://ideone.com/WicDK 
 #1 You can just use string manipulation without regular expression 

 &gt;&gt;&gt; s = "AX(p&gt;q)&amp;E(qUr)"
&gt;&gt;&gt; [ i.split("(")[0] for i in s.split(")") ]
['AX', '&amp;E', '']
 

 I leave it to you to join the strings up. 
 #2 &gt;&gt;&gt; import re
&gt;&gt;&gt; s = "AX(p&gt;q)&amp;E(qUr)"
&gt;&gt;&gt; re.compile("""\([^\)]*\)""").sub('', s)
'AX&amp;E'
 
 #3 Yeah, it should be: 

 &gt;&gt;&gt; import re
&gt;&gt;&gt; s = "AX(p&gt;q)&amp;E(qUr)"
&gt;&gt;&gt; p = re.compile("\(.*?\)", re.DOTALL)
&gt;&gt;&gt; new_string = p.sub("", s)
&gt;&gt;&gt; new_string
'AX&amp;E'
 
 #4 You can use PyParsing to parse the string: 

 from pyparsing import nestedExpr
import sys

s = "AX(p&gt;q)&amp;E((-p)Ur)"
expr = nestedExpr('(', ')')
result = expr.parseString('(' + s + ')').asList()[0]
s = ''.join(filter(lambda x: isinstance(x, str), result))
print(s)
 

 Most code is from: How can be implemented recursive regexp in python? 
 #5 Nested brackets (or tags, ...) are something that are not possible to handle in a general way using regex. See http://www.amazon.de/Mastering-Regular-Expressions-Jeffrey-Friedl/dp/0596528124/ref=sr_1_1?ie=UTF8&amp;s=gateway&amp;qid=1304230523&amp;sr=8-1-spell for details why. You would need a real parser. 

 It's possible to construct a regex which can handle two levels of nesting, but they are already ugly, three levels will already be quite long. And you don't want to think about four levels. ;-) 
 #6 You could use re.subn() : 

 import re

s = 'AX(p&gt;q)&amp;E((-p)Ur)'
while True:
 s, n = re.subn(r'\([^)(]*\)', '', s)
 if n == 0:
  break
print(s)
 

 Output 

 AX&amp;E