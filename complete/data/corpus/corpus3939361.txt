Question (ID-3939361): Remove specific characters from a string in python I'm trying to remove specific characters from a string using python. This is the code i'm using right now. Unfortunately it appears to do nothing to the string?? 

 for char in line:
 if char in " ?.!/;:":
  line.replace(char,'')
 
 Answers (Total-6): #0 Strings in python are immutable (can't be changed). Because of this, the effect of line.replace(...) is just to create a new string, rather than changing the old one. You need to rebind (assign) it to line in order to have that variable take the new value, with those characters removed. 

 Also, the way you are doing it is going to be kind of slow, relatively. It's also likely to be a bit confusing to experienced pythonators, who will see a doubly-nested structure and think for a moment that something more complicated is going on. 

 You can instead use str.translate : 

 line = line.translate(None, '!@#$')
 

 — which only works on Python 2.6 and newer * — 

 or regular expression replacement with re.sub 

 import re
line = re.sub('[!@#$]', '', line)
 

 The characters enclosed in brackets constitute a character class . Any characters in line which are in that class are replaced with the second parameter to sub : an empty string. 

 

 * for compatibility with earlier Pythons, you can create a "null" translation table to pass in place of None : 

 import string
line = line.translate(string.maketrans('', ''), '!@#$')
 

 Here string.maketrans is used to create a translation table , which is just a string containing the characters with ordinal values 0 to 255. 

 

 As kevpie mentions in a comment on one of the answers, , and as noted in the documentation for str.translate , things work differently with Unicode strings. 

 When calling the translate method of a unicode string, you cannot pass the second parameter that we used up above. You also can't pass None as the first parameter, or even a translation table from string.maketrans . Instead, you pass a dictionary as the only parameter. This dictionary maps the ordinal values of characters (i.e. the result of calling ord on them) to the ordinal values of the characters which should replace them, or —usefully to us— None to indicate that they should be deleted. 

 So to do the above dance with a Unicode string you would call something like 

 translation_table = dict.fromkeys(map(ord, '!@#$'), None)
unicode_line = unicode_line.translate(translation_table)
 

 Here dict.fromkeys and map are used to succinctly generate a dictionary containing 

 {ord('!'): None, ord('@'): None, ...}
 
 #1 line = line.translate(None, " ?.!/;:")
 
 #2 Strings are immutable in Python. The replace method returns a new string after the replacement. Try: 

 for char in line:
 if char in " ?.!/;:":
  line = line.replace(char,'')
 
 #3 &gt;&gt;&gt; line = "abc#@!?efg12;:?"
&gt;&gt;&gt; ''.join( c for c in line if c not in '?:!/;' )
'abc#@efg12'
 
 #4 Am I missing the point here, or is it just the following: 

 &gt;&gt;&gt; str = "ab1cd1ef"
&gt;&gt;&gt; str.replace("1","")
'abcdef'
&gt;&gt;&gt;
 

 Put it in a loop: 

 &gt;&gt;&gt;
&gt;&gt;&gt; a = "a!b@c#d$"
&gt;&gt;&gt; b = "!@#$"
&gt;&gt;&gt; for i in range(0,len(b)):
... a =a.replace(b[i],"")
...
&gt;&gt;&gt; print a
abcd
&gt;&gt;&gt;
 
 #5 The asker almost had it. Like most things in Python, the answer is simpler than you think. 

 &gt;&gt;&gt; line = "H E?.LL!/;O:: " 
&gt;&gt;&gt; for char in ' ?.!/;:': 
... line = line.replace(char,'') 
...
&gt;&gt;&gt; print line
HELLO
 

 You don't have to do the nested if/for loop thing, but you DO need to check each character individually.