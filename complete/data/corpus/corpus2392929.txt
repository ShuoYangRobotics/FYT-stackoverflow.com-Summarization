Question (ID-2392929): How to get unique values with respective occurance count from a list in Python? I have a list which has repeating items and I want a list of the unique items with their frequency. 

 For example, I have ['a', 'a', 'b', 'b', 'b'], and I want [('a', 2), ('b', 3)] 

 Looking for a simple way to do this without looping twice. 
 Answers (Total-7): #0 When Python 2.7 comes out you can use its collections.Counter class 

 otherwise see counter receipe 

 Under Python 2.7a3 

 from collections import Counter
input = ['a', 'a', 'b', 'b', 'b']
c = Counter( input )

print( c.items() )
 

 output is 

 
 [('a', 2), ('b', 3)] 
 
 #1 If your items are grouped (i.e. similar items come together in a bunch), the most efficient method to use is itertools.groupby : 

 &gt;&gt;&gt; [(g[0], len(list(g[1]))) for g in itertools.groupby(['a', 'a', 'b', 'b', 'b'])]
[('a', 2), ('b', 3)]
 
 #2 I know this isn't a one-liner... but to me I like it because it's clear to me that we pass over the initial list of values once (instead of calling count on it): 

 &gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; l = ['a', 'a', 'b', 'b', 'b']
&gt;&gt;&gt; d = defaultdict(int)
&gt;&gt;&gt; for i in l:
... d[i] += 1
... 
&gt;&gt;&gt; d
defaultdict(&lt;type 'int'&gt;, {'a': 2, 'b': 3})
&gt;&gt;&gt; list(d.iteritems())
[('a', 2), ('b', 3)]
&gt;&gt;&gt;
 
 #3 Another way to do this would be 

 mylist = [1, 1, 2, 3, 3, 3, 4, 4, 4, 4]
mydict = {}
for i in mylist:
 if i in mydict: mydict[i] += 1
 else: mydict[i] = 1
 

 then to get the list of tuples, 

 mytups = [(i, mydict[i]) for i in mydict]
 

 This only goes over the list once, but it does have to traverse the dictionary once as well. However, given that there are a lot of duplicates in the list, then the dictionary should be a lot smaller, hence faster to traverse. 

 Nevertheless, not a very pretty or concise bit of code, I'll admit. 
 #4 the "old school way". 

 &gt;&gt;&gt; alist=['a', 'a', 'b', 'b', 'b']
&gt;&gt;&gt; d={}
&gt;&gt;&gt; for i in alist:
... if not d.has_key(i): d[i]=1 #also: if not i in d
... else: d[i]+=1
...
&gt;&gt;&gt; d
{'a': 2, 'b': 3}
 
 #5 &gt;&gt;&gt; mylist=['a', 'a', 'b', 'b', 'b']
&gt;&gt;&gt; [ (i,mylist.count(i)) for i in set(mylist) ]
[('a', 2), ('b', 3)]
 
 #6 A solution without hashing: 

 def lcount(lst):
 return reduce(lambda a, b: a[0:-1] + [(a[-1][0], a[-1][1]+1)] if a and b == a[-1][0] else a + [(b, 1)], lst, [])

&gt;&gt;&gt; lcount([])
[]
&gt;&gt;&gt; lcount(['a'])
[('a', 1)]
&gt;&gt;&gt; lcount(['a', 'a', 'a', 'b', 'b'])
[('a', 3), ('b', 2)]