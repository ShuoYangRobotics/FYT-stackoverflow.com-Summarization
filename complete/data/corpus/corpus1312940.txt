Question (ID-1312940): Python: what kind of literal delimiter is "better" to use? What is the best literal delimiter in Python and why? Single ' or double "? And most important, why? 

 I'm a beginner in Python and I'm trying to stick with just one. I know that in PHP, for example " is preferred, because PHP does not try to search for the 'string' variable. Is the same case in Python? 
 Answers (Total-8): #0 Consider these strings: 

 "Don't do that."
'I said, "okay".'
"""She said, "That won't work"."""
 

 Which quote is "best"? 
 #1 ' because it's one keystroke less than ". Save your wrists! 

 They're otherwise identical (except you have to escape whichever you choose to use, if they appear inside the string). 
 #2 Semantically there is no difference in Python; use either. Python also provides the handy triple string delimiter """ or ''' which can simplify multi-line quotes. There is also the raw string literal (r"..." or r'...') to inhibit \ escapes. The Language Reference has all the details. 
 #3 For string constants containing a single quote use the double quote as delimiter. 

 The other way around, if you need a double quote inside. 

 Quick, shiftless typing leads to single quote delimiters. 

 &gt;&gt;&gt; "it's very simple"
&gt;&gt;&gt; 'reference to the "book"'
 
 #4 Single and double quotes act identically in Python. Escapes ( \n ) always work, and there is no variable interpolation. (If you don't want escapes, you can use the r flag, as in r"\n" .) 

 Since I'm coming from a Perl background, I have a habit of using single quotes for plain strings and double-quotes for formats used with the % operator. But there is really no difference. 
 #5 Other answers are about nested quoting. Another point of view I've come across, but I'm not sure I subscribe to, is to use single-quotes(') for characters (which are strings, but ord/chr are quick picky) and to use double-quotes for strings. Which disambiguates between a string that is supposed to be one character and one that just happens to be one character. 

 Personally I find most touch typists aren't affected noticably by the "load" of using the shift-key. YMMV on that part. Going down the "it's faster to not use the shift" is a slippery slope. It's also faster to use hyper-condensed variable/function/class/module names. Everyone just so loves the fast and short 8.3 DOS files names too. :) Pick what makes semantic sense to you, then optimize. 
 #6 This is a rule I have heard about: 

 ") If the string is for human consuption, that is interface text or output, use "" 

 ') If the string is a specifier, like a dictionary key or an option, use '' 

 I think a well-enforced rule like that can make sense for a project, but it's nothing that I would personally care much about. I like the above, since I read it, but I always use "" (since I learned C first wayy back?). 
 #7 I don't think there is a single best string delimiter. I like to use different delimiters to indicate different kinds of string. Specifically, I like to use "..." to delimit stings that are used for interpolation or that are natural language messages, and '...' to delimit small symbol-like strings. This gives me a subtle extra clue to the expected use for the string literal. 

 I try to always use raw strings ( r"..." ) for regular expressions because (1) I don't have to escape backslash characters and (2) my editor recognises this convention and does syntax highlighting inside the regex. 

 The stylistic issues of single- vs. double-quotes are covered in question 56011 .