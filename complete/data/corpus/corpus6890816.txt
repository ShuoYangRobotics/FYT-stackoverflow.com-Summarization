Question (ID-6890816): How do sets work in Python? &gt;&gt;&gt; {x for x in 'spam'}
{'a', 'p', 's', 'm'}
 

 Why does it change the order? If you take a look at a loop, it works perfectly: 

 &gt;&gt;&gt; for x in 'spam':
...  print(x)
... 
s
p
a
m
&gt;&gt;&gt; 
 
 Answers (Total-7): #0 Sets in python (and in set theory ) are not ordered. So when you loop over them, there is no defined ordering. 

 You looped over the string literal 'spam' to make a set containing each character in that string. Once you did that, the ordering was gone. 

 When you perform the for loop over 'spam' , you are performing the loop against a string which does have ordering. 
 #1 From Set types : 

 These represent unordered, finite sets of unique, immutable objects. As such, they cannot be indexed by any subscript [because no ordering is defined among the elemnts] . However, they can be iterated over, and the built-in function len() returns the number of items in a set. Common uses for sets are fast membership testing, removing duplicates from a sequence, and computing mathematical operations such as intersection, union, difference, and symmetric difference. 

 But if you really need to preserve the order, then please check ordered set . 

 And anyway you may like really to write just &gt;&gt;&gt; set('spam') instead of any comprehension. 
 #2 set is not an ordered collection, and as such, the internal order of keys is undefined. 
 #3 From docs.python.org 

 
 A set object is an unordered collection of distinct hashable objects. Common uses include membership testing, removing duplicates from a sequence, and computing mathematical operations such as intersection, union, difference, and symmetric difference. (For other containers see the built in dict, list, and tuple classes, and the collections module.) 
 
 #4 set s are unordered by definition. The reason for this is that their implementation runs faster that way, by using appropriate data structures that do not preserve order. If you need order, you can use the (slower) OrderedDict type. 
 #5 Python sets are defined as unordered , so Python is free to order them any way it likes (efficiently, I pressme). 
 #6 Sets are unordered. If you want to have ordering, use something like this: http://code.activestate.com/recipes/576694/