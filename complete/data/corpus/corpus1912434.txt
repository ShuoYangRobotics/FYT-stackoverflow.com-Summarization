Question (ID-1912434): easiest way to parse xml in python I have many rows in a database that contain xml and I'm trying to write a python script that will go through those rows and count how many instances of a particular node attribute show up. for instance, my tree looks like: 

 &lt;foo&gt;
 &lt;bar&gt;
  &lt;type foobar="1"/&gt;
  &lt;type foobar="2"/&gt;
 &lt;/bar&gt;
&lt;/foo&gt;
 

 I'm looking for the easiest way for me to access the attributes 1 and 2 in the XML above. 
 Answers (Total-7): #0 I suggest ElementTree (there are other compatible implementatons, such as lxml , but what they add is "just" even more speed -- the ease of programming part depends on the API, which ElementTree defines. 

 After building an Element instance e from the XML, e.g. with the XML function, just: 

 for atype in e.findall('type')
 print(atype.get('foobar'))
 

 and the like. 
 #1 You can use BeautifulSoup 

 from BeautifulSoup import BeautifulSoup

x="""&lt;foo&gt;
 &lt;bar&gt;
  &lt;type foobar="1"/&gt;
  &lt;type foobar="2"/&gt;
 &lt;/bar&gt;
&lt;/foo&gt;"""

y=BeautifulSoup(x)
&gt;&gt;&gt; y.foo.bar.type["foobar"]
u'1'

&gt;&gt;&gt; y.foo.bar.findAll("type")
[&lt;type foobar="1"&gt;&lt;/type&gt;, &lt;type foobar="2"&gt;&lt;/type&gt;]

&gt;&gt;&gt; y.foo.bar.findAll("type")[0]["foobar"]
u'1'
&gt;&gt;&gt; y.foo.bar.findAll("type")[1]["foobar"]
u'2'
 
 #2 minidom is the quickest and pretty straight forward: 

 XML: 

 &lt;data&gt;
 &lt;items&gt;
 	&lt;item name="item1"&gt;&lt;/item&gt;
 	&lt;item name="item2"&gt;&lt;/item&gt;
 	&lt;item name="item3"&gt;&lt;/item&gt;
 	&lt;item name="item4"&gt;&lt;/item&gt;
 &lt;/items&gt;
&lt;/data&gt;
 

 PYTHON: 

 from xml.dom import minidom
xmldoc = minidom.parse('items.xml')
itemlist = xmldoc.getElementsByTagName('item') 
print len(itemlist)
print itemlist[0].attributes['name'].value
for s in itemlist :
 print s.attributes['name'].value
 

 OUTPUT 

 4
item1
item1
item2
item3
item4 
 #3 Python has an interface to the expat xml parser. 

 xml.parsers.expat
 

 It's a non-validating parser, so bad xml will not be caught. But if you know your file is correct, then this is pretty good, and you'll probably get the exact info you want and you can discard the rest on the fly. 

 stringofxml = """&lt;foo&gt;
 &lt;bar&gt;
  &lt;type arg="value" /&gt;
  &lt;type arg="value" /&gt;
  &lt;type arg="value" /&gt;
 &lt;/bar&gt;
 &lt;bar&gt;
  &lt;type arg="value" /&gt;
 &lt;/bar&gt;
&lt;/foo&gt;"""
count = 0
def start(name, attr):
 global count
 if name == 'type':
  count += 1

p = expat.ParserCreate()
p.StartElementHandler = start
p.Parse(stringofxml)

print count # prints 4
 
 #4 lxml.objectify is really simple. 

 Taking your sample text: 

 from lxml import objectify
from collections import defaultdict

count = defaultdict(int)

root = objectify.fromstring(text)

for item in root.bar.type:
 count[item.attrib.get("foobar")] += 1

print dict(count)
 

 Output: 

 {'1': 1, '2': 1}
 
 #5 I'm still a Python newbie myself, but my impression is that ElementTree is the state-of-the-art in Python XML parsing and handling. 

 Mark Pilgrim has a good section on Parsing XML with ElementTree in his book Dive Into Python 3 . 
 #6 I find the Python xml.dom and xml.dom.minidom quite easy. Keep in mind that DOM isn't good for large amounts of XML, but if your input is fairly small then this will work fine.