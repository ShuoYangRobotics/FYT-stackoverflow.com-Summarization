Question (ID-3061277): Python MySQL wrong architecture error I've been at this for some time and read many sites on the subject. suspect I have junk lying about causing this problem. But where? 

 This is the error when I import MySQLdb in python: 

 &gt;&gt;&gt; import MySQLdb
 /Library/Python/2.6/site-packages/MySQL_python-1.2.3c1-py2.6-macosx-10.6-universal.egg/_mysql.py:3: UserWarning: Module _mysql was already imported from /Library/Python/2.6/site-packages/MySQL_python-1.2.3c1-py2.6-macosx-10.6-universal.egg/_mysql.pyc, but /Users/phoebebr/Downloads/MySQL-python-1.2.3c1 is being added to sys.path
 Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "MySQLdb/__init__.py", line 19, in &lt;module&gt;
  import _mysql
  File "build/bdist.macosx-10.6-universal/egg/_mysql.py", line 7, in &lt;module&gt;
  File "build/bdist.macosx-10.6-universal/egg/_mysql.py", line 6, in __bootstrap__
 ImportError: dlopen(/Users/phoebebr/.python-eggs/MySQL_python-1.2.3c1-py2.6-macosx-10.6-universal.egg-tmp/_mysql.so, 2): no suitable image found. Did find:
  /Users/phoebebr/.python-eggs/MySQL_python-1.2.3c1-py2.6-macosx-10.6-universal.egg-tmp/_mysql.so: mach-o, but wrong architecture
 

 I'm trying for 64 bit so checked here: 

 file $(which python)
/usr/bin/python: Mach-O universal binary with 3 architectures
/usr/bin/python (for architecture x86_64): Mach-O 64-bit executable x86_64
/usr/bin/python (for architecture i386): Mach-O executable i386
/usr/bin/python (for architecture ppc7400): Mach-O executable ppc
file $(which mysql)
/usr/local/mysql/bin/mysql: Mach-O 64-bit executable x86_64
 

 Have set my default version of python to 2.6 

 python
Python 2.6.1 (r261:67515, Feb 11 2010, 00:51:29) 
[GCC 4.2.1 (Apple Inc. build 5646)] on darwin
 

 Tried deleting build directory and python setup.py clean
Renamed Python/2.5/site-packages so it could not try and pick that up. 

 UPDATE 

 Deleted everything and followed the instructions here: http://stackoverflow.com/questions/1904039/django-mysql-on-mac-os-10-6-2-snow-leopard installing using macports. 

 But basically still get the same error 

 Traceback (most recent call last):
 File "&lt;stdin&gt;", line 1, in &lt;module&gt;
 File "/opt/local/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/MySQLdb/__init__.py", line 19, in &lt;module&gt;
 import _mysql
ImportError: dlopen(/opt/local/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/_mysql.so, 2): no suitable image found. Did find:
 /opt/local/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/_mysql.so: mach-o, but wrong architecture
&gt;&gt;&gt; 
 
 Answers (Total-8): #0 I have a fresh MacBook Air, and I managed to get MySQLdb working by doing the following:
(Snow Leopard 10.6.6, preinstalled Python) 

 uname -a
Darwin Braindamage.local 10.6.0 Darwin Kernel Version 10.6.0: Wed Nov 10 18:13:17 PST 2010; root:xnu-1504.9.26~3/RELEASE_I386 i386
 

 Download the MySQL 32-bit dmg file from mysql pages, Install it. 

 Add the following lines to your ~/.profile (or ~/.bash_profile): 

 PATH="/usr/local/mysql/bin:${PATH}"
export PATH
export DYLD_LIBRARY_PATH=/usr/local/mysql/lib/
export VERSIONER_PYTHON_PREFER_64_BIT=no
export VERSIONER_PYTHON_PREFER_32_BIT=yes
 

 After saving, type the following in the terminal:
 source ~/.profile 

 Download the MySQL-python-1.2.3.tar.gz unzip, untar, cd to that directory 

 python2.5 setup.py build
sudo python2.5 setup.py install
 

 exit that directory (or you'll get a warning) 

 python2.5
import MySQLdb
 

 or 

 python
import MySQLdb
 

 works the way it should!! 
 #1 It's caused by that your Python is 32bits, but somehow, the installed MySQL library is 64bits. To solve the problem, here you can install it manually with following commands: 

 wget http://downloads.sourceforge.net/project/mysql-python/mysql-python/1.2.3/MySQL-python-1.2.3.tar.gz
tar xvf MySQL-python-1.2.3.tar.gz
cd MySQL-python-1.2.3
ARCHFLAGS="-arch i386" python setup.py install
 

 With ARCHFLAGS="-arch i386", it should be compiled as i386 architecture. 
 #2 I just struggled with the same, despite the many answers, so I'll risk adding another: 

 
 Run python -c 'import platform; print platform.platform()' . Does it end in "64 bit"? 
 Do ls -l /usr/local/mysql . It's a symlink: does it end in "x86_64"? 
 

 If python says "64 bit", then you want mysql for "x86_64" (search for that at http://dev.mysql.com/downloads/mysql/ ). If python says "32 bit", then you probably want the "x86" mysql. If you have a match, but it still doesn't work, then read the other answers (about VERSIONER_PYTHON_PREFER_32_BIT etc.) 

 For me, the mismatch caused the "mach-o, but wrong architecture" error. The next error was "Library not loaded: libmysqlclient.18.dylib... Reason: image not found" . 

 To solve this one, I recommend adding a symlink (rather than set DYLD_LIBRARY_PATH, as explained in other answers): 

 sudo ln -s /usr/local/mysql/lib/libmysqlclient.18.dylib /usr/local/lib/
 
 #3 When the interpreter says is: 

 
 You have installed MySQL_python-1.2.3c1 in /Library/Python/2.6/site-packages
 but you are adding to sys.path another version in /users/phoebebr/Downloads.
 When I try to import MySQLdb from the second directory, I've found that
 _mysql.so is from another architecture. 
 

 SO, it seems that you ended with the wrong version of MySQLdb. Delete 
/Users/phoebebr/.python-eggs/MySQL_python-1.2.3c1-py2.6-macosx-10.6-universal.egg-tmp and /Users/phoebebr/Downloads/MySQL-python-1.2.3c1. Test again to see if the version
in /library works. If not, donwload the binary for MacOS. In last instance, download
the source of MySQL-python and compile it. 
 #4 This is a shot in the dark - not familiar with MACOSX - but I saw a similar problem under Linux and could only resolve it by: 

 
 Uninstalling all MySQLdb components via the package manager 
 Doing a low level search to locate any remaining directories and files relating to MySQLdb - if you manually installed/built MySQLdb you will probably find some references to it somewhere but most likely in the site-packages directory - I did and simply deleteing them is the recommended approach based upon the research I did 
 

 Next I tried to import MySQLdb and made sure I got a simple error that the package did not exisit - at least I knew MySQLdb was 100% removed 

 Then I a clean install via the package manager if that option exists as it will be 100% compatible with your platform and libs. Compiling etc. is great but you have to do lots of leg work to make sure that you have the right MySQL client libs etc. to link to (based upon my painful experience) 

 Good luck. 

 Worst case ... you could use the alternative PyMySQL pure python option (http://pypi.python.org/pypi/PyMySQL/0.2) but I have to confess most people recommend MySQLdb 
 #5 I got another possible solution to add... 

 I solved the problem by adding the following line to .profile (.bash_profile is ok if it's a development machine): 

 export VERSIONER_PYTHON_PREFER_64_BIT=yes
export VERSIONER_PYTHON_PREFER_32_BIT=no
 

 (2nd line might not be necessary, though. But after hours of fiddling, trying, recompiling, I just couldn't be bothered trying this out anymore). 

 Cheers
Markus 
 #6 This problem was solved for me by selecting the correct python version. If you installed with macports: 

 sudo port select python python26
 
 #7 It appears that this issue is related to the version of mysql that you have on the box. When compiling the python mysql component it uses mysql_config which usually lives in /usr/local/mysql/bin to determine what flags to pass to CC when compiling the mysql component. If you have a 32 bit version of mysql running then you will get a 32 version of this component even if you have the 64 bit version of python. As an example I had the following version of mysql... 

 /usr/local/mysql-5.5.16-osx10.6-x86 and I should have been running...
/usr/local/mysql-5.5.16-osx10.6-x86_64 

 Changing over to the 64bit version of mysql on my machine and then running...
sudo pip install mysql-python 

 fixed the problem for me. You can run the following command to verify how it is going to build the mysql component... 

 /usr/local/mysql/bin/mysql_config --cflags 

 You should see something like this... 

 -I/usr/local/mysql/include -Os -g -fno-common -fno-strict-aliasing -arch x86_64