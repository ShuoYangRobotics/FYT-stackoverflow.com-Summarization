Question (ID-869778): Populating a list/array by index in Python? Is this possible: 

 myList = []

myList[12] = 'a'
myList[22] = 'b'
myList[32] = 'c'
myList[42] = 'd'
 

 When I try, I get: 

 # IndexError: list assignment index out of range #
 
 Answers (Total-6): #0 For a "sparse list" you could use a dict instead: 

 mylist = {}
mylist[12] = 'a'
 

 etc. If you want an actual list (initialize it with [] , not () , of course!-) you need to fill the un-set slots to _some_thing, e.g. None , by a little auxiliary function or by subclassing list . 
 #1 You'll have to pre-fill it with something (e.g. 0 or None ) before you can index it: 

 myList = [None] * 100 # Create list of 100 'None's
myList[12] = 'a' # etc.
 

 Alternatively, use a dict instead of a list, as Alex Martelli suggested . 
 #2 Not without populating the other locations in the list with something (like None or an empty string). Trying to insert an element into a list using the code you wrote would result in an IndexError . 

 There's also mylist.insert , but this code: 

 myList.insert(12,'a')
 

 would just insert 'a' at the first unoccupied location in the list (which would be 0 using your example). 

 So, as I said, there has to be something in the list at indexes 0-11 before you can insert something at myList[12] . 
 #3 If you don't know the size of the list ahead of time, you could use try/except and then Extend the list in the except: 

 L = []
def add(i, s):
 try:
  L[i] = s
 except IndexError:
  L.extend([None]*(i-len(L)+1))
  L[i] = s

add(12, 'a')
add(22, 'b')
 

 ----- Update --------------------------------------------- 
Per tgray's comment: If it is likely that your code will throw an Exception most of the time , you should check the length of the List every time, and avoid the Exceptions: 

 L = []
def add(i, s):
 size = len(L)
 if i &gt;= size:
  L.extend([None]*(i-size+1))
  L[i] = s
 
 #4 Here's a quick list wrapper that will auto-expand your list with zeros if you attempt to assign a value to a index past it's length. 

 class defaultlist(list):

 def __setitem__(self, index, value):
  l = len(self)
  if index &gt;= l:
   self.extend(0 for _ in range(l, index+1))

  list.__setitem__(self, index, value)
 

 Now you can do this: 

 &gt;&gt;&gt; a = defaultlist([1,2,3])
&gt;&gt;&gt; a[1] = 5
[1,5,3]
&gt;&gt;&gt; a[5] = 10
[1,5,3,0,0,10]
 
 #5 #programmer
#thabethe nkosinathi
from math import*
#mark=[]

mark=[20][3]

stud=[20]

testtol=[3]

studave=[20]

testave=[3]

for j in range(3):

  for i in range(20):

    mrk[i][j]=int(raw_input("please enter mark for student"))

for i in range(20):

  studtot[i]=0

for j in range(3):

  tsttot[j]=0

for i in range(20):

  for j in range(3):

    studtot[i]=studtot[i]+mrk[i][j]

    tsttot[j]= tsttot[j]+mrk[i][j]

for j in range(3):

  testave[i]=testave[i]/20

for i in range(20):

  studave[i]=studave[i]/3

print "studave[i]",studave[i] ,"Ã¤nd" ,testave[i]

for i in range(20):

  for j in range(3):

    print mark[i][j]

  print "studave[i]",studave[i]

print "the haedings of tje test average"

for j in range(3):

  print testave[i]



#now i am sorting the marks of the student

n=20

for tst in range(3):

  for i in range(n-1):

    for j in range(n):

      if mark[i][tst]&lt;mark[j][tst]:

        for k in range(3):

          tmp=mrk[i][k]

          mark[i][k]=mark[j][k]

          mark[j][k]=tmp

          #change name i and j

        tmp1=name[i]

        name[i]=name[j]

        name[j]=tmp1

        #swap student average

        tmp=studave[i]

        studave[i]=studave[j]

        studave[j]=tmp

    print "the headinns for test"

    for i in range(20):

      print name[i],name[i] and mark[i][tst]



    #the erro list out of range