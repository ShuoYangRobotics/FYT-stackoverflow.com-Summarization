Question (ID-4188467): How to check if an argument from commandline has been set? I can call my script like this: 

 python D:\myscript.py 60
 

 And in the script I can do: 

 arg = sys.argv[1]
foo(arg)
 

 But how could I test if the argument has been entered in the command line call? I need to do something like this: 

 if isset(sys.argv[1]):
 foo(sys.argv[1])
else:
 print "You must set argument!!!"
 
 Answers (Total-6): #0 len(sys.argv) &gt; 1 
 #1 Don't use sys.argv for handling the command-line interface; there's a module to do that: argparse . 

 You can mark an argument as required by passing required=True to add_argument . 

 import argparse
parser = argparse.ArgumentParser(description='Process some integers.')
parser.add_argument("foo", ..., required=True)
parser.parse_args()
 
 #2 If you're using Python 2.7/3.2, use the argparse module. Otherwise, use the optparse module. The module takes care of parsing the command-line, and you can check whether the number of positional arguments matches what you expect. 
 #3 if(len(sys.argv) &lt; 2):
 print "You must set argument!!!"
 
 #4 I use optparse module for this but I guess because i am using 2.5 you can use argparse as Alex suggested if you are using 2.7 or greater 
 #5 if(sys.argv[1]): should work fine, if there are no arguments sys.argv[1] will be (should be) null