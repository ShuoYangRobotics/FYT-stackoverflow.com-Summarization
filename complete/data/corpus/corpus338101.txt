Question (ID-338101): Python function attributes - uses and abuses Not many are aware of this feature, but Python's functions (and methods) can have attributes . Behold: 

 &gt;&gt;&gt; def foo(x):
...  pass
...  
&gt;&gt;&gt; foo.score = 10
&gt;&gt;&gt; dir(foo)
['__call__', '__class__', '__delattr__', '__dict__', '__doc__', '__get__', '__getattribute__', '__hash__', '__init__', '__module__', '__name__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__str__', 'func_closure', 'func_code', 'func_defaults', 'func_dict', 'func_doc', 'func_globals', 'func_name', 'score']
&gt;&gt;&gt; foo.score
10
&gt;&gt;&gt; foo.score += 1
&gt;&gt;&gt; foo.score
11
 

 What are the possible uses and abuses of this feature in Python ? One good use I'm aware of is PLY 's usage of the docstring to associate a syntax rule with a method. But what about custom attributes ? Are there good reasons to use them ? 
 Answers (Total-8): #0 I typically use function attributes as storage for annotations. Suppose I want to write, in the style of C# (indicating that a certain method should be part of the web service interface) 

 class Foo(WebService):
 @webmethod
 def bar(self, arg1, arg2):
   ...
 

 then I can define 

 def webmethod(func):
 func.is_webmethod = True
 return func
 

 Then, when a webservice call arrives, I look up the method, check whether the underlying function has the is_webmethod attribute (the actual value is irrelevant), and refuse the service if the method is absent or not meant to be called over the web. 
 #1 I've used them as static variables for a function. For example, given the following C code: 

 int fn(int i)
{
 static f = 1;
 f += i;
 return f;
}
 

 I can implement the function similarly in Python: 

 def fn(i):
 fn.f += i
 return fn.f
fn.f = 1
 
 #2 You can do objects the JavaScript way... It makes no sense but it works ;) 

 &gt;&gt;&gt; def FakeObject():
... def test():
...  print "foo"
... FakeObject.test = test
... return FakeObject
&gt;&gt;&gt; x = FakeObject()
&gt;&gt;&gt; x.test()
foo
 
 #3 I use them sparingly, but they can be pretty convenient: 

 def log(msg):
 log.logfile.write(msg)
 

 Now I can use log throughout my module, and redirect output simply by setting log.logfile .  There are lots and lots of other ways to accomplish that, but this one's lightweight and dirt simple. And while it smelled funny the first time I did it, I've come to believe that it smells better than having a global logfile variable. 
 #4 Check out PEP 232 . 
 #5 Function attributes can be used to write light-weight closures that wrap code and associated data together: 

 #!/usr/bin/env python

SW_DELTA = 0
SW_MARK = 1
SW_BASE = 2

def stopwatch():
 import time

 def _sw( action = SW_DELTA ):

  if action == SW_DELTA:
   return time.time() - _sw._time

  elif action == SW_MARK:
   _sw._time = time.time()
   return _sw._time

  elif action == SW_BASE:
   return _sw._time

  else:
   raise NotImplementedError

 _sw._time = time.time() # time of creation

 return _sw

# test code
sw=stopwatch()
sw2=stopwatch()
import os
os.system("sleep 1")
print sw() # defaults to "SW_DELTA"
sw( SW_MARK )
os.system("sleep 2")
print sw()
print sw2()
 

 1.00934004784 

 2.00644397736 

 3.01593494415 
 #6 Sometimes I use an attribute of a function for caching already computed values. You can also have a generic decorator that generalizes this approach. Be aware of concurrency issues and side effects of such functions! 
 #7 I was always of the assumption that the only reason this was possible was so there was a logical place to put a doc-string or other such stuff. I know if I used it for any production code it'd confuse most who read it.