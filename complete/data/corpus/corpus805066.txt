Question (ID-805066): How to call a parent class's method from child class in python? Stackers, 

 I apologize for this question in advance. It must be a FAQ, but I don't seem to be able to find the answer. 

 When creating a simple object hierarchy in python, I'd like to be able to invoke methods of the parent class from a derived class. In Perl and Java, there is a keyword for this (super). In Perl, I might do this: 

 package Foo;

sub frotz() {
 return "Bamf";
}

package Bar;
@ISA = qw(Foo);

sub frotz() {
 my $str = SUPER::frotz();
 return uc($str);
}
 

 In python, it appears that I have to name the parent class explicitly from the child.
In the example above, I'd have to do something like Foo::frotz(). 

 This doesn't seem right, since this behavior makes it hard to make deep hierarchies. If children need to know what class defined an inherited method, then all sorts of information pain is created. 

 Is this an actual limitation in python, a gap in my understanding or both? 

 Thanks, 

 --Joe 
 Answers (Total-7): #0 Yes, but only with new-style classes . Use the super() function: 

 class Foo(Bar):
 def baz(self, arg):
  return super(Foo, self).baz(arg)
 
 #1 ImmediateParentClass.frotz(self) will be just fine, whether the immediate parent class defined frotz itself or inherited it. super is only needed for proper support of multiple inheritance (and then it only works if every class uses it properly). In general, AnyClass.whatever is going to look up 'whatever' in AnyClass's ancestors if AnyClass doesn't define/override it, and this holds true for "child class calling parent's method" as for any other occurrence! 
 #2 Python also has super as well: 

 super (type[, object-or-type]) 

 
 Return a proxy object that delegates method calls to a parent or sibling class of type.
 This is useful for accessing inherited methods that have been overridden in a class. 
 The search order is same as that used by getattr() except that the type itself is skipped. 
 

 Example: 

 class A(object):
 def foo(self):
  print "foo"

class B(A):
 def foo(self):
  super(B, self).foo()

myB = B()
myB.foo()
 
 #3 This is a more abstract method: 



 super(self.__class__,self).baz(arg)
 
 #4 There's a super() in Python too. It's a bit wonky, because of Python's old- and new-style classes, but is quite commonly used e.g. in constructors: 

 class Foo(Bar):
 def __init__(self):
  super(Foo, self).__init__()
  self.baz = 5
 
 #5 I would recommend using CLASS.__bases__ 
something like this 

 class A:
 def __init__(self):
  print "I am Class %s"%self.__class__.__name__
  for parentClass in self.__class__.__bases__:
    print " I am inherited from:",parentClass.__name__
    #parentClass.foo(self) &lt;- call parents function with self as first param
class B(A):pass
class C(B):pass
a,b,c = A(),B(),C()
 
 #6 There is another way 

 class Foo(Bar):
 def m(self):
  Foo.m(self)
  self.baz = 5