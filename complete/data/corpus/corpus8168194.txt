Question (ID-8168194): subtraction operator python I want to reduce the number of "the" words from a by 2. But this code doesn't seem to run. I cannot understand why the multiplication operator works but the subtraction operator doesn't. 

 b = "the"
a = b * 5
print a
a -= (b * 2) 
print a
 

 output 

 the 
the the the the the 
Traceback (most recent call last):
 a -= (b * 2)
TypeError: unsupported operand type(s) for -=: 'str' and 'str'
 

 How can I reduce the number of "the" 's in a by 2. If this cannot be done like this then is there a easier method perform this? 
 Answers (Total-6): #0 b = "the"
a = b * 5
print a

a = a[:-2*len(b)]
print a

# returns: thethethe
 

 I am not substracting (you cannot really do it with strings), I am removing twice the length of b from the end of a , ignoring its real value. 
 #1 To reduce the number of "the" by 2 in you word, try with the replace method : 

 b = "the"
a = b * 5
print a
&gt;&gt;&gt; "thethethethethe"
a = a.replace(b, "", 2) # or a.replace(b*2, "", 1) if you want to remove "thethe" from the string
print a
&gt;&gt;&gt; "thethethe"
 

 If you wanted to remove the "the" by starting from the end, use rsplit() 

 b = "the"
a = "theAtheBthethe"
a = "".join(a.rsplit("the", 2)) # or "".join(a.rsplit("thethe", 1)) if you want to remove "theth" of the string
print a
&gt;&gt;&gt; "theAtheB"
 

 As described here , the * operator is supported by string (and unicode, list, tuple, bytearray, buffer, xrange types), b * 5 returns 5 copies of b concatenated. 
 #2 Depends if you want to chop them off the start or the end, you can use array subsets: 

 &gt;&gt;&gt; a[2*len("the"):]
'thethethe'
&gt;&gt;&gt; a[:-(2*len("the"))]
'thethethe'
 
 #3 There is no support for subtraction operator in case of strings, but you can simply add one: 

 &gt;&gt;&gt; class MyStr(str):
 def __init__(self, val):
  return str.__init__(self, val)
 def __sub__(self, other):
  if self.count(other) &gt; 0:
   return self.replace(other, '', 1)
  else:
   return self
 

 and this will work in the following way: 

 &gt;&gt;&gt; a = MyStr('thethethethethe')
&gt;&gt;&gt; b = a - 'the'
&gt;&gt;&gt; a
'thethethethethe'
&gt;&gt;&gt; b
'thethethethe'
&gt;&gt;&gt; b = a - 2 * 'the'
&gt;&gt;&gt; b
'thethethe'
 

 Regarding a - 2 * 'the' operation you should be aware that this is not " remove twice 'the' string from a ", but " remove result of (2 times 'the') from a " (first multiply " the " by 2 and then subtract from a ). 

 Is this what you expected? 
 #4 a = a.rpartition(b * 2)[0]
 

 should do this, cutting from the right side. If you don't have any examples of 'thethe' in a , it will return the empty string '' . It won't work if you have multiple 'the' s that are separated by other characters. For that, you could use a.rpartition(b)[0] twice. If you want to cut from the left instead, use a.partition(b * 2)[2] . 

 Why doesn't subtracting work? Using addition and multiplication is a convenience feature for working with strings. The semantics of subtracting (or dividing) str s is not defined for Python, so you can't use it that way. 
 #5 Plus operator work because "+" concatenate whilst minus don't operate on strings. You can try something using regular expression, like: 

 import re

s="the"*5
expr="the"

print s

# s -= 2
print "".join(re.findall(expr,s)[:-2])

# s -=3
print "".join(re.findall(expr,s)[:-3])