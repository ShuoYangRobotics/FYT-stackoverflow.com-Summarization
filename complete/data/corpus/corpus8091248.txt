Question (ID-8091248): better algorithm for checking 5 in a row/col in a matrix is there a good algorithm for checking whether there are 5 same elements in a row or a column or diagonally given a square matrix, say 6x6? 

 there is ofcourse the naive algorithm of iterating through every spot and then for each point in the matrix, iterate through that row, col and then the diagonal. I am wondering if there is a better way of doing it. 
 Answers (Total-7): #0 You could keep a histogram in a dictionary (mapping element type -> int). And then you iterate over your row or column or diagonal, and increment histogram[element] , and either check at the end to see if you have any 5s in the histogram, or if you can allow more than 5 copies, you can just stop once you've reached 5 for any element. 

 Simple, one-dimensional, example: 

 m = ['A', 'A', 'A', 'A', 'B', 'A']

h = {}
for x in m:
 if x in h:
  h[x] += 1
 else:
  h[x] = 1

print "Histogram:", h

for k in h:
 if h[k]&gt;=5:
  print "%s appears %d times." % (k,h[k])
 

 Output: 

 Histogram: {'A': 5, 'B': 1}
A appears 5 times.
 

 Essentially, h[x] will store the number of times the element x appears in the array (in your case, this will be the current row, or column or diagonal). The elements don't have to appear consecutively, but the counts would be reset each time you start considering a new row/column/diagonal. 
 #1 You can check whether there are k same elements in a matrix of integers in a single pass . 

 Suppose that n is the size of the matrix and m is the largest element. We have n column, n row and 1 diagonal.
Foreach column, row or diagonal we have at most n distinct element. 

 Now we can create a histogram containing (n + n + 1) * (2 * m + 1) element. Representing 
the rows, columns and the diagonal each of them containing at most n distinct element. 

 size = (n + n + 1) * (2 * m + 1)
histogram = zeros(size, Int)
 

 Now the tricky part is how to update this histogram ? 

 Consider this function in pseudo-code: 

 updateHistogram(i, j, element)

 if (element &lt; 0)
  element = m - element;

 rowIndex  = i * m + element
 columnIndex  = n * m + j * m + element
 diagonalIndex = 2 * n * m + element

 histogram[rowIndex] = histogram[rowIndex] + 1
 histogram[columnIndex] = histogram[columnIndex] + 1

 if (i = j)
  histogram[diagonalIndex] = histogram[diagonalIndex] + 1
 

 Now all you have to do is to iterate throw the histogram and check whether there is an element > k 
 #2 For rows you can keep a counter, which indicates how many of the same elements in a row you currently have. To do this, iterate through the row and 

 
 if current element matches the previous element, increase the counter by one. If counter is 5, then you have found the 5 elements you wanted. 
 if current element doesn't match previous element, set the counter to 1. 
 

 The same principle can be applied to columns and diagonals as well. You probably want to use array of counters for columns (one element for each column) and diagonals so you can iterate through the matrix once. 

 I did the small example for a smaller case, but you can easily change it: 

 n = 3
matrix = [[1, 2, 3, 4], 
   [1, 2, 3, 1], 
   [2, 3, 1, 3],
   [2, 1, 4, 2]]
col_counter = [1, 1, 1, 1]
for row in range(0, len(matrix)):
 row_counter = 1
 for col in range(0, len(matrix[row])):
  current_element = matrix[row][col]

  # check elements in a same row
  if col &gt; 0:
   previous_element = matrix[row][col - 1]
   if current_element == previous_element:
    row_counter = row_counter + 1
    if row_counter == n:
     print n, 'in a row at:', row, col - n + 1
   else:
    row_counter = 1

  # check elements in a same column
  if row &gt; 0:
   previous_element = matrix[row - 1][col]
   if current_element == previous_element:
    col_counter[col] = col_counter[col] + 1;
    if col_counter[col] == n:
     print n, 'in a column at:', row - n + 1, col
   else:
    col_counter[col] = 1
 

 I left out diagonals to keep the example short and simple, but for diagonals you can use the same principle as you use on columns. The previous element would be one of the following (depending on the direction of diagonal): 

 matrix[row - 1][col - 1]
matrix[row - 1][col + 1]
 

 Note that you will need to make a little bit extra effort in the second case. For example traverse the row in the inner loop from right to left. 
 #3 Your best approach may depend on whether you control the placement of elements. 

 For example, if you were building a game and just placed the most recent element on the grid, you could capture into four strings the vertical, horizontal, and diagonal strips that intersected that point, and use the same algorithm on each strip, tallying each element and evaluating the totals. The algorithm may be slightly different depending on whether you're counting five contiguous elements out of the six, or allow gaps as long as the total is five. 
 #4 I don't think you can avoid iteration, but you can at least do an XOR of all elements and if the result of that is 0 => they are all equal, then you don't need to do any comparisons. 
 #5 You can try improve your method with some heuristics: use the knowledge of the matrix size to exclude element sequences that do not fit and suspend unnecessary calculation. In case the given vector size is 6, you want to find 5 equal elements, and the first 3 elements are different, further calculation do not have any sense. 

 This approach can give you a significant advantage, if 5 equal elements in a row happen rarely enough. 
 #6 If you code the rows/columns/diagonals as bitmaps, "five in a row" means "mask % 31== 0 &amp;&amp; mask / 31 == power_of_two" 

 
 00011111 := 0x1f 31 (five in a row) 
 00111110 := 0x3e 62 (five in a row) 
 00111111 := 0x3f 63 (six in a row) 
 

 If you want to treat the six-in-a-row case also as as five-in-a-row, the easiest way is probably to: 

 for ( ; !(mask &amp; 1) ; mask &gt;&gt;= 1 ) {;}
return (mask &amp; 0x1f == 0x1f) ? 1 : 0;
 

 Maybe the Stanford bit-tweaking department has a better solution or suggestion that does not need looping?