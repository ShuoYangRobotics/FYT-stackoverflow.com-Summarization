Question (ID-3438531): IPython workflow (edit, run) Is there a GUI for IPython that allows me to open/run/edit Python files? My way of working in IDLE is to have two windows open: the shell and a .py file. I edit the .py file, run it, and interact with the results in the shell. 

 Is it possible to use IPython like this? Or is there an alternative way of working? 
 Answers (Total-7): #0 When I'm working with python, I usually have two terminal windows open - one with IPython, and the other with a fairly customized Vim. 

 Two good resources: 

 
 http://blog.dispatched.ch/2009/05/24/vim-as-python-ide/ 
 http://dancingpenguinsoflight.com/2009/02/python-and-vim-make-your-own-ide/ 
 

 

 Though it sounds like what you want is IPython's magic function %ed / %edit : 

 An example of what you can do: 

 In [72]: %ed
IPython will make a temporary file named: c:\docume~1\wjwe312\locals~1\temp\ipython_edit_ar8veu.py
 

 In the file I put: 

 x = "Hello World"
print 3
 

 After saving and quitting the file: 

 Editing... done. Executing edited code...
3
Out[72]: "x = 'Hello world'\nprint 3\n"

In [73]: x
Out[73]: 'Hello world'
 

 You can define functions or anything else - just remember that the contents of the file will be executed when you close it. 

 Another similar workflow is to cd to the directory containing your Python script that you're editing with your favorite editor. Then you can %run the script from within IPython and you'll have access to everything defined in the file. For instance, if you have the following in the file test.py in your /home/myself directory: 

  class Tester(object):
  def __init__(self):
   print "hi"

 def knightme(name):
  print "Hello, Sir ", name
 

 Then you can do the following: 

 In [42]: cd /home/myself
/home/myself

In [43]: %run test.py # &lt;Tab&gt; autocomplete also works

In [44]: knightme('John')
Hello, Sir John

In [45]: t = Tester()
Hi
 

 Either a mix or one of those workflows should give you something very similar to the way you're used to working in IDLE. 
 #1 SPyderlib a.k.a Spyder2 

 Pretty lightweight, fast and support almost all features you will ever need to work with a python project. 
 #2 Take a look at DreamPie . Might be what you are looking for. 
 #3 1, Try the combination of Spyder and Vim. 

 I edit python files in Vim, then run them in Spyder (in the same interpreter, which is important for me). 

 Spyder can reload the file automatically. 
Use F9 to run the current file and Ctrl+F9 to run the selected block. ) 

 2, Recently I come across a Vim plugin, conque-shell. If you'd like to work in a manner like Matlab, then probably you should try it. 

 Just open your preferred Python interpreter using "ConqueTerm", then visual select the some code, press to paste it in the Python interpreter. 
 #4 Personally, I like PyScripter . Unfortunately, it only works on Windows, but also runs perfectly in Wine. 
 #5 Personally, I use what @Wayne suggested, a combination of vim and ipython... 

 However, if you'd prefer a different approach, take a look at spyder . 

 As of the latest version (1.1) ipython should be fully integrated. If you download an earlier version, things will work fine with ipython as an external shell, but you won't get a few of spyder's nifty features (like viewing all of the currently defined variables in the workspace window). 

 Spyder is definitely a bit heavyweight, but it's an interesting project. 

 Another (very, very, new) similar project to take a look at is iep . It will (sort-of) work with ipython as shell, and I'd be willing to be bet that nicer ipython integration will be along before too long. At any rate, iep is essentially a more lightweight alternative to spyder. 

 Both of these are oriented towards scientific computing, and so have nice integration with things like matplotlib (and thus can automatically run gui main loops in a seperate thread). They're not quite like "normal" IDE's but they may fill the niche you're looking for quite nicely. 
 #6 You might like PySlices ... 

 It's kind of a shell/editor hybrid that lets you save your session as special (barely) modified python files called .pyslice files. 

 It's now part of wxPython , so just install that (v2.8.11 or later) and run "python -m wx.py.PySlices" on the command line to launch it. 

 That said, I still end up using an external editor for scripts (geany).