Question (ID-5904969): Python: how to print a dictionary's key? I found a my question in SO already but it was not answered directly, but lead to another logic instead. I would like to print a specific python dictionary key: 

 mydic = {}
mydic['key_name'] = 'value_name'
 

 Now i can check if mydic.has_key('key_name') but what i would like to do is print the name of the key 'key_name'. Of course i could use mydic.items(), but i don't want all the keys listed, but merely one specific key. For instance i'd imagine a pseudo-code: 

 print "the key name is", mydic['key_name'].name_the_key(), "and its value is", mydic['key_name']
 

 Is there any name_the_key() method at all to print a key name? 

 

 Edit: 
OK, thanks a lot guys for your reactions! :) I realise my question is not well formulated and trivial. I just got confused because i realised key_name and mydic['key_name'] are two different things and i thought it would incorrect to print the key_name out of the dictionary context. But indeed i can simply use the 'key_name' to refer to the key! :) 
 Answers (Total-8): #0 The name of the key 'key_name' is key_name, therefore print 'key_name' or whatever variable you have representing it. 
 #1 What's wrong with using 'key_name' instead, even if it is a variable? 
 #2 Hmm, I think that what you might be wanting to do is print all the keys in the dictionary and their respective values? 

 If so you want the following: 

 for key in mydic.keys():
 print "the key name is" + key + "and its value is" + mydic[key]
 

 Make sure you use +'s instead of ,' as well. The comma will put each of those items on a separate line I think, where as plus will put them on the same line. 
 #3 A dictionary has, by definition, an arbitrary number of keys. There is no "the key". You have the keys() method, which gives you a python list of all the keys, and you have the iteritems() method, which returns key-value pairs, so 

 for key, value in mydic.iteritems() :
 print key, value
 

 So you have a handle on the keys, but they only really mean sense if coupled to a value. I hope I have understood your question. 
 #4 Try this: 

 def name_the_key(dict, key):
 return key, dict[key]

mydict = {'key1':1, 'key2':2, 'key3':3}

key_name, value = name_the_key(mydict, 'key2')
print 'KEY NAME: %s' % key_name
print 'KEY VALUE: %s' % value
 
 #5 Since we're all trying to guess what "print a key name" might mean, I'll take a stab at it. Perhaps you want a function that takes a value from the dictionary and finds the corresponding key? A reverse lookup? 

 def key_for_value(d, value):
 """Return a key in `d` having a value of `value`."""
 for k, v in d.iteritems():
  if v == value:
   return k
 

 Note that many keys could have the same value, so this function will return some key having the value, perhaps not the one you intended. 

 If you need to do this frequently, it would make sense to construct the reverse dictionary: 

 d_rev = dict(v,k for k,v in d.iteritems())
 
 #6 import pprint
pprint.pprint(mydic.keys())
 
 #7 key_name = '...'
print "the key name is %s and its value is %s"%(key_name, mydic[key_name])