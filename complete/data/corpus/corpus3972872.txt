Question (ID-3972872): Python variables as keys to dict Is there an easier way to do this in Python (2.7)?: Note: This isn't anything fancy, like putting all local variables into a dictionary. Just the ones I specify in a list. 

 apple = 1
banana = 'f'
carrot = 3
fruitdict = {}

# I want to set the key equal to variable name, and value equal to variable value
# is there a more Pythonic way to get {'apple': 1, 'banana': 'f', 'carrot': 3}?

for x in [apple, banana, carrot]:
 fruitdict[x] = x # (Won't work)
 

 Edit: the number assignments were meaningless...changing them. 
 Answers (Total-8): #0 for i in ('apple', 'banana', 'carrot'):
 fruitdict[i] = locals()[i]
 
 #1 The globals() function returns a dictionary containing all your global variables. 

 &gt;&gt;&gt; apple = 1
&gt;&gt;&gt; banana = 'f'
&gt;&gt;&gt; carrot = 3
&gt;&gt;&gt; globals()
{'carrot': 3, 'apple': 1, '__builtins__': &lt;module '__builtin__' (built-in)&gt;, '__name__': '__main__', '__doc__': None, 'banana': 'f'}
 

 There is also a similar function called locals() . 

 I realise this is probably not exactly what you want, but it may provide some insight into how Python provides access to your variables. 

 Edit : It sounds like your problem may be better solved by simply using a dictionary in the first place: 

 fruitdict = {}
fruitdict['apple'] = 1
fruitdict['banana'] = 'f'
fruitdict['carrot'] = 3
 
 #2 locals() and globals()? 
 #3 A one-liner is:- 

 fruitdict = dict(zip(('apple','banana','carrot'), (1,'f', '3'))
 
 #4 If you want to bind the locations of the variables themselves, there's this: 

 &gt;&gt;&gt; apple = 1
&gt;&gt;&gt; banana = 'f'
&gt;&gt;&gt; carrot = 3
&gt;&gt;&gt; fruitdict = {}
&gt;&gt;&gt; fruitdict['apple'] = lambda : apple
&gt;&gt;&gt; fruitdict['banana'] = lambda : banana
&gt;&gt;&gt; fruitdict['carrot'] = lambda : carrot
&gt;&gt;&gt; for k in fruitdict.keys():
...  print k, fruitdict[k]()
... 
carrot 3
apple 1
banana f
&gt;&gt;&gt; apple = 7
&gt;&gt;&gt; for k in fruitdict.keys():
...  print k, fruitdict[k]()
... 
carrot 3
apple 7
banana f
 
 #5 why you don't do the opposite : 

 fruitdict = { 
  'apple':1,
  'banana':'f',
  'carrot':3,
}

locals().update(fruitdict)
 

 Update : 

 don't use the code above check the comment. 

 by the way why you don't mark the vars that you want to get i don't know 
maybe like this: 

 # All the vars that i want to get are followed by _fruit
apple_fruit = 1
carrot_fruit = 'f'

for var in locals():
 if var.endswith('fruit'):
  you_dict.update({var:locals()[var])
 
 #6 Well this is a bit, umm ... non-Pythonic ... ugly ... hackish ... 

 Here's a snippet of code assuming you want to create a dictionary of all the local variables you
create after a specific checkpoint is taken: 

 checkpoint = [ 'checkpoint' ] + locals().keys()[:]
## Various local assigments here ...
var_keys_since_checkpoint = set(locals().keys()) - set(checkpoint)
new_vars = dict()
for each in var_keys_since_checkpoint:
 new_vars[each] = locals()[each]
 

 Note that we explicitly add the 'checkpoint' key into our capture of the locals().keys() I'm also explicitly taking a slice of that though it shouldn't be necessary in this case since the reference has to be flattened to add it to the [ 'checkpoint' ] list. However, if you were using a variant of this code and tried to shortcut out the ['checkpoint'] + portion (because that key was already in locals() , for example) ... then, without the [:] slice you could end up with a reference to the locals().keys()` whose values would change as you added variables. 

 Offhand I can't think of a way to call something like new_vars.update() with a list of keys to be added/updated. So the for loop is most portable. I suppose a dictionary comprehension could be used in more recent versions of Python. However that woudl seem to be nothing more than a round of code golf. 
 #7 This question has practically been answered, but I just wanted to say it was funny that you said 

 
 This isn't anything fancy, like
 putting all local variables into a
 dictionary. 
 

 Because it is actually "fancier" 

 what you want is: 

 apple = 1
banana = 'f'
carrot = 3
fruitdict = {}

# I want to set the key equal to variable name, and value equal to variable value
# is there a more Pythonic way to get {'apple': 1, 'banana': 'f', 'carrot': 3}?

names= 'apple banana carrot'.split() # I'm just being lazy for this post
items = globals()     # or locals()

for name in names:
 fruitdict[name] = items[name]
 

 Honestly, what you are doing is just copying items from one dictionary to another. 

 (Greg Hewgill practically gave the whole answer, I just made it complete) 

 ...and like people suggested, you should probably be putting these in the dictionary in the first place, but I'll assume that for some reason you can't