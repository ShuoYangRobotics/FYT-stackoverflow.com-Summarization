Question (ID-8447947): Is it possible to modify variable in python that is in outer, but not global, scope? Given following python 2.7 code: 

 def A() :
 def B() :
 b = 1
 def C() :
  # I can access 'b' from here.
  print( b )
  # But can i modify 'b' here? 'global' and assignment will not work.
 C()
 print( b )
 B()
A()
 

 For the code in C() function variable b is in outer scope, but not in global scope. Is it possible to modify b variable from within C() function? Surely i can read it from here and print(), but how to modify it? 
 Answers (Total-6): #0 Python 3.x has the nonlocal keyword . I think this does what you want, but I'm not sure if you are running python 2 or 3. 

 
 The nonlocal statement causes the listed identifiers to refer to
 previously bound variables in the nearest enclosing scope. This is
 important because the default behavior for binding is to search the
 local namespace first. The statement allows encapsulated code to
 rebind variables outside of the local scope besides the global
 (module) scope. 
 

 For python 2, I usually just use a mutable object (like a list, or dict), and mutate the value instead of reassign. 

 example: 

 def foo():
 a = []
 def bar():
  a.append(1)
 bar()
 bar()
 print a

foo()
 

 Outputs: 

 [1, 1]
 
 #1 I don't think you should want to do this. Functions that can alter things in their enclosing context are dangerous, as that context may be written without the knowledge of the function. 

 You could make it explicit, either by making B a public method and C a private method in a class (the best way probably); or by using a mutable type such as a list and passing it explicitly to C: 

 def A():
 x = [0]
 def B(var): 
  var[0] = 1
 B(x)
 print x

A()
 
 #2 No you cannot, at least in this way. 

 Because the "set operation" will create a new name in the current scope, which cover the outer one. 
 #3 I'm a little new to Python, but I've read a bit about this. I believe the best you're going to get is similar to the Java work-around, which is to wrap your outer variable in a list. 

 def A():
 b = [1]
 def B():
  b[0] = 2
 B()
 print(b[0])

//output is '2'
 

 Edit: I guess this was probably true before Python 3. Looks like 'nonlocal' is your answer. 
 #4 You can, but you'll have to use the global statment (not a really good solution as always when using global variables, but it works): 

 def A() :
 def B() :
 global b
 b = 1
 def C() :
  # I can access 'b' from here.
  global b
  print( b )
  b = 2
  # But can i modify 'b' here? 'global' and assignment will not work.
 C()
 print( b )
 B()
A()
 
 #5 I don't know if there is an attribute of a function that gives the __dict__ of the outer space of the function when this outer space isn't the global space == the module, which is the case when the function is a nested function, in Python 3. 

 But in Python 2, as far as I know, there isn't such an attribute. 

 So the only possibilities to do what you want is: 

 1) using a mutable object, as said by others 

 2) 

 def A() :
 def B() :
  b = 1
  print 'b before C() ==',b
  def C() :
   # I can access 'b' from here.
   b = 10
   print'b ==',b
   return b
  b = C()
  print'b after C() ==', b
 B()

A()
 

 result 

 b before C() == 1
b == 10
b after C() == 10
 

 . 

 Nota 

 The solution of CÃ©dric Julien has a drawback: 

 def A() :
 def B() :
  global b # N1
  b = 1
  print ' b in function B before executing C() :',b
  def C() :
   # I can access 'b' from here.
   global b # N2
   print '  b in function C before assigning b = 2 :',b
   b = 2
   print '  b in function C after assigning b = 2 :',b
   # But can i modify 'b' here? 'global' and assignment will not work.
  C()
  print ' b in function B , after execution of C()',b
 B()


b = 450
print 'global b , before execution of A() :', b
A()
print 'global b , after execution of A() :', b
 

 result 

 global b , before execution of A() : 450
 b in function B before executing C() : 1
  b in function C before assigning b = 2 : 1
  b in function C after assigning b = 2 : 2
 b in function B , after execution of C() 2
global b , after execution of A() : 2
 

 The global b after execution of A() has been modified and it may be not whished so 

 That's the case only if there is an object with identifier b in the global namespace