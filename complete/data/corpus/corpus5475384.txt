Question (ID-5475384): Some questions about python list element and list comprehensions Come straight to the point. A list e.g. lst = [1, 1, 1, 0, 0, 0] , now I want to change 1 into 0 as lst = [0, 0, 0, 0, 0, 0] . 

 My original solution likes below: 

 for item in lst:

 if item == 1:

  item = 0
 

 Actually, the result list is still lst = [1, 1, 1, 0, 0, 0]. 

 Q1 : Is there any other solutions to solve it besides using list comprehension? 

 Q2 : How to write correct list comprehensions when many more if else for in it? So I have tried four styles below: 

 No.1 lst = [0 if item == 1 for item in lst] # Returns syntax error

No.2 lst = [0 for item in lst if item == 1] # Returns [0, 0, 0]

No.3 lst = [0 if item == 1 else item for item in lst] # Returns [0, 0, 0, 0, 0, 0]

No.4 lst = [0 for item in lst if item == 1 else item] # Returns syntax error
 
 Answers (Total-8): #0 You could do: 

 for x, item in enumerate(lst):
 if item == 1:
  lst[x] = 0
 

 This works because enumerate returns an iterator that yields a tuple of (index, item) 

 This way you can check the value of the item, but also know what index you are currently on so you can edit the reference. 

 And to answer number 3, you want: 

 &gt;&gt;&gt; lst = [1, 1, 1, 0, 0, 0]
&gt;&gt;&gt; [0 if x == 1 else x for x in lst]
[0, 0, 0, 0, 0, 0]
&gt;&gt;&gt; 
 
 #1 Neither list comprehension nor for item in iterable mutate the list. In the former case, that's (practically) impossible by design, in the latter case it's because Python is pass by value only. 

 You can use a for loop and change values at specific indices. Just don't to delete or add anything while iterating. enumerate allows you to have your cake (the item) and eat it (have to index) too. 

 for i, item in enumerate(lst):
 if item == 1:
  list[i] = 0
 

 List comprehensions in general are of the form [expression for target in expression if condition] . The optional filtering part at the end can only skip an item (think of it as if not condition: continue ), choosing the item to put into the list being generates happens in the first expression - a few versions ago, conditional expressions ( expression if condition else expression ) were added, so you can do some basic selection in that expression. Doing this twice or more in one expression really pushes it though, so refrain from it for more complex logic. 
 #2 Q1. Assignment to the iteratee in the for-loop won't be reflected back to the list. You need to use the normal a[b]=c syntax to post back the change 

  for i, item in enumerate(lst):
  if item == 1:
   lst[i] = 0
 

 Q2. Number 3. 

 The x if y else z is a special expression in Python. This corresponds to y ? x : z in C-like languages. You cannot leave out the else part, thus Number 1 is a syntax error. 

 Number 2 means only items satisfying item == 1 will be emitted. A better illustrating example: 

 &gt;&gt;&gt; [i for i in range(10) if i % 4 == 0]
[0, 4, 8]
 
 #3 As you have figured out, list comprehension no. 3 is the correct syntax. Generally a helper function could make that more clear: 

 def modify(value):
 if value == 1:
  return 0
 else:
  return value

lst = [modify(item) for item in lst]
 

 To accomplish the same effect with a for loop you could for example use enumerate() : 

 for index, item in enumerate(lst):
 if item == 1:
  lst[index] = 0
 
 #4 lst = [0 for item in lst] is probably the easiest. Maybe not the fastest (especially with millions and billions of elements). 

 You could also try lst = [ 0 if item==1 else 0 for item in lst] 
 #5 In the for loop, you're working with a copy of the list elements, not the actual list. It's not safe to modify a sequence while you're iterating over it in any case. 

 You can do: 

 while 1 in lst:
 lst[lst.index(1)] = 0
 

 to achieve what you want without a list comprehension. 
 #6 The reason your for loop isn't working is that changing the value of item just changes the value of item . item initially points to the same element that's in the list, but reassigning it just changes what it points to; it doesn't modify the list element. 

 To do actually modify the list, you need to know which item of the list you're looking at. You can do this by using enumerate() , which gives you access to both the item value and its index (position in the list) within the body of the loop. 

 for index, item in enumerate(lst):
 if item == 1:
  lst[index] = 0
 

 Doing it this way (rather than with a list comprehension, as others have suggested) does have the advantage of not making another copy of the list, which may be useful when the list is large. 
 #7 If you want to update the list in-place (that is, without creating a new list), then the following code will work: 

 for index, item in enumerate(lst):
 if item == 1:
  lst[i] = 0
 

 In your original code, each time round the loop the variable item is assigned the next value in the list, and then if that value is 1 you assign 0 to item but that does not change the list - it just changes the variable item . 

 To create a new list your solution (3) is fine.