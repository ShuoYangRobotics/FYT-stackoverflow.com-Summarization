Question (ID-295670): What is a partial class? What is and how can it be used in C#. 
Can you use the same concept in Python/Perl? 
 Answers (Total-7): #0 A partial type (it doesn't have to be a class; structs and interfaces can be partial too) is basically a single type which has its code spread across multiple files. 

 The main use for this is to allow a code generator (e.g. a Visual Studio designer) to "own" one file, while hand-written code is put in another. 

 I've no idea whether Python/Perl have the same capabilities, I'm afraid. 
 #1 The c# partial class has been already explained here so I'll just cover the python part. You can use multiple inheritance to elegantly distribute the definition of a class. 

 class A_part1:
 def m1(self):
  print "m1"

class A_part2:
 def m2(self):
  print "m2"

class A(A_part1, A_part2):
 pass

a = A()
a.m1()
a.m2()
 
 #2 A partial class is simply a class that's contained in more than one file. Sometimes it's so that one part can be machine-generated, and another part user-edited. 

 I use them in C# when I'm making a class that's getting a bit too large. I'll put the accessors and constructors in one file, and all of the interesting methods in a different file. 

 In Perl, you'd simply have two (or more) files that each declare themselves to be in a package: 

 (main program) 

  use MyClass;
 

 (in MyClass.pm) 

  use MyClassOtherStuff;
 package MyClass;
 # [..class code here...]
 

 (in MyClassOtherStuff.pm) 

  package MyClass;
 # [...rest of code here...]
 
 #3 The concept of partial types have already been explained. 

 This can be done in python. As an example, do the following in a python shell. 

 class A(object):
 pass

obj = A()

def _some_method(self):
 print self.__class__
A.identify = _some_method

obj.identify()
 
 #4 Because python is a dynamic language you don't need a concept like partial class. In python is possible to extend object with functionality in runtime so it possible to break class declaration into different files 
 #5 A Partial type is a type whose declaration is separated across multiple files. It makes sense to use them if you have a big class, which is hard to handle and read for a typical developer, to separate that class definition in separate files and to put in each file a logically separated section of code (for instance all public methods and proprieties in one file, private in other, db handling code in third and so on..) 

 No you don't have the same syntactical element in Python. 
 #6 Python also has meta classes but that is more like a template class than a partial class. A good example of meta class usage is the Django ORM. All of your table models inherit from a base model class which also gets functionality included from a meta class. It is a pretty cool concept that enables an active record like pattern (is it full active record?).