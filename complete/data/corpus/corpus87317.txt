Question (ID-87317): Get list of XML attribute values in Python I need to get a list of attribute values from child elements in Python. 

 It's easiest to explain with an example. 

 Given some XML like this: 

 &lt;elements&gt;
 &lt;parent name="CategoryA"&gt;
  &lt;child value="a1"/&gt;
  &lt;child value="a2"/&gt;
  &lt;child value="a3"/&gt;
 &lt;/parent&gt;
 &lt;parent name="CategoryB"&gt;
  &lt;child value="b1"/&gt;
  &lt;child value="b2"/&gt;
  &lt;child value="b3"/&gt;
 &lt;/parent&gt;
&lt;/elements&gt;
 

 I want to be able to do something like: 

 &gt;&gt;&gt; getValues("CategoryA")
['a1', 'a2', 'a3']
&gt;&gt;&gt; getValues("CategoryB")
['b1', 'b2', 'b3']
 

 It looks like a job for XPath but I'm open to all recommendations. I'd also like to hear about your favourite Python XML libraries. 
 Answers (Total-6): #0 I'm not really an old hand at Python, but here's an XPath solution using libxml2. 

 import libxml2

DOC = """&lt;elements&gt;
 &lt;parent name="CategoryA"&gt;
  &lt;child value="a1"/&gt;
  &lt;child value="a2"/&gt;
  &lt;child value="a3"/&gt;
 &lt;/parent&gt;
 &lt;parent name="CategoryB"&gt;
  &lt;child value="b1"/&gt;
  &lt;child value="b2"/&gt;
  &lt;child value="b3"/&gt;
 &lt;/parent&gt;
&lt;/elements&gt;"""

doc = libxml2.parseDoc(DOC)

def getValues(cat):
 return [attr.content for attr in doc.xpathEval("/elements/parent[@name='%s']/child/@value" % (cat))]

print getValues("CategoryA")
 

 With result... 

 ['a1', 'a2', 'a3']
 
 #1 ElementTree 1.3 (unfortunately not 1.2 which is the one included with Python) supports XPath like this: 

 import elementtree.ElementTree as xml

def getValues(tree, category):
 parent = tree.find(".//parent[@name='%s']" % category)
 return [child.get('value') for child in parent]
 

 Then you can do 

 &gt;&gt;&gt; tree = xml.parse('data.xml')
&gt;&gt;&gt; getValues(tree, 'CategoryA')
['a1', 'a2', 'a3']
&gt;&gt;&gt; getValues(tree, 'CategoryB')
['b1', 'b2', 'b3']
 

 lxml.etree (which also provides the ElementTree interface) will also work in the same way. 
 #2 I must admit I'm a fan of xmltramp due to its ease of use. 

 Accessing the above becomes: 

 import xmltramp

 values = xmltramp.parse('''...''')

 def getValues( values, category ):
 cat = [ parent for parent in values['parent':] if parent(name) == category ]
 cat_values = [ child(value) for child in parent['child':] for parent in cat ]
 return cat_values

 getValues( values, "CategoryA" )
 getValues( values, "CategoryB" )
 
 #3 You can do this with BeautifulSoup 

 &gt;&gt;&gt; from BeautifulSoup import BeautifulStoneSoup
&gt;&gt;&gt; soup = BeautifulStoneSoup(xml)
&gt;&gt;&gt; def getValues(name):
. . .  return [child['value'] for child in soup.find('parent', attrs={'name': name}).findAll('child')]
 

 If you're doing work with HTML/XML I would recommend you take a look at BeautifulSoup. It's similar to the DOM tree but contains more functionality. 
 #4 Using a standard W3 DOM such as the stdlib's minidom, or pxdom: 

 def getValues(category):
 for parent in document.getElementsByTagName('parent'):
  if parent.getAttribute('name')==category:
   return [
    el.getAttribute('value')
    for el in parent.getElementsByTagName('child')
   ]
 raise ValueError('parent not found')
 
 #5 My preferred python xml library is lxml , which wraps libxml2. 
Xpath does seem the way to go here, so I'd write this as something like: 

 from lxml import etree

def getValues(xml, category):
 return [x.attrib['value'] for x in 
   xml.findall('/parent[@name="%s"]/*' % category)]

xml = etree.parse(open('filename.xml'))

&gt;&gt;&gt; print getValues(xml, 'CategoryA')
['a1', 'a2', 'a3']
&gt;&gt;&gt; print getValues(xml, 'CategoryB')
['b1', 'b2', 'b3]