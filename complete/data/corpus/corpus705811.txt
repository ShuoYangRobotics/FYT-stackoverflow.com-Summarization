Question (ID-705811): any way to loop iteration with same item in python? It's a common programming task to loop iteration while not receiving next item. For example: 

 for sLine in oFile :
 if ... some logic ... :
 sLine = oFile.next()
 ... some more logic ...
 # at this point i want to continue iteration but without
 # getting next item from oFile. How can this be done in python?
 
 Answers (Total-8): #0 I first thought you wanted the continue keyword, but that would of course get you the next line of input. 

 I think I'm stumped. When looping over the lines of a file, what exactly should happen if you continued the loop without getting a new line? 

 Do you want to inspect the line again? If so, I suggest adding an inner loop that runs until you're "done" with the input line, which you can then break out of, or use maybe the while -condition and a flag variable to terminate. 
 #1 What you need is a simple, deterministic finite state machine . Something like this... 

 state = 1
for sLine in oFile:
 if state == 1:
  if ... some logic ... :
   state = 2
 elif state == 2:
  if ... some logic ... :
   state = 1
 
 #2 Simply create an iterator of your own that lets you push data back on the front of the stream so that you can give the loop a line that you want to see over again: 

 
next_lines = []
def prependIterator(i):
 while True:
  if next_lines:
   yield(next_lines.pop())
  else:
   yield(i.next())

for sLine in prependIterator(oFile):
 if ... some logic ... :
  sLine = oFile.next()
  ... some more logic ...
  # put the line back so that it gets read
  # again as we head back up to the "for
  # statement
  next_lines.append(sLine)
 

 If the prepend&#95;list is never touched, then the prependIterator behaves exactly like whatever iterator it is passed: the if statement inside will always get False and it will just yield up everything in the iterator it has been passed. But if items are placed on the prepend&#95;list at any point during the iteration, then those will be yielded first instead before it returns back to reading from the main iterator. 
 #3 Instead of looping through the file line by line, you can do a file.readlines() into a list. Then loop through the list (which allows you to look at the next item if you want). Example: 

 list = oFile.readlines()
for i in range(len(list))
 #your stuff
 list[i] #current line
 list[i-1] #previous line
 list[i+1] #next line
 

 you can go to the previous or next line by simply using [i-1] or [i+1]. You just need to make sure that no matter what, i does not go out of range. 
 #4 Ugly. Wrap the body in another loop. 

 for sLine in oFile :
 while 1:
 if ... some logic ... :
  sLine = oFile.next()
  ... some more logic ...
  continue
 ... some more logic ...
 break
 

 A little better: 

 class pushback_iter(object):
 def __init__(self,iterable):
  self.iterator = iter(iterable)
  self.buffer = []
 def next(self):
  if self.buffer:
   return self.buffer.pop()
  else:
   return self.iterator.next()
 def __iter__(self):
  return self
 def push(self,item):
  self.buffer.append(item)

it_file = pushback_iter(file)
for sLine in it_file:
 if ... some logic ... :
  sLine = it_file.next()
  ... some more logic ...
  it_file.push(sLine)
  continue
 ... some more logic ...
 

 Unfortunately no simple way of referencing the current iterator. 
 #5 You can assign your iterator to an variable then use the .next get te next one. 

 iter = oFile.xreadlines() # is this the correct iterator you want?
try:
 sLine = iter.next()
 while True:
 if ... some logic ... :
  sLine = iter.next()
  ... some more logic ...
  continue
 sLine = iter.next()
except StopIterator:
 pass
 
 #6 You just need to create a variable out of your iterator, and then manipulate that: 

 % cat /tmp/alt-lines.py 
 #! /usr/bin/python -tt

import sys

lines = iter(open(sys.argv[1]))
for line in lines:
 print line,
 lines.next()
 
% cat /tmp/test
1
2
3
4
% /tmp/alt-lines.py /tmp/test
1
3
 

 ...note that in this case we unconditionally do lines.next() so the above fails for files with odd lines, but I assume that isn't going to be the case for you (and adding the error checking is fairly trivial -- just catch and throw away StopIteration on the manual .next()). 
 #7 jle's approach should work, though you might as well use enumerate(): 

 for linenr, line in enumerate(oFile):
 # your stuff