Question (ID-2213334): In Python, I have a dictionary. How do I change the keys of this dictionary? Let's say I have a pretty complex dictionary. 

 {'fruit':'orange','colors':{'dark':4,'light':5}}
 

 Anyway, my objective is to scan every key in this complex multi-level dictionary. Then, append "abc" to the end of each key. 

 So that it will be: 

 {'fruitabc':'orange','colorsabc':{'darkabc':4,'lightabc':5}}
 

 How would you do that? 
 Answers (Total-9): #0 Keys cannot be changed. You will need to add a new key with the modified value then remove the old one, or create a new dict with a dict comprehension or the like. 
 #1 For example like this: 

 def appendabc(somedict):
 return dict(map(lambda (key, value): (str(key)+"abc", value), somedict.items()))

def transform(multilevelDict):
 new = appendabc(multilevelDict)

 for key, value in new.items():
  if isinstance(value, dict):
   new[key] = transform(value)

 return new

print transform({1:2, "bam":4, 33:{3:4, 5:7}})
 

 This will append "abc" to each key in the dictionary and any value that is a dictionary. 

 EDIT: There's also a really cool Python 3 version, check it out: 

 def transform(multilevelDict):
 return {str(key)+"abc" : (transform(value) if isinstance(value, dict) else value) for key, value in multilevelDict.items()}

print(transform({1:2, "bam":4, 33:{3:4, 5:7}}))
 
 #2 My understanding is that you can't change the keys, and that you would need to make a new set of keys and assign their values to the ones the original keys were pointing to. 

 I'd do something like: 

 def change_keys(d):
 if type(d) is dict:
 return dict([(k+'abc', change_keys(v)) for k, v in d.items()])
 else:
 return d

new_dict = change_keys(old_dict)
 
 #3 #! /usr/bin/env python

d = {'fruit':'orange', 'colors':{'dark':4,'light':5}}

def add_abc(d):
 newd = dict()
 for k,v in d.iteritems():
 if isinstance(v, dict):
  v = add_abc(v)
 newd[k + "abc"] = v
 return newd

d = add_abc(d)
print d
 
 #4 &gt;&gt;&gt; mydict={'fruit':'orange','colors':{'dark':4,'light':5}}

&gt;&gt;&gt; def f(mydict):
... return dict((k+"abc",f(v) if hasattr(v,'keys') else v) for k,v in mydict.items())
... 
&gt;&gt;&gt; f(mydict)
{'fruitabc': 'orange', 'colorsabc': {'darkabc': 4, 'lightabc': 5}}
 
 #5 Something like that 

 def applytoallkeys( dic, func ):
 def yielder():
  for k,v in dic.iteritems():
   if isinstance( v, dict):
    yield func(k), applytoallkeys( v, func )
   else:
    yield func(k), v
 return dict(yielder())

def appendword( s ):
 def appender( x ):
  return x+s
 return appender

d = {'fruit':'orange','colors':{'dark':4,'light':5}}
print applytoallkeys( d, appendword('asd') )
 

 I kinda like functional style, you can read just the last line and see what it does ;-) 
 #6 You could do this with recursion: 

 import collections
in_dict={'fruit':'orange','colors':{'dark':4,'light':5}}

def transform_dict(d):
 out_dict={}
 for k,v in d.iteritems():
  k=k+'abc'
  if isinstance(v,collections.MutableMapping):
   v=transform_dict(v)   
  out_dict[k]=v
 return out_dict
out_dict=transform_dict(in_dict)
print(out_dict)

# {'fruitabc': 'orange', 'colorsabc': {'darkabc': 4, 'lightabc': 5}}
 
 #7 you should also consider that there is the possibility of nested dicts in nested lists, which will not be covered by the above solutions. This function ads a prefix and/or a postfix to every key within the dict. 

 def transformDict(multilevelDict, prefix="", postfix=""):
"""adds a prefix and/or postfix to every key name in a dict"""
new_dict = multilevelDict
if prefix != "" or postfix != "":
 new_key = "%s#key#%s" % (prefix, postfix)
 new_dict = dict(map(lambda (key, value): (new_key.replace('#key#', str(key)), value), new_dict.items()))
 for key, value in new_dict.items():
  if isinstance(value, dict):
   new_dict[key] = transformDict(value, prefix, postfix)
  elif isinstance(value, list):
   for index, item in enumerate(value):
    if isinstance(item, dict):
     new_dict[key][index] = transformDict(item, prefix, postfix)
return new_dict
 
 #8 I use the following utility function that I wrote that takes a target dict and another dict containing the translation and switches all the keys according to it: 

 def rename_keys(d, keys):
 return dict([(keys.get(k), v) for k, v in d.items()])
 

 So with the initial data: 

 data = { 'a' : 1, 'b' : 2, 'c' : 3 }
translation = { 'a' : 'aaa', 'b' : 'bbb', 'c' : 'ccc' }
 

 We get the following: 

 &gt;&gt;&gt; data
{'a': 1, 'c': 3, 'b': 2}
&gt;&gt;&gt; rename_keys(data, translation)
{'aaa': 1, 'bbb': 2, 'ccc': 3}