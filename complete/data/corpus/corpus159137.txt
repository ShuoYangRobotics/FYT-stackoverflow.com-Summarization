Question (ID-159137): Getting MAC Address I need a cross platform method of determining the MAC address of a computer at run time. For windows the 'wmi' module can be used and the only method under Linux I could find was to run ifconfig and run a regex across its output. I don't like using a package that only works on one OS, and parsing the output of another program doesn't seem very elegant not to mention error prone. 

 Does anyone know a cross platform method (windows and linux) method to get the MAC address? If not, does anyone know any more elegant methods then those I listed above? 
 Answers (Total-7): #0 Python 2.5 includes an uuid implementation which (in at least one version) needs the mac address. You can import the mac finding function into your own code easily: 

 from uuid import getnode as get_mac
mac = get_mac()
 

 The return value is the mac address as 48 bit integer. 
 #1 The pure python solution for this problem under Linux to get the MAC for a specific local interface, originally posted as a comment by vishnubob and improved by on Ben Mackey in this activestate recipe 

 #!/usr/bin/python

import fcntl, socket, struct

def getHwAddr(ifname):
 s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
 info = fcntl.ioctl(s.fileno(), 0x8927, struct.pack('256s', ifname[:15]))
 return ''.join(['%02x:' % ord(char) for char in info[18:24]])[:-1]

print getHwAddr('eth0')
 
 #2 One other thing that you should note is that uuid.getnode() can fake the MAC addr by returning a random 48-bit number which may not be what you are expecting. Also, there's no explicit indication that the MAC address has been faked, but you could detect it by calling getnode() twice and seeing if the result varies. If the same value is returned by both calls, you have the MAC address, otherwise you are getting a faked address. 

 &gt;&gt;&gt; print uuid.getnode.__doc__
Get the hardware address as a 48-bit positive integer.

 The first time this runs, it may launch a separate program, which could
 be quite slow. If all attempts to obtain the hardware address fail, we
 choose a random 48-bit number with its eighth bit set to 1 as recommended
 in RFC 4122.
 
 #3 I haven't personally used this, but it looks like it's exactly what you want. 

 Python netifaces 
 #4 For Linux you can retrieve the MAC address using a SIOCGIFHWADDR ioctl. 

 struct ifreq ifr;
uint8_t   macaddr[6];

if ((s = socket(AF_INET, SOCK_DGRAM, IPPROTO_IP)) &lt; 0)
 return -1;

strcpy(ifr.ifr_name, "eth0");

if (ioctl(s, SIOCGIFHWADDR, (void *)&amp;ifr) == 0) {
 if (ifr.ifr_hwaddr.sa_family == ARPHRD_ETHER) {
  memcpy(macaddr, ifr.ifr_hwaddr.sa_data, 6);
  return 0;
... etc ...
 

 You've tagged the question "python". I don't know of an existing Python module to get this information. You could use ctypes to call the ioctl directly. 
 #5 Note that you can build your own cross-platform library in python using conditional imports. e.g. 

 import platform
if platform.system() == 'Linux':
 import LinuxMac
 mac_address = LinuxMac.get_mac_address()
elif platform.system() == 'Windows':
 # etc
 

 This will allow you to use os.system calls or platform-specific libraries. 
 #6 I dont know of a unified way, but heres something that you might find useful: 

 http://www.codeguru.com/Cpp/I-N/network/networkinformation/article.php/c5451 

 What I would do in this case would be to wrap these up into a function, and based on the OS it would run the proper command, parse as required and return only the MAC address formatted as you want. Its ofcourse all the same, except that you only have to do it once, and it looks cleaner from the main code.