Question (ID-147713): How do I manipulate bits in Python? In C I could, for example, zero out bit #10 in a 32 bit unsigned value like so: 

 unsigned long value = 0xdeadbeef;
value &amp;= ~(1&lt;&lt;10);
 

 How do I do that in Python ? 
 Answers (Total-7): #0 Bitwise operations on Python ints work much like in C. The &amp;, | and ^ operators in Python work just like in C. The ~ operator works as for a signed integer in C; that is, ~x computes -x-1. 

 You have to be somewhat careful with left shifts, since Python integers aren't fixed-width. Use bit masks to obtain the low order bits. For example, to do the equivalent of shift of a 32-bit integer do (x &lt;&lt; 5) &amp; 0xffffffff. 
 #1 value = 0xdeadbeef
value &amp;= ~(1&lt;&lt;10)
 
 #2 Have you tried copying and pasting your code into the Python REPL to see what will happen? 

 &gt;&gt;&gt; value = 0xdeadbeef
&gt;&gt;&gt; value &amp;= ~(1&lt;&lt;10)
&gt;&gt;&gt; hex (value)
'0xdeadbaef'
 
 #3 Omit the 'unsigned long', and the semi-colons are not needed either: 

 value = 0xDEADBEEF
value &amp;= ~(1&lt;&lt;10)
print value
"0x%08X" % value
 
 #4 Python has C style bit manipulation operators, so your example is literally the same in Python except without type keywords. 

 value = 0xdeadbeef
value &amp;= ~(1 &lt;&lt; 10)
 
 #5 You should also check out BitArray , which is a nice interface for dealing with sequences of bits. 
 #6 If you're going to do a lot of bit manipulation ( and you care much more about readability rather than performance for your application ) then you may want to create an integer wrapper to enable slicing like in Verilog or VHDL: 

 
 import math
 class BitVector:
  def __init__(self,val):
   self._val = val

  def __setslice__(self,highIndx,lowIndx,newVal):
   assert math.ceil(math.log(newVal)/math.log(2)) &lt;= (highIndx-lowIndx+1)

   # clear out bit slice
   clean_mask = (2**(highIndx+1)-1)^(2**(lowIndx)-1)

   self._val = self._val ^ (self._val & clean_mask)
   # set new value
   self._val = self._val | (newVal&lt;&lt;lowIndx)

  def __getslice__(self,highIndx,lowIndx):
   return (self._val&gt;&gt;lowIndx)&(2L**(highIndx-lowIndx+1)-1)

 b = BitVector(0)
 b[3:0] = 0xD
 b[7:4] = 0xE
 b[11:8] = 0xA
 b[15:12] = 0xD

 for i in xrange(0,16,4):
  print '%X'%b[i+3:i]
  

 Outputs: 

 
 D
 E
 A
 D