Question (ID-916962): How does Python OOP compare to PHP OOP? I'm basically wondering if Python has any OOP shortcomings like PHP does. PHP has been developing their OOP practices for the last few versions. It's getting better in PHP but it's still not perfect. I'm new to Python and I'm just wondering if Python's OOP support is better or just comparable. 

 If there are some issues in Python OOP which don't follow proper OOP practices I would definitely like to know those. PHP for instance, doesn't allow for multiple inheritance as far as I'm aware. 

 Thanks Everyone! 

 Edit:
How about support for Public and Private? or support of variable types. I think these are important regarding building OOP software. 
 Answers (Total-6): #0 I would say that Python's OOP support is much better given the fact that it was introduced into the language in its infancy as opposed to PHP which bolted OOP onto an existing procedural model. 
 #1 Python's OOP support is very strong; it does allow multiple inheritance, and everything is manipulable as a first-class object (including classes, methods, etc). 

 Polymorphism is expressed through duck typing. For example, you can iterate over a list, a tuple, a dictionary, a file, a web resource, and more all in the same way. 

 There are a lot of little pedantic things that are debatably not OO, like getting the length of a sequence with len(list) rather than list.len(), but it's best not to worry about them. 
 #2 One aspect of Python's OOP model that is unusual is its encapsulation mechanism. Basically, Python assumes that programmers don't do bad things, and so it doesn't go out of its way to any extent to protect private member variables or methods. 

 It works by mangling names of members that begin with a two underscores and ending with fewer than two. Such identifiers are everywhere changed so that they have the class name prepended, with an additional underscore before that. thus: 

 class foo:
 def public(self):
  return self.__private()
 def __private(self):
  return 5

print foo().public()
print foo()._foo__private()
 

 names beginning and ending with two (or more) underscores are not mangled, so __init__ the method python uses for constructing new instances, is left alone. 

 Here's a link explaining it in more detail. 
 #3 Also: Python has native operator overloading, unlike PHP (although it does exist an extension). Love it or hate it, it's there. 
 #4 I think they're comparable at this point. As a simple test, I doubt there's any pattern in Design Patterns or Patterns of Enterprise Application Architecture , arguably the two most influential books in OOP, that is impossible to implement in either language. 

 Both languages have come along by leaps and bounds since their infancies. 

 As far as multiple inheritance, it often creates more problems than it solves , and is, these days, commonly left out of languages as an intentional design decision. 
 #5 If you are looking for "more pure" OOP, you should be looking at SmallTalk and/or Ruby. 

 PHP has grown considerably with it's support for OOP, but because of the way it works (reloads everything every time), things can get really slow if OOP best practices are followed. Which is one of the reasons you don't hear about PHP on Rails much.