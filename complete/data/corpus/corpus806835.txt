Question (ID-806835): Django: Redirect to previous page after login I'm trying to build a simple website with login functionality very similar to the one here on SO.
The user should be able to browse the site as an anonymous user and there will be a login link on every page. When clicking on the login link the user will be taken to the login form. After a succesfull login the user should be taken back to the page from where he clicked the login link in the first place.
I'm guessing that I have to somehow pass the url of the current page to the view that handles the login form but I can't really get it to work.
Maybe you guys could help me. 

 Thanks, 

 joerg 

 EDIT:
I figured it out. I linked to the login form by passing the current page as a GET parameter and then used 'next' to redirect to that page. Thanks! 

 EDIT 2:
My explanation did not seem to be clear so as requested here is my code:
Lets say we are on a page foo.html and we are not logged in. Now we would like to have a link on foo.html that links to login.html. There we can login and are then redirected back to foo.html.
The link on foo.html looks like this: 

  &lt;a href='/login/?next={{ request.path }}'&gt;Login&lt;/a&gt;
 

 Now I wrote a custom login view that looks somewhat like this: 

 def login_view(request):
 redirect_to = request.REQUEST.get('next', '')
 if request.method=='POST':
  #create login form...
  if valid login credentials have been entered:
   return HttpResponseRedirect(redirect_to) 
 #...
 return render_to_response('login.html', locals())
 

 And the important line in login.html: 

 &lt;form method="post" action="./?next={{ redirect_to }}"&gt;
 

 So yeah thats pretty much it, hope that makes it clear. 
 Answers (Total-7): #0 You do not need to make an extra view for this, the functionality is already built in. 

 First each page with a login link needs to know the current path, and the easiest way is to add the request context preprosessor to settings.py (the 4 first are default), then the request object will be available in each request: 

 settings.py: 

 TEMPLATE_CONTEXT_PROCESSORS = (
 "django.core.context_processors.auth",
 "django.core.context_processors.debug",
 "django.core.context_processors.i18n",
 "django.core.context_processors.media",
 "django.core.context_processors.request",
)
 

 Then add in the template you want the Login link: 

 base.html: 

 &lt;a href="{% url django.contrib.auth.views.login %}?next={{request.path}}"&gt;Login&lt;/a&gt;
 

 This will add a GET argument to the login page that points back to the current page. 

 The login template can then be as simple as this: 

 registration/login.html: 

 {% block content %}
&lt;form method="post" action=""&gt;
 {{form.as_p}}
&lt;input type="submit" value="Login"&gt;
&lt;/form&gt;
{% endblock %}
 
 #1 Django's built-in authentication works the way you want. 

 Their login pages include a next query string which is the page to return to after login. 

 Look at http://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.decorators.login_required 
 #2 This may not be a "best practice", but I've successfully used this before: 

 return HttpResponseRedirect(request.META.get('HTTP_REFERER','/'))
 
 #3 I encountered the same problem. This solution allows me to keep using the generic login view: 

 urlpatterns += patterns('django.views.generic.simple',
 (r'^accounts/profile/$', 'redirect_to', {'url': 'generic_account_url'}),
)
 
 #4 See django docs for views.login() , you supply a 'next' value (as a hidden field) on the input form to redirect to after a successful login. 
 #5 I linked to the login form by passing the current page as a GET parameter and then used 'next' to redirect to that page. Thanks! 
 #6 In registration/login.html (nested within templates folder) if you insert the following line, the page will render like Django's original admin login page: 

 {% include "admin/login.html" %}
 

 Note: The file should contain above lines only.