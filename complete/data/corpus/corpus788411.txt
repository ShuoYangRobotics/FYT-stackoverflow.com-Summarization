Question (ID-788411): Check to see if python script is running I have a python daemon running as a part of my web app/ How can I quickly check (using python) if my daemon is running and, if not, launch it? 

 I want to do it that way to fix any crashes of the daemon, and so the script does not have to be run manually, it will automatically run as soon as it is called and then stay running. 

 How can i check (using python) if my script is running? 
 Answers (Total-6): #0 Drop a pidfile somewhere (e.g. /tmp). Then you can check to see if the process is running by checking to see if the PID in the file exists. Don't forget to delete the file when you shut down cleanly, and check for it when you start up. 

 #/usr/bin/env python

import os
import sys

pid = str(os.getpid())
pidfile = "/tmp/mydaemon.pid"

if os.path.isfile(pidfile):
 print "%s already exists, exiting" % pidfile
 sys.exit()
else:
 file(pidfile, 'w').write(pid)

# Do some actual work here

os.unlink(pidfile)
 

 Then you can check to see if the process is running by checking to see if the contents of /tmp/mydaemon.pid are an existing process. Monit (mentioned above) can do this for you, or you can write a simple shell script to check it for you using the return code from ps. 

 ps up `cat /tmp/mydaemon.pid ` &gt;/dev/null &amp;&amp; echo "Running" || echo "Not running"
 

 For extra credit, you can use the atexit module to ensure that your program cleans up its pidfile under any circumstances (when killed, exceptions raised, etc.). 
 #1 Of course the example from Dan will not work as it should be. 

 Indeed, if the script crash, rise an exception, or does not clean pid file, the script will be run multiple times. 

 I suggest the following based from another website: 

 This is to check if there is already a lock file existing
 
#/usr/bin/env python
import os
import sys
if os.access(os.path.expanduser("~/.lockfile.vestibular.lock"), os.F_OK):
  #if the lockfile is already there then check the PID number
  #in the lock file
  pidfile = open(os.path.expanduser("~/.lockfile.vestibular.lock"), "r")
  pidfile.seek(0)
  old_pid = pidfile.readline()
  # Now we check the PID from lock file matches to the current
  # process PID
  if os.path.exists("/proc/%s" % old_pid):
    print "You already have an instance of the program running"
    print "It is running as process %s," % old_pid
    sys.exit(1)
  else:
    print "File is there but the program is not running"
    print "Removing lock file for the: %s as it can be there     because of the program last time it was run" % old_pid
    os.remove(os.path.expanduser("~/.lockfile.vestibular.lock"))
 

 This is part of code where we put a PID file in the lock file
 
pidfile = open(os.path.expanduser("~/.lockfile.vestibular.lock"), "w")
pidfile.write("%s" % os.getpid())
pidfile.close 

  

 This code will check the value of pid compared to existing running process., avoiding double execution. 

 I hope it will help. 
 #2 There are very good packages for restarting processes on UNIX. One that has a great tutorial about building and configuring it is monit . With some tweaking you can have a rock solid proven technology keeping up your daemon. 
 #3 A technique that is handy on Posix system is using domain sockets: 

 import socket
import sys
import time

def get_lock(process_name):
 global lock_socket
 lock_socket = socket.socket(socket.AF_UNIX, socket.SOCK_DGRAM)
 try:
  lock_socket.bind('\0' + process_name)
  print 'I got the lock'
 except socket.error:
  print 'lock exists'
  sys.exit()


get_lock('running_test')
while True:
 time.sleep(3)
 

 It is atomic and avoids the problem of having lock files lying around if your process gets sent a SIGKILL 
 #4 I'm a big fan of Supervisor for managing daemons. It's written in Python, so there are plenty of examples of how to interact with or extend it from Python. For your purposes the XML-RPC process control API should work nicely. 
 #5 There are a myriad of options. One method is using system calls or python libraries that perform such calls for you. The other is simply to spawn out a process like: 

 ps ax | grep processName
 

 and parse the output. Many people choose this approach, it isn't necessarily a bad approach in my view.