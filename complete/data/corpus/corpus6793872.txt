Question (ID-6793872): Variable assignment and modification (in python) When I ran this script (Python v2.6): 

 a = [1,2]
b = a
a.append(3)
print a
&gt;&gt;&gt;&gt; [1,2,3]
print b
&gt;&gt;&gt;&gt; [1,2,3]
 

 I expected print b to output [1,2] . Why did b get changed when all I did was change a? Is b permanently tied to a? If so, can I make them independant? How? 
 Answers (Total-6): #0 Objects in Python are stored by reference—you aren't assigning the value of a to b , but a pointer to the object that a is pointing to. 

 To emulate assignation by value, you can make a copy like so: 

 import copy

b = copy.copy(a)

# now the code works as "expected"
 

 Be aware this has performance disadvantages. 

 In the case of an array, there's a special method that relies on slices: 

 b = a[:]

# code also works as expected here
 

 

 Update – In addition to this, with some objects you can use the constructor—this includes lists: 

 b = list(a)
 
 #1 Memory management in Python involves a private heap memory location containing all Python objects and data structures. 

 Python's runtime only deals in references to objects (which all live in the heap): what goes on Python's stack are always references to values that live elsewhere. 

 &gt;&gt;&gt; a = [1, 2]
 

 

 &gt;&gt;&gt; b = a
 

 

 &gt;&gt;&gt; a.append(3)
 

 

 Here we can clearly see that the variable b is bound to the same object as a . 

 You can use the is operator to tests if two objects are physically the same, that means if they have the same address in memory. This can also be tested also using the id() function. 

 &gt;&gt;&gt; a is b
&gt;&gt;&gt; True
&gt;&gt;&gt; id(a) == id(b)
&gt;&gt;&gt; True
 

 So, in this case, you must explicitly ask for a copy .
Once you've done that, there will be no more connection between the two distinct list objects. 

 &gt;&gt;&gt; b = list(a)
&gt;&gt;&gt; a is b
&gt;&gt;&gt; False
 

 
 #2 You might want to look at this link. The problem you have here is a and b both point to the same memory location, so changing one changes the other. Instead, you want to do something like this: 

 a = [1,2]
b = list(a)
 
 #3 Short answer - Pointers. 

 When you type b = a it is setting b to look at the same array that a looks at. You have to make a new array with copies of the elements to separate them. In this case, something like b = [n for n in a] would work fine. For more complex operations you may want to check out http://docs.python.org/library/copy.html . 
 #4 a is a pointer to the list [1,2] . 

 When you do the assignment b = a the value of b is the address of the list [1,2] . 

 So when you do a.append(3) you are not actually changing a , you are changing the list that a points to. Since a and b both point to the same list, they both appear to change when you modify the other. 
 #5 If you simply want to copy the contents of list a to b, instead of making b a pointer to a: 

 b = a[:]
 

 Using the slice operator will copy the contents of the list into b such that you example would become: 

 a = [1,2]
b = a[:]
a.append(3)
print a
&gt;&gt;&gt;&gt; [1,2,3]
print b
&gt;&gt;&gt;&gt; [1,2]