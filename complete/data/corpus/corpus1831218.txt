Question (ID-1831218): Is there a tuple data structure in Python I want to have an 3 item combination like tag, name, and list of values (array) what is the best possible data structure to store such things. 

 Current I am using dictionary, but it only allows 2 items, but easy traversal using 

 for k, v in dict.iteritems():
 

 can we have something similar like: 

 for k, v, x in tuple.iteritems():
 
 Answers (Total-6): #0 Python tutorial on data structutres see section 5.3 "Tuples and sequences" 

 however, if you want to use "name" to index the data, you probably want to use a dictionary that has the string name as key and values are tuple of (tag, [list, of, values]) e.g. 

 d = 
 { "foo" : ("dog", [1,2,3,4]),
  "bar" : ("cat", [4,5,6,7,8,9]),
  "moo" : ("cow", [4,5,7,8,9,1,3,4,65])
 }

 for name,(tag,values) in d.items():
 do_something()
 

 this way also d["foo"] will work, just like for any other dictionary. 
 #1 why not just use a list of tuples (yes, this is a data type in python, like lists, but immutable): 

 mylistoftuples = [(1, 2, 3), (2, "three", 4), (3, 4, [1, 2, 3, 4, 5])]
for k, v, x in mylistoftuples:
 print k, v, x
 
 #2 Maybe you should take a look here: Python data structures 
 #3 You can consider the collections.namedtuple type to create tuple-like objects that have fields accessible by attribute lookup. 

 
 collections.namedtuple(typename, field_names[, verbose]) 
 
 Returns a new tuple subclass named typename. The new subclass is used to create tuple-like objects that have fields accessible by attribute lookup as well as being indexable and iterable. Instances of the subclass also have a helpful docstring (with typename and field_names) and a helpful __repr__() method which lists the tuple contents in a name=value format. 
 

 &gt;&gt;&gt; import collections
&gt;&gt;&gt; mytup = collections.namedtuple('mytup', ['tag','name', 'values'])
&gt;&gt;&gt; e1 = mytup('tag1','great',[1,'two',3])
&gt;&gt;&gt; e1
mytup(tag='tag1', name='great', values=[1, 'two', 3])
&gt;&gt;&gt; e1.values
[1, 'two', 3]
&gt;&gt;&gt;
 

 Building on other answers, an example of filtering a list of mytup objects: 

 &gt;&gt;&gt; tlist = [mytup("foo", "dog", [1,2,3,4]),
 mytup("bar","cat", [4,5,6,7,8,9]), mytup("moo","cow", [4,5,7,8,9,1,3,4,65])]
&gt;&gt;&gt; tlist
[mytup(tag='foo', name='dog', values=[1, 2, 3, 4]),
mytup(tag='bar', name='cat', values=[4, 5, 6, 7, 8, 9]),
mytup(tag='moo', name='cow', values=[4, 5, 7, 8, 9, 1, 3, 4, 65])]
&gt;&gt;&gt; [t for t in tlist if t.tag == 'bar']
[mytup(tag='bar', name='cat', values=[4, 5, 6, 7, 8, 9])]
&gt;&gt;&gt;
 

 Namedtuple objects can, of course, be used in other structures (e.g a dict ), as mentioned in other answers. The advantage is, obviously, that the fields are named , and code using them is clearer. 
 #4 Here's a comment to @gimel's answer : 

 &gt;&gt;&gt; import collections
&gt;&gt;&gt; T = collections.namedtuple("T", 'tag name values')
&gt;&gt;&gt; from itertools import starmap
&gt;&gt;&gt; list(starmap(T, [("a", "b", [1,2]), ("c", "d",[3,4])]))
[T(tag='a', name='b', values=[1, 2]), T(tag='c', name='d', values=[3, 4])]
 
 #5 You can have an array of 3-item tuples. 

 arr = [ (1,2,3), (4,5,6), (7,8,9)]
for (k, v, x) in arr:
 # do stuff