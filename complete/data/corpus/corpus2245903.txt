Question (ID-2245903): How to go from list of words to a list of distinct letters in Python Using Python, I'm trying to convert a sentence of words into a flat list of all distinct letters in that sentence. 

 Here's my current code: 

 words = 'She sells seashells by the seashore'

ltr = []

# Convert the string that is "words" to a list of its component words
word_list = [x.strip().lower() for x in words.split(' ')]

# Now convert the list of component words to a distinct list of
# all letters encountered.
for word in word_list:
 for c in word:
  if c not in ltr:
   ltr.append(c)

print ltr
 

 This code returns ['s', 'h', 'e', 'l', 'a', 'b', 'y', 't', 'o', 'r'] , which is correct, but is there a more Pythonic way to this answer, probably using list comprehensions/ set ? 

 When I try to combine list-comprehension nesting and filtering, I get lists of lists instead of a flat list. 

 The order of the distinct letters in the final list ( ltr ) is not important; what's crucial is that they be unique. 
 Answers (Total-7): #0 Sets provide a simple, efficient solution. 

 words = 'She sells seashells by the seashore'

unique_letters = set(words.lower())
unique_letters.discard(' ') # If there was a space, remove it.
 
 #1 set([letter.lower() for letter in words if letter != ' '])
 

 Edit : I just tried it and found this will also work (maybe this is what SilentGhost was referring to): 

 set(letter.lower() for letter in words if letter != ' ')
 

 And if you need to have a list rather than a set, you can 

 list(set(letter.lower() for letter in words if letter != ' '))
 
 #2 Make ltr a set and change your loop body a little: 

 ltr = set()

for word in word_list:
 for c in word:
  ltr.add(c)
 

 Or using a list comprehension: 

 ltr = set([c for word in word_list for c in word])
 
 #3 
>>> set('She sells seashells by the seashore'.replace(' ', '').lower())
set(['a', 'b', 'e', 'h', 'l', 'o', 's', 'r', 't', 'y'])
>>> set(c.lower() for c in 'She sells seashells by the seashore' if not c.isspace())
set(['a', 'b', 'e', 'h', 'l', 'o', 's', 'r', 't', 'y'])
>>> from itertools import chain
>>> set(chain(*'She sells seashells by the seashore'.lower().split()))
set(['a', 'b', 'e', 'h', 'l', 'o', 's', 'r', 't', 'y'])
 
 #4 here are some timings made with py3k: 

 &gt;&gt;&gt; import timeit
&gt;&gt;&gt; def t():     # mine (see history)
 a = {i.lower() for i in words}
 a.discard(' ')
 return a

&gt;&gt;&gt; timeit.timeit(t)
7.993071812372081
&gt;&gt;&gt; def b():     # danben
 return set(letter.lower() for letter in words if letter != ' ')

&gt;&gt;&gt; timeit.timeit(b)
9.982847967921138
&gt;&gt;&gt; def c():     # ephemient in comment
 return {i.lower() for i in words if i != ' '}

&gt;&gt;&gt; timeit.timeit(c)
8.241267610375516
&gt;&gt;&gt; def d():     #Mike Graham
 a = set(words.lower())
 a.discard(' ')
 return a

&gt;&gt;&gt; timeit.timeit(d)
2.7693045186082372
 
 #5 set(l for w in word_list for l in w)
 
 #6 words = 'She sells seashells by the seashore'

ltr = list(set(list(words.lower())))
ltr.remove(' ')
print ltr