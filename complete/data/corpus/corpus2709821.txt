Question (ID-2709821): python 'self' explained What is the purpose of the 'self' word in python. I understand it refers to the specific object created from that class, but i cant see why it explicitly needs to be added to every function as a parameter. To illustrate, in ruby, i could do this: 

 class myClass
 def myFunc(name)
  @name = name
 end
end
 

 Which i understand, quite easily, However in python i need to include self: 

 class myClass:
 def myFunc(self, name):
  self.name = name
 

 Can anyone talk me through this? its not something ive come across in my (admittedly limited) experience.
Any help would be appreciated. 
 Answers (Total-9): #0 The reason you need to use self. is because Python does not use the @ syntax to refer to instance attributes. Python decided to do methods in a way that makes the instance to which the method belongs be passed automatically, but not received automatically: the first parameter of methods is the instance the method is called on. That makes methods entirely the same as functions, and leaves the actual name to use up to you (although self is the convention, and people will generally frown at you when you use something else.) self is not special to the code, it's just another object. 

 Python could have done something else to distinguish normal names from attributes -- special syntax like Ruby has, or requiring declarations like C++ and Java do, or perhaps something yet more different -- but it didn't. Python's all for making things explicit, making it obvious what's what, and although it doesn't do it entirely everywhere, it does do it for instance attributes. That's why assigning to an instance attribute needs to know what instance to assign to, and that's why it needs self. . 
 #1 I have been confused by this as well for quite a while and I don’t believe that the reason for this has got much to do with the often-pronounced explicit is better than implicit but that it is just following a simple analogy there. 

 Let’s take a simple vector class: 

 class Vector(object):
 def __init__(self, x, y):
  self.x = x
  self.y = y
 

 Now, we want to have a method which calculates the length. What would it look like if we wanted to define it inside the class? 

  def length(self):
  return math.sqrt(self.x ** 2 + self.y ** 2)
 

 And, what should it look like when we were to define it as a global method/function? 

 def length_global(vector):
 return math.sqrt(vector.x ** 2 + vector.y ** 2)
 

 So, the whole structure stays the same. Now, how can me make use of this? If we assume for a moment that we hadn’t written a length method for our Vector class, we could do this: 

 Vector.length_new = length_global
v = Vector(3, 4)
print v.length_new() # 5.0
 

 This works, because the first parameter of length_global , can be re-used as the self parameter in length_new . This would not be possible without an explicit self . 

 

 Another way of understanding the need for the explicit self is to see where Python adds some syntactical sugar. When you keep in mind, that basically, a call like 

 v_instance.length()
 

 is internally transformed to 

 Vector.length(v_instance)
 

 it is easy to see where the self fits in. You don’t not actually write instance methods in Python; what you write is class methods which (must) take an instance as a first parameter. And therefore, you’ll have to place the instance parameter somewhere explicitly. 
 #2 The following excerpts are from the Python documentation about self : 

 
 As in Modula-3, there are no shorthands [in Python] for referencing the object’s members from its methods: the method function is declared with an explicit first argument representing the object, which is provided implicitly by the call. 
 
 Often, the first argument of a method is called self. This is nothing more than a convention: the name self has absolutely no special meaning to Python. Note, however, that by not following the convention your code may be less readable to other Python programmers, and it is also conceivable that a class browser program might be written that relies upon such a convention. 
 

 For more information, see the Python documentation tutorial on classes . 
 #3 As well as all the other reasons already stated, it allows for easier access to overridden methods. 

 You can call Class.some_method(inst) 

 example of where it's useful: 

 class C1(object):
 def __init__(self):
   print "C1 init"

class C2(C1):
 def __init__(self): #overrides C1.__init__
  print "C2 init"
  C1.__init__(self) #but we still want C1 to init the class too
 

 

 &gt;&gt;&gt; C2()
"C2 init"
"C1 init"
 
 #4 I will demonstrate with code that does not use classes : 

 def state_init(state):
 state['field'] = 'init'

def state_add(state, x):
 state['field'] += x

def state_mult(state, x):
 state['field'] *= x

def state_getField(state):
 return state['field']

myself = {}
state_init(myself)
state_add(myself, 'added')
state_mult(myself, 2)

print( state_getField(myself) )
#--&gt; 'initaddedinitadded'
 

 Classes are just a way to avoid passing in this "state" thing all the time (and other nice things like initializing, class composition, the rarely-needed metaclasses, and supporting custom methods to override operators). 

 Now let's demonstrate the above code using the built-in python class machinery, to show how it's basically the same thing. 

 class State(object):
 def __init__(self):
  self.field = 'init'
 def add(self, x):
  self.field += x
 def mult(self, x):
  self.field *= x

s = State()
s.add('added') # self is implicitly passed in
s.mult(2)   # self is implicitly passed in
print( s.field )
 

 [migrated my answer from duplicate closed question] 
 #5 self is an object reference to the object itself, therefore, they are same.
Python methods are not called in the context of the object itself.
 self in Python may be used to deal with custom object models or something. 
 #6 I like this example: 

 class A: 
 foo = []
a, b = A(), A()
a.foo.append(5)
b.foo
ans: [5]

class A: 
 def __init__(self): 
  self.foo = []
a, b = A(), A()
a.foo.append(5)
b.foo
ans: []
 
 #7 it's an explicit reference to the class instance object. 
 #8 &gt;&gt;&gt; import this