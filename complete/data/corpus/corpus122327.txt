Question (ID-122327): How do I find the location of my Python site-packages directory? How do I find the location of my site-packages directory? 
 Answers (Total-8): #0 From "How to Install Django" documentation (though this is useful to more than just Django installation) - execute the following from the shell: 

 python -c "from distutils.sysconfig import get_python_lib; print(get_python_lib())"
 

 Formatted for readability (rather than use as a one-liner), that looks like the following: 

 from distutils.sysconfig import get_python_lib
print(get_python_lib())
 
 #1 For Ubuntu , 

 python -c "from distutils.sysconfig import get_python_lib; print get_python_lib()"
 

 ...is not correct. 

 It will point you to /usr/lib/pythonX.X/dist-packages 

 This folder only contains packages your operating system has automatically installed for programs to run. 

 On ubuntu , the site-packages folder that contains packages installed via setup_tools\easy_install\pip will be in /usr/local/lib/pythonX.X/dist-packages 

 The second folder is probably the more useful one if the use case is related to installation or reading source code. 

 If you do not use Ubuntu, you are probably safe copy-pasting the first code box into the terminal. 
 #2 A side-note: The proposed solution (distutils.sysconfig.get_python_lib()) does not work when there is more than one site-packages directory (as recommended by this article ). It will only return the main site-packages directory. Alas, I have no better solution either. Python doesn't seem to keep track of site-packages directories, just the packages within them. 
 #3 As others have noted, distutils.sysconfig has the relevant settings: 

 import distutils.sysconfig
print distutils.sysconfig.get_python_lib()
 

 ...though the default site.py does something a bit more crude, paraphrased below: 

 import sys, os
print os.sep.join([sys.prefix, 'lib', 'python' + sys.version[:3], 'site-packages'])
 

 (it also adds ${sys.prefix}/lib/site-python and adds both paths for sys.exec_prefix as well, should that constant be different). 

 That said, what's the context? You shouldn't be messing with your site-packages directly; setuptools/distutils will work for installation, and your program may be running in a virtualenv where your pythonpath is completely user-local, so it shouldn't assume use of the system site-packages directly either. 
 #4 An additional note to the get_python_lib function mentioned already: on some platforms different directories are used for platform specific modules (eg: modules that require compilation). If you pass plat_specific=True to the function you get the site packages for platform specific packages. 
 #5 All the answers (or: the same answer repeated over and over) are inadequate. What you want to do is this: 

 from setuptools.command.easy_install import easy_install
class easy_install_default(easy_install):
 """ class easy_install had problems with the fist parameter not being
  an instance of Distribution, even though it was. This is due to
  some import-related mess.
  """

 def __init__(self):
 from distutils.dist import Distribution
 dist = Distribution()
 self.distribution = dist
 self.initialize_options()
 self._dry_run = None
 self.verbose = dist.verbose
 self.force = None
 self.help = 0
 self.finalized = 0

e = easy_install_default()
import distutils.errors
try:
 e.finalize_options()
except distutils.errors.DistutilsError:
 pass

print e.install_dir
 

 The final line shows you the installation dir. Works on Ubuntu, whereas the above ones don't. Don't ask me about windows or other dists, but since it's the exact same dir that easy_install uses by default, it's probably correct everywhere where easy_install works (so, everywhere, even macs). Have fun. Note: original code has many swearwords in it. 
 #6 from distutils.sysconfig import get_python_lib
print get_python_lib()
 
 #7 Let's say you have installed the package 'django'. import it and type in dir(django). It will show you, all the functions and attributes with that module. Type in the python interpreter - 

 
 
  
  import django
  dir(django)
  ['VERSION', ' builtins ', ' doc ', ' file ', ' name ', ' package ', ' path ', 'get_version']
  print django. path 
  ['/Library/Python/2.6/site-packages/django'] 
  
 
 

 You can do the same thing if you have installed mercurial. 

 This is for Snow Leopard. But I think it should work in general as well.