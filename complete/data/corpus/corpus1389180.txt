Question (ID-1389180): Python: Automatically initialize instance variables? I have a python class that looks like this: 

 class Process:
 def __init__(self, PID, PPID, cmd, FDs, reachable, user):
 

 followed by: 

   self.PID=PID
  self.PPID=PPID
  self.cmd=cmd
  ...
 

 Is there any way to autoinitialize these instance variables, like C++'s initialization list? It would spare lots of redundant code. 
 Answers (Total-6): #0 Edit: Adam asked me to extend the solution to support keyword arguments 

 Here is the final solution: 

 from functools import wraps
import inspect

def initializer(fun):
 names, varargs, keywords, defaults = inspect.getargspec(fun)
 @wraps(fun)
 def wrapper(self, *args, **kargs):
  for name, arg in zip(names[1:], args) + kargs.items():
   setattr(self, name, arg)
  fun(self, *args, **kargs)
 return wrapper
 

 

 You can use a decorator: 

 from functools import wraps
import inspect

def initializer(fun):
 names, varargs, keywords, defaults = inspect.getargspec(fun)
 @wraps(fun)
 def wrapper(self, *args):
  for name, arg in zip(names[1:], args):
   setattr(self, name, arg)
  fun(self, *args)
 return wrapper

class process:
 @initializer
 def __init__(self, PID, PPID, cmd, FDs, reachable, user):
  pass
 

 Output: 

 &gt;&gt;&gt; c = process(1, 2, 3, 4, 5, 6)
&gt;&gt;&gt; c.PID
1
&gt;&gt;&gt; dir(c)
['FDs', 'PID', 'PPID', '__doc__', '__init__', '__module__', 'cmd', 'reachable', 'user'
 
 #1 If you're using Python 2.6 or higher, you can use collections.namedtuple : 

 &gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; Process = namedtuple('Process', 'PID PPID cmd')
&gt;&gt;&gt; proc = Process(1, 2, 3)
&gt;&gt;&gt; proc.PID
1
&gt;&gt;&gt; proc.PPID
2
 

 This is appropriate especially when your class is really just a big bag of values. 
 #2 Quoting the Zen of Python , 

 
 Explicit is better than implicit. 
 
 #3 Another thing you can do: 

 class X(object):
 def __init__(self, a,b,c,d):
  vars = locals() # dict of local names
  self.__dict__.update(vars) # __dict__ holds and object's attributes
  del self.__dict__["self"] # don't need `self`
 

 But the only solution I would recommend, besides just spelling it out, is "make a macro in your editor" ;-p 
 #4 You could do it easily with the keyword arguments, e.g. like this: 

 &gt;&gt;&gt; class D:
 def __init__(self, **kwargs):
 	for k, v in kwargs.items():
 		setattr(self, k, v)

&gt;&gt;&gt; D(test='d').test
'd'
 

 similar implementation for the positional arguments would be: 

 &gt;&gt; class C:
 def __init__(self, *args):
 	self.t, self.d = args


&gt;&gt;&gt; C('abc', 'def').t
'abc'
&gt;&gt;&gt; C('abc', 'def').d
'def'
 

 which to me doesn't seem to solve your problem. 
 #5 Nadia's solution is better and more powerful, but I think this is also interesting: 

 def constructor(*arg_names):
 def __init__(self, *args):
 for name, val in zip(arg_names, args):
  self.__setattr__(name, val)
 return __init__


class MyClass(object):
 __init__ = constructor("var1", "var2", "var3")


&gt;&gt;&gt; c = MyClass("fish", "cheese", "beans")
&gt;&gt;&gt; c.var2
"cheese"