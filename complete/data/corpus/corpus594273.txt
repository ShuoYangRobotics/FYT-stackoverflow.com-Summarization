Question (ID-594273): Random word generator What would be the best way to go about getting a function that returns a random English word (preferably a noun), without keeping a list of all possible words in a file before hand? 

 Edit: Sorry for the failure of wording. After the tiniest amount of thought i suppose i am after some sort of online list or api that would not require me to have a massive list of all the words stored on my server. 
 Answers (Total-9): #0 Word lists need not take up all that much space. 

 Here's a wordlist with over 5000 words, all nouns . It clocks in at under 50K, the size of a medium-sized jpeg image. 

 I'll leave choosing a random one as an exercise for the reader. 
 #1 You can't. There is no algorithm to generate meaningful words. You can only generate words that sound like English, but they won't have any meaning. 
 #2 You could have the function try and parse an online resource such as: 

 http://www.zokutou.co.uk/randomword/ 
 #3 Another theoretical approach: you could scrape the random wikipedia article page and return the N-th word of the article. 
 #4 You can download the "words common to SOWPODS and TWL" lists from http://www.math.toronto.edu/jjchew/scrabble/lists/ . I put all the words in those files together and the list weighed in at about 642k. Not huge by any standards. The lists do contain a whole lot of obscure words though, since they are meant for tournament Scrabble use. The good thing is that the lists form a substantial subset of the English language. 
 #5 I know it's an old post but for the benefit of googlers looking for solutions, it's simple. just drop in the list of nouns from one of the first posts into UltraEdit and replace the CRLF with "," and paste into the instantiation of the dictionary string object below. 

 sample usage: string randWords = Utils.Randomizer.Instance.GetRandomWords(3,8); 

 Code: 

 

 using System.Text; 

 namespace Utils {
public class Randomizer {
  #region Singleton Object Instantiation
  private static Randomizer me = null;
  private static string lockObj = ""; 

  public static Randomizer Instance {
  get {
   lock (lockObj) {
    if (me == null) {
     me = new Randomizer();
    }

    return me;
   }
  }
 }
 private Randomizer() {
  rand = new Random(DateTime.Now.ToString().GetHashCode());
 }
 #endregion


 string[] dictionary = new string[] { "abbreviation", "abbreviations", "abettor", "abettors", ".etc" };
 Random rand = null;

 public string GetRandomWords(int minWords, int maxWords) {
  int wrdCount = maxWords - minWords;
  StringBuilder sb = new StringBuilder(wrdCount * 10); //initial size to speed up appends

  //for each required word get a random one out of the dictionary
  for (int i = 0; i &lt; wrdCount; i++) {
   //take care to add a space between the words
   if (sb.Length &gt; 0)
    sb.Append(" ");

   //add randomized word
   sb.Append(dictionary[rand.Next(0, dictionary.Length - 1)]);
  }

  //result!
  return sb.ToString().Trim();
 }
}
 

 } 
 #6 Just use setgetgo's random word api. It's free, it's easy, and it rocks. 

 http://randomword.setgetgo.com/ 
 #7 Well, you have three options: 

 
 Hard-code the list of words and initialize an array with it. 
 Fetch the list from an internet location instead of a file. 
 Keep a list of possible words in a file. 
 

 The only way to avoid the above is if you're not concerned whether the word is real: you can just generate random-length strings of characters. (There's no way to programmatically generate words without a dictionary list to go from.) 
 #8 There's a random word generator here - it's not English but it's English-ish, i.e. the words are similar enough to language that a user can read the words and store them in short-term memory. 

 Source code is in C# and a bit kludged, but you could use a similar approach in Python to generate lots of words without having to store a massive list. 

 Alternatively, you could call the web service on the demo page directly - it's hosted on GoDaddy though, so no guarantees it will work in production!