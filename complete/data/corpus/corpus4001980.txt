Question (ID-4001980): Python Regular Expression Matching: ## ## Im searching a file line by line for the occurrence of ##random_string##. It works except for the case of multiple #... 

 pattern='##(.*?)##'
prog=re.compile(pattern)

string='lala ###hey## there'
result=prog.search(string)

print re.sub(result.group(1), 'FOUND', string)
 

 Desired Output: 

 "lala #FOUND there"
 

 Instead I get the following because its grabbing the whole ###hey##: 

 "lala FOUND there"
 

 So how would i ignore any number of # at the beg or end, and only capture "##string##". 
 Answers (Total-7): #0 To match at least two hashes at either end: 

 pattern='##+(.*?)##+'
 
 #1 Your problem is with your inner match. You use . , which matches any character that isn't a line end, and that means it matches # as well. So when it gets ###hey## , it matches (.*?) to #hey . 

 The easy solution is to exclude the # character from the matchable set: 

 prog = re.compile(r'##([^#]*)##')
 

 Protip: Use raw strings (e.g. r'' ) for regular expressions so you don't have to go crazy with backslash escapes. 

 Trying to allow # inside the hashes will make things much more complicated. 

 EDIT: If you do not want to allow blank inner text (i.e. "####" shouldn't match with an inner text of ""), then change it to: 

 prog = re.compile(r'##([^#]+)##')
 

 + means "one or more." 
 #2 '^#{2,}([^#]*)#{2,}'  -- any number of # >= 2 on either end 

 be careful with using lazy quantifiers like (.*?) because it'd match '##abc#####' and capture 'abc###'. also lazy quantifiers are very slow 
 #3 Try the "block comment trick": /##((?:[^#]|#[^#])+?)##/ 
 
 #4 Adding + to regex, which means to match one or more character. 

 pattern='#+(.*?)#+'
prog=re.compile(pattern)

string='###HEY##'
result=prog.search(string)
print result.group(1)
 

 Output: 

 HEY
 
 #5 have you considered doing it non-regex way? 

 &gt;&gt;&gt; string='lala ####hey## there'
&gt;&gt;&gt; string.split("####")[1].split("#")[0]
'hey'
 
 #6 &gt;&gt;&gt; import re
&gt;&gt;&gt; text= 'lala ###hey## there'
&gt;&gt;&gt; matcher= re.compile(r"##[^#]+##")
&gt;&gt;&gt; print matcher.sub("FOUND", text)
lala #FOUND there
&gt;&gt;&gt;