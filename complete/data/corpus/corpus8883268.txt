Question (ID-8883268): how to normalize list of lists of strings in python? I have a list of lists that represent a grid of data (think rows in a spreadsheet). Each row can have an arbitrary number of columns, and the data in each cell is a string of arbitrary length. 

 I want to normalize this to, in effect, make each row have the same number of columns and each column in the data have the same width, padding with spaces as necessary. For example, given the following input: 

 (
 ("row a", "a1","a2","a3"),
 ("another row", "b1"),
 ("c", "x", "y", "a long string")
)
 

 I want the data to look like this: 

 (
 ("row a  ", "a1", "a2", "a3   "),
 ("another row", "b1", " ", "    "),
 ("c   ", "x ", "y ", "a long string")
)
 

 What's the pythonic solution for python 2.6 or greater? Just to be clear: I'm not looking to pretty-print the list per se , I'm looking for a solution that returns a new list of lists (or tuple of tuples) with the values padded out. 
 Answers (Total-8): #0 Starting with your input data: 

 &gt;&gt;&gt; d = (
 ("row a", "a1","a2","a3"),
 ("another row", "b1"),
 ("c", "x", "y", "a long string")
)
 

 Make one pass to determine the maximum size of each column: 

 &gt;&gt;&gt; col_size = {}
&gt;&gt;&gt; for row in d:
  for i, col in enumerate(row):
   col_size[i] = max(col_size.get(i, 0), len(col))

&gt;&gt;&gt; ncols = len(col_size)
 

 Then make a second pass to pad each column to the required width: 

 &gt;&gt;&gt; result = []
&gt;&gt;&gt; for row in d:
  row = list(row) + [''] * (ncols - len(row))
  for i, col in enumerate(row):
   row[i] = col.ljust(col_size[i])
  result.append(row)
 

 That gives the desired result: 

 &gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; pprint(result)
[['row a  ', 'a1', 'a2', 'a3   '],
 ['another row', 'b1', ' ', '    '],
 ['c   ', 'x ', 'y ', 'a long string']]
 

 For convenience, the steps can be combined into a single function: 

 def align(array):
 col_size = {}
 for row in array:
  for i, col in enumerate(row):
   col_size[i] = max(col_size.get(i, 0), len(col))
 ncols = len(col_size)
 result = []
 for row in array:
  row = list(row) + [''] * (ncols - len(row))
  for i, col in enumerate(row):
   row[i] = col.ljust(col_size[i])
  result.append(row)
 return result
 
 #1 Here's what I came up with: 

 import itertools

def pad_rows(strs):
 for col in itertools.izip_longest(*strs, fillvalue=""):
  longest = max(map(len, col))
  yield map(lambda x: x.ljust(longest), col)

def pad_strings(strs):
 return itertools.izip(*pad_rows(strs))
 

 And calling it like this: 

 print tuple(pad_strings(x))
 

 yields this result: 

 (('row a  ', 'a1', 'a2', 'a3   '),
 ('another row', 'b1', ' ', '    '),
 ('c   ', 'x ', 'y ', 'a long string'))
 
 #2 First of all, define a padding function: 

 def padder(lst, pad_by):
 lengths = [len(x) for x in lst]
 max_len = max(lengths)
 return (x + pad_by * (max_len - length) for x, length in zip(lst, lengths))
 

 then pad each entry to the same length by '' : 

 a = # your list of list of string

a_padded = padder(a, ('',))
 

 then, transpose this list of list so we can work column by column, 

 a_tr = zip(*a_padded)
 

 for each row, we find the maximum length of the strings, and then pad it to the specified length. 

 a_tr_strpadded = (padder(x, ' ') for x in a_tr)
 

 finally we transpose it again, and evaluate the result. 

 a_strpadded = zip(*a_tr_strpadded)
return [list(x) for x in a_strpadded]
 

 Use tuple(tuple(x) for ...) if you want a tuple of tuple instead of list of list. 

 Demo: http://ideone.com/4d0DE 
 #3 import itertools

def fix_grid(grid):
 # records the number of cols, and their respective widths
 cols = []
 for row in grid:
  # extend cols with widths of 0 if necessary
  cols.extend(itertools.repeat(0, max(0, len(row) - len(cols)))
  for index, value in enumerate(row):
   # increase any widths in cols if this row has larger entries
   cols[index] = max(cols[index], len(value)
 # generate new rows with values widened, and fill in values that are missing 
 for row in grid:   
  yield tuple(value.ljust(width)
     for value, width in itertools.zip_longest(row, cols, ''))
# create a tuple of fixed rows from the old grid
grid = tuple(fix_grid(grid))
 

 See: 

 
 str.ljust 
 itertools.repeat 
 itertools.zip_longest 
 
 #4 I'd suggest you to use list instead of tuple . tuple s are immutable, and hard to work with. 

 First, find the length of the longest row. 

 maxlen = max([len(row) for row in yourlist])
 

 Then pad each row by necessary number of strings: 

 for row in yourlist:
 row += ['' for i in range(maxlen - len(row))]
 

 Then you can interchange the rows and columns i.e. columns should be rows and vice versa. For that you can write 

 newlist = [[row[i] for row in yourlist] for i in range(len(row))]
 

 Now, you can take a row (a column of old list) and pad the strings as required. 

 for row in newlist:
 maxlen = max([len(s) for s in row])
 for i in range(len(row)):
  row[i] += ' ' * (maxlen - len(row[i]))
 

 Now convert the table back to the original format: 

 table = [[row[i] for row in newlist] for i in range(len(row))]
 

 To put it together in a function: 

 def f(table):
 maxlen = max([len(row) for row in table])
 for row in table:
  row += ['' for i in range(maxlen - len(row))]
 newtable = [[row[i] for row in table] for i in range(len(row))]
 for row in newtable:
  maxlen = max([len(s) for s in row])
  for i in range(len(row)):
   row[i] += ' ' * (maxlen - len(row[i]))
 return [[row[i] for row in newtable] for i in range(len(row))]
 

 This solution works for list s. 
 #5 I can only think of doing this by going through it twice - but should not be hard: 

 def pad_2d_matrix(data):
 widths = {}
 for line in data:
  for index, string in enumerate(line):
   widths[index] = max(widths.get(index, 0), len(string))
 result = []
 max_strings = max(widths.keys())
 for line in data:
  result.append([])
  for index, string in enumerate(line):
   result[-1].append(string + " " * (widths[index] - len(string) ))
  for index_2 in range(index, max_strings):
   result[-1].append(" " * widths[index_2])
 return result
 
 #6 I agree with everyone else, that there should be two passes. Pass 1 computes the maximum width for each column, and pass 2 pads each cell to its column width. 

 The code below relies on the Python builtin functions map() and reduce() . The drawback is that the expressions are arguably more cryptic. I've tried to offset that with lots of indentation. The benefit is that the code benefits from any loop optimisations the implementation has made in these functions. 

 g = (
 ("row a", "a1","a2","a3"),
 ("another row", "b1"),
 (),  # null row added as a test case
 ("c", "x", "y", "a long string")
)

widths = reduce(
  lambda sofar, row: 
   map(
    lambda longest, cell: 
     max(longest, 0 if cell is None else len(cell)
    ), 
   sofar, 
   row
  ),
  g, 
  []
) #reduce()

print 'widths:', widths

print 'normalised:', tuple([ 
 tuple(map(
  lambda cell, width: ('' if cell is None else cell).ljust(width), 
  row, 
  widths
 )) #tuple(map(
 for row in g 
]) #tuple([
 

 This gives output (with line breaks added for legibility): 

 widths: [11, 2, 2, 13]
normalised: (
 ('row a  ', 'a1', 'a2', 'a3   '), 
 ('another row', 'b1', ' ', '    '), 
 ('   ', ' ', ' ', '    '), 
 ('c   ', 'x ', 'y ', 'a long string')
)
 

 I've tested this code. The ... if cell is None else cell expressions are verbose, but necessary to make the expressions actually work. 
 #7 just for fun - one liner 

 from itertools import izip_longest as zl


t=(
 ("row a", "a1","a2","a3"),
 ("another row", "b1"),
 ("c", "x", "y", "a long string")
);


b=tuple(tuple(("{: &lt;"+str(map(max, ( map(lambda x: len(x) if x else 0,i) for i in zl(*t) ))[i])+"}").format(j) for i,j in enumerate(list(k)+[""]*(max(map(len,t))-len(k)))) for k in t)
print(b)