Question (ID-744626): Calling unknown Python functions This was the best name I could come up with for the topic and none of my searches yielded information relevant to the question. 

 How do I call a function from a string, i.e. 

 functions_to_call = ["func_1", "func_2", "func_3"]

for f in functions_to_call:
 call f
 
 Answers (Total-7): #0 You can use the python builtin locals() to get local declarations, eg: 

 def f():
 print "Hello, world"

def g():
 print "Goodbye, world"

for fname in ["f", "g"]:
 fn = locals()[fname]
 print "Calling %s" % (fname)
 fn()
 

 You can use the "imp" module to load functions from user-specified python files which gives you a bit more flexibility. 

 Using locals() makes sure you can't call generic python, whereas with eval, you could end up with the user setting your string to something untoward like: 

 f = 'open("/etc/passwd").readlines'
print eval(f+"()")
 

 or similar and end up with your programming doing things you don't expect to be possible. Using similar tricks with locals() and dicts in general will just give attackers KeyErrors. 
 #1 how do you not know the name of the function to call? Store the functions instead of the name: 

 functions_to_call = [int, str, float]

value = 33.5

for function in functions_to_call:
 print "calling", function
 print "result:", function(value)
 
 #2 Something like that...when i was looking at function pointers in python.. 

 def myfunc(x):
 print x

dict = {
 "myfunc": myfunc
}

dict["myfunc"]("hello")

func = dict.get("myfunc")
if callable(func):
 func(10)
 
 #3 Have a look at the getattr function: 

 http://docs.python.org/library/functions.html?highlight=getattr#getattr 

 import sys

functions_to_call = ["func_1", "func_2", "func_3"]

for f in functions_to_call:
 getattr(sys.modules[__name__], f)()
 
 #4 functions_to_call = ["func_1", "func_2", "func_3"]

for f in functions_to_call:
 eval(f+'()')
 

 Edited to add: 

 Yes, eval() generally is a bad idea, but this is what the OP was looking for. 
 #5 See the eval and compile functions. 

 
 This function can also be used to execute arbitrary code objects (such as those created by compile()). In this case pass a code object instead of a string. If the code object has been compiled with 'exec' as the kind argument, eval()â€˜s return value will be None. 
 
 #6 Don't use eval! It's almost never required, functions in python are just attributes like everything else, and are accessible either using getattr on a class, or via locals() : 

 &gt;&gt;&gt; print locals()
{'__builtins__': &lt;module '__builtin__' (built-in)&gt;,
 '__doc__': None,
 '__name__': '__main__',
 'func_1': &lt;function func_1 at 0x74bf0&gt;,
 'func_2': &lt;function func_2 at 0x74c30&gt;,
 'func_3': &lt;function func_3 at 0x74b70&gt;,
}
 

 Since that's a dictionary, you can get the functions via the dict-keys func_1 , func_2 and func_3 : 

 &gt;&gt;&gt; f1 = locals()['func_1']
&gt;&gt;&gt; f1
&lt;function func_1 at 0x74bf0&gt;
&gt;&gt;&gt; f1()
one
 

 So, the solution without resorting to eval: 

 &gt;&gt;&gt; def func_1():
...  print "one"
... 
&gt;&gt;&gt; def func_2():
...  print "two"
... 
&gt;&gt;&gt; def func_3():
...  print "three"
... 
&gt;&gt;&gt; functions_to_call = ["func_1", "func_2", "func_3"]
&gt;&gt;&gt; for fname in functions_to_call:
...  cur_func = locals()[fname]
...  cur_func()
... 
one
two
three