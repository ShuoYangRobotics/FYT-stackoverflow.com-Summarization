Question (ID-1677424): Overriding the newline generation behaviour of Python's print statement I have a bunch of legacy code for encoding raw emails that contains a lot of print statements such as 

 print &gt;&gt;f, "Content-Type: text/plain"
 

 This is all well and good for emails, but we're now leveraging the same code for outputting HTTP request. The problem is that the Python print statement outputs '\n' whilst HTTP requires '\r\n' . 

 It looks like Python (2.6.4 at least) generates a trailing PRINT_NEWLINE byte code for a print statement which is implemented as 

 ceval.c:1582: err = PyFile_WriteString("\n", w);
 

 Thus it appears there's no easy way to override the default newline behaviour of print. I have considered the following solutions 

 After writing the output simply do a .replace('\n', '\r\n') . This will interfere with HTTP messages that use multipart encoding. 
 Create a wrapper around the destination file object and proxy the .write method 

 def write(self, data):
 if data == '\n':
  data = '\r\n'
 return self._file.write(data)
 

 Write a regular expression that translates print &gt;&gt;f, text to f.write(text + line_end) where line_end can be '\n' or '\r\n' . 

 I believe the third option would be the most appropriate. It would be interesting to hear what your Pythonic approach to the problem would be. 
 Answers (Total-6): #0 You should solve your problem now and for forever by defining a new output function. Were print a function, this would have been much easier. 

 I suggest writing a new output function, mimicing as much of the modern print function signature as possible (because reusing a good interface is good), for example: 

 def output(*items, end="\n", file=sys.stdout):
 pass
 

 Once you have replaced all prints in question, you no longer have this problem -- you can always change the behavior of your function instead! This is a big reason why print was made a function in Python 3 -- because in Python 2.x, "all" projects invariably go through the stage where all the print statements are no longer flexible, and there is no easy way out. 
 #1 (Not sure how/if this fits with the wrapper you intend to use, but in case...) 

 In Python 2.6 (and many preceding versions), you can suppress the newline by adding a comma at the end of the print statement, as in: 

 data = 'some msg\r\n'
print data, # note the comma
 

 The downside of using this approach however is that the print syntax and behavior is changed in Python3. 
 #2 In python2.x, I think you can do: 

 print &gt;&gt;f "some msg\r\n",
 

 to supress the trailing new line. 

 In python3.x, it's a lot simpler: 

 print("some msg", end = "\r\n", file = f)
 
 #3 I think I would define a new function writeline in an inherited file/stream class and update the code to use writeline instead of print . The file object itself can hold the line ending style as a member. That should give you some flexibility in behavior and also make the code a little clearer i.e. f.writeline(text) as opposed to f.write(text+line_end) . 
 #4 I also prefer your third solution, but no need to use f.write, any user written function/callable would do. Thus the next changes would become easy. If you use an object you may even hide target file inside it thus removing some syntaxic noise like file or kind of newline. 

 Too bad print is a statement in python 2.x, with python 3.x print could simply be overloaded by something user defined. 
 #5 Python has modules both to handle email and http headers in an easy compliant way. I suggest you use them instead of solving already solved problems again.