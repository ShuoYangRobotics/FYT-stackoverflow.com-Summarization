Question (ID-7053652): Random 'None' output from basic python function I just learned(am learning) how function parameters work in python, and I started experimenting with it for no apparent reason, when this: 

 def jiskya(x, y):
 if x &gt; y:
  print y
 else:
  print x

print jiskya(2, 3)
 

 gave the ouput: 

 &gt;&gt;&gt;
2
None
 

 Where did the 'None' come from? And what is it? 
 Answers (Total-6): #0 It's the return value of the function, which you print out. If there is no return statement (or just a return without an argument ), an implicit return None is added to the end of a function. 

 You probably want to return the values in the function instead of printing them: 

 def jiskya(x, y):
 if x &gt; y:
  return y
 else:
  return x

print jiskya(2, 3)
 
 #1 The problem is you wrote print jiskya(2,3) . You're passing the return value of jiskya to the print function. jiskya itself prints x or y , which is why you see the 2. But then the print in the print jiskya(2, 3) statement itself executes with no argument. 

 To the interpreter, this is a simplification of what happens: 

 print jiskya(2,3)
&gt;&gt; Executing jiskya with arguments 2, 3
&gt;&gt; jiskya evaulates `print x`
&gt;&gt; 2 is printed
&gt;&gt; Function jiskya exits with no return value
print None
&gt;&gt; None is printed
 
 #2 You are doing two prints, the first one in the corpus of your function and the second one is printing the result of the function, which as actually None. 

 You should rather do something like this: 

 def yourfunction(x, y):
 if x &gt; y:
  return y
 else:
  return x
 

 Then, 

 &gt;&gt;&gt; print yourfunction(2, 3)
2
 
 #3 
 Where did the 'None' come from? 
 

 The function. 

 
 And what is it? 
 

 It's what the function returned. 

 In Python, every function returns something. It could "be multiple things" using a tuple, or it could "be nothing" using None , but it must return something. This is how we deal with the fact that there is no way to specify a return type (which would make no sense since you don't specify types for anything else). When interpreted as a string for printing, None is replaced with the string "None". 

 None is a special object that is supposed to represent the absence of any real thing. Its type is NoneType (it is an instance of that class). Whenever you don't explicitly return anything, you implicitly return None. 

 You wrote the function to print one of the two values x or y , but not to return anything. So None was returned. Then you asked Python to print the result of calling the function. So it called the function (printing one of the values), then printed the return value, which was None , as the text "None". 
 #4 Ya, basically you are using print statements in your function as a way to return information. You shouldn't do this. Print is NOT the same as a return statement. If you simply want your function to give your answer without the none, just type jiskya(2, 3) instead. You will see what the function throws out because you have print statements in the function. If instead you typed "return" in your function, it wouldn't give you anything without the "print" preceding the function call. 
 #5 Ok, to start off when you do this: 

 print jiskya(2, 3)
 

 You getting something pretty much equivalent to this: 

 print print 2
 

 So, what is going on? The print 2 is printing out 2. Straightforward enough. 

 Now look at this: 

 def hello():
 return 2
 

 If you do: 

 print hello()
 

 You get 2 because if you print out a function you get whatever the return value is. (The return value is denoted by the return someVariable . 

 Now even though print doesn't have parenthesis like most functions, it is a function just a little special in that respect. What does print return? Nothing. So when you print print someVariable , you will get None as the second part because the return value of print is None . 

 So as others have stated: 

 def jiskya(x, y):
 if x &gt; y:
  print y
 else:
  print x
 

 Should be re-written: 

 def jiskya(x, y):
 if x &gt; y:
  return y
 else:
  return x