Question (ID-2553354): How to get a variable name as a string in Python? I would like to be able to get the name of a variable as a string but I don't know if Python has that much introspection capabilities. Something like: 

 &gt;&gt;&gt; print(my_var.__name__)
'my_var'
 

 I want to do that because I have a bunch of vars I'd like to turn into a dictionary like : 

 bar=True
foo=False
&gt;&gt;&gt; my_dict=dict(bar=bar, foo=foo)
&gt;&gt;&gt; print mydict
&gt;&gt;&gt; print my_dict 
{'foo': False, 'bar': True}
 

 But I'd like something more automatic than that. 

 Python have locals() and vars() , so I guess there is a way. 
 Answers (Total-6): #0 Are you trying to do this? 

 dict( (name,eval(name)) for name in ['some','list','of','vars'] )
 

 Example 

 &gt;&gt;&gt; some= 1
&gt;&gt;&gt; list= 2
&gt;&gt;&gt; of= 3
&gt;&gt;&gt; vars= 4
&gt;&gt;&gt; dict( (name,eval(name)) for name in ['some','list','of','vars'] )
{'list': 2, 'some': 1, 'vars': 4, 'of': 3}
 
 #1 As unwind said, this isn't really something you do in Python - variables are actually name mappings to objects. 

 However , here's one way to try and do it: 

 &gt;&gt;&gt; a = 1
 &gt;&gt;&gt; for k, v in list(locals().iteritems()):
   if id(v) == id(a):
    a_as_str = k
 &gt;&gt;&gt; a_as_str
 a
 &gt;&gt;&gt; type(a_as_str)
 'str'
 
 #2 This is not possible in Python, which really doesn't have "variables". Python has names, and there can be more than one name for the same object. 
 #3 Most objects don't have a __name__ attribute. (Classes, functions, and modules do; any more builtin types that have one?) 

 What else would you expect for print(my_var.__name__) other than print("my_var") ? Can you simply use the string directly? 

 You could "slice" a dict: 

 def dict_slice(D, keys, default=None):
 return dict((k, D.get(k, default)) for k in keys)

print dict_slice(locals(), ["foo", "bar"])
# or use set literal syntax if you have a recent enough version:
print dict_slice(locals(), {"foo", "bar"})
 

 Alternatively: 

 throw = object() # sentinel
def dict_slice(D, keys, default=throw):
 def get(k):
 v = D.get(k, throw)
 if v is not throw:
  return v
 if default is throw:
  raise KeyError(k)
 return default
 return dict((k, get(k)) for k in keys)
 
 #4 This is a hack. It will not work on all Python implementations distributions (in particular, those that do not have traceback.extract_stack .) 

 import traceback

def make_dict(*expr):
 (filename,line_number,function_name,text)=traceback.extract_stack()[-2]
 begin=text.find('make_dict(')+len('make_dict(')
 end=text.find(')',begin)
 text=[name.strip() for name in text[begin:end].split(',')]
 return dict(zip(text,expr))

bar=True
foo=False
print(make_dict(bar,foo))
# {'foo': False, 'bar': True}
 

 Note that this hack is fragile: 

 make_dict(bar,
   foo)
 

 (calling make_dict on 2 lines) will not work. 

 Instead of trying to generate the dict out of the values foo and bar , 
it would be much more Pythonic to generate the dict out of the string variable names 'foo' and 'bar' : 

 dict([(name,locals()[name]) for name in ('foo','bar')])
 
 #5 I've wanted to do this quite a lot. This hack is very similar to rlotun's suggestion, but it's a one-liner, which is important to me: 

 blah = 1
blah_name = [ k for k,v in locals().iteritems() if v is blah][0]