Question (ID-5276967): Python in Xcode 4 Now that Xcode 4 is out and that I am using it, I found that it's not as easy to set up a Python friendly environment. I liked developing in Xcode 3.2 but now I can't get the new "Scheme" feature configured properly. As of right now, empty projects seem a bit buggy, but does anybody have any insight on how to set up Xcode 4 to use Python 3.2? I realize that Xcode isn't the best tool for the such but it's just a nice environment to work in. By the way, I do not want to use PyObjC. I need platform independence. It seems that nobody has tried this yet with Xcode 4. 
 Answers (Total-6): #0 I figured it out! The steps look lengthy but it's not that bad at all. 

 
 Open Xcode 4. 
 In the menu bar, click "File" → "New" → "New Project…". 
 Select "Other" under "Mac OS X". 
 Select "External Build System" and click "Next". 
 Enter the product name. 
 For the "Build Tool" field, type in /usr/local/bin/python3 for Python 3 or /usr/bin/python for Python 2 and then click "Next". Note that this assumes you have Python installed in the typical location(s). if you are unsure as to where your Python executables are enter these commands into Terminal: which python3 and which python . 
 Choose where to save it and click "Create". 
 In the menu bar, click "File" → "New" → "New File…". 
 Select "Other" under "Mac OS X". 
 Select "Empty" and click "Next". 
 Navigate to the project folder (it will not work, otherwise), enter the name of the Python file (include the ".py" extension), and click "Save". 
 In the menu bar, click "Product" → "Edit Scheme…". 
 Click "Run" in the left column. 
 In the "Info" tab, click the "Executable" field and then click "Other…". 
 Navigate to the executable from Step 6. You may need to use ⇧⌘G to type in the directory if it is hidden. 
 Select the executable and click "Choose". 
 For the "Debugger" field, select "None". 
 In the "Arguments" tab, click the "Base Expansions On" field and select the target that is named the same as your project. 
 Click the "+" icon under "Arguments Passed On Launch". You may have to expand that section by clicking on the triangle pointing to the right. 
 Type in $(SOURCE_ROOT)/ and then the name of the Python file you want to test. Remember, the Python program must be in the project folder. Otherwise, you will have to type out the full path (or relative path if it's in a subfolder of the project folder) here. If there are spaces anywhere in the full path, you must include quotation marks at the beginning and end of this. 
 Click "OK". 
 Start coding. 
 

 Note that if you open the "Utilities" panel, with the "Show the File inspector" tab active, the file type is automatically set to "Default - Python script". Feel free to look through all the file type options it has to gain an idea as to what all it is capable of doing. The method above can be applied to any interpreted language. As of right now, I have yet to figure out exactly how to get it to work with Java; then again, I haven't done too much research. Surely there is some documentation floating around on the web about all of this. 

 Say, "Hello, code completion, auto-indentation, and syntax highlighting." Note that it's not as advanced as it is with C, C++, or Objective-C but it is better than using IDLE in my opinion. 

 Autoindentation: 

 The odd indentation is due to how Xcode auto-indents switch statements (which, of course, Python does not have). 

 Switch statements in a C-style language look like this: 

 switch(example) {
case 0:
 print("False");
case 1:
 print("True");
}
 

 Notice that I did not indent the case statements. This is how Xcode formats it for you. Once you enter the colon at the end of the case conditional statement, Xcode sometimes unindents the line (assuming it is all one line) by one tab. I have yet to figure what exactly Xcode uses to determine when to unindent a line with a colon. It seems pretty sporadic. 

 Notice any similarities? Yeah, C uses colons for each case which looks similar to Python syntax, so Xcode thinks you are doing some kind of switch statement for some reason. Also note that (if you have your settings configured for this) Xcode will automatically insert a closing brace ( } ) because it was not developed for Python development. 

 Running without administrative privileges: 

 If you do not have administrative privileges or are not in the Developer group, you can still use Xcode for Python programming (but you still won't be able to develop in languages that require compiling). Instead of using the play button, in the menu bar, click "Product" → "Perform Action" → "Run Without Building" or simply use the keyboard shortcut ^⌘R . 

 Other Notes: 

 To change the text encoding, line endings, and/or indentation settings, open the "Utilities" panel and click "Show the File inspector" tab active. There, you will find these settings. 
 #1 I've created Xcode 4 templates to simplify the steps provided by Tyler . 
The result is Python Project Template for Xcode 4. 

 Now what you need to do is download the templates, move it to /Developer/Library/Xcode/Templates/Project Templates/Mac/Others/ and then new a Python project with Xcode 4. 

 It still needs manual Scheme setup (you can refer to steps 12 ~ 21 provided by Tyler .) 
 #2 There are two good IDE's right now Aptana (or only PyDev for Eclipse) and PyCharm 

 Aptana is free, Pycharm is commercial. 

 Both have good support for debugging and code inspection, support for various version control systems etc. 
 #3 Another way, which I've been using for awhile in XCode3: 

 See steps 1-15 above. 

 
 Choose /bin/bash as your executable 
 For the "Debugger" field, select "None". 
 In the "Arguments" tab, click the "Base Expansions On" field and select the target you created earlier. 
 Click the "+" icon under "Arguments Passed On Launch". You may have to expand that section by clicking on the triangle pointing to the right. 
 Type in "-l". This will tell bash to use your login environment (PYTHONPATH, etc..) 
 Do step #19 again. 
 Type in "-c '$(SOURCE_ROOT)/.py'" 
 Click "OK". 
 Start coding. 
 

 The nice thing about this way is it will use the same environment to develop in that you would use to run in outside of XCode (as setup from your bash .profile). 

 It's also generic enough to let you develop/run any type of file, not just python. 
 #4 Try Editra It's free, has a lot of cool features and plug-ins, it runs on most platforms, and it is written in Python. I use it for all my non-XCode development at home and on Windows/Linux at work. 
 #5 You should try PyDev plug in for Eclipse . I tried alot of editors/IDE's to use with python, but the only one i liked the most is the PyDev plugin for Eclipse. It has code completion, debugger and many other nice features. Plus both are free.