Question (ID-403421): How to sort a list of objects in Python, based on an attribute of the objects? I've got a list of Python objects that I'd like to sort by an attribute of the objects themselves. The list looks like: 

 &gt;&gt;&gt; ut
[&lt;Tag: 128&gt;, &lt;Tag: 2008&gt;, &lt;Tag: &lt;&gt;, &lt;Tag: actionscript&gt;, &lt;Tag: addresses&gt;, &lt;Tag: aes&gt;, &lt;Tag: ajax&gt; ...]
 

 Each object has a count: 

 &gt;&gt;&gt; ut[1].count
1L
 

 I need to sort the list by number of counts descending. 

 I've seen several methods for this, but I'm looking for best practice in Python. 
 Answers (Total-6): #0 # To sort the list in place...
ut.sort(key=lambda x: x.count, reverse=True)

# To return a new list, use the sorted() built-in function...
newlist = sorted(ut, key=lambda x: x.count, reverse=True)
 

 More on sorting by keys &raquo; 
 #1 A way that can be fastest, especially if your list has a lot of records, is to use operator.attrgetter("count") . However, this might run on an pre-operator version of Python, so it would be nice to have a fallback mechanism. You might want to do the following, then: 

 try: import operator
except ImportError: cmpfun= lambda x: x.count # use a lambda if no operator module
else: cmpfun= operator.attrgetter("count") # use operator since it's faster than lambda

ut.sort(key=cmpfun, reverse=True) # sort in-place
 
 #2 It looks much like a list of Django ORM model instances. 

 Why not sort them on query like this: 

 ut = Tag.objects.order_by('-count')
 
 #3 Readers should notice that the key= method: 

 ut.sort(key=lambda x: x.count, reverse=True)
 

 is many times faster than adding rich comparison operators to the objects. I was surprised to read this (page 485 of "Python in a Nutshell"). You can confirm this by running tests on this little program: 

 #!/usr/bin/env python
import random

class C:
 def __init__(self,count):
  self.count = count

 def __cmp__(self,other):
  return cmp(self.count,other.count)

longList = [C(random.random()) for i in xrange(1000000)] #about 6.1 secs

longList.sort() #about 52 - 6.1 = 46 secs
longList.sort(key = lambda c: c.count) #about 9 - 6.1 = 3 secs
 

 My, very minimal, tests show the first sort is more than 10 times slower, but the book says it is only about 5 times slower in general. The reason they say is due to the highly optimizes sort algorithm used in python ( timsort ). 

 Still, its very odd that .sort(lambda) is faster than plain old .sort(). I hope they fix that. 
 #4 Add rich comparison operators to the object class, then use sort() method of the list. 
See rich comparison in python . 

 

 Update : Although this method would work, I think solution from Triptych is better suited to your case because way simpler. 
 #5 from operator import attrgetter
ut.sort(key = attrgetter('count'), reverse = True)