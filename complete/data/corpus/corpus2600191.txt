Question (ID-2600191): How to calculate the occurrences of a list item in Python? Given an item, how to count its occurrences in a list in Python? 
 Answers (Total-8): #0 &gt;&gt;&gt; [1, 2, 3, 4, 1, 4, 1].count(1)
3
 
 #1 If you are using Python 2.7 or 3 and you want number of occurrences for each element: 

 &gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; z = ['blue', 'red', 'blue', 'yellow', 'blue', 'red']
&gt;&gt;&gt; Counter(z)
Counter({'blue': 3, 'red': 2, 'yellow': 1})
 
 #2 list.count(x) returns the number of times x appears in a list 

 see:
 http://docs.python.org/tutorial/datastructures.html#more-on-lists 
 #3 I use if x in [] to test for the existence of values, count is meant for another purpose, and for huge lists it's also faster than count. It returns True or False: 

 Edit: Sorry, I misunderstood your question, my bad. 

 &gt;&gt;&gt; lst = [1, 2, 3, 4, 5]
&gt;&gt;&gt; 3 in lst
True
&gt;&gt;&gt; 9 in lst
False
 
 #4 # Python &gt;= 2.6 (defaultdict) &amp;&amp; &lt; 2.7 (Counter, OrderedDict)
from collections import defaultdict
def count_unsorted_list_items(items):
 """
 :param items: iterable of hashable items to count
 :type items: iterable

 :returns: dict of counts like Py2.7 Counter
 :rtype: dict
 """
 counts = defaultdict(int)
 for item in items:
  counts[item] += 1
 return dict(counts)


# Python &gt;= 2.2 (generators)
def count_sorted_list_items(items):
 """
 :param items: sorted iterable of items to count
 :type items: sorted iterable

 :returns: generator of (item,count) tuples
 :rtype: generator
 """
 if not items:
  return
 elif len(items) == 1:
  yield (items[0], 1)
  return
 prev_item = items[0]
 count = 1
 for item in items[1:]:
  if prev_item == item:
   count += 1
  else:
   yield (prev_item, count)
   count = 1
   prev_item = item
 yield (item, count)
 return


import unittest
class TestListCounters(unittest.TestCase):
 def test_count_unsorted_list_items(self):
  D = (
   ([], []),
   ([2], [(2,1)]),
   ([2,2], [(2,2)]),
   ([2,2,2,2,3,3,5,5], [(2,4), (3,2), (5,2)]),
   )
  for inp, exp_outp in D:
   counts = count_unsorted_list_items(inp) 
   print inp, exp_outp, counts
   self.assertEqual(counts, dict( exp_outp ))

  inp, exp_outp = UNSORTED_WIN = ([2,2,4,2], [(2,3), (4,1)])
  self.assertEqual(dict( exp_outp ), count_unsorted_list_items(inp) )


 def test_count_sorted_list_items(self):
  D = (
   ([], []),
   ([2], [(2,1)]),
   ([2,2], [(2,2)]),
   ([2,2,2,2,3,3,5,5], [(2,4), (3,2), (5,2)]),
   )
  for inp, exp_outp in D:
   counts = list( count_sorted_list_items(inp) )
   print inp, exp_outp, counts
   self.assertEqual(counts, exp_outp)

  inp, exp_outp = UNSORTED_FAIL = ([2,2,4,2], [(2,3), (4,1)])
  self.assertEqual(exp_outp, list( count_sorted_list_items(inp) ))
  # ... [(2,2), (4,1), (2,1)]
 
 #5 Another way to get the number of ocurrences of each item: 

 dict((i,a.count(i)) for i in a)
 
 #6 To count the number of diverse elements having a common type: 

 li = ['A0','c5','A8','A2','A5','c2','A3','A9']

print sum(1 for el in li if el[0]=='A' and el[1] in '01234')
 

 gives 

 3 , not 6 
 #7 I had this problem today and rolled my own solution before I thought to check SO. This: 

 dict((i,a.count(i)) for i in a)
 

 is really, really slow for large lists. My solution 

 def occurDict(items):
 d = {}
 for i in items:
  if i in d:
   d[i] = d[i]+1
  else:
   d[i] = 1
return d
 

 is actually a bit faster than the Counter solution, at least for Python 2.7.