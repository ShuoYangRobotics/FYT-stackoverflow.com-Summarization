Question (ID-2970780): pythonic way to do something N times Hey! Every day I love python more and more. 

 Today, I was writing some code like: 

 for i in xrange(N):
 do_something()
 

 I had to do something N times. But each time didn't depend on the value of i (index variable).
I realized that I was creating a variable I never used ( i ), and I thought "There surely is a more pythonic way of doing this without the need for that useless index variable." 

 So... the question is: do you know how to do this simple task in a more (pythonic) beautiful way? 

 Thanks in advance! 

 Manuel 
 Answers (Total-7): #0 A slightly faster approach than looping on xrange(N) is: 

 import itertools

for _ in itertools.repeat(None, N):
 do_something()
 
 #1 Use the _ variable, as I learned when I asked this question 
 #2 since function is first-class citizen, you can write small wrapper (from Alex answers) 

 def repeat(f, N):
 for _ in itertools.repeat(None, N): f()
 

 then you can pass function as argument. 
 #3 I just use for _ in range(n) , it's straight to the point. It's going to generate the entire list for huge numbers in Python 2, but if you're using Python 3 it's not a problem. 
 #4 Assume that you've defined do_something as a function, and you'd like to perform it N times.
Maybe you can try the following: 

 todos = [do_something] * N 
for doit in todos: 
 doit()
 
 #5 The _ is the same thing as x however it's just a python idiom that's used to indicate an identifier that you don't intend to make use of at all. In python these identifiers don't takes memory or allocate space like variables do in other languages. It's easy to forget that. They're just names that point to objects, in this case an integer on each iteration. 
 #6 What about a simple while loop? 

 while times &gt; 0:
 do_something()
 times -= 1
 

 You already have the variable; why not use it?