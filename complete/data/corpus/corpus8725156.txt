Question (ID-8725156): python. How to find whether a text contains zero.? I want to check in a piece of text whether that text contains "0" or not. 

 I cannot use string.__contains(" 0") as this is bad coding, or if I can use this, i do not have enough points to back to my senior, that this is the only way. Or if you can let me know some points? 

 The other way we found out is to extract from each row, and extract the no. from it, convert it into integer and then check if the value is greater than 0. But this is little time consuming. 

 The string could contain a no like 2560 which should be ignored in this search. 

 Please tell me some alternative. I donot want that integer conversion. 

 Please help. 

 For e.g. 

 abc : 1234
def : 1230 &gt;&gt;&gt; This kind of text should return False

abc : 1234
def : 0 &gt;&gt;&gt;&gt; This kind of text should return True, as it contains 0.
 

 Hope you understand my problem?
Thanks 
 Answers (Total-6): #0 At first, I thought you could just use in : 

 if "0" in myString:
 print "%s contains 0" % myString
 

 However, this doesn't seem to be what you want to do, when re-reading your question. This will detect the 0 in a row such as: 

 abc: 200
 

 Which I guess you don't want to do. You need to use something a bit more sophisticated. I would probably go with some simple manual code, rather than using regular expressions as suggested in a different answer. Here's how: 

 def is_row_zero(row):
 parts = row.split(":")
 value = parts[1].strip()
 if value == "0":
 print "%s is 0, not allowed" % parts[0]
 return True
 return False
 

 It's possible the regular expression approach is faster, so that might be worth investigating depending on your workload and performance goals. 
 #1 Use regular expressions to find a pattern: 

 &gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall('\W(0)\W', 'alsdkjf 0 asdkfs0asdf 0 ')
['0', '0']
 

 Where \W(0)\W matches zero surrounded by non-alphanumeric characters ('\W'). 

 Your example: 

 &gt;&gt;&gt; re.findall('\W(0)\W', 'abc : 1234 def : 1230 ')
[]
&gt;&gt;&gt; re.findall('\W(0)\W', 'abc : 1234 def : 0 ')
['0']
 
 #2 There are many ways to find this in Python... 

 if " 0 " in [string variable]:
 do something...
 

 is one option, You could turn the " 0 " into a variable to make it more generic. 

 Regular expressions might be preferable, perhaps. But is overkill really. 
 #3 If I read your question correctly, the input is a text file like: 

 label : value
label : value
...
 

 I suggest you read the file line by line and use either regular expressions: 

 for line in open("filename.txt"):
 if re.match(r"\S+ : 0$", line):
  print "The row's value is zero"
 

 Or use .endswith : 

 for line in open("filename.txt"):
 if line.endswith(" 0"):
   print "The row's value is zero"
 
 #4 If what you're looking for is just "0", then: 

 string == '0'
 

 If there may be whitespace around: 

 string.strip() == '0'
 
 #5 Your question isn't exactly clear, did you want a zero only if it's not part of a number?
You could check all 0's in the string, and see if its adjacent characters are digits. 

 something such as: 

 def has_zero(s):
 if "0" not in s:
  return False
 if s=="0":
  return True
 if s[0]=="0" and not s[1].isdigit():
  return True
 if s[-1]=="0" and not s[-2].isdigit():
  return True
 return any(s[i]=="0" and not (s[i-1].isdigit() or s[i+1].isdigit()) for i in range(1,len(s)-1))

print has_zero("hell0 w0rld")
#True
print has_zero("my number is 2560")
#False
print has_zero("try put a zer0 in here with number 100")
#True
print has_zero("0")
print has_zero("10")
print has_zero("01")
print has_zero("a0")
print has_zero("0a")
print has_zero("00")