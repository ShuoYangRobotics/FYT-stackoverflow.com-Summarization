Question (ID-903130): hasattr() vs try-except block to deal with non-existent attributes if hasattr(obj, 'attribute'):
 # do somthing
 

 vs 

 try:
 # access obj.attribute
except AttributeError, e:
 # deal with AttributeError
 

 Which should be preferred and why? 
 Answers (Total-8): #0 hasattr internally and rapidly performs the same task as the try/except block: it's a very specific, optimized, one-task tool and thus should be preferred, when applicable, to the very general-purpose alternative. 
 #1 Any benches that illustrate difference in performance? 

 (I haven't enough reputation) 

 timeit it's your friend 

 $ python -mtimeit -s 'class C(object): a = 4
c = C()' 'hasattr(c, "nonexistent")'
1000000 loops, best of 3: 1.87 usec per loop
$ python -mtimeit -s 'class C(object): a = 4
c = C()' 'hasattr(c, "a")'
1000000 loops, best of 3: 0.446 usec per loop
$ python -mtimeit -s 'class C(object): a = 4
c = C()' 'try:
 c.a
except:
 pass'
1000000 loops, best of 3: 0.247 usec per loop
$ python -mtimeit -s 'class C(object): a = 4
c = C()' 'try:
 c.nonexistent
except:
 pass'
100000 loops, best of 3: 3.13 usec per loop
$

  |positive|negative
hasattr| 0.446 | 1.87 
try | 0.247 | 3.13
 
 #2 I would say it depends on whether your function may accept objects without the attribute by design , e.g. if you have two callers to the function, one providing an object with the attribute and the other providing an object without it. 

 If the only case where you'll get an object without the attribute is due to some error, I would recommend using the exceptions mechanism even though it may be slower, because I believe it is a cleaner design. 

 Bottom line: I think it's a design and readability issue rather than an efficiency issue. 
 #3 If it's just one attribute you're testing, I'd say use hasattr . However, if you're doing several accesses to attributes which may or may not exist then using a try block may save you some typing. 
 #4 I'd suggest option 2. Option 1 has a race condition if some other thread is adding or removing the attribute. 

 Also python has an Idiom , that EAFP ('easier to ask forgiveness than permission') is better than LBYL ('look before you leap'). 
 #5 From a practical point of view, in most languages using a conditional will always be consderably faster than handling an exception. 

 If you're wanting to handle the case of an attribute not existing somewhere outside of the current function, the exception is the better way to go. An indicator that you may want to be using an exception instead of a conditional is that the conditional merely sets a flag and aborts the current operation, and something elsewhere checks this flag and takes action based on that. 

 That said, as Rax Olgud points out, communication with others is one important attribute of code, and what you want to say by saying "this is an exceptional situation" rather than "this is is something I expect to happen" may be more important. 
 #6 If not having the attribute is not an error condition, the exception handling variant has a problem: it would catch also AttributeErrors that might come internally when accessing obj.attribute (for instance because attribute is a property so that accessing it calls some code). 
 #7 The first. 

 Shorter is better. Exceptions should be exceptional.