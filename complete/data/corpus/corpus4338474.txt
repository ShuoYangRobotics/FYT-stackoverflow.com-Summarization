Question (ID-4338474): Python Object awareness of being in an array? Is there a way in Python for an object to 'know' what its array element id is? I.e 6 in an array, and the object itself prints out its own array element number, so '0,1,2,3,4,5' 
 Answers (Total-6): #0 In a word, no... 
 #1 No. The object could be inside everything and multiple objects at the same time, so it can't know unless you tell it. 
 #2 Just to be pedantic: in general, no...
but technically it is possible for some (specific) objects, which are part of some arrays to "know their position"... 

 class HelpfulClass(object):
 def __init__(self):
 self.arr = []

 def add(self, obj):
 pos = len(self.arr) + 1
 self.arr.append(obj)
 obj.pos = pos

class SmartObj(object):
 def __init__(self):
 self.pos = None

 def print_my_element(self):
 print self.pos

if __name__ == '__main__':
 s = HelpfulClass()
 o = SmartObj()
 s.add(o)

 o.print_my_element() 
 

 ...technically 'o' is an object...and part of an array (s.arr)...and "knows" it's position... 
 #3 Not unless you tell it, and telling it leads to very annoying coupling and/or separation of responsibility problems. What are you really trying to do? 
 #4 No, but you can use the 'enumerate' builtin to iterate over the index and the element at the same time: 

 &gt;&gt;&gt; x = ['a','b','c']
&gt;&gt;&gt; for index,element in enumerate(x):
...  print index,element
... 
0 a
1 b
2 c
 
 #5 If the object knows the list it is part of, it could find out by doing the_list.index(self) . Otherwise, no.