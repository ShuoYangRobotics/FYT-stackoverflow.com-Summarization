Question (ID-3899645): list.extend and list comprehension When I need to add several identical items to the list I use list.extend: 

 a = ['a', 'b', 'c']
a.extend(['d']*3)
 

 Result 

 ['a', 'b', 'c', 'd', 'd', 'd']
 

 But, how to do the similar with list comprehension? 

 a = [['a',2], ['b',2], ['c',1]]
[[x[0]]*x[1] for x in a]
 

 Result 

 [['a', 'a'], ['b', 'b'], ['c']]
 

 But I need this one 

 ['a', 'a', 'b', 'b', 'c']
 

 Any ideas? 
 Answers (Total-6): #0 Stacked LCs. 

 [y for x in a for y in [x[0]] * x[1]]
 
 #1 &gt;&gt;&gt; a = [['a',2], ['b',2], ['c',1]]
&gt;&gt;&gt; [i for i, n in a for k in range(n)]
['a', 'a', 'b', 'b', 'c']
 
 #2 import operator
a = [['a',2], ['b',2], ['c',1]]
nums = [[x[0]]*x[1] for x in a]
nums = reduce(operator.add, nums)
 
 #3 An itertools approach: 

 import itertools

def flatten(it):
 return itertools.chain.from_iterable(it)

pairs = [['a',2], ['b',2], ['c',1]]
flatten(itertools.repeat(item, times) for (item, times) in pairs)
# ['a', 'a', 'b', 'b', 'c']
 
 #4 If you prefer extend over list comprehensions: 

 a = []
for x, y in l:
 a.extend([x]*y)
 
 #5 &gt;&gt;&gt; a = [['a',2], ['b',2], ['c',1]]
&gt;&gt;&gt; sum([[item]*count for item,count in a],[])
['a', 'a', 'b', 'b', 'c']