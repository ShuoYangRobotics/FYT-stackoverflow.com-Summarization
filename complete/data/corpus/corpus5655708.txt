Question (ID-5655708): python: most elegant way to intersperse a list with an element Input: 

 intersperse(666, ["once", "upon", "a", 90, None, "time"])
 

 Output: 

 ["once", 666, "upon", 666, "a", 666, 90, 666, None, 666, "time"]
 

 What's the most elegant (read: Pythonic) way to write intersperse ? 
 Answers (Total-9): #0 I would have written a generator myself, but like this: 

 def joinit(iterable, delimiter):
 it = iter(iterable)
 yield next(it)
 for x in it:
  yield delimiter
  yield x
 
 #1 I would go with a simple generator. 

 def intersperse(val, sequence):
 first = True
 for item in sequence:
  if not first:
   yield val
  yield item
  first = False
 

 and then you can get your list like so: 

 &gt;&gt;&gt; list(intersperse(666, ["once", "upon", "a", 90, None, "time"]))
['once', 666, 'upon', 666, 'a', 666, 90, 666, None, 666, 'time']
 

 alternatively you could do: 

 def intersperse(val, sequence):
 for i, item in enumerate(sequence):
  if i != 0:
   yield val
  yield item
 

 I'm not sure which is more pythonic 
 #2  itertools to the rescue 
- or - 
 How many itertools functions can you use in one line? 

 from itertools import chain, izip, repeat, islice

def intersperse(delimiter, seq):
 return islice(chain.from_iterable(izip(repeat(delimiter), seq)), 1, None)
 

 Usage: 

 &gt;&gt;&gt; list(intersperse(666, ["once", "upon", "a", 90, None, "time"])
["once", 666, "upon", 666, "a", 666, 90, 666, None, 666, "time"]
 
 #3 How about: 

 from itertools import chain,izip_longest

def intersperse(x,y):
  return list(chain(*izip_longest(x,[],fillvalue=y)))
 
 #4 Dunno if it's pythonic, but it's pretty simple: 

 def intersperse(elem, list):
 result = []
 for e in list:
  result.extend([e, elem])
 return result[:-1]
 
 #5 Here's one way of doing it: 

 def intersperse(x, l):
 return sum([[i, x] for i in l], [])[:-1]
 
 #6 This works: 

 &gt;&gt;&gt; def intersperse(e, l):
... return reduce(lambda x,y: x+y, zip(l, [e]*len(l)))
&gt;&gt;&gt; intersperse(666, ["once", "upon", "a", 90, None, "time"])
('once', 666, 'upon', 666, 'a', 666, 90, 666, None, 666, 'time', 666)
 

 If you don't want a trailing 666 , then return reduce(...)[:-1] . 
 #7 Another option that works for sequences: 

 def intersperse(seq, value):
 res = [value] * (2 * len(seq) - 1)
 res[::2] = a
 return res
 
 #8 def intersperse(word,your_list):
 x = [j for i in your_list for j in [i,word]]

&gt;&gt;&gt; intersperse(666, ["once", "upon", "a", 90, None, "time"])
['once', 666, 'upon', 666, 'a', 666, 90, 666, None, 666, 'time', 666]
 

 [Edit] Corrected code below: 

 def intersperse(word,your_list):
 x = [j for i in your_list for j in [i,word]]
 x.pop()
 return x

&gt;&gt;&gt; intersperse(666, ["once", "upon", "a", 90, None, "time"])
['once', 666, 'upon', 666, 'a', 666, 90, 666, None, 666, 'time']