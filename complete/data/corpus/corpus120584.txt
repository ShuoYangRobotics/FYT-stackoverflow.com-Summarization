Question (ID-120584): SVG rendering in a PyGame application In a pyGame application, I would like to render resolution-free GUI widgets described in SVG. 

 What tool and/or library can I use to reach this goal ? 

 (I like the OCEMP GUI toolkit but it seems to be bitmap dependent for its rendering) 
 Answers (Total-7): #0 This is a complete example which combines hints by other people here.
It should render a file called test.svg from the current directory. It was tested on Ubuntu 10.10, python-cairo 1.8.8, python-pygame 1.9.1, python-rsvg 2.30.0. 

 #!/usr/bin/python

import array
import math

import cairo
import pygame
import rsvg

WIDTH = 512
HEIGHT = 512

data = array.array('c', chr(0) * WIDTH * HEIGHT * 4)
surface = cairo.ImageSurface.create_for_data(
 data, cairo.FORMAT_ARGB32, WIDTH, HEIGHT, WIDTH * 4)

pygame.init()
window = pygame.display.set_mode((WIDTH, HEIGHT))
svg = rsvg.Handle(file="test.svg")
ctx = cairo.Context(surface)
svg.render_cairo(ctx)

screen = pygame.display.get_surface()
image = pygame.image.frombuffer(data.tostring(), (WIDTH, HEIGHT),"ARGB")
screen.blit(image, (0, 0)) 
pygame.display.flip() 

clock = pygame.time.Clock()
while True:
 clock.tick(15)
 for event in pygame.event.get():
  if event.type == pygame.QUIT:
   raise SystemExit
 
 #1 You can use Cairo (with PyCairo), which has support for rendering SVGs. The PyGame webpage has a HOWTO for rendering into a buffer with a Cairo, and using that buffer directly with PyGame. 
 #2 I realise this doesn't exactly answer your question, but there's a library called Squirtle that will render SVG files using either Pyglet or PyOpenGL. 
 #3 pygamesvg seems to do what you want (though I haven't tried it). 
 #4 Cairo cannot render SVG out of the box.
It seems we have to use librsvg. 

 Just found those two pages: 

 
 Rendering SVG with libRSVG,Python and c-types 
 How to use librsvg from Python 
 

 Something like this should probably work (render test.svg to test.png ): 

 import cairo
import rsvg

WIDTH, HEIGHT = 256, 256
surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, WIDTH, HEIGHT)

ctx = cairo.Context (surface)

svg = rsvg.Handle(file="test.svg")
svg.render_cairo(ctx)

surface.write_to_png("test.png")
 
 #5 The last comment crashed when I ran it because svg.render_cairo() is expecting a cairo context and not a cairo surface. I created and tested the following function and it seems to run fine on my system. 

 import array,cairo, pygame,rsvg

def loadsvg(filename,surface,position):
 WIDTH = surface.get_width()
 HEIGHT = surface.get_height()
 data = array.array('c', chr(0) * WIDTH * HEIGHT * 4)
 cairosurface = cairo.ImageSurface.create_for_data(data, cairo.FORMAT_ARGB32, WIDTH, HEIGHT, WIDTH * 4)
 svg = rsvg.Handle(filename)
 svg.render_cairo(cairo.Context(cairosurface))
 image = pygame.image.frombuffer(data.tostring(), (WIDTH, HEIGHT),"ARGB")
 surface.blit(image, position) 

WIDTH = 800
HEIGHT = 600
pygame.init()
window = pygame.display.set_mode((WIDTH, HEIGHT))
screen = pygame.display.get_surface()

loadsvg("test.svg",screen,(0,0))

pygame.display.flip() 

clock = pygame.time.Clock()
while True:
 clock.tick(15)
 event = pygame.event.get()
 for e in event:
  if e.type == 12:
   raise SystemExit
 
 #6 The pygamesvg link appears to be broken. I guess Cairo + rsvg is the best bet for now.