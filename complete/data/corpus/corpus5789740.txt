Question (ID-5789740): Python regex: Reject one two-digit number and accept other two-digit numbers How can I make a regular expression to not match a certain number with more than 2 digits. for example any number but 13. The second line of code below wont work it will not match 10, 11,... either and the third line will look for a number not starting with 1 but having a 3: 

 str = 'val=13'

regex = 'val=[^1][^3]'
regex = 'val=[^13]

re.search(regex, str)
 
 Answers (Total-6): #0 Use lookahead assertions: 

 In : re.findall('val=(?!13$)(\d{2,})', 'val=12') 
Out: ['12']

In : re.findall('val=(?!13$)(\d{2,})', 'val=13') 
Out: []
 
 #1 Why do you need a regular expression? 

 &gt;&gt;&gt; string = 'val=13'
&gt;&gt;&gt; array=string.split("=")
&gt;&gt;&gt; if array[0] == "val" and int(array[1]) &lt; 100 and int(array[1]) == 13
...  print "match"
...
&gt;&gt;&gt;
 

 And all these are assuming I understood what you wrote. 
 #2 
 Some people, when confronted with a problem, think 
 “I know, I'll use regular expressions.” 
 
 Now they have two problems. 
 

 Don't use regular expressions for stuff like this: 

 str = "val=13"
num = int(str.split("=")[1])

# a two-digit number ranges from 10 - 99
if 10 &lt;= num &lt;= 99 and num != 13:
 print("Success!")
 
 #3 If you really want a regex that matches two digits numbers except 13, then this should work: 

 &gt;&gt;&gt; str = 'val=13'
&gt;&gt;&gt; regex = 'val=(?!13$)(\d{2,})'
&gt;&gt;&gt; re.search(regex,str)
&gt;&gt;&gt; str = 'val=26'
&gt;&gt;&gt; re.search(regex,str)
&lt;_sre.SRE_Match object at 0xb75c0bf0&gt;
 

 However, as others pointed out, this may not be the best approach. 
 #4 You could use a 'negative look ahead assertion': 

 p = re.compile("val=(?!13)[0-9]{2}")
assert not p.match('val=13')
assert p.match('val=23')
 
 #5 Edit: Changed to match numbers having one or more digits. 

 If you need to pluck out various forms of val=dd where dd must be a number having one or more digits, and that number cannot be 13 (or -13), and there may be whitespace surrounding the equals sign, and the number may have an optional leading +/- sign, then this script shows one way to do it: 



 import re
# Regex: VERBOSE, commented version.
reLong = r"""
 # Match "val=dd" where dd has two or more digits (but is not 13).
 \bval\s*=\s* # "val=" literal with optional ws.
 (?!   # Begin negative lookahead assertion.
  [+\-]?  # Number may have optional sign.
  13   # This is the number we don't match
  \b   # which ends on a word boundary.
 )    # The number is not 13, +13 or -13.
 (    # $1: Two digit number.
  [+\-]?  # Allow optional sign.
  \d+   # One or more digits.
 )    # End $1: containing 2 digit number
 """
# Regex: short, uncommented version.
reShort = r"\bval\s*=\s*(?![+\-]?13\b)([+\-]?\d{2}\b)"

# Compile a regex object we can use over and over.
reObj = re.compile(reLong, re.IGNORECASE | re.VERBOSE)

# Test data strings. Positive and negative. With/without whitespace.
input = [
 # String with positive numbers. No whitespace.
 "val=1 val=13, val=133, val=12, otherval=1",
 # String with positive numbers. With whitespace.
 "val = 1 val = 13, val = 133, val = 12, otherval = 1",
 # String with negative numbers. No whitespace.
 "val=-1 val=-13, val=-133, val=-12, otherval=-1",
 # String with negative numbers. With whitespace.
 "val = -1 val = -13, val = -133, val = -12, otherval = -1",
 ]

# Parse all test data strings and print matches.
for str in input:
 matches = reObj.findall(str)
 if matches:
  print(matches)
 

 The regex is presented in both short and long verbose form with comments. Here is the output from the script: 

 ['1', '133', '12'] 
 ['1', '133', '12'] 
 ['-1', '-133', '-12'] 
 ['-1', '-133', '-12'] 

 Additional: 
To match something that is NOT something that is more than one character long, we use negative lookahead . For example, if one wants to match words which are NOT "BAD" , here is a commented regex which shows how: 



 reobj = re.compile(r"""
 # Match a word that is not: 'BAD'
 \b   # Anchor to start of word.
 (?!BAD\b) # Verify that this word is not 'BAD'
 \w+  # Ok. Safe to match non-BAD word.
 \b   # Anchor to end of word.
 """, re.VERBOSE)