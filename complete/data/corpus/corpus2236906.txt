Question (ID-2236906): First Python list index greater than x? What would be the most pythonesque way to find the first index in a list that is greater than x? 

 For example, with 

 list = [0.5, 0.3, 0.9, 0.8]
 

 The function 

 f(list, 0.7)
 

 would return 

 2.
 
 Answers (Total-7): #0 next(x[0] for x in enumerate(L) if x[1] &gt; 0.7)
 
 #1 &gt;&gt;&gt; alist= [0.5, 0.3, 0.9, 0.8]
&gt;&gt;&gt; [ n for n,i in enumerate(alist) if i&gt;0.7 ][0]
2
 
 #2 filter(lambda x: x&gt;.7, seq)[0]
 
 #3 for index, elem in enumerate(elements):
 if elem &gt; reference:
  return index
raise ValueError("Nothing Found")
 
 #4 Another one: 

 map(lambda x: x&gt;.7, seq).index(True)
 
 #5 &gt;&gt;&gt; f=lambda seq, m: [ii for ii in xrange(0, len(seq)) if seq[ii] &gt; m][0]
&gt;&gt;&gt; f([.5, .3, .9, .8], 0.7)
2
 
 #6 if list is sorted then bisect_left(alist, value) is faster for a large list than next(i for i, x in enumerate(alist) if x &gt;= value) .