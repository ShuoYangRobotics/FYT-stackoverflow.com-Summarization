Question (ID-2513479): redirect prints to log file Okay. I have completed my first python program.It has around 1000 lines of code.
During development I placed plenty of print statements before running a command using os.system() 
say something like, 

 print "running command",cmd
os.system(cmd)
 

 Now I have completed the program. I thought about commenting them but redirecting all these unnecessary print (i can't remove all print statements - since some provide useful info for user) into a log file will be more useful? Any tricks or tips. 
 Answers (Total-6): #0 You should take a look at python logging module 
 #1 
 Next time, you'll be happier if instead of using print statements at all you use the logging module from the start. It provides the control you want and you can have it write to stdout while that's still where you want it. 
 Many people here have suggested redirecting stdout. This is an ugly solution. It mutates a global and—what's worse—it mutates it for this one module's use. I would sooner make a regex that changes all print foo to print &gt;&gt;my_file, foo and set my_file to either stdout or an actual file of my choosing. 

 
 If you have any other parts of the application that actually depend on writing to stdout (or ever will in the future but you don't know it yet), this breaks them. Even if you don't, it makes reading your module look like it does one thing when it actually does another if you missed one little line up top. 
 Chevron print is pretty ugly, but not nearly as ugly as temporarily changing sys.stdout for the process. 
 Very technically speaking, a regex replacement isn't capable of doing this right (for example, it could make false positives if you are inside of a multiline string literal). However, it's apt to work, just keep an eye on it. 
 
 os.system is virtually always inferior to using the subprocess module. The latter needn't invoke the shell, doesn't pass signals in a way that usually is unwanted, and can be used in a non-blocking manner. 
 
 #2 Putting your own file-like in sys.stdout will let you capture the text output via print . 
 #3 Python lets you capture and assign sys.stdout - as mentioned - to do this: 

 old_stdout = sys.stdout

log_file = open("message.log","w")

sys.stdout = log_file

print "this will be written to message.log"

sys.stdout = old_stdout

log_file.close()
 
 #4 You can redirect replace sys.stdout with any object which has same interface as sys.stdout, in that object's write you can print to terminal and to file too. e.g. see this recipe http://code.activestate.com/recipes/119404-print-hook/ 
 #5 A simple way to redirect stdout and stderr using the logging module is here:
 http://stackoverflow.com/questions/616645/how-do-i-duplicate-sys-stdout-to-a-log-file-in-python/2216517#2216517