Question (ID-3697763): pretty printer with Python? I have a list of labels, and data as follows. 

 
['id', 'Version', 'chip_name', 'xversion', 'device', 'opt_param', 'place_effort']
[1, 1.0, u'virtex2', u'xilinx11.5', u'xc5vlx50', u'Speed', u'High']
 

 I need to print them into console. And for this, I'm iterating over the list, and print out each element with a tab ('\t'). 

 But, unfortunately, the result is not so pretty. 

 

number of data 1 and number of column 7
id  Version  chip_name  xversion  device  opt_param  place_effort  
1  1.0  virtex2  xilinx11.5  xc5vlx50  Speed  High  
 

 The string length of label and data is quite variable, and it's not aligned well. 

 Is there any solution to this problem with Python? 

 ADDED 

 Hepled by Mike DeSimone's answer, I could make the pretty printer that I can use for my purposes. The valueResults are a list of duple. 

  labels = queryResult.names
 valueResults = queryResult.result

 # get the maximum width
 allData = valueResults
 allData.insert(0,labels)
 transpose = zip(*valueResults) # remove the sequence as a parameter
 #print transpose
 for value in transpose:
  # value is integer/float/unicode/str, so make it length of str
  newValue = [len(str(i)) for i in value]
  columnWidth = max(newValue)
  columnWidths.append(columnWidth)
  dividers.append('-' * columnWidth)
  dblDividers.append('=' * columnWidth)
  label = value[0]
  paddedLabels.append(label.center(columnWidth))

 paddedString = ""

 for values in valueResults[1:]:
  paddedValue = []
  for i, value in enumerate(values):
   svalue = str(value)
   columnWidth = columnWidths[i]
   paddedValue.append(svalue.center(columnWidth))
  paddedString += '| ' + ' | '.join(paddedValue) + ' |' + '\n'

 string += '+-' + '-+-'.join(dividers) + '-+' + '\n'
 string += '| ' + ' | '.join(paddedLabels) + ' |' + '\n'
 string += '+=' + '=+='.join(dblDividers) + '=+' + '\n'
 string += paddedString
 string += '+-' + '-+-'.join(dividers) + '-+' + '\n'
 

 And this is the result. 

 

+----+---------+-----------+------------+----------+-----------+--------------+
| id | Version | chip_name | xversion | device | opt_param | place_effort |
+====+=========+===========+============+==========+===========+==============+
| 1 | 1.0 | virtex2 | xilinx11.5 | xc5vlx50 | Speed |  High  |
| 2 | 1.0 | virtex2 | xilinx11.5 | xc5vlx50 | Speed |  High  |
+----+---------+-----------+------------+----------+-----------+--------------+
 

 Thanks for the help. 
 Answers (Total-6): #0 Something like this: 

 labels = ['id', 'Version', 'chip_name', 'xversion', 'device', 'opt_param', 
 'place_effort']
values = [1, 1.0, u'virtex2', u'xilinx11.5', u'xc5vlx50', u'Speed', u'High']

paddedLabels = []
paddedValues = []

for label, value in zip(labels, values):
 value = str(value)
 columnWidth = max(len(label), len(value))
 paddedLabels.append(label.center(columnWidth))
 paddedValues.append(value.center(columnWidth))

print ' '.join(paddedLabels)
print ' '.join(paddedValues)
 

 Output: 

 id Version chip_name xversion device opt_param place_effort
1 1.0 virtex2 xilinx11.5 xc5vlx50 Speed  High
 

 If you want to get fancy, make it reStructuredText -ready: 

 labels = ['id', 'Version', 'chip_name', 'xversion', 'device', 'opt_param', 
 'place_effort']
values = [1, 1.0, u'virtex2', u'xilinx11.5', u'xc5vlx50', u'Speed', u'High']

paddedLabels = []
paddedValues = []
dividers = []
dblDividers = []

for label, value in zip(labels, values):
 value = str(value)
 columnWidth = max(len(label), len(value))
 paddedLabels.append(label.center(columnWidth))
 paddedValues.append(value.center(columnWidth))
 dividers.append('-' * columnWidth)
 dblDividers.append('=' * columnWidth)

print '+-' + '-+-'.join(dividers) + '-+'
print '| ' + ' | '.join(paddedLabels) + ' |'
print '+=' + '=+='.join(dblDividers) + '=+'
print '| ' + ' | '.join(paddedValues) + ' |'
print '+-' + '-+-'.join(dividers) + '-+'
 

 Output: 

 +----+---------+-----------+------------+----------+-----------+--------------+
| id | Version | chip_name | xversion | device | opt_param | place_effort |
+====+=========+===========+============+==========+===========+==============+
| 1 | 1.0 | virtex2 | xilinx11.5 | xc5vlx50 | Speed |  High  |
+----+---------+-----------+------------+----------+-----------+--------------+
 
 #1 Use ljust to stuff the contents before they are printed out. 

 import sys

def maxwidth(table, index):
 """Get the maximum width of the given column index"""
 return max([len(str(row[index])) for row in table])

def pprint_table(table):
 colpad = []

 for i in range(len(table[0])):
  colpad.append(maxwidth(table, i))

 for row in table:
  print str(row[0]).ljust(colpad[0] + 1),
  for i in range(1, len(row)):
   col = str(row[i]).rjust(colpad[i] + 2)
   print "", col,
  print ""

a = ['id', 'Version', 'chip_name', 'xversion', 'device', 'opt_param', 'place_effort']
b = [1, 1.0, u'virtex2', u'xilinx11.5', u'xc5vlx50', u'Speed', u'High']

# Put it in the table

c = [a, b]

pprint_table(c)
 

 output: 

 id  Version chip_name  xversion  device opt_param place_effort 
1   1.0  virtex2 xilinx11.5 xc5vlx50  Speed   High
 
 #2 you could try this 

 &gt;&gt;&gt; table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 7678}
&gt;&gt;&gt; for name, phone in table.items():
...  print '{0:10} ==&gt; {1:10d}'.format(name, phone)
...
Jack  ==&gt;  4098
Dcab  ==&gt;  7678
Sjoerd  ==&gt;  4127
 

 from http://docs.python.org/tutorial/inputoutput.html 

 The integer after the : is the padding. 

 or better yet 

 &gt;&gt;&gt; table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637678}
&gt;&gt;&gt; print ('Jack: {0[Jack]:d}; Sjoerd: {0[Sjoerd]:d}; '
...  'Dcab: {0[Dcab]:d}'.format(table))
Jack: 4098; Sjoerd: 4127; Dcab: 8637678
 
 #3 You can use ready solution: : prettytable A simple Python library for easily displaying tabular data in a visually appealing ASCII table format 

 Other solutions, see my similar questions other answers: http://stackoverflow.com/questions/3319540/how-to-extend-pretty-print-module-to-tables 
 #4 Another solution is not to use tab at all, and uses spaces to adjust column width, also no need of manually padding, as '%Ns' string formatting comes handy e.g. 

 header = ['id', 'Version', 'chip_name', 'xversion', 'device', 'opt_param', 'place_effort']
rows = [[1, 1.0, u'virtex2', u'xilinx11.5', u'xc5vlx50', u'Speed', u'High']]

def print_row(row):
 column_width=12
 format_str = ("%-"+str(column_width)+"s")*len(row)
 print format_str%tuple(row)

print_row(header)
for row in rows:
 print_row(row)
 

 Output: 

 id   Version  chip_name xversion device  opt_param place_effort
1   1.0   virtex2  xilinx11.5 xc5vlx50 Speed  High
 
 #5 For a quick solution, If ln is the list containing all these lists, 

 for l in ln:
 print "\t".join([str(x).ljust(10) for x in l])
 

 will print columns seperated by tab and left-justified. Increase the value inside ljust if it isn't pretty yet.