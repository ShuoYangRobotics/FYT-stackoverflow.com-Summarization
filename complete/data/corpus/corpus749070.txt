Question (ID-749070): partial list unpack in python In python, assignment operator can unpack list or tuple into variables, like this: 

 l = (1, 2)
a, b = l # here goes auto unpack
 

 But i need to specify exactly same amount of names to the left as an items count in the list to the right. But sometimes i don't know a size of the list to the right, for example if i use split(). Example: 

 a, b = "length=25".split("=") # this will result in a="length" and b=25
 

 But the following code will lead an error: 

 a, b = "DEFAULT_LENGTH".split("=") # error, list has only 1 item
 

 is it possible to somehow unpack list in the example above so i get a = "DEFAULT_LENGTH" and b equals to 'None' or not set? Straightforward way looks kinda long: 

 a = b = None
if "=" in string :
 a, b = string.split("=")
else :
 a = string
 
 Answers (Total-10): #0 # this will result in a="length" and b="25"
a, b = "length=25".partition("=")[::2]

# this will result in a="DEFAULT_LENGTH" and b=""
a, b = "DEFAULT_LENGTH".partition("=")[::2]
 
 #1 This may be of no use to you unless you're using python 3. However, for completeness, it's worth noting that the extended tuple unpacking introduced there allows you do do things like: 

 &gt;&gt;&gt; a, *b = "length=25".split("=")
&gt;&gt;&gt; a,b
("length", ['25'])
&gt;&gt;&gt; a, *b = "DEFAULT_LENGTH".split("=")
&gt;&gt;&gt; a,b
("DEFAULT_LENGTH", [])
 

 ie. tuple unpacking now works similarly to how it does in argument unpacking, so you can denote "the rest of the items" with * , and get them as a (possibly empty) list. 

 Partition is probably the best solution for what you're doing however. 
 #2 The nicest way is using the partition string method : 

 
 Split the string at the first occurrence of sep, and return a 3-tuple containing the part before the separator, the separator itself, and the part after the separator. If the separator is not found, return a 3-tuple containing the string itself, followed by two empty strings. 
 
 New in version 2.5. 
 

 &gt;&gt;&gt; inputstr = "length=25"
&gt;&gt;&gt; inputstr.partition("=")
('length', '=', '25')
&gt;&gt;&gt; name, _, value = inputstr.partition("=")
&gt;&gt;&gt; print name, value
length 25
 

 It also works for strings not containing the = : 

 &gt;&gt;&gt; inputstr = "DEFAULT_VALUE"
&gt;&gt;&gt; inputstr.partition("=")
('DEFAULT_VALUE', '', '')
 

 If for some reason you are using a version of Python before 2.5, you can use list-slicing to do much the same, if slightly less tidily: 

 &gt;&gt;&gt; x = "DEFAULT_LENGTH"

&gt;&gt;&gt; a = x.split("=")[0]
&gt;&gt;&gt; b = "=".join(x.split("=")[1:])

&gt;&gt;&gt; print (a, b)
('DEFAULT_LENGTH', '')
 

 ..and when x = "length=25" : 

 ('length', '25')
 

 Easily turned into a function or lambda: 

 &gt;&gt;&gt; part = lambda x: (x.split("=")[0], "=".join(x.split("=")[1:]))
&gt;&gt;&gt; part("length=25")
('length', '25')
&gt;&gt;&gt; part('DEFAULT_LENGTH')
('DEFAULT_LENGTH', '')
 
 #3 You could write a helper function to do it. 

 &gt;&gt;&gt; def pack(values, size):
...  if len(values) &gt;= size:
...   return values[:size]
...  return values + [None] * (size - len(values))
...
&gt;&gt;&gt; a, b = pack('a:b:c'.split(':'), 2)
&gt;&gt;&gt; a, b
('a', 'b')
&gt;&gt;&gt; a, b = pack('a'.split(':'), 2)
&gt;&gt;&gt; a, b
('a', None)
 
 #4 This is slightly better than your solution but still not very elegant; it wouldn't surprise me if there's a better way to do it. 

 a, b = (string.split("=") + [None])[:2]
 
 #5 Don't use this code, it is meant as a joke, but it does what you want: 

 a = b = None
try: a, b = [a for a in 'DEFAULT_LENGTH'.split('=')]
except: pass
 
 #6 
 But sometimes i don't know a size of the list to the right, for example if i use split(). 
 

 Yeah, when I've got cases with limit>1 (so I can't use partition) I usually plump for: 

 def paddedsplit(s, find, limit):
 parts= s.split(find, limit)
 return parts+[parts[0][:0]]*(limit+1-len(parts))

username, password, hash= paddedsplit(credentials, ':', 2)
 

 ( parts[0][:0] is there to get an empty ‘str’ or ‘unicode’, matching whichever of those the split produced. You could use None if you prefer.) 
 #7 Many other solutions have been proposed, but I have to say the most straightforward to me is still 

 a, b = string.split("=") if "=" in string else (string, None)
 
 #8 As an alternative, perhaps use a regular expression? 

 &gt;&gt;&gt; import re
&gt;&gt;&gt; unpack_re = re.compile("(\w*)(?:=(\w*))?")

&gt;&gt;&gt; x = "DEFAULT_LENGTH"
&gt;&gt;&gt; unpack_re.match(x).groups()
('DEFAULT_LENGTH', None)

&gt;&gt;&gt; y = "length=107"
&gt;&gt;&gt; unpack_re.match(y).groups()
('length', '107')
 

 If you make sure the re.match() always succeeds, .groups() will always return the right number of elements to unpack into your tuple, so you can safely do 

 a,b = unpack_re.match(x).groups()
 
 #9 Have you tried this? 

 values = aString.split("=")
if len(values) == 1:
 a = values[0]
else:
 a, b = values