Question (ID-5631474): Python app to make a random prime number between 10^300 and 10^301 i need to make Python app to make a random prime number between 10^300 and 10^301 , i done it with this but its very slow. any solution? 

 
import random , math
check_prime = 0 

 print "Please wait ..."
def is_prime(n):
 import math
 n = abs(n)
 i = 2
 while i &lt;= math.sqrt(n):
  if n % i == 0:
   return False
  i += 1 
 return True 

 while check_prime == 0 :
 randomnumber = random.randrange(math.pow(10,300),math.pow(10,301)-1)
 if is_prime(randomnumber):
  print randomnumber
  break
 
 Answers (Total-7): #0 First things first: Don't use math.pow(), as it is just a wrapper for the C floating-point function, and your numbers are WAY too big to be accurately represented as floats. Use Python's exponentiation operator, which is **. 

 Second: If you are on a platform which has a version of gmpy , use that for your primality testing. 

 Third: As eumiro notes, you might be dealing with too big of a problem space for there to be any truly fast solution. 
 #1 Take a look at Miller-Rabin test I am sure you will find some implementations in Python on the internet. 
 #2 Since you are handling extremely large numbers, you should really build on what clever people already did for you. Given that you need to know for sure your number is a prime (Miller Rabin is out), and you do want a random prime (not of a specific structure), I would suggest AKS . I am not sure how to optimize your numbers under test, but just choosing a random number might be okay given the speed of the primality test. 
 #3 As explained in the comments, you can forget about building a list of all primes between 10^300 and 10^301 and picking one randomly - there's orders of magnitudes too many primes in that range for that to work. 

 The only practical approach, as far as I can see, is to randomly pick a number from the range, then test if it is prime. Repeat until you find a prime. 

 For the primality testing, that's a whole subject by itself (libraries have been written about it). Basically you first do a few quick tests to discard numbers that are obviously not prime, then you bring out the big guns and use one of the common primality tests (Miller-Rabin (iterated), AKS, ...). I don't know enough to recommend one, but that's really a topic for research-level maths, so you should probably head over to http://math.stackexchange.com/ . 

 See e.g. this question for a starting point and some simple recipes: 

 How do you determine if a number is prime or composite? 

 About your code: 

 The code you post basically does just what I described, however it uses an extremely naive primality test (trial division by all numbers 1...sqrt(n)). That's why it's so slow. If you use a better primatlity test, it will be orders of magnitude faster. 
 #4 If you need something quick and dirty simply use Fermat's little theorem. 

 def isPrime(p):
 if(p==2): return True
 if(not(p&amp;1)): return False
 return pow(2,p-1,p)==1
 

 Although this works quite well for random numbers this will fail for numbers know as "pseudoprimes". (quite scarce)
But If you need something foolproof and simple enough to implement I'd suggest you 
read up about Miller Rabin's Primality Test. 

 PS: pow(a,b,c) takes O(log(b)) time in python. 
 #5 If you want to generate a large number of primes, or generate them quickly, pure python may not be the way to go - one option would be to use a python openssl wrapper, and use openssl's facility for generating RSA private keys (which are in fact a pair of primes), or some of openssl's other primality-related functions. Another way to acheive speed would be a C extension implementing one of the tests below... 

 If opessl isn't an option, your two choices (as many of the comments have mentioned) are the Miller-Rabin test and the AKS test. The main differences - AKS is deterministic, and is guaranteed to give no false results; whereas Miller-Rabin is probabalistic, it may occasionally give false positives - but the longer you run it, the lower that probability becomes (the odds are 1/4**k for k rounds of testing). You would think AKS would obviously be the way to go, except that it's much slower - O(log(n)**12) compared to Miller-Rabin's O(k*log(n)**3) . (For comparison, the scan test you presented will take O(n**.5) , so either of these will be much faster for large numbers). 

 If it would be useful, I can paste in a Miller-Rabin implementation I have, but it's rather long. 
 #6 It is probably better to use a different algorithm, but you could optimise this code pretty easily as well. 

 This function will be twice as fast: 

 def is_prime(n):
 import math
 n = abs(n)
 if n % 2 == 0:
  return False
 i = 3
 while i &lt;= math.sqrt(n):
  if n % i == 0:
   return False
  i += 2

 return True