Question (ID-121396): Accessing object memory address When you call the object.__repr__() method in python you get something like this back: &lt;__main__.Test object at 0x2aba1c0cf890&gt; , is there any way to get a hold of the memory address if you overload __repr__() , other then calling super(Class, obj).__repr__() and regexing it out? 
 Answers (Total-7): #0 The Python manual has this to say about id(): 

 
 Return the ``identity'' of an object.
 This is an integer (or long integer)
 which is guaranteed to be unique and
 constant for this object during its
 lifetime. Two objects with
 non-overlapping lifetimes may have the
 same id() value. (Implementation note:
 this is the address of the object.) 
 

 So in CPython, this will be the address of the object. No such guarantee for any other Python interpreter, though. 

 Note that if you're writing a C extension, you have full access to the internals of the Python interpreter, including access to the addresses of objects directly. 
 #1 With ctypes , you can achieve the same thing with 

 &gt;&gt;&gt; import ctypes
&gt;&gt;&gt; a = (1,2,3)
&gt;&gt;&gt; ctypes.addressof(a)
3077760748L
 

 Documentation: 

 
 addressof(C instance) -&gt; integer 
 Return the address of the C instance internal buffer 
 

 Note that in CPython, currently id(a) == ctypes.addressof(a) , but ctypes.addressof should return the real address for each Python implementation, if 

 
 ctypes is supported 
 memory pointers are a valid notion. 
 

 Edit : added information about interpreter-independence of ctypes 
 #2 You could reimplement the default repr this way: 

 def __repr__(self):
 return '&lt;%s.%s object at %s&gt;' % (
  self.__class__.__module__,
  self.__class__.__name__,
  hex(id(self))
 )
 
 #3 Just use 

 id(object)
 
 #4 Just in response to Torsten, I wasn't able to call addressof() on a regular python object. Furthermore, id(a) != addressof(a) . This is in CPython, don't know about anything else. 

 &gt;&gt;&gt; from ctypes import c_int, addressof
&gt;&gt;&gt; a = 69
&gt;&gt;&gt; addressof(a)
Traceback (most recent call last):
 File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: invalid type
&gt;&gt;&gt; b = c_int(69)
&gt;&gt;&gt; addressof(b)
4300673472
&gt;&gt;&gt; id(b)
4300673392
 
 #5 You can get something suitable for that purpose with: 

 id(self)
 
 #6 While it's true that id(object) gets the object's address in the default CPython implementation, this is generally useless... you can't do anything with the address from pure Python code. 

 The only time you would actually be able to use the address is from a C extension library... in which case it is trivial to get the object's address since Python objects are always passed around as C pointers.