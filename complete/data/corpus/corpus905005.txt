Question (ID-905005): Python and Intellisense Ok newbee question: Is there an equivalent to 'intellisense' for Python? 

 Perhaps i shouldn't admit it but I find having intellisense really speeds up the 'discovery phase' of learning a new language. For instance switching from VB.net to C# was a breeze due to snippets and intellisense helping me along. 
 Answers (Total-11): #0 This blog entry explains setting Vim up as a Python IDE, he covers Intellisense-like functionality: 

 

 This is standard in Vim 7. There are a number of other very useful plugins for python development in Vim, such as Pyflakes which checks code on the fly and Python_fn.vim which provides functionality for manipulating python indentation &amp; code blocks. 
 #1 The PyDev environment for Eclipse has intellisense-like functionality for Python. Keeping an interactive console open, along with the help(item) function is very helpful. 
 #2 The dynamic nature of the language tends to make autocomplete type analysis difficult, so the quality of the various completion facilities menitoned above varies wildly. 

 While it's not exactly what you asked for, the ipython shell is very good for exploratory work. When I'm working with a new module, I tend to pull it into ipython and poke at it. Having tried most of the solutions mentioned above (though it's been years since Wing), ipython's completion facilities are consistently more reliable. The two main tools for exploration are tab complete and appending a question mark to the module/function name to get the help text, e.g.: 

 In [1]: import sqlalchemy

In [2]: sqlalchemy.s #tab completion
sqlalchemy.schema sqlalchemy.select sqlalchemy.sql  sqlalchemy.subquery

In [2]: sqlalchemy.select? #Shows docstring

In [3]: sqlalchemy.select?? #Shows method source

In [4]: edit sqlalchemy.select #opens the source in an editor
 
 #3 I strongly recommend PyDev . In Pydev you can put the module you are using in the Forced Buildins , mostly the code-completion will work better than in other IDEs like KOMODO EDIT. 

 Also I think IPython is very helpful. Since it is 'run-time' in IPython, the code-completion in IPython won't miss anything. 
 #4 ctags + vim works ok, too, although it is not as powerful as intellisense. Using this with ipython, you can get online help, automatic name completion, etc... But that's obviously command-line oriented. 

 Eclipse + pydev can do it as well, but I have no experience with it: http://pydev.sourceforge.net/ 
 #5 I'd recommend Komodo Edit . However, I should point something out: you're not going to get anything quite as good as what you're used to with Visual Studio's C# intellisense. Python's dynamic nature can make it difficult to do these kinds of features. 
 #6 The IDLE editor that comes with Python has an intellisense feature that auto-discovers imported modules, functions, classes and attributes. 
 #7 Wingware for example implements auto-completion, see http://wingware.com/doc/edit/auto-completion . 
 #8 Well, I think the most dynamic way to learn Python is to use iPython . 

 You got autocompletion when using tab, dynamic behaviour because it's a shell and you can get the full documentation of any object / method typing : 

 object.method ?
 

 When developping, I agree that PyDev is cool. But it's heavy, so while learning, a text editor + iPython is really nice. 
 #9 Pyscripter has the best intellisense i have meet :) 
 #10 Have a look at python tools for visual studio , they provide code completion (a.k.a intellisense), debugging etc ...