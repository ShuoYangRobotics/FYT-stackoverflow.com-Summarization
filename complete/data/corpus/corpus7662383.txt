Question (ID-7662383): how to check if you are at the end of a list in python? if have a list, say a=[1,2,3], and I want to see if a[4] is null, is there a way to do that? without using an exception or assertion. 
 Answers (Total-8): #0  len will tell you the length of the list. To quote the docs: 

 
 len(s) 
  Return the length (the number of items) of an object. The argument may be a sequence  (string, tuple or list) or a mapping (dictionary). 
 

 Of course, if you want to get the final element in a list , tuple , or string , since indexes are 0 based, and the length of an item is the element count, a[len(a)-1] will be the last item. 

 

 As an aside, generally, the proper way to access the last element in an object which allows numeric indexing (str, list, tuple, etc) is using a[-1] . Obviously, that does not involve len though. 
 #1 You're not providing a specific use-case, but generally for a list your would use len to see how many elements are in the list. 

 if len(a) &gt; 3:
 # Do something
 
 #2 Use len 

 if len(a) &lt;= index:
 ...
 

 Note: Your question asks how you would find out "if a[4] is null". a[4] isn't anything, which is why you get an IndexError when you try to check it. 
 #3 The general way to check if you're currently looking at the element at the end of a list (in any language) is to compare the current index you're looking at with the length of the list minus one (since indexes start at 0). 

 a[4] isn't really anything, because it doesn't exist - some languages may implement that as being null (or undefined) but many will simply throw an exception if you try to access it instead. 
 #4 a[4] in this case will throw a IndexError exception, which isn't the same as comparing the value of a at index 4 to None . You can have values of None in a list, and if you were to compare values of a , then when you encounter a None , it doesn't mean that the index is not found in the list. For example: 

 &gt;&gt;&gt; a=[1,None,2]
&gt;&gt;&gt; a[1]==None
True
&gt;&gt;&gt; a[3]
Traceback (most recent call last):
 File "&lt;stdin&gt;", line 1, in &lt;module&gt;
IndexError: list index out of range
 

 Since lists are contiguous and indexed sequentially, the correct way to check if an index is in a list is to compare it to the len() of a list, but depending on the application, there are other ways around it, like catching an IndexError , or iteration. 

 &gt;&gt;&gt; for index, value in enumerate(a):
...  print index, value
... 
0 1
1 None
2 2
 
 #5 I think the OP is asking for a way to find out if an index is within the range of valid values for a given list (or tuple, or string). For that, I'd use a check like this: 

 if not lst or index &lt; 0 or index &gt;= len(lst):
 # the index is invalid, do something
 

 Of course, in Python a negative index is valid, but it accesses elements from the end of the list counting backwards. 
 #6 with a = [1,2,3] : 

 a[2:3] is [3] 

 a[3:4] is [ ] 

 So a[i:i+1] != [ ] tells if is an index of a 

 a[i:] does the same, but a[i:] creates another list, possible very long, while a[i:i+1] is 1 element if not empty 
 #7 You could write a function which behaves kind of like dict.get() does for dictionaries: 

 def listget(list_, index, default=None):
 """Return the item for index if index is in the range of the list_,
 else default. If default is not given, it defaults to None, so that
 this method never raises an IndexError."""
 if index &gt;= len(list_) or index &lt; -len(list_):
  return default
 else:
  return list_[index]
 

 Example usage: 

 &gt;&gt;&gt; names = ["Mark","Frank","James"]
&gt;&gt;&gt; listget(names, 2)
'James'
&gt;&gt;&gt; listget(names,-3)
'Mark'
&gt;&gt;&gt; listget(names,3) # returns None
&gt;&gt;&gt; listget(names,4,0)
0
 

 So it will always return a value and you get no exceptions.