Question (ID-2040998): How to change variables in Python I am trying to change a variable further down the program. I have a global variable declared at the start of the program and I want to change the variable in different functions down the program. I can do this by declaring the variable inside the function again but I would like to know is there a better way of doing this. Some test code is below to explain what I mean. 

 ID = 'No'
project = ("Yep"+ID) #ID added with no value which I later want to change

def pro():

 ID = "YES"
 print ID

def pro1(ID):

 #I could declare project again to get this to work, but I would like to avoid this
 print project # I want this to print with the new ID number.

if __name__ == '__main__':
 pro()
 pro1(ID)
 

 Has anyone any ideas, thanks 

 I have tried the 'global' variable but when I do this the project variable still prints out 'YepNo' instead of 'YepYES'. I want the new variable from the function 'pro' to change the variable in the 'project' variable. 
 Answers (Total-6): #0 Beware, you're doing it wrong multiple times. 

 Even though you could use the global statement to change a global (it is discouraged since it's better to use func parameters and return values), that would NOT change other already assigned values. E.g. even tough you reassign ID, you would NOT reassign project. Also: your functions return nothing, there's no point in assigning a name to their return value, and it's a BAD habit using an all-uppercase name (ID) for a variable, since it's a convention to use them for constants. 

 This should clarify you the way global works: 

 myid = ''
project = ("Yep"+myid) #ID added with no value which I later want to change

def mutate_id():
 global myid
 myid = "YES"

def mutate_project():
 global project
 project = ("YEP" + myid)

if __name__ == '__main__': 
 print "myid", myid
 print "project ", project
 print

 mutate_id()

 print "myid", myid
 print "project ", project
 print

 mutate_project()

 print "myid", myid
 print "project ", project
 print
 

 But the best way is to do WITHOUT globals: 

 def get_new_id(old):
 return "YES"

def get_new_project(old):
 return ("YEP" + myid)

if __name__ == '__main__': 
 myid = ''
 project = ("Yep"+myid) 

 print "myid", myid
 print "project ", project
 print

 myid = get_new_id(myid)

 print "myid", myid
 print "project ", project
 print

 project = get_new_project(project)

 print "myid", myid
 print "project ", project
 print
 

 This will make all code interaction clear, and prevent issues related to global state change. 
 #1 To update global variables you could use 

 global ID
ID="Yes"
 

 before assigning variable to ID = "YES" 

 But changing ID will be no effect on project variable, project = ("Yep"+ID) , because project is already a string 

 you need to make a function like 

 def getprojectname(ID):
 return project+ID
 

 The whole program may be like this 

 UPDATE :
... removed 
 #2 Use the global statement. 

 
 The global statement is a declaration which holds for the entire current code block. It means that the listed identifiers are to be interpreted as globals. 
 

 Example: http://www.rexx.com/~dkuhlman/python_101/python_101.html#SECTION004340000000000000000 

 P.S. 

 But don't use global too often, see http://www.youtube.com/watch?v=E_kZDvwofHY#t=10m45 
 #3 In your code you have two problems. The first about changing ID variable, which could be solved by using global. 

 The second that your code calculate project string and after that project don't know about ID. 

 To avoid code duplication you can define function to calc project. 

 So we have: 

 ID = 'No'
def GetProject():
 return "Yep"+ID

def pro():
 global ID
 ID = "YES"
 print ID

print GetProject()

pro()

print GetProject()
 
 #4 Why not use a dictionary? 

 &gt;&gt;&gt; attr = {'start':'XXX', 'myid':'No'}
&gt;&gt;&gt; 
&gt;&gt;&gt; def update_and_show(D, value = None):
...  if value: D['myid'] = value
...  print D['start'] + ' ' + D['myid']
... 
&gt;&gt;&gt; update_and_show(attr)
XXX No
&gt;&gt;&gt; update_and_show(attr, 'Yes')
XXX Yes
&gt;&gt;&gt; update_and_show(attr, 'No')
XXX No
&gt;&gt;&gt;
 
 #5 You can mutate without reassigning: 

 variables = {}
def pro():
 if variables['ID'] == '':
  variables['ID'] = 'default'