Question (ID-367155): Splitting a string into words and punctuation I'm trying to split a string up into words and punctuation, adding the punctuation to the list produced by the split. 

 For instance: 

 &gt;&gt;&gt; c = "help, me"
&gt;&gt;&gt; print c.split()
['help,', 'me']
 

 What I really want the list to look like is: 

 ['help', ',', 'me']
 

 So, I want the string split at whitespace with the punctuation split from the words. 

 I've tried to parse the string first and then run the split: 

 &gt;&gt;&gt; for character in c:
...  if character in ".,;!?":
...    outputCharacter = " %s" % character
...  else:
...    outputCharacter = character
...  separatedPunctuation += outputCharacter
&gt;&gt;&gt; print separatedPunctuation
help , me
&gt;&gt;&gt; print separatedPunctuation.split()
['help', ',', 'me']
 

 This produces the result I want, but is painfully slow on large files. 

 Is there a way to do this more efficiently? 
 Answers (Total-8): #0 This is more or less the way to do it: 

 &gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall(r"[\w']+|[.,!?;]", "Hello, I'm a string!")
['Hello', ',', "I'm", 'a', 'string', '!']
 

 The trick is, not to think about where to split the string, but what to include in the tokens. 

 Caveats: 

 
 The underscore (_) is considered an inner-word character. Replace \w, if you don't want that. 
 This will not work with (single) quotes in the string. 
 Put any additional punctuation marks you want to use in the right half of the regular expression. 
 Anything not explicitely mentioned in the re is silently dropped. 
 
 #1 Here's my entry. 

 I have my doubts as to how well this will hold up in the sense of efficiency, or if it catches all cases (note the "!!!" grouped together; this may or may not be a good thing). 

 &gt;&gt;&gt; import re
&gt;&gt;&gt; import string
&gt;&gt;&gt; s = "Helo, my name is Joe! and i live!!! in a button; factory:"
&gt;&gt;&gt; l = [item for item in map(string.strip, re.split("(\W+)", s)) if len(item) &gt; 0]
&gt;&gt;&gt; l
['Helo', ',', 'my', 'name', 'is', 'Joe', '!', 'and', 'i', 'live', '!!!', 'in', 'a', 'button', ';', 'factory', ':']
&gt;&gt;&gt;
 

 One obvious optimization would be to compile the regex before hand (using re.compile) if you're going to be doing this on a line-by-line basis. 
 #2 Have you tried using a regex? 

 http://docs.python.org/library/re.html#re-syntax 

 

 By the way. Why do you need the "," at the second one? You will know that after each text is written i.e. 

 [0] 

 "," 

 [1] 

 "," 

 So if you want to add the "," you can just do it after each iteration when you use the array.. 
 #3 Thanks Filip, I'll look into the regex library. 

 On the second point, maybe I should have used a better example. 

 If I had the string: 

 d = "Hello, I'm a string!"
 

 I'd want the output: 

 ['Hello', ',', 'I'm', 'a', 'string', "!"]
 

 So, I want to separate all different sorts of punctuation from the alphanumerics, splitting at the whitespace. 
 #4 In perl-style regular expression syntax, \b matches a word boundary. This should come in handy for doing a regex-based split. 

 edit: I have been informed by hop that "empty matches" do not work in the split function of Python's re module. I will leave this here as information for anyone else getting stumped by this "feature". 
 #5 I think you can find all the help you can imagine in the NLTK , especially since you are using python. There's a good comprehensive discussion of this issue in the tutorial. 
 #6 Here's a minor update to your implementation. If your trying to doing anything more detailed I suggest looking into the NLTK that le dorfier suggested. 

 This might only be a little faster since ''.join() is used in place of +=, which is known to be faster . 

 import string

d = "Hello, I'm a string!"

result = []
word = ''

for char in d:
 if char not in string.whitespace:
  if char not in string.ascii_letters + "'":
   if word:
     result.append(word)
   result.append(char)
   word = ''
  else:
   word = ''.join([word,char])

 else:
  if word:
   result.append(word)
   word = ''
print result
['Hello', ',', "I'm", 'a', 'string', '!']
 
 #7 Here is a Unicode-aware version: 

 re.findall(r"\w+|[^\w\s]", text, re.UNICODE)
 

 The first alternative catches sequences of word characters (as defined by unicode, so "rÃ©sumÃ©" won't turn into ['r', 'sum'] ); the second catches individual non-word characters, ignoring whitespace. 

 Note that, unlike the top answer, this treats the single quote as separate punctuation (e.g. "I'm" -> ['I', "'", 'm'] ). This appears to be standard in NLP, so I consider it a feature.