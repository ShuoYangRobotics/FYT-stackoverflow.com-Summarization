Question (ID-2211990): How to implement an efficient infinite generator of prime numbers in Python? This is not a homework, I am just curious. 

 INFINITE is the key word here. 

 I wish to use it as for p in primes(). I believe that this is a built-in function in Haskell. 

 So, the answer cannot be as naive as "Just do a Sieve". 

 First of all, you do not know how many consecutive primes will be consumed. Well, suppose you could concoct 100 of them at a time. Would you use the same Sieve approach as well as the frequency of prime numbers formula? 

 I prefer non-concurrent approach. 

 Thank you for reading (and writing ;) )! 
 Answers (Total-8): #0 I still like what I wrote up here (a Cookbook recipe with many other authors) -- it shows how a Sieve of Eratosthenes has no intrinsic limits, and the comments and discussion, I believe, make it quite clear. This was recently discussed on Stack Overflow (search for the authors' names, I guess) and somebody proposed a substantially faster (but IMHO less clear) version;-). 
 #1 “If I have seen further…” 

 The erat2 function from the cookbook can be further sped up (by about 20-25%): 

 erat2a 

 import itertools as it
def erat2a( ):
 D = { }
 yield 2
 for q in it.islice(it.count(3), 0, None, 2):
  p = D.pop(q, None)
  if p is None:
   D[q*q] = q
   yield q
  else:
   # old code here:
   # x = p + q
   # while x in D or not (x&amp;1):
   #  x += p
   # changed into:
   x = q + 2*p
   while x in D:
    x += 2*p
   D[x] = p
 

 The not (x&amp;1) check verifies that x is odd. However, since both q and p are odd, by adding 2*p half of the steps are avoided along with the test for oddity. 

 erat3 

 If one doesn't mind a little extra fanciness, erat2 can be sped up by 35-40% with the following changes (NB: needs Python 2.7+ or Python 3+ because of the itertools.compress function): 

 import itertools as it
def erat3( ):
 D = { 9: 3, 25: 5 }
 yield 2
 yield 3
 yield 5
 MASK= 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0,
 MODULOS= frozenset( (1, 7, 11, 13, 17, 19, 23, 29) )

 for q in it.compress(
   it.islice(it.count(7), 0, None, 2),
   it.cycle(MASK)):
  p = D.pop(q, None)
  if p is None:
   D[q*q] = q
   yield q
  else:
   x = q + 2*p
   while x in D or (x%30) not in MODULOS:
    x += 2*p
   D[x] = p
 

 The erat3 function takes advantage of the fact that all primes (except for 2, 3, 5) modulo 30 result to only eight numbers: the ones included in the MODULOS frozenset. Thus, after yielding the initial three primes, we start from 7 and work only with the candidates. 
The candidate filtering uses the itertools.compress function; the “magic” is in the MASK sequence; MASK has 15 elements (there are 15 odd numbers in every 30 numbers, as chosen by the itertools.islice function) with a 1 for every possible candidate, starting from 7. The cycle repeats as specified by the itertools.cycle function. 
The introduction of the candidate filtering needs another modification: the or (x%30) not in MODULOS check. The erat2 algorithm processed all odd numbers; now that the erat3 algorithm processes only r30 candidates, we need to make sure that all D.keys() can only be such —false— candidates. 

 Benchmarks 

 Results 

 On an Atom 330 Ubuntu 9.10 server, versions 2.6.4 and 3.1.1+: 

 $ testit
up to 8192
==== python2 erat2 ====
100 loops, best of 3: 18.6 msec per loop
==== python2 erat2a ====
100 loops, best of 3: 14.5 msec per loop
==== python2 erat3 ====
Traceback (most recent call last):
…
AttributeError: 'module' object has no attribute 'compress'
==== python3 erat2 ====
100 loops, best of 3: 19.2 msec per loop
==== python3 erat2a ====
100 loops, best of 3: 14.1 msec per loop
==== python3 erat3 ====
100 loops, best of 3: 11.7 msec per loop
 

 On an AMD Geode LX Gentoo home server, Python 2.6.5 and 3.1.2: 

 $ testit
up to 8192
==== python2 erat2 ====
10 loops, best of 3: 104 msec per loop
==== python2 erat2a ====
10 loops, best of 3: 81 msec per loop
==== python2 erat3 ====
Traceback (most recent call last):
…
AttributeError: 'module' object has no attribute 'compress'
==== python3 erat2 ====
10 loops, best of 3: 116 msec per loop
==== python3 erat2a ====
10 loops, best of 3: 82 msec per loop
==== python3 erat3 ====
10 loops, best of 3: 66 msec per loop
 

 Benchmark code 

 A primegen.py module contains the erat2 , erat2a and erat3 functions. Here follows the testing script: 

 #!/bin/sh
max_num=${1:-8192}
echo up to $max_num
for python_version in python2 python3
do
 for function in erat2 erat2a erat3
 do
  echo "==== $python_version $function ===="
  $python_version -O -m timeit -c \
  -s "import itertools as it, functools as ft, operator as op, primegen; cmp= ft.partial(op.ge, $max_num)" \
   "next(it.dropwhile(cmp, primegen.$function()))"
 done
done
 
 #2 This isn't originally my code, however, it's worth posting. The original can be found here: http://code.activestate.com/recipes/117119/ 

 def gen_primes():
 D = {}
 q = 2 # first integer to test for primality.

 while True:
 if q not in D:
  # not marked composite, must be prime 
  yield q 

  #first multiple of q not already marked
  D[q * q] = [q] 
 else:
  for p in D[q]:
  D.setdefault(p + q, []).append(p)
  # no longer need D[q], free memory
  del D[q]

 q += 1
 

 It's a generator, so use it like any other. 

 primes = gen_primes()
for p in primes:
 print p
 

 It takes 1.62s to generate and put into a set, 1 million primes, on my desktop. 
 #3 Do a sliced sieve, where the size of a slice is determined by available memory or the maximal size of a bitset. 

 For each slice represent the numbers in some interval [n; n + slice_size) as a bit set and sieve with all prime numbers below the square root of the upper bound. 

 Using a bit set uses less memory than a hash table or tree data structure, because you are working with dense sets of numbers. 
 #4 Here's a generator that's a little truer to how it's done in Haskell: filtering against composites of known primes, then adding the remaining primes to the list. 

 def gen_primes():
 primes = []
 i = 2
 while True:
  prime = True
  for p in primes:
   if not (i % p):
    prime = False
    break
  if prime:
   yield i
   primes.append(i)
  i += 1
 
 #5 I wrote an article about an infinite primes generator some times ago: 

 http://stacktrace.it/2008/01/progetto-eulero-problema-3/ 

 It's in Italian but you may have a pesky translation using Google: http://tinyurl.com/yzpyeom 
 #6 And another answer, more memory-efficient than my erat3 answer here: 

 import heapq

def heapprimegen():
 hp= []
 yield 2
 cn= 3
 nn, inc= 3, 6
 while 1:
  while cn &lt; nn:
   yield cn
   heapq.heappush(hp, (3*cn, 2*cn))
   cn+= 2
  cn= nn+2
  nn, inc= heapq.heappushpop(hp, (nn+inc, inc))
 

 It maintains a heap (a list) of prime multiples rather than a dictionary. It loses some speed, obviously. 
 #7 Another way to do it: 

 import itertools
def primeseq():
 prime = [2]
 num = 0
 yield 2
 for i in itertools.count(3, 2):
  is_prime = True
  for num in prime:
   if i % num == 0:
    is_prime = False
    break
   elif num ** 2 &gt; i: 
    break
  if is_prime:
   prime.append(i)
   yield i