Question (ID-6189956): Easy way of finding decimal places Is there an easy way or integrated function to find out the decimal places of a floating point number? 

 The number is parsed from a string, so one way is to count the digits after the '.' sign, but that looks quite clumsy to me. Is there a possibility to get the information needed out of a float or Decimal object? 

 SOLUTION (one of them, of course :) ) 

 I chose to use the python decimal.Decimal class to help me with my problem: 

 e = abs(Decimal(string_value).as_tuple().exponent)
 

 NOTE: this only works when the parameter from which the Decimal is constructed is a string and not a float (which would lead to floating point inaccuracies). 

 Thanks a lot for all other contributions. 
 Answers (Total-6): #0 To repeat what others have said (because I had already typed it out!), I'm not even sure such a value would be meaningful in the case of a floating point number, because of the difference between the decimal and binary representation; often a number representable by a finite number of decimal digits will have only an infinite-digit representation in binary. 

 In the case of a decimal.Decimal object, you can retrieve the exponent using the as_tuple method, which returns a namedtuple with sign , digits , and exponent attributes: 

 &gt;&gt;&gt; d = decimal.Decimal('56.4325')
&gt;&gt;&gt; d.as_tuple().exponent
-4
&gt;&gt;&gt; d = decimal.Decimal('56.43256436')
&gt;&gt;&gt; d.as_tuple().exponent
-8
 

 The negation of the exponent is the number of digits after the decimal point, unless the exponent is greater than 0 . 
 #1 "the number of decimal places" is not really a property a floating point number has, because of the way they are stored and handled internally. You can get as many decimal places as you like from a floating point number. The question is how much accuracy you want. When converting a floating point number to a string, part of the process is deciding on the accuracy. 

 Try for instance: 

 1.1 - int(1.1)
 

 And you will see that the answer is: 

 0.10000000000000009
 

 So, for this case, the number of decimals is 17. Is this the number you want? 

 Probably not. 

 You can, however, round the number to a certain number of decimals with "round": 

 round(3.1415 - int(3.1415), 3)
 

 For this case, the number of decimals is cut to 3. 

 You can't get "the number of decimals from a float", but you can decide the accuracy and how many you want. Converting a float to a string is one way of making such a decision. 
 #2 A naive way (vulnerable to localized usage mentioned by @jglouie) is 

 len(foo.split('.')[1])
 

 where foo is a string like "23.512999238". 

 EDIT 

 As @Thomas Jung and @Mark Ransom mentioned, this is rather naive for some corner cases, which need to be handled as... 

 import re
from locale import localeconv
dec_pt = localeconv()['decimal_point']
decrgx = re.compile("\d+(%s\d+)?e(-|\+)(\d+)" % dec_pt)
if decrgx.search(foo):
 # still figuring this out
 raise NotImplementedError, "e notation not implemented"
else:
 digits = len(foo.split(dec_pt)[-1])
 
 #3 The decimal library is for working with decimal numbers, like in Accounting. It doesn't inherently have a function to return the number of decimal places. This is especially a problem when you realize that the context it runs under sets it at whatever the user wants. 

 If you get a string, you can convert to decimal, but this will either tack on zeros to get you to your accuracy, or use the rounding setting to truncate it. 

 Your best bet would probably bet splitting on the dot in your string and counting the number of chars in the resulting substring. 
 #4 If you know you're not going to have parsing issues (or if you're letting python itself or some other library handle that for you, hopefully handling localization issues)... just parse it and use modf . The return value is a pair of values, one of which is the integral part, the other is the fractional part. 
 #5 Since Python floating point numbers are internally represented as binary rather than decimal, there's really no shortcut other than converting to decimal. The only built-in way to do that is by converting to a string. You could write your own code to do a decimal conversion and count the digits, but it would be a duplication of effort.