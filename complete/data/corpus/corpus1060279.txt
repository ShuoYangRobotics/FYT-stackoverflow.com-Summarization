Question (ID-1060279): Iterating through a range of dates in Python This is working fine, but I'm looking for any feedback on how to do it better. Right now I think it's better than nested loops, but it starts to get Perl-one-linerish when you have a generator in a list comprehension. Any suggestions are welcome. 

 day_count = (end_date - start_date).days + 1
for single_date in [d for d in (start_date + timedelta(n) for n in range(day_count)) if d &lt;= end_date]:
 print strftime("%Y-%m-%d", single_date.timetuple())
 

 Notes: 
 I'm not actually using this to print; that's just for demo purposes.
 The variables start_date and end_date are datetime.date objects, because I don't need the timestamps (they're going to be used to generate a report). 

 I checked the StackOverflow questions which were similar before posting this, but none were exactly the same. 

 Sample Output (for a start date of 2009-05-30 and an end date of 2009-06-09): 

 2009-05-30
2009-05-31
2009-06-01
2009-06-02
2009-06-03
2009-06-04
2009-06-05
2009-06-06
2009-06-07
2009-06-08
2009-06-09
 
 Answers (Total-7): #0 Why are the two nested iterations? For me it produces the same list of data with only one iteration: 

 for single_date in (start_date + timedelta(n) for n in range(day_count)):
 print ...
 

 And not list get stored, only one generator is iterated over. Also the "if" in the generator seems to be unnecessary. 

 After all, a linear sequence should only require one iterator, not two. 

 Update after discussion with John Machin: 

 Maybe the most elegant solution is using a generator function to completely hide/abstract the iteration over the range of dates: 

 def daterange(start_date, end_date):
 for n in range((end_date - start_date).days):
  yield start_date + timedelta(n)

for single_date in daterange(start_date, end_date):
 print strftime("%Y-%m-%d", single_date.timetuple())
 

 NB: For consistency withe built-in range() function this iteration stops before reaching the end_date. So for inclusive iteration use the next day, as you would with range(). 
 #1 This might be more clear: 

 d = start_date
delta = datetime.timedelta(days=1)
while d &lt;= end_date:
 print d.strftime("%Y-%m-%d")
 d += delta
 
 #2 use the dateutil library: 

 from datetime import date
from dateutil.rrule import rrule, DAILY
a = date(2009, 5, 30)
b = date(2009, 6, 9)
for dt in rrule(DAILY, dtstart=a, until=b):
 print dt.strftime("%Y-%m-%d")
 

 This python library has many more advanced features, some very useful, like relativedelta s - and is implemented as a single .py python file that can be easily included into your project. 
 #3 import datetime

def daterange(start, stop, step=datetime.timedelta(days=1), inclusive=False):
 # inclusive=False to behave like range by default
 if step.days &gt; 0:
 while start &lt; stop:
  yield start
  start = start + step
  # not +=! don't modify object passed in if it's mutable
  # since this function is not restricted to
  # only types from datetime module
 elif step.days &lt; 0:
 while start &gt; stop:
  yield start
  start = start + step
 if inclusive and start == stop:
 yield start

# ...

for date in daterange(start_date, end_date, inclusive=True):
 print strftime("%Y-%m-%d", date.timetuple())
 

 This function does more than you strictly require, by supporting negative step, etc. As long as you factor out your range logic, then you don't need the separate day_count and most importantly the code becomes easier to read as you call the function from multiple places. 
 #4 for i in range(16):
 print datetime.date.today()+datetime.timedelta(days=i) 
 #5 import datetime

def daterange(start, stop, step_days=1):
 current = start
 step = datetime.timedelta(step_days)
 if step_days &gt; 0:
  while current &lt; stop:
   yield current
   current += step
 elif step_days &lt; 0:
  while current &gt; stop:
   yield current
   current += step
 else:
  raise ValueError("daterange() step_days argument must not be zero")

if __name__ == "__main__":
 from pprint import pprint as pp
 lo = datetime.date(2008, 12, 27)
 hi = datetime.date(2009, 1, 5)
 pp(list(daterange(lo, hi)))
 pp(list(daterange(hi, lo, -1)))
 pp(list(daterange(lo, hi, 7)))
 pp(list(daterange(hi, lo, -7))) 
 assert not list(daterange(lo, hi, -1))
 assert not list(daterange(hi, lo))
 assert not list(daterange(lo, hi, -7))
 assert not list(daterange(hi, lo, 7))
 
 #6 What about the following for doing a range incremented by days: 

 for d in map( lambda x: startDate+datetime.timedelta(days=x), xrange( (stopDate-startDate).days ) ):
 # Do stuff here
 

 
 startDate and stopDate are datetime.date objects 
 

 For a generic version: 

 for d in map( lambda x: startTime+x*stepTime, xrange( (stopTime-startTime).total_seconds() / stepTime.total_seconds() ) ):
 # Do stuff here
 

 
 startTime and stopTime are datetime.date or datetime.datetime object
(both should be the same type) 
 stepTime is a timedelta object 
 

 Note that .total_seconds() is only supported after python 2.7 If you are stuck with an earlier version you can write your own function: 

 def total_seconds( td ):
 return float(td.microseconds + (td.seconds + td.days * 24 * 3600) * 10**6) / 10**6