Question (ID-5030190): PHP var becoming negative I have this code : 

 &lt;?php
$integer = 33963677451;
$integer &amp;= 0xFFFFFFFF;
echo $integer;
?&gt;
 

 But, when I execute it, the output is 

 -396060917
 

 The same function in Python 

 if __name__ == '__main__':
 integer = 33963677451
 integer &amp;= 0xFFFFFFFF
 print integer
 

 The output is 

 3898906379
 

 It seems PHP can't store big variables. Do you guys have any idea how to get the same result in PHP I have in Python ? 

 Thanks ! 
 Answers (Total-6): #0 That value is too big for an integer, python dynamically casts that into a long variable. INT_MAX defines how big your integer can be before it switches over into a double. If you want to manipulate large numbers without quirks use GMPLIB a multiple precision arithmetic library. 
 #1 Your 33,963,677,451 is above what a signed 32bit integer supports (max 2,147,483,647). 64bit PHP versions do support higher values. 
 #2 php only supports signed integers. You are seeing overflow 

 also, the answer for the python case should be 33963677451 
 #3 I don't know if it's just a typo, but you are using different values when performing the AND operation in each language. :) 

 You have "0xFFFFFFFFFFF" (11 chars) in your PHP version, as opposed to only 8 in the Python version. 

 Either way, it should be integer overflow. 
 #4 &lt;?php
$integer = (float) 33963677451;
$integer &amp;= 0xFFFFFFFFFFF;
echo $integer;
 

 try making sure that $integer is of type float. 

 for more: http://www.php.net/manual/de/language.types.integer.php#language.types.integer.overflow 
 #5 If you wish to see whats happening, here is a printf statement showing the different types. 

 $i1 = 33963677451;
$i2 = 0xFFFFFFFFFFF;
printf("%b (%d, %f) &amp; \n%b (%d, %f)\n = \n%b (%d, %f)", 
  $i1, $i1, $i1, $i2, $i2, $i2, $i1&amp;$i2, $i1&amp;$i2, $i1&amp;$i2);
 

 PHP casts integers larger than 32 bits to floats. It seems that you can not perform this operation on floats.