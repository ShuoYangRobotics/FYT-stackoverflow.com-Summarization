Question (ID-6159900): Correct way to write line to file in Python I'm used to doing print &gt;&gt;f, "hi there" 

 However, it seems that print &gt;&gt; is getting deprecated. What is the recommended way to do the line above? 

 Update :
Regarding all those answers with "\n"...is this universal or Unix-specific? IE, should I be doing "\r\n" on Windows? 
 Answers (Total-6): #0 I do not think there is a "correct" way. 

 I would use: 

 with open ('myfile', 'a') as f: f.write ('hi there\n')
 

 In memoriam Tim Toady . 
 #1 You should use the new print() statement, available with Python 2.6+ 

 from __future__ import print_function
print("hi there", file=f)
 

 The alternative would be to use: 

 f = open('myfile','w')
f.write('hi there\n') # python will convert \n to os.linesep
 

 Quoting from Python documentation regarding newlines:
 On output, if newline is None, any '\n' characters written are translated to the system default line separator, os.linesep. If newline is '', no translation takes place. If newline is any of the other legal values, any '\n' characters written are translated to the given string. 
 #2 Since nobody else has addressed the OS-specific line endings, here is my take: 

 &gt;&gt;&gt; with open('somefile.txt', 'a') as the_file:
...  the_file.write('Hello\n')
 

 From The Documentation: 

 
 Do not use os.linesep as a line terminator when writing files opened in text mode (the default); use a single '\n' instead, on all platforms. 
 

 Some useful reading: 

 
 The with statement 
 open() 
 os.linesep . There's lots of good stuff in os ! 
 
 #3 In Python 3 it is a function, but in Python 2 you can add this to the top of the source file: 

 from __future__ import print_function
 

 Then you do 

 print("hi there", file=f)
 
 #4 You can use write instead of print : 

 fsock = open('myFile', 'w')
fsock.write('hi there')
 

 See printing to a file in Python: redirect vs print&#39;s file argument vs write for details. 
 #5 Regarding os.linesep: 

 Here is an exact unedited Python 2.7.1 interpreter session on Windows: 

 Python 2.7.1 (r271:86832, Nov 27 2010, 18:30:46) [MSC v.1500 32 bit (Intel)] on
win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import os
&gt;&gt;&gt; os.linesep
'\r\n'
&gt;&gt;&gt; f = open('myfile','w')
&gt;&gt;&gt; f.write('hi there\n')
&gt;&gt;&gt; f.write('hi there' + os.linesep) # same result as previous line ?????????
&gt;&gt;&gt; f.close()
&gt;&gt;&gt; open('myfile', 'rb').read()
'hi there\r\nhi there\r\r\n'
&gt;&gt;&gt;
 

 On Windows: 

 As expected, os.linesep does NOT produce the same outcome as '\n' . There is no way that it could produce the same outcome. 'hi there' + os.linesep is equivalent to 'hi there\r\n' , which is NOT equivalent to 'hi there\n' . 

 It's this simple: use \n which will be translated automatically to os.linesep. And it's been that simple ever since the first port of Python to Windows. 

 There is no point in using os.linesep on non-Windows systems, and it produces wrong results on Windows. 

 DO NOT USE os.linesep!