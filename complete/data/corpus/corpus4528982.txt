Question (ID-4528982): Convert alphabet letters to number in Python How can the following be finished? 

 characters = ['a''b''c''d''e''f''g''h''i''j''k''l''m''n''o''p''q''r''t''u''v''w''x''y''z']
numbers = ['1''2''3''4''5''6''7''8''9''10''11''12''13''14''15''16''17''18''19''20''21''22''23''24']
text = raw_input(' Write text: ')
 

 I've tried to solve it many ways, but couldn't get to the pint. I want to make exc. If I type "hello" the output to be in numbers lined like in alphabet. Example a = 1 &lt; in alphabet. 
 Answers (Total-7): #0 What about something like this: 

 print [ord(char) - 96 for char in raw_input('Write Text: ').lower()]
 

 ord 
 list comprehension 
 ASCII character codes 

 EDIT 
Since you asked me to explain I will... though it has been explained pretty well in the comments already by [?]. 

 Let's do this in more that one line to start. 

 input = raw_input('Write Text: ')
input = input.lower()
output = []
for character in input:
 number = ord(character) - 96
 output.append(number)
print output
 

 This does the same thing, but is more readable. Make sure you can understand what is going on here before you try to understand my first answer. Everything here is pretty standard, simple Python. The one thing to note is the ord function. ord stand for ordinal, and pretty much every high level language will have this type of function available. It gives you a mapping to the numerical representation of any character. The inverse function of ord is called chr. 

 chr(ord('x')) == 'x' # for any character, not just x.
 

 If you test for yourself, the ordinal of a is 97 (the third link I posted above will show the complete ASCII character set.) Each lower case letter is in the range 97-122 (26 characters.) So, if you just subtract 96 from the ordinal of any lower case letter, you will get its position in the alphabet assuming you take 'a' == 1. So, ordinal of 'b' == 98, 'c' == 99, etc. When you subtract 96, 'b' == 2, 'c' == 3, etc. 

 The rest of the initial solution I posted is just some Python trickery you can learn called list comprehension. But, I wouldn't focus on that as much as I would focus on learning to solve the problem in any language, where ord is your friend. I hope this helps. 
 #1 This is a function I used to use for this purpose. Works for both uppercase and lowercase. 

 def convert_char(old):
 if len(old) != 1:
  return 0
 new = ord(old)
 if 65 &lt;= new &lt;= 90:
  # Upper case letter
  return new - 64
 elif 97 &lt;= new &lt;= 122:
  # Lower case letter
  return new - 96
 # Unrecognized character
 return 0
 
 #2 Not to be too basic, but this: 

 &gt;&gt;&gt; char1 = ['a''b''c''d''e''f''g''h''i''j''k''l'
    'm''n''o''p''q''r''s''t''u''v''w''x''y''z']
 

 is very different than this: 

 &gt;&gt;&gt; char2 = ['a','b','c','d','e','f','g','h','i','j','k','l',
    'm','n','o','p','q','r','s','t','u','v','w','x','y','z']
 

 The first, without commas and what you have in your question, is a one element list with a 26 element string. The second is a 26 element list each a single character in length. 

 If you print each: 

 &gt;&gt;&gt; print char1, len(char1), len(char1[0])
['abcdefghijklmnopqrstuvwxyz'] 1 26
&gt;&gt;&gt; print char2, len(char2), len(char2[0])
['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 
'm', 'n', 'o', 'p', 'q','r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'] 26 1
 

 It becomes apparent that it takes an additional step to turn the individual characters of char1 into an iterable . 

 If you have the sequence of characters 'a' through 'z' and/or 'A' through 'Z', you can easily return the number of the character with list comprehension : 

 &gt;&gt;&gt; [ord(x)%32 for x in char2]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 
17, 18, 19, 20, 21, 22, 23, 24, 25, 26]
 

 For the type of data structure you have, you need to access the string first: 

 &gt;&gt;&gt; [ord(x)%32 for x in char1[0]]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 
17, 18, 19, 20, 21, 22, 23, 24, 25, 26]
 

 So if your code listing is the same as in your question, that may be your issue. 

 A reasonable alternative is: [ord(x.lower())-96 for x in char1[0]] 

 You can see that your characters=['a''b''c'...] , without the commas, is just the same as typing all the characters in a string in a list like this ['abc...'] . 

 So now try: 

 &gt;&gt;&gt; import string
 &gt;&gt;&gt; [ord(x.lower())-96 for x in string.letters]
 [1,2,...26, 1,2,3...26]  # my ellipses 
 &gt;&gt;&gt; char3=[string.letters] # one string as element[0]
 &gt;&gt;&gt; [ord(x)%32 for x in char3[0]]
 &gt;&gt;&gt; [ord(x)%32 for x in [string.letters][0]]
 
 #3 Something like this 

 [str(ord(c)&amp;31) for c in text]
 
 #4 If you are going to use this conversion a lot, consider calculating once and putting the results in a dictionary: 

 &gt;&gt;&gt; import string
&gt;&gt;&gt; di=dict(zip(string.letters,[ord(c)%32 for c in string.letters]))
&gt;&gt;&gt; di['c'] 
3
 

 The advantage is dictionary lookups are very fast vs iterating over a list on every call. 

 &gt;&gt;&gt; for c in sorted(di.keys()):
&gt;&gt;&gt; print "{0}:{1} ".format(c, di[c])
# what you would expect....
 
 #5 &gt;&gt;&gt; [str(ord(string.lower(c)) - ord('a') + 1) for c in string.letters]
['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17',
'18', '19', '20', '21', '22', '23', '24', '25', '26', '1', '2', '3', '4', '5', '6', '7', '8',
'9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24',
 '25', '26']
 
 #6 If the goal is to transform only the letters abcd....xyz and ABCD....XYZ , I would use a function: 

 from string import letters
def rank(x, d = dict((letr,n%26+1) for n,letr in enumerate(letters[0:52]))):
 return d[x]
 

 I’ve written [0:52] because my Python 2.7 version displays the value 

 * ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz *ƒŠŒŽšœžŸÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõöøùúûüýþÿ 

 for the string.letters argument. 

 Because the parameter d receives a value as a default argument, the calculus of this value is performed only once, at the moment when the definition of the function is executed to produce the function object.
So, the function can then be used without this value to be calculated again, even if the function is appealed three thousand times. 

 By the way, lower() isn’t used again for each appeal of the function. The case of upper letters has been treated during the construction of the default argument. 

 . 

 One example of use: 

 word = 'supercalifragilisticexpialidocious'
print ''.join( letter if rank(letter)%3!=0 else '.' for letter in word)
 

 result: 

 s.pe..a....ag...st..e.p.a..d.....s 

 . 

 It can be used with map() too : 

 print map(rank,'ImmunoElectroPhoresis')
 

 result: 

 [9, 13, 13, 21, 14, 15, 5, 12, 5, 3, 20, 18, 15, 16, 8, 15, 18, 5, 19, 9, 19]