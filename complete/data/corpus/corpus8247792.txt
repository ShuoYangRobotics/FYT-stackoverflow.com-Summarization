Question (ID-8247792): Python - How to cut a string in Python? Suppose that I have the following string: 

 http://www.domain.com/?s=some&amp;two=20
 

 How can I take off what is after &amp; including the &amp; and have this string: 

 http://www.domain.com/?s=some
 
 Answers (Total-6): #0 Well, to answer the immediate question: 

 &gt;&gt;&gt; s = "http://www.domain.com/?s=some&amp;two=20"
 

 The rfind method returns the index of right-most substring: 

 &gt;&gt;&gt; s.rfind("&amp;")
29
 

 You can take all elements up to a given index with the slicing operator: 

 &gt;&gt;&gt; "foobar"[:4]
'foob'
 

 Putting the two together: 

 &gt;&gt;&gt; s[:s.rfind("&amp;")]
'http://www.domain.com/?s=some'
 

 

 If you are dealing with URLs in particular, you might want to use built-in libraries that deal with URLs. If, for example, you wanted to remove two from the above query string: 

 First, parse the URL as a whole: 

 &gt;&gt;&gt; import urlparse, urllib
&gt;&gt;&gt; parse_result = urlparse.urlsplit("http://www.domain.com/?s=some&amp;two=20")
&gt;&gt;&gt; parse_result
SplitResult(scheme='http', netloc='www.domain.com', path='/', query='s=some&amp;two=20', fragment='')
 

 Take out just the query string: 

 &gt;&gt;&gt; query_s = parse_result.query
&gt;&gt;&gt; query_s
's=some&amp;two=20'
 

 Turn it into a dict : 

 &gt;&gt;&gt; query_d = urlparse.parse_qs(parse_result.query)
&gt;&gt;&gt; query_d
{'s': ['some'], 'two': ['20']}
&gt;&gt;&gt; query_d['s']
['some']
&gt;&gt;&gt; query_d['two']
['20']
 

 Remove the 'two' key from the dict: 

 &gt;&gt;&gt; del query_d['two']
&gt;&gt;&gt; query_d
{'s': ['some']}
 

 Put it back into a query string: 

 &gt;&gt;&gt; new_query_s = urllib.urlencode(query_d, True)
&gt;&gt;&gt; new_query_s
's=some'
 

 And now stitch the URL back together: 

 &gt;&gt;&gt; result = urlparse.urlunsplit((
 parse_result.scheme, parse_result.netloc,
 parse_result.path, new_query_s, parse_result.fragment))
&gt;&gt;&gt; result
'http://www.domain.com/?s=some'
 

 The benefit of this is that you have more control over the URL. Like, if you always wanted to remove the two argument, even if it was put earlier in the query string ( "two=20&amp;s=some" ), this would still do the right thing. It might be overkill depending on what you want to do. 
 #1 string = 'http://www.domain.com/?s=some&amp;two=20'
cut_string = string.split('&amp;')
new_string = cut_string[0]
print(new_string)
 
 #2 You can use find() 

 &gt;&gt;&gt; s = 'http://www.domain.com/?s=some&amp;two=20'
&gt;&gt;&gt; s[:s.find('&amp;')]
'http://www.domain.com/?s=some'
 

 Of course, if there is a chance that the searched for text will not be present then you need to write more lengthy code: 

 pos = s.find('&amp;')
if pos != -1:
 s = s[:pos]
 

 Whilst you can make some progress using code like this, more complex situations demand a true URL parser. 
 #3 You need to split the string: 

 &gt;&gt;&gt; s = 'http://www.domain.com/?s=some&amp;two=20'
&gt;&gt;&gt; s.split('&amp;')
['http://www.domain.com/?s=some', 'two=20']
 

 That will return a list as you can see so you can do: 

 &gt;&gt;&gt; s2 = s.split('&amp;')[0]
&gt;&gt;&gt; print s2
http://www.domain.com/?s=some
 
 #4 &gt;&gt;str = "http://www.domain.com/?s=some&amp;two=20"
&gt;&gt;str.split("&amp;")
&gt;&gt;["http://www.domain.com/?s=some", "two=20"]
 
 #5 s[0:"s".index("&amp;")]
 

 what does this do: 

 
 take a slice from the string starting at index 0, up to, but not including the index of &amp;in the string.