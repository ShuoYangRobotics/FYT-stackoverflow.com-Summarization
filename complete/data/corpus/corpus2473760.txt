Question (ID-2473760): Python 'datetime.datetime' object is unsubscriptable First, I am NOT a python developer. I am trying to fix an issue within a python script that is being executed from the command line. This script was written by someone who is no longer around, and no longer willing to help with issues. 

 This is python 2.5, and for the moment it cannot be upgraded. Here are the lines of code in question: 

  start_time = datetime.strptime(str(paf.Start),"%Y-%m-%d %H:%M:%S")
 dict_start = datetime(*start_time[:6])

 end_time = datetime.strptime(str(paf.End),"%Y-%m-%d %H:%M:%S")
 dict_end = datetime(*end_time[:6])
 

 When this code is ran, it generates an error with the description: 'datetime.datetime' object is unsubscriptable. 

 This is the import statement: 

 from datetime import datetime
 

 I have a feeling that this is something simple, but not being my native language and Google not yielding any valuable results, I am stuck. I have tried a couple of different import methods, yielding different errors, but all with these statements. Any help on this would be greatly appreciated. 
 Answers (Total-6): #0 It looks like you just want the time right? The datetime.strptime method returns a 'datetime' object and as such the following attributes contain the time: datetime.day, datetime.hour, datetime.year, etc. 
 #1 Robert, try replacing 

 dict_start = datetime(*start_time[:6])
 

 with 

 dict_start = start_time
 

 and 

 dict_end = datetime(*end_time[:6])
 

 with 

 dict_end = end_time
 

 It looks silly, but perhaps try it anyway. My reason is this: datetime.strptime returns a datetime.datetime object. Since the code originally says 

 dict_start = datetime(*start_time[:6])
 

 it appears that dict_start is intended to also be a datetime.datetime , with the same 6 fields (year,month,day,hour,minutes,seconds). So try 

 dict_start = start_time
 

 If that doesn't work, you might have to show us more of the code so we can form a better guess as to what was intended. 

 Edit: The easiest way to get at the individual fields (year,month,day,hour,minutes,seconds) is to use the dot notation to access the attributes. For example, 

 (start_time.year,start_time.month,start_time.day)
 

 gives a 3-tuple with the year, month, and day as integers. 

 PS. For more info about datetime objects, see http://docs.python.org/library/datetime.html . It may contain useful examples for you. 
 #2 Looks like the datetime.strptime call was actually meant to be a call to time.strptime (with a separate import time at the start of the module) -- the latter call would indeed return a subscriptable, tuple-like object, and the idiom 

 xx = time.strptime(...)
yy = datetime.datetime(x[:6])
 

 (with import time and import datetime at the start of the module, of course) was indeed the canonical way to parse a string into a datetime.datetime instance before the datetime.datetime type added its own strptime function which basically does just this job. So, it looks like "imperfectly migrated" code. 

 To extract just the date (as a datetime.date object, with just year, month and day -- no hours, minutes, seconds and fractions) from a datetime.datetime instance x , call x.date() which will return the desired date object (not modify x itself of course: datetime objects are immutable -- you always make new ones, not change existing ones). 
 #3 Observations: 

 Whoever wrote the code didn't test it; it never could have run properly. 

 Whoever wrote it was confusing datetime.datetime.strptime with time.strptime. 

 Once upon a time (pun intended) datetime.datetime.strptime didn't exist. One had to do something like the following: 

 &gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; import time
&gt;&gt;&gt; time_tuple = time.strptime("2010-03-19 13:22:45","%Y-%m-%d %H:%M:%S")
&gt;&gt;&gt; time_tuple
(2010, 3, 19, 13, 22, 45, 4, 78, -1)
&gt;&gt;&gt; datetime(*time_tuple[:6])
datetime.datetime(2010, 3, 19, 13, 22, 45)
 

 (The [:6] was a dead give-away) 

 Now one can do this: 

 &gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; datetime.strptime("2010-03-19 13:22:45","%Y-%m-%d %H:%M:%S")
datetime.datetime(2010, 3, 19, 13, 22, 45)
 
 #4 Its not the import fault. Its the *start_time[:6] *end_time[:6] that Python doesn't like. Replace it 
 #5 The following code doesn't make sense to me: 

 start_time = datetime.strptime(str(paf.Start),"%Y-%m-%d %H:%M:%S")
dict_start = datetime(*start_time[:6])
 

 If you need a tuple mapping in dict_start, then use something like this: 

 start_time = datetime.strptime(str(paf.Start),"%Y-%m-%d %H:%M:%S")
dict_start = start_time.timetuple()[:6]
 

 If you need dict, then: 

 start_time = datetime.strptime(str(paf.Start),"%Y-%m-%d %H:%M:%S")
dict_start = dict(zip(('year', 'month' ,'day', 'hour', 'minute', 'second'), start_time.timetuple()[:6]))
 

 -- or use paf.Start, if possible. Also, I'm not sure but it could be that ('year', 'month' ,'day', 'hour', 'minute', 'second') tuple is predefined somewhere in Python std lib or it can be easily replaced with some other construct, but it's midnight here and I don't see any other obvious solution.