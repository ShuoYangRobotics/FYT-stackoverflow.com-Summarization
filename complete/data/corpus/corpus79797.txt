Question (ID-79797): How do I convert local time to UTC in Python? How do I convert a datetime string in local time to a string in UTC time ? 

 I'm sure I've done this before, but can't find it and SO will hopefully help me (and others) do that in future. 

 Clarification : For example, if I have "2008-09-17 14:02:00" in my local timezone (+10), I'd like to generate a string with the equivalent UTC time: "2008-09-17 04:02:00". 

 Also, from http://lucumr.pocoo.org/2011/7/15/eppur-si-muove/ , note that in general this isn't possible as with DST and other issues there is no unique conversion from local time to UTC time. 
 Answers (Total-10): #0 Thanks @rofly, the full conversion from string to string is as follows: 

 time.strftime("%Y-%m-%d %H:%M:%S", 
    time.gmtime(time.mktime(time.strptime("2008-09-17 14:04:00", 
             "%Y-%m-%d %H:%M:%S"))))
 

 My summary of the time / calendar functions: 

 time.strptime 
string --> tuple (no timezone applied, so matches string) 

 time.mktime 
local time tuple --> seconds since epoch (always local time) 

 time.gmtime 
seconds since epoch --> tuple in UTC 

 and 

 calendar.timegm 
tuple in UTC --> seconds since epoch 

 time.localtime 
seconds since epoch --> tuple in local timezone 
 #1 First, parse the string into a naive datetime object. This is an instance of datetime.datetime with no attached timezone information. See documentation for datetime.strptime for information on parsing the date string. 

 Use the pytz module, which comes with a full list of time zones + UTC. Figure out what the local timezone is, construct a timezone object from it, and manipulate and attach it to the naive datetime. 

 Finally, use datetime.astimezone() method to convert the datetime to UTC. 

 Source code, using local timezone "America/Los_Angeles", for the string "2001-2-3 10:11:12": 

 import pytz, datetime
local = pytz.timezone ("America/Los_Angeles")
naive = datetime.datetime.strptime ("2001-2-3 10:11:12", "%Y-%m-%d %H:%M:%S")
local_dt = naive.replace (tzinfo = local)
utc_dt = local_dt.astimezone (pytz.utc)
 

 From there, you can use the strftime() method to format the UTC datetime as needed: 

 utc_dt.strftime ("%Y-%m-%d %H:%M:%S")
 
 #2 def local_to_utc(t):
 """Make sure that the dst flag is -1 -- this tells mktime to take daylight
 savings into account"""
 secs = time.mktime(t)
 return time.gmtime(secs)

def utc_to_local(t):
 secs = calendar.timegm(t)
 return time.localtime(secs)
 

 Source: http://feihonghsu.blogspot.com/2008/02/converting-from-local-time-to-utc.html 

 Example usage from bd808 : If your source is a datetime.datetime object t , call as: 

 local_to_utc(t.timetuple())
 
 #3 The datetime module's utcnow() function can be used to obtain the current local UTC time. 

 &gt;&gt;&gt; import datetime
&gt;&gt;&gt; utc_datetime = datetime.datetime.utcnow()
&gt;&gt;&gt; utc_datetime.strftime("%Y-%m-%d %H:%M:%S")
'2010-02-01 06:59:19'
 

 If you want to obtain the UTC time from a given string: 

 --> using local time as the basis for the offset value: 

 &gt;&gt;&gt; # Obtain the UTC Offset for the current system:
&gt;&gt;&gt; UTC_OFFSET_TIMEDELTA = datetime.datetime.utcnow() - datetime.datetime.now()
&gt;&gt;&gt; local_datetime = datetime.datetime.strptime("2008-09-17 14:04:00", "%Y-%m-%d %H:%M:%S")
&gt;&gt;&gt; result_utc_datetime = local_datetime - UTC_OFFSET_TIMEDELTA
&gt;&gt;&gt; result_utc_datetime.strftime("%Y-%m-%d %H:%M:%S")
'2008-09-17 04:04:00'
 

 --> Or, from a known offset, using datetime.timedelta(): 

 &gt;&gt;&gt; UTC_OFFSET = 10
&gt;&gt;&gt; result_utc_datetime = local_datetime - datetime.timedelta(hours=UTC_OFFSET)
&gt;&gt;&gt; result_utc_datetime.strftime("%Y-%m-%d %H:%M:%S")
'2008-09-17 04:04:00'
 

 NOTE : 
(From the Link mentioned above by Tom: http://lucumr.pocoo.org/2011/7/15/eppur-si-muove/ ) 

 UTC is a timezone without daylight saving time and still a timezone without configuration changes in the past. 

 Always measure and store time in UTC. If you need to record where the time was taken, store that separately. Do not store the local time + timezone information! 
 #4 if you prefer datetime.datetime: 

 dt = datetime.strptime("2008-09-17 14:04:00","%Y-%m-%d %H:%M:%S")
utc_struct_time = time.gmtime(time.mktime(dt.timetuple()))
utc_dt = datetime.fromtimestamp(time.mktime(utc_struct_time))
print dt.strftime("%Y-%m-%d %H:%M:%S")
 
 #5 in this case ... pytz is best lib 

 import pytz
utc = pytz.utc
yourdate = datetime.datetime.now()
yourdateutc = yourdate.astimezone(utc).replace(tzinfo=None)
 
 #6 import time

import datetime

def Local2UTC(LocalTime):

 EpochSecond = time.mktime(LocalTime.timetuple())
 utcTime = datetime.datetime.utcfromtimestamp(EpochSecond)

 return utcTime

&gt;&gt;&gt; LocalTime = datetime.datetime.now()

&gt;&gt;&gt; UTCTime = Local2UTC(LocalTime)

&gt;&gt;&gt; LocalTime.ctime()

'Thu Feb 3 22:33:46 2011'

&gt;&gt;&gt; UTCTime.ctime()

'Fri Feb 4 05:33:46 2011'
 
 #7 I'm having good luck with dateutil (which is widely recommended on SO for other related questions): 

 from datetime import *
from dateutil import *
from dateutil.tz import *

# METHOD 1: Hardcode zones:
utc_zone = tz.gettz('UTC')
local_zone = tz.gettz('America/Chicago')
# METHOD 2: Auto-detect zones:
utc_zone = tz.tzutc()
local_zone = tz.tzlocal()

# Convert time string to datetime
local_time = datetime.strptime("2008-09-17 14:02:00", '%Y-%m-%d %H:%M:%S')

# Tell the datetime object that it's in local time zone since 
# datetime objects are 'naive' by default
local_time = local_time.replace(tzinfo=local_zone)
# Convert time to UTC
utc_time = local_time.astimezone(utc_zone)
# Generate UTC time string
utc_string = utc_time.strftime('%Y-%m-%d %H:%M:%S')
 

 (Code was derived from this answer to Convert UTC datetime string to local datetime ) 
 #8 How about - 

 time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime(seconds))
 

 if seconds is None then it converts the local time to UTC time else converts the passed in time to UTC. 
 #9 For getting around day-light saving, etc. 

 None of the above answers particularly helped me. The code below works for GMT. 

 def get_utc_from_local(date_time, local_tz=None):
 assert date_time.__class__.__name__ == 'datetime'
 if local_tz is None:
  local_tz = pytz.timezone(settings.TIME_ZONE) # Django eg, "Europe/London"
 local_time = local_tz.normalize(local_tz.localize(date_time))
 return local_time.astimezone(pytz.utc)

import pytz
from datetime import datetime

summer_11_am = datetime(2011, 7, 1, 11)
get_utc_from_local(summer_11_am)
&gt;&gt;&gt;datetime.datetime(2011, 7, 1, 10, 0, tzinfo=&lt;UTC&gt;)

winter_11_am = datetime(2011, 11, 11, 11)
get_utc_from_local(winter_11_am)
&gt;&gt;&gt;datetime.datetime(2011, 11, 11, 11, 0, tzinfo=&lt;UTC&gt;)