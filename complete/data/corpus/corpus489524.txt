Question (ID-489524): Is there a way to make a user-defined Python function act like a built-in statement? Is it possible to make a user-defined Python function act like a statement? In other words, I'd like to be able to say: 

 myfunc
 

 rather than: 

 myfunc()
 

 and have it get called anyway -- the way that, say, print would. 

 I can already hear you all composing responses about how this is a horrible thing to do and I'm stupid for asking it and why do I want to do this and I really should do something else instead, but please take my word that it's something I need to do to debug a problem I'm having and it's not going to be checked in or used for, like, an air traffic control system. 
 Answers (Total-7): #0 No, it is not possible. 

 As you can see from the Language Reference , there is no room left for extensions of the list of simple statements in the specification. 

 Moreover, print as a statement no longer exists in Python 3.0 and is replaced by the print() builtin function. 
 #1 If what you're looking for is to add a new statement (like print ) to Python's language, then this would not be easy. You'd probably have to modify lexer, parser and then recompile Python's C sources. A lot of work to do for a questionable convenience. 
 #2 I would not implement this, but if I was implementing this, I would give code with myfunc a special extension, write an import hook to parse the file, add the parenthesis to make it valid Python, and feed that into the interpreter. 
 #3 Not if you want to pass in arguments. You could do something build an object that ABUSES the __str__ method, but it is highly not recommended. You can also use other operators like overload the &lt;&lt; operator like cout does in C++. 
 #4 In Python 2.x print is not a function it is a statement just as if, while and def are statements. 
 #5 Not possible in a planned way, or without a lot of work. 

 If you are bold and adventurous, read this wikipedia article about meta circular evaluation. Python has pretty good inspection and reflection on its own compiler/evaluater objects, you may be able to cobble something together along these lines. 

 
 """Meta-circular implementations are suited to extending the language
 they are written in. They are also useful for writing tools that are
 tightly integrated with the programming language, such as
 sophisticated debuggers. A language designed with a meta-circular
 implementation in mind is often more suited for building languages in
 general, even ones completely different from the host language.""" 
 

 
 http://en.wikipedia.org/wiki/Meta-circular_evaluator 
 

 I believe pypy is doing something similarily, you might want to look into it. 

 
 http://pypy.org 
 
 #6 This probably isn't going to cover your problem, but I'll mention it anyway. If myfunc is part of a module, and you are using it like this: 

 from mymodule import myfunc
myfunc # I want this to turn into a function call
 

 Then you could instead do this: 

 import mymodule
mymodule.myfunc # I want this to turn into a function call
 

 You could then remove myfunc from mymodule and overload the module so it calls a particular function each time the myfunc member is requested.