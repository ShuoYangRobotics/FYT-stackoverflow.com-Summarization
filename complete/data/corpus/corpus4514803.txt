Question (ID-4514803): Diamond problem when using MixIns in Python Please consider the following code implementing a simple MixIn : 

 class Story(object):
 def __init__(self, name, content): 
  self.name = name
  self.content = content 

class StoryHTMLMixin(object):
 def render(self):
  return ("&lt;html&gt;&lt;title&gt;%s&lt;/title&gt;"
   "&lt;body&gt;%s&lt;/body&gt;&lt;/html&gt;"
   % (self.name, self.content))

def MixIn(TargetClass, MixInClass):
 if MixInClass not in TargetClass.__bases__:
  TargetClass.__bases__ += (MixInClass,)

if __name__ == "__main__":
 my_story = Story("My Life", "&lt;p&gt;Is good.&lt;/p&gt;")
 # plug-in the MixIn here
 MixIn(Story, StoryHTMLMixin)
 # now I can render the story as HTML
 print my_story.render()
 

 Running main leads to the following error: 

 TypeError: Cannot create a consistent method resolution
order (MRO) for bases object, StoryHTMLMixin
 

 The problem is that both Story and StoryHTMLMixin are derived from object , and the diamond problem arises. 

 The solution is simply to make StoryHTMLMixin an old-style class , i.e., remove the inheritance from object , thus, changing the definition of the class StoryHTMLMixin to: 

 class StoryHTMLMixin:
 def render(self):
  return ("&lt;html&gt;&lt;title&gt;%s&lt;/title&gt;"
   "&lt;body&gt;%s&lt;/body&gt;&lt;/html&gt;"
   % (self.name, self.content))
 

 leads to the following result when running main : 

 &lt;html&gt;&lt;title&gt;My Life&lt;/title&gt;&lt;body&gt;&lt;p&gt;Is good.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
 

 I don't like having to use old style classes , so my question is: 

 Is this the correct way to handle this problem in Python, or is there a better way? 

 Edit: 

 I see that the class UserDict in the latest Python source defines a MixIn resorting to the old style classes (as presented in my example). 

 As recommended by all, I may resort to redefining the functionality that I want to attain (namely, the binding of methods at run time) without using MixIns. However, the point still remains - is this the only use case where messing with the MRO is unsolvable without resorting to reimplementation or falling back to old-style classes? 
 Answers (Total-6): #0 It's easier to see what's happening if we eliminate the __bases__ magic and write our the classes you're creating explicitly: 

 class StoryHTMLMixin(object):
 def render(self):
  return ("&lt;html&gt;&lt;title&gt;%s&lt;/title&gt;"
   "&lt;body&gt;%s&lt;/body&gt;&lt;/html&gt;"
   % (self.name, self.content))

class Story(object, StoryHTMLMixin):
 def __init__(self, name, content):
  self.name = name
  self.content = content
 

 That's the end result of what you're doing--or what it would be if it succeeded. It results in the same error. 

 Notice that this isn't actually diamond inheritance. That involves four classes, where two base classes each inherit a common fourth class; Python's multiple inheritance deals with that. 

 Here you have just three classes, leading to inheritance that looks like this: 

 StoryHTMLMixin &lt;--- Story
   | _____/
   | |
   v v
   object
 

 Python doesn't know how to resolve this. 

 I don't know about a workaround for this. In principle the solution would be to remove object from the bases of Story at the same time you add StoryHTMLMixin to it, but that isn't allowed for somewhat opaque, internal reasons ( TypeError: __bases__ assignment: 'StoryHTMLMixin' deallocator differs from 'object' ). 

 I've never found any practical, real-world use for modifying classes like this anyway. It just seems obfuscated and confusing--if you want a class that derives from those two classes, just create a class normally. 

 Ed: 

 Here's an approach that does something similar to yours, but without modifying classes in-place. Note how it returns a new class, deriving dynamically from the arguments of the function. This is much clearer--you can't inadvertently modify objects that are already instantiated, for example. 

 class Story(object):
 def __init__(self, name, content):
  self.name = name
  self.content = content

class StoryHTMLMixin(object):
 def render(self):
  return ("&lt;html&gt;&lt;title&gt;%s&lt;/title&gt;"
   "&lt;body&gt;%s&lt;/body&gt;&lt;/html&gt;"
   % (self.name, self.content))

def MixIn(TargetClass, MixInClass, name=None):
 if name is None:
  name = "mixed_%s_with_%s" % (TargetClass.__name__, MixInClass.__name__)

 class CombinedClass(TargetClass, MixInClass):
  pass

 CombinedClass.__name__ = name
 return CombinedClass

if __name__ == "__main__":
 MixedStory = MixIn(Story, StoryHTMLMixin, "MixedStory")
 my_story = MixedStory("My Life", "&lt;p&gt;Is good.&lt;/p&gt;")
 print my_story.render()
 
 #1 EDIT: My bad, the bug is a separate issue (thanks @Glenn Maynard). The following hack still works, as long as your mixin inherits directly from object . 

 class Text(object): pass
class Story(Text):
 ....
 

 

 However, I think that mixins are not the neatest solution to your problem. Both other solutions provided (a class decorator and an ordinary subclass) clearly mark the Story class as renderable, while your solution conceals this fact. That is, the existence of the render method in the other solutions is explicit while in your solution it is hidden. I think this will cause confusion later, especially if you come to rely more heavily on the mixin methodology. 

 Personally I like the class decorator. 
 #2 Why don't you use mixins directly instead of hacking around in the mro? 

 class Story(object):
 def __init__(self, name, content): 
  self.name = name
  self.content = content 

class StoryHTMLMixin(object):
 def render(self):
  return ("&lt;html&gt;&lt;title&gt;%s&lt;/title&gt;"
   "&lt;body&gt;%s&lt;/body&gt;&lt;/html&gt;"
   % (self.name, self.content))

class StoryHTML(Story, StoryHTMLMixin):
 pass


print StoryHTML('asd','asdf').render() # works just fine
 

 If you really, really, really want to glue extra methods on a class, that is not a big problem. Well, except that it's evil and bad practice. Anyways, you can change a class at any time: 

 # first, the story
x = Story('asd','asdf')

# changes a class object
def stick_methods_to_class( cls, *methods):
 for m in methods:
  setattr(cls, m.__name__, m)

# a bare method to glue on
def render(self):
 return ("&lt;html&gt;&lt;title&gt;%s&lt;/title&gt;"
  "&lt;body&gt;%s&lt;/body&gt;&lt;/html&gt;"
  % (self.name, self.content))

# change the class object
stick_methods_to_class(Story, render)

print x.render()
 

 But in the end, the question remains: Why should classes suddenly grow extra methods? That's the stuff horror movies are made of ;-) 
 #3 You could try using a decorator to add the functionality instead: 

 def render(obj):
 return ("&lt;html&gt;&lt;title&gt;%s&lt;/title&gt;"
 "&lt;body&gt;%s&lt;/body&gt;&lt;/html&gt;"
 % (obj.name, obj.content))

def renderable(cls):
 cls.render = render
 return cls

@renderable
class Story(object):
 ...
 
 #4 
 However, the point still remains - is
 this the only use case where messing
 with the MRO is unsolvable without
 resorting to reimplementation or
 falling back to old-style classes? 
 

 Others have suggested better solutions -- such as explicit construction of the
desired class -- but to answer your edited question, it is possible to define
the mixin without resorting to old-style classes: 

 class Base(object): pass

class Story(Base):
 def __init__(self, name, content): 
  self.name = name
  self.content = content 

class StoryHTMLMixin(Base):
 def render(self):
  return ("&lt;html&gt;&lt;title&gt;%s&lt;/title&gt;"
   "&lt;body&gt;%s&lt;/body&gt;&lt;/html&gt;"
   % (self.name, self.content))

def MixIn(TargetClass, MixInClass):
 if MixInClass not in TargetClass.__bases__:
  TargetClass.__bases__ = (MixInClass,)+TargetClass.__bases__

if __name__ == "__main__":
 my_story = Story("My Life", "&lt;p&gt;Is good.&lt;/p&gt;")
 # plug-in the MixIn here
 MixIn(Story, StoryHTMLMixin)
 # now I can render the story as HTML
 print my_story.render()
 

 yields 

 &lt;html&gt;&lt;title&gt;My Life&lt;/title&gt;&lt;body&gt;&lt;p&gt;Is good.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
 
 #5 Aside from everything said by the previous answers (and being evil and a bad idea), your problem is: 

 
 Bases should be ordered the other way around 

 TargetClass.__bases__ = (MixInClass,) + TargetClass.__bases__ 
 http://bugs.python.org/issue672115 - The easiest workaround is to inherit everything from a user defined class and not object, like 

 class MyBase(object): pass


class Story(MyBase):
  ...


class StoryHTMLMixin(MyBase):
  ...