Question (ID-431866): Ignore python multiple return value Say I have a Python function that returns multiple values in a tuple: 

 def func():
 return 1, 2
 

 Is there a nice way to ignore one of the results rather than just assigning to a temporary variable? Say if I was only interested in the first value, is there a better way than this: 

 x, temp = func()
 
 Answers (Total-6): #0 One common convention is to use a "_" as a variable name for the elements of the tuple you wish to ignore. For instance: 

 def f():
 return 1, 2, 3

_, _, x = f()
 
 #1 You can use x = func()[0] to return the first value, x = func()[1] to return the second, and so on. 
 #2 If you're using Python 3, you can you use the star before a variable (on the left side of an assignment) to have it be a list in unpacking. 

 # Example 1: a is 1 and b is [2, 3] 

 a, *b = [1, 2, 3] 

 # Example 2: a is 1, b is [2, 3], and c is 4 

 a, *b, c = [1, 2, 3, 4] 

 # Example 3: b is [1, 2] and c is 3 

 *b, c = [1, 2, 3]  

 # Example 4: a is 1 and b is [] 

 a, *b = [1] 
 #3 Three simple choices. 

 Obvious 

 x, _ = func()

x, junk = func()
 

 Hideous 

 x = func()[0]
 

 And there are ways to do this with a decorator. 

 def val0( aFunc ):
 def pick0( *args, **kw ):
  return aFunc(*args,**kw)[0]
 return pick0

func0= val0(func)
 
 #4 Remember, when you return more than one item, you're essentially returning a list-like object. So you can do things like this: 

 def func():
 return 1, 2

print func()[0] # prints 1
print func()[1] # prints 2
 
 #5 This seems like the best choice to me: 

 val1, val2, ignored1, ignored2 = some_function()
 

 It's not cryptic or ugly (like the func()[index] method), and clearly states your purpose.