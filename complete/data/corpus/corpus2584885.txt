Question (ID-2584885): strip tags python i want the following functionality. 

 input : this is test &lt;b&gt; bold text &lt;/b&gt; normal text
expected output: this is test normal text
 

 i.e. remove the content of the specified tag 
 Answers (Total-8): #0 With BeautifulSoup: 

 from BeautifulSoup import BeautifulSoup 
''.join(BeautifulSoup(page).findAll(text=True))
 

 Found at http://www.ghastlyfop.com/blog/2008/12/strip-html-tags-from-string-python.html 
 #1 Solution using BeautifulSoup : 

 from BeautifulSoup import BeautifulSoup
def removeTag(soup, tagname):
 for tag in soup.findAll(tagname):
  contents = tag.contents
  parent = tag.parent
  tag.extract()

s = BeautifulSoup("abcd &lt;b&gt; btag &lt;/b&gt; hello &lt;d&gt;dtag&lt;/d&gt;")

removeTag(s,"b")
print s
removeTag(s, "d")
print s
 

 returns: 

 &gt;&gt;&gt;
abcd hello &lt;d&gt;dtag&lt;/d&gt;
abcd hello
 
 #2 If you don't mind Python (although regexps are fairly generic), you can take some inspiration from Django's strip_tags filter . 

 Reproduced here for completeness - 

 def strip_tags(value):
 """Returns the given HTML with all tags stripped."""
 return re.sub(r'&lt;[^&gt;]*?&gt;', '', force_unicode(value))
 

 EDIT: If you're using this, or any other regexp solution, please keep in mind that it lets through carefully-crafted HTML (see comment) as well as HTML comments and hence should not be used with untrusted input. Consider using some of the beautifulsoup, html5lib or lxml answers for untrusted input instead. 
 #3 Looks like you want HTMLParser . ( html.parser in Python 3.) 

 from HTMLParser import HTMLParser
from sys import stdout
class Filter(HTMLParser):
 def __init__(self, ignored_tags):
  super(Filter, self).__init__()
  self.ignorelevel = 0
  self. ignored_tags = ignored_tags
 def handle_starttag(self, tag, attrs):
  if self.ignorelevel &gt; 0:
   self.ignorelevel += 1
  elif tag in self.ignored_tags:
   self.ignorelevel = 1
  else:
   # One of these two. Test and see.
   stdout.write(self.get_starttag_text())
   #stdout.write('&lt;' + self.get_starttag_text() + '&gt;')
 def handle_startendtag(self, tag, attrs):
  if self.ignorelevel == 0 and tag not in self.ignored_tags:
   # One of these two. Test and see.
   stdout.write(self.get_starttag_text())
   #stdout.write('&lt;' + self.get_starttag_text() + '/&gt;')
 def handle_endtag(self, tag):
  if self.ignorelevel &gt; 0:
   self.ignorelevel -= 1
   if self.ignorelevel &gt; 0:
    return
  stdout.write('&lt;/' + tag + '&gt;')
 def handle_data(self, data):
  stdout.write(data)
 def handle_charref(self, name):
  stdout.write('&amp;#' + name + ';')
 def handle_entityref(self, name):
  stdout.write('&amp;' + name + ';')
 def handle_comment(self, data):
  stdout.write('&lt;!-- ' + data + ' --&gt;')
 def handle_decl(self, data):
  stdout.write('&lt;!' + data + '&gt;')
 def handle_pi(self, data):
  stdout.write('&lt;?' + data + '&gt;')
 
 #4 Try with: 

 import re
input = 'this is test &lt;b&gt; bold text &lt;/b&gt; normal text'
output = re.compile(r'&lt;[^&lt;]*?/?&gt;').sub('', input)
print output
 
 #5 I would use http://code.google.com/p/html5lib/ if you want to include some safe tags. 

 See the "Sanitizing Tokenizer" section at http://code.google.com/p/html5lib/wiki/UserDocumentation . 

 Remember to test for vulnerabilities if it's an important service: http://ha.ckers.org/xss.html . 
 #6 Sam's answer should do what's wanted fairly well as far as I can tell, but it may pay to make sure that any left over &lt;&gt; characters are replaced with &amp;lt; and &amp;gt; respectively to prevent misuse/invalid HTML. 

 This approach has the advantage that it can accept incredibly malformed HTML references/tags. BeautifulSoup also handles malformed tags fairly well but html5lib, sgmllib and htmllib can choke on invalid code, some more than others if I remember correctly. 

 The following code also validates &amp; HTML references: 

 import re
from htmlentitydefs import name2codepoint, codepoint2name

S = '1234567890ABCDEF'
DHex = {}
for i in S:
 DHex[i.lower()] = None
 DHex[i.upper()] = None

def IsHex(S):
 if not S: return False
 for i in S: 
  if i not in DHex:
   return False
 return True

def UnEscape(S, LReEscape=None):
 # Converts HTML character references into a unicode string to allow manipulation
 #
 # If LUnEscape is provided, then the positions of the escaped characters will be 
 # added to allow turning the result back into HTML with ReEscape below, validating 
 # the references and escaping all the rest
 # 
 # This is needed to prevent browsers from stripping out e.g. &amp;#32; (spaces) etc
 re = LReEscape != None

 LRtn = []
 L = S.split('&amp;')
 xx = 0
 yy = 0
 for iS in L:
  if xx:
   LSplit = iS.split(';')
   if LSplit[0].lower() in name2codepoint:
    # A character reference, e.g. '&amp;amp;'
    a = unichr(name2codepoint[LSplit[0].lower()])
    LRtn.append(a+';'.join(LSplit[1:]))
    if re: LReEscape.append((yy, a))

   elif LSplit[0] and LSplit[0][0] == '#' and LSplit[0][1:].isdigit():
    # A character number e.g. '&amp;#52;'
    a = unichr(int(LSplit[0][1:]))
    LRtn.append(a+';'.join(LSplit[1:]))
    if re: LReEscape.append((yy, a))

   elif LSplit[0] and LSplit[0][0] == '#' and LSplit[0][1:2].lower() == 'x' and IsHex(LSplit[0][2:]):
    # A hexadecimal encoded character
    a = unichr(int(LSplit[0][2:].lower(), 16)) # Hex -&gt; base 16
    LRtn.append(a+';'.join(LSplit[1:]))
    if re: LReEscape.append((yy, a))

   else: LRtn.append('&amp;%s' % ';'.join(LSplit))
  else: LRtn.append(iS)
  xx += 1
  yy += len(LRtn[-1])
 return ''.join(LRtn)

def ReEscape(LReEscape, S, EscFn):
 # Re-escapes the output of UnEscape to HTML, ensuring e.g. &amp;#32; 
 # is turned back again and isn't stripped at a browser level
 L = []
 prev = 0
 for x, c in LReEscape:
  if x != prev:
   L.append(EscFn(S[prev:x]))

  o = ord(c)
  if o in codepoint2name:
   L.append('&amp;%s;' % codepoint2name[o])
  else: L.append('&amp;#%s;' % o)
  prev = x+len(c)
 L.append(EscFn(S[prev:]))
 return ''.join(L)

def escape(value):
 # Escape left over &lt;&gt;&amp; tags
 value = value.replace('&amp;', '&amp;amp;')
 value = value.replace('&gt;', '&amp;gt;')
 value = value.replace('&lt;', '&amp;lt;')
 return value

def strip_tags(value):
 # Strip HTML tags
 value = re.sub(r'&lt;[^&gt;]*?&gt;', '', value)
 print 'No Tags:', value

 # Validate &amp; references
 LReEscape = []
 value = UnEscape(value, LReEscape)
 value = ReEscape(LReEscape, value, EscFn=escape)
 print 'References Validated:', value
 return value

if __name__ == '__main__':
 # Outputs:
 # No Tags: this is test bold text normal text &gt;&lt; &amp;blah &amp;amp; &amp;amp
 # References Validated: this is test bold text normal text &amp;gt;&amp;lt; &amp;amp;blah &amp;amp; &amp;amp;
 strip_tags('this is test &lt;b&gt; bold text &lt;/b&gt; normal text &gt;&lt; &amp;blah &amp;amp; &amp;amp')
 
 #7 This is working code taken from my project Supybot , so it's fairly well tested: 

 class HtmlToText(sgmllib.SGMLParser):
 """Taken from some eff-bot code on c.l.p."""
 entitydefs = htmlentitydefs.entitydefs.copy()
 entitydefs['nbsp'] = ' '
 def __init__(self, tagReplace=' '):
  self.data = []
  self.tagReplace = tagReplace
  sgmllib.SGMLParser.__init__(self)

 def unknown_starttag(self, tag, attr):
  self.data.append(self.tagReplace)

 def unknown_endtag(self, tag):
  self.data.append(self.tagReplace)

 def handle_data(self, data):
  self.data.append(data)

 def getText(self):
  text = ''.join(self.data).strip()
  return normalizeWhitespace(text)

def htmlToText(s, tagReplace=' '):
 """Turns HTML into text. tagReplace is a string to replace HTML tags with.
 """
 x = HtmlToText(tagReplace)
 x.feed(s)
 return x.getText() 

 As the docstring notes, it originated with Fredrik Lundh, not me. As they say, great authors steal :)