Question (ID-2095404): Check even/odd for Palindrome? Is it a good idea to check for odd/even length of a palindrome number/string? Most snippets I came across don't do this basic test. If length is even, it can't be a palindrome, no? 

 if len(var) % 2 != 0:
 # could be a palindrome, continue...
else:
 break
 

 Or is it just better (i.e faster) to start comparing the first and last numbers/letters directly? 

 Edit : Okay, stupid question, should've thought twice! :) 
 Answers (Total-7): #0 ABBA 
 #1 The easiest way to check for a palindrome is to simply compare the string against it's reverse: 

 def ispalindrome(s):
 return s == s[::-1]
 

 This uses extended slices with a negative step to walk backwards through s and get the reverse. 
 #2 baab = palindrome and has length of 4 which is even 
 #3 Try this: 

 is_palindrome = lambda s : all(s1==s2 for s1,s2 in zip(s[:len(s)/2],s[-1:-(len(s)+1)/2:-1]))
 

 only checks the front half with the back half, and short-circuits as soon as a mismatch is found. 
 #4 Simple case: aa. 

 More complicated case: aaaa. 

 And so on. 
 #5 Even length strings can be palindromes too. Wikipedia doesn't say anything about this restriction. 
 #6 

 *n=raw_input("Enter a string==>") 

 n=int(n) 

 start=0 

 term=n 

 while n>0: 

 result=n%10

start=start*10+result

n=n/10
 

 print start 

 if term==start:
[link text][1]
 print "True" 

 else: 

 print "False"
 

 

 [1]: http://rahimanpolindrom for srrings.com