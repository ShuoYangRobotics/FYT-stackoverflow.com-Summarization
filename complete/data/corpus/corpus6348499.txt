Question (ID-6348499): Making a POST call instead of GET using urllib2 There's a lot of stuff about urllib2 and POST calls, but i'm stucked in this one 

 I'm trying to do a simple POST call to a service: 

 url = 'http://myserver/post_service'
data = urllib.urlencode({'name' : 'joe',
       'age' : '10'})
content = urllib2.urlopen(url=url, data=data).read()
print content
 

 I can see the server logs and it says that i'm doing GET calls, when i'm sending the data 
argument to urlopen. 

 The library is raising an 404 error (not found), which is correct for a GET call, POST calls are processed well (i'm also trying with a POST within a HTML form). 

 Any clues on this will be apreciated 
 Answers (Total-6): #0 This may have been answered before: Python URLLib / URLLib2 POST . 

 Your server is likely performing a 302 redirect from http://myserver/post_service to http://myserver/post_service/ . When the 302 redirect is performed, the request changes from POST to GET (see Issue 1401 ). Try changing url to http://myserver/post_service/ . 
 #1 The requests module may ease your pain. 

 url = 'http://myserver/post_service'
data = dict(name='joe', age='10')

r = requests.post(url, data=data, allow_redirects=True)
print r.content
 
 #2 Do it in stages, and modify the object, like this: 

 # make a string with the request type in it:
method = "POST"
# create a handler. you can specify different handlers here (file uploads etc)
# but we go for the default
handler = urllib2.HTTPHandler()
# create an openerdirector instance
opener = urllib2.build_opener(handler)
# build a request
request = urllib2.Request(url, data=dictionary_of_POST_fields_or_None )
# add any other information you want
request.add_header("Content-Type",'application/json')
# overload the get method function with a small anonymous function...
request.get_method = lambda: method
# try it; don't forget to catch the result
try:
 connection = opener.open(request)
except urllib2.HTTPError,e:
 connection = e

# check. Substitute with appropriate HTTP code.
if connection.code == 200:
 data = connection.read()
else:
 # handle the error case. connection.read() will still contain data
 # if any was returned, but it probably won't be of any use
 

 This way allows you to extend to making PUT , DELETE , HEAD and OPTIONS requests too, simply by substituting the value of method or even wrapping it up in a function. Depending on what you're trying to do, you may also need a different HTTP handler, e.g. for multi file upload. 
 #3 Have a read of the urllib Missing Manual . Pulled from there is the following simple example of a POST request. 

 url = 'http://myserver/post_service'
data = urllib.urlencode({'name' : 'joe', 'age' : '10'})
req = urllib2.Request(url, data)
response = urllib2.urlopen(req)
print response.read()
 

 As suggested by @Michael Kent do consider requests , it's great. 

 EDIT: This said, I do not know why passing data to urlopen() does not result in a POST request; It should. I suspect your server is redirecting, or misbehaving. 
 #4 Try this instead: 

 url = 'http://myserver/post_service'
data = urllib.urlencode({'name' : 'joe',
       'age' : '10'})
req = urllib2.Request(url=url,data=data)
content = urllib2.urlopen(req).read()
print content
 
 #5 it should be sending a POST if you provide a data parameter (like you are doing): 

 from the docs:
"the HTTP request will be a POST instead of a GET when the data parameter is provided" 

 so.. add some debug output to see what's up from the client side. 

 you can modify your code to this and try again: 

 import urllib
import urllib2

url = 'http://myserver/post_service'
opener = urllib2.build_opener(urllib2.HTTPHandler(debuglevel=1))
data = urllib.urlencode({'name' : 'joe',
       'age' : '10'})
content = opener.open(url, data=data).read()