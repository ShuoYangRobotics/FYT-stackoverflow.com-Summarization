Question (ID-2438473): What is the advantage of using static methods in Python? I ran into unbound method error in python with the code 

 class Sample(object):
'''This class defines various methods related to the sample'''

 def drawSample(samplesize,List):
  sample=random.sample(List,samplesize)
  return sample

Choices=range(100)
print Sample.drawSample(5,Choices)
 

 After reading many helpful posts here, I figured how I could add @staticmethod above to get the code working. I am python newbie. Can someone please explain why one would want to define static methods? Or, why are not all methods defined as static methods. 

 Thanks in advance. 
 Answers (Total-6): #0 Static methods have limited use, because they don't have access to the attributes of an instance of a class (like a regular method does), and they don't have access to the attributes of the class itself (like a class method does). 

 So they aren't useful for day-to-day methods. 

 However, they can be useful to group some utility function together with a class - e.g. a simple conversion from one type to another - that doesn't need access to any information apart from the parameters provided (and perhaps some attributes global to the module.) 

 They could be put outside the class, but grouping them inside the class may make sense where they are only applicable there. 

 You can also reference the method via an instance or the class, rather than the module name, which may help the reader understand to what instance the method is related. 
 #1 Why one would want to define static methods ? 

 Suppose we have a class called Math then 

 nobody will want to create object of class Math 
and then invoke methods like ceil and floor and fabs on it. 

 So we make them static . 

 For example doing 

 &gt;&gt; Math.floor(3.14)
 

 is much better than 

 &gt;&gt; mymath = Math()
&gt;&gt; mymath.floor(3.14)
 

 So they are useful in some way. You need not create an instance of a class to use them. 

 Why are not all methods defined as static methods ? 

 They don't have access to instance variables. 

 class Foo(object):
 def __init__(self):
  self.bar = 'bar'

 def too(self):
  print self.bar

 @staticmethod
 def foo():
  print self.bar

Foo().too() # works
Foo.foo() # doesn't work
 

 That is why we don't make all the methods static. 
 #2 Static methods have almost no reason-to-be in Python. You use either instance methods or class methods. 

 def method(self, args):
 self.member = something

@classmethod
def method(cls, args):
 cls.member = something

@staticmethod
def method(args):
 MyClass.member = something
 # The above isn't really working
 # if you have a subclass
 
 #3 This is not quite to the point of your actual question, but since you've said you are a python newbie perhaps it will be helpful, and no one else has quite come out and said it explicitly. 

 I would never have fixed the above code by making the method a static method. I would either have ditched the class and just written a function: 

 def drawSample(samplesize,List):
 sample=random.sample(List,samplesize)
 return sample

Choices=range(100)
print drawSample(5,Choices)
 

 If you have many related functions, you can group them in a module - ie, put them all in the same file, named sample.py for example; then 

 import sample

Choices=range(100)
print sample.drawSample(5,Choices)
 

 Or I would have added an init method to the class and created an instance that had useful methods: 

 class Sample(object):
'''This class defines various methods related to the sample'''

 def __init__(self, thelist):
  self.list = thelist

 def draw_sample(self, samplesize):
  sample=random.sample(self.list,samplesize)
  return sample

choices=Sample(range(100))
print choices.draw_sample(5)
 

 (I also changed the case conventions in the above example to match the style recommended by PEP 8.) 

 One of the advantages of Python is that it doesn't force you to use classes for everything. You can use them only when there is data or state that should be associated with the methods, which is what classes are for. Otherwise you can use functions, which is what functions are for. 
 #4 static methods are great because you don't have to declare an instance of the object to which the method belongs. 

 python's site has some great documentation on static methods here: 
 http://docs.python.org/library/functions.html#staticmethod 
 #5 When you call a function object from an object instance, it becomes a 'bound method' and gets the instance object itself is passed in as a first argument. 

 When you call a classmethod object (which wraps a function object) on an object instance, the class of the instance object gets passed in as a first argument. 

 When you call a staticmethod object (which wraps a function object), no implicit first argument is used. 

 class Foo(object):

 def bar(*args):
  print args

 @classmethod
 def baaz(*args):
  print args

 @staticmethod
 def quux(*args):
  print args

&gt;&gt;&gt; foo = Foo()

&gt;&gt;&gt; Foo.bar(1,2,3)
Traceback (most recent call last):
 File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unbound method bar() must be called with Foo instance as first argument (got int instance instead)
&gt;&gt;&gt; Foo.baaz(1,2,3)
(&lt;class 'Foo'&gt;, 1, 2, 3)
&gt;&gt;&gt; Foo.quux(1,2,3)
(1, 2, 3)

&gt;&gt;&gt; foo.bar(1,2,3)
(&lt;Foo object at 0x1004a4510&gt;, 1, 2, 3)
&gt;&gt;&gt; foo.baaz(1,2,3)
(&lt;class 'Foo'&gt;, 1, 2, 3)
&gt;&gt;&gt; foo.quux(1,2,3)
(1, 2, 3)