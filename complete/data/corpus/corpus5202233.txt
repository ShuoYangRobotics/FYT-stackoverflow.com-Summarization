Question (ID-5202233): how to change 39.54484700000000 to 39.54 and using python i want to set 39.54484700000000 to 39.54 using python , 

 how to get it , 

 thanks 
 Answers (Total-6): #0 If you want to change the actual value, use round as Eli suggested. However for many values and certain versions of Python this will not result be represented as the string "39.54". If you want to just round it to produce a string to display to the user, you can do 

 &gt;&gt;&gt; print "%.2f" % (39.54484700000000)
39.54
 

 or in newer versions of Python 

 &gt;&gt;&gt; print("{:.2f}".format(39.54484700000000))
39.54
 

 Relevant Documentation: String Formatting Operations , Built-in Functions: round 
 #1 How about round 

 &gt;&gt;&gt; import decimal
&gt;&gt;&gt; d=decimal.Decimal("39.54484700000000")
&gt;&gt;&gt; round(d,2)
39.54
 
 #2 You can use the quantize method if you're using a Decimal: 

 In [24]: q = Decimal('0.00')

In [25]: d = Decimal("115.79341800000000")

In [26]: d.quantize(q)
Out[26]: Decimal("115.79")
 
 #3 Use round : 

 
 Return the floating point value x
 rounded to n digits after the decimal
 point. If n is omitted, it defaults to
 zero. The result is a floating point
 number.
 Values are rounded to the closest
 multiple of 10 to the power minus n;
 if two multiples are equally close,
 rounding is done away from 0 
 

 &gt;&gt;&gt; round(39.544847, 2)
39.539999999999999
&gt;&gt;&gt; 
 

 Note that since 39.54 isn't exactly represantable with floating points on my PC (x86), the result is an epsilon off. But that makes no difference (and is a whole different issue with many SO questions and answers on it). If you convert it to a string properly, you'll see what you expect: 

 &gt;&gt;&gt; "%.2f" % round(39.544847, 2)
'39.54'
 
 #4 &gt;&gt;&gt; round(39.54484700000000, 2)
39.54
 

 Note, however, that the result isn't actually 39.54, but 39.53999999999999914734871708787977695465087890625. 
 #5 Eli mentions using the round function -- depending on your requirements, you may want to return a Decimal object instead. 

 &gt;&gt;&gt; from decimal import Decimal
&gt;&gt;&gt; float_val = 39.54484700000000
&gt;&gt;&gt; decimal_val = Decimal("%.2f" % float_val)
&gt;&gt;&gt; print decimal_val
39.54
 

 Using Decimal objects lets you specify the exact number of decimal places that you want to keep track of, so you avoid ending up with a floating point number that is represented as 39.539999999999999 . Specifically, if you are doing financial calculations, you will almost always be advised to stay away from floating-point numbers. 

 You can't cast floats directly into Decimals, however (the floats are imprecise, and Python can't guess how you want them rounded,) so I will almost always convert them to a rounded string representation first (that's the "%.2f" % float_val -- %.2f means to display only two decimals, and then create a Decimal out of that.