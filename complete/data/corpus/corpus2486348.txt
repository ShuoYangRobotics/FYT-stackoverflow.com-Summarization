Question (ID-2486348): programming language implemented in pure python i am creating ( researching possibility of ) a highly customizable python client and would like to allow users to actually edit the code in another language to customize the running of program. ( analogous to browser which itself coded in c/c++ and run another language html/js ). so my question is , is there any programming language implemented in pure python which i can see as a reference ( or use directly ? ) -- i need simple language ( simple statements and ifs can do ) 

 edit: sorry if i did not make myself clear but what i want is "a language to customize the running of program" , even though pypi seems a great option, what i am looking for is more simple which i can study and extend myself if need arise. my google searches pointing towards xml based langagues. ( BMEL , XForms etc ). 
 Answers (Total-8): #0 The question isn't completely clear on scope, but I have a hunch that PyPy, embedding other full languages, and similar solutions might be overkill. It sounds like iamgopal may really be interested in something more like Interpreter Pattern or Little Language . 

 If the language you want to support is really small (see the Interpreter Pattern link), then hand-coding this yourself in Python won't be too hard. You can write a simple parser (Google around; here's one example ), then walk the AST and evaluate user expressions. 

 However, if you expect this to be used for a long time or by many people, it may be worth throwing a real language at the problem. (I'd recommend Python itself if your users are already familiar with basic Python syntax). 
 #1 Ren'Py is a modification to Python syntax built on top of Python itself, using the language tools in the stdlib. 
 #2 For your user's sake, don't use an XML based language - XML is an awful basis for a programming language and your users will hate you for it. 

 Here is a suggestion. Use a strict subset of Python for your language. Use the compiler module to convert their code into an abstract syntax tree and walk the tree to to validate that the code conforms to your subset before converting the AST into python bytecode. 

 N.B. I just checked the docs and see that the compiler package is deprecated in 2.6 and removed in Python 3.x. Does anyone know why that is? 
 #3 Why not Python itself? With some care you can use eval to run user code. 

 One of the good thing about interpreted scripting languages is that you don't need another extra scripting language! 
 #4  PLY (Python Lex-Yacc) 
 is something of your interest. 
 #5 Numerous template languages such as Cheetah, Django templates, Genshi, Mako, Mighty might serve as an example. 
 #6 Possibly Common Lisp (or any other Lisp) will be the best choice for that task. Because Lisp make it possible to easily extend host language with powerful macroses and construct DSL (domain specific language). 
 #7 If all you need is simple if statements and expressions, I'm sure it wouldn't be an awful task to parse each line. Something like 

 if some flag
 activate some feature
 deactivate some feature
elif some other flag
 activate some feature
 activate some feature
else
 logout
 

 Just write a class which, while parsing takes the first word, checks if it's "if, elif, else," etc, and if so, check a flag and set a flag saying you either are or are not executing until the next conditional. If it's not a conditional, call a function based on the first keyword that would modify the program state in some way. 

 The class could store some local execution state (are we in an if statement? If so are we executing this branch?) and have another class containing some global application state (flags that are checkable by if statements, etc). 

 This is probably the wrong thing to do in your situation (it's very prone to bugs, it's dangerous if you don't treat the data in the scripts correctly), but it's at least a start if you do decide to interpret your own mini-language. 

 Seriously though, if you try this, be very, very, srs careful. Don't give the scripts any functionality that they don't definitely need, because you are almost certainly opening security holes by doing something like this. 

 Don't say I didn't warn you.