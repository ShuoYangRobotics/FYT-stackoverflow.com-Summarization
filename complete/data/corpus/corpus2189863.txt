Question (ID-2189863): python normalized path gets reset in a for loop I am trying to get a normalized path on windows. The paths are stored in a list and i am looping over those as follows: 

 &gt;&gt;&gt; lst = ['C:\\', 'C:\\Windows', 'C:\\Program Files']
&gt;&gt;&gt; lst
['C:\\', 'C:\\Windows', 'C:\\Program Files']
&gt;&gt;&gt; for pth in lst:
... print pth
...
C:\
C:\Windows
C:\Program Files
 

 Notice that it has removed one backslash from the output C:\ should be C:\. 

 The output doesn't change even when I normalize the path in the loop as below: 

 &gt;&gt;&gt; import os
&gt;&gt;&gt; for pth in lst:
...  print os.path.normpath(pth)
...
C:\
C:\Windows
C:\Program Files
 

 Can anyone suggest a fix? Thanks 

 Update 

 seems like the suggestions about the raw string is a better way to handle this. But how to specify the string as a raw string within a for loop. Example: 

 for pth in lst:
 raw_str = rpth
 

 Obviously the above doesn't work . How do I achieve this? r'path/to/file' ? 
 Answers (Total-6): #0 The double slash is simply string escaping - you need to escape slashes in string literals. Printing lst[0] before the loop will print it without the slash. If you want to really include a double slash in your literal, use the raw string syntax: 

 &gt;&gt;&gt; lst = ['C:\\', 'C:\\Windows', 'C:\\Program Files']
&gt;&gt;&gt; lst[0]
'C:\\'
&gt;&gt;&gt; print lst[0]
C:\
&gt;&gt;&gt; lst2 = [r'C:\\', r'C:\\Windows', r'C:\\Program Files']
&gt;&gt;&gt; lst2[0]
'C:\\\\'
&gt;&gt;&gt; print lst2[0]
C:\\
 

 EDIT: If you want to double the slashes, you can do a simple string replace: 

 &gt;&gt;&gt; x = 'C:\\Windows'
&gt;&gt;&gt; print x
C:\Windows
&gt;&gt;&gt; x = x.replace('\\', '\\\\')
&gt;&gt;&gt; print x
C:\\Windows
 
 #1 In Python, when you say 

 &gt;&gt;&gt; s = 'C:\\'
 

 s contains three characters: C , : and \ . This can be easily seen by: 

 &gt;&gt;&gt; len(s)
3
 

 In Python, as in many other languages, a backslash is used to escape certain characters. For example, a newline is \n , a character with value 0 is \x00 , etc. A "real" backslash is \\ . So, to actually get two backslashes, you need to escape both, giving: 

 &gt;&gt;&gt; s = 'C:\\\\'
 

 But, Windows is perfectly happy with / as the separator, so you can do: 

 &gt;&gt;&gt; s = 'C:/'
 
 #2 \\ is an escape sequence which prints \ as the output. If you want to print C:\\ , you'll have to use C:\\\\ as the input string(or use raw strings ...). I can't see why you would want that. Although if you particularly want to, there are different options available. 
 #3 you need \\ ? you can use print repr(pth) 
 #4 If possible, try to use os.path.join() for creating your windows path. You don't have to meddle with slashes as much. 

 eg 

 from os.path import join
rootdir="C:\\"
path1 = join(rootdir,"windows")
path2 = join(rootdir,"Program Files")
lst = [ rootdir , path1, path2 ]
 
 #5 Use / for sanity on windows (most programs work with both forms of slashes), but failing that, use r'' whenever you are dealing with backslashed path names. 

 r'C:\My\Windows\Path'
 

 If you really want double backslashes, then that works too: 

 r'C:\\My\\Escaped\\Path'