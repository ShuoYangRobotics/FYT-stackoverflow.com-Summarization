Question (ID-4107740): Understanding objects in Python I am a little confused by the object model of Python. I have two classes, one inherits from the other. 

 class Node():
 def __init__(identifier):
 self.identifier = identifier

class Atom(Node):
 def __init__(symbol)
 self.symbol = symbol
 

 What I am trying to do is not to override the __ init __ () method, but to create an instance of atom that will have attributes symbol and identifier . 

 Like this: 

 Atom("Fe", 1) # will create an atom with symbol "Fe" and identifier "1"
 

 Thus I want to be able to access Atom.identifier and Atom.symbol once an instance of Atom is created. 

 How can I do that? 
 Answers (Total-6): #0 &gt;&gt;&gt; class Node(object):
...  def __init__(self, id_):
...    self.id_ = id_
... 
&gt;&gt;&gt; class Atom(Node):
...  def __init__(self, symbol, id_):
...    super(Atom, self).__init__(id_)
...    self.symbol = symbol
... 
&gt;&gt;&gt; a = Atom("FE", 1)
&gt;&gt;&gt; a.symbol
'FE'
&gt;&gt;&gt; a.id_
1
&gt;&gt;&gt; type(a)
&lt;class '__main__.Atom'&gt;
&gt;&gt;&gt; 
 

 It's a good idea to inherit from object in your code. 
 #1 You have to call the __init__ -method of the super-class manually. 

 class Atom(Node):
 def __init__(self, symbol, identifier)
 Node.__init__(self, identifier)
 self.symbol = symbol
 
 #2 When creating a class you need to use the self word in the declaration. After that you can define the other arguments. To inherit call the super init method: 

 &gt;&gt;&gt; class Node():
... def __init__(self, identifier):
...  self.identifier = identifier
...
&gt;&gt;&gt;
&gt;&gt;&gt; class Atom(Node):
... def __init__(self, symbol, identifier):
...  Node.__init__(self, identifier)
...  self.symbol = symbol
...
&gt;&gt;&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; fe = Atom("Fe", 1)
&gt;&gt;&gt; fe.symbol
'Fe'
&gt;&gt;&gt; fe.identifier
1
&gt;&gt;&gt;
 
 #3 You have two missing things in your code: 

 
 methods belonging to a class have to have an explicit self parameter, which you are missing 
 Your derived 'Atom' class also needs to accept the parameter it needs to use to initialize the base class. 
 

 Something more like: 

 class Node():
 def __init__(self, identifier):
 self.identifier = identifier

class Atom(Node):
 def __init__(self, identifier, symbol)
 Node.__init__(self, identifier)
 self.symbol = symbol
 
 #4 class Node(): 
 def __init__(self, identifier): 
 self.identifier = identifier 

class Atom(Node): 
 def __init__(self, symbol, *args, **kwargs)
 super(Atom, self).__init__(*args, **kwargs)
 self.symbol = symbol
 

 See here for an explanation of the *args and **kwargs . By using super , you can access the base class (superclass) of the Atom class and call it's __init__ . Also, the self parameter needs to be included as well. 
 #5 class Node(object): 
 def __init__(self, identifier): 
 self.identifier = identifier 

class Atom(Node): 
 def __init__(self, symbol, *args, **kwargs)
 super(Atom, self).__init__(*args, **kwargs)
 self.symbol = symbol
 

 Points: 

 
 Node should inherit from object . 
 Use super to call parent classes' __init__ functions. 
 Class member functions take self as the first parameter in Python.