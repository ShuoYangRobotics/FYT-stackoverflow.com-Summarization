Question (ID-2145371): Reduce strings in python to a specific point I have strings in my python application that look this way: 

 test1/test2/foo/
 

 Everytime I get such a string, I want to reduce it, beginning from the tail and reduced until the fist "/" is reached. 

 test1/test2/
 

 More examples: 

 foo/foo/foo/foo/foo/ =&gt; foo/foo/foo/foo/
test/test/   =&gt; test/
how/to/implement/this =&gt; how/to/implement/
 

 How can I implement this in python? 

 Thanks in advance! 
 Answers (Total-7): #0 It sounds like the os.path.dirname function might be what you're looking for. You may need to call it more than once: 

 &gt;&gt;&gt; import os.path
&gt;&gt;&gt; os.path.dirname("test1/test2/")
'test1/test2'
&gt;&gt;&gt; os.path.dirname("test1/test2")
'test1'
 
 #1  str.rsplit() with the maxsplit argument. Or if this is a path, look in os.path or urlparse . 
 #2  newString = oldString[:oldString[:-1].rfind('/')]
 # strip out trailing slash ----^  ^---- find last remaining slash
 
 #3 &gt;&gt;&gt; import os
&gt;&gt;&gt; path="how/to/implement/this"
&gt;&gt;&gt; os.path.split(path)
('how/to/implement', 'this')
&gt;&gt;&gt; os.path.split(path)[0]
'how/to/implement'
 
 #4 &gt;&gt;&gt; os.path.split('how/to/implement/this'.rstrip('/'))
('how/to/implement', 'this')
&gt;&gt;&gt; os.path.split('how/to/implement/this/'.rstrip('/'))
('how/to/implement', 'this')
 
 #5 '/'.join(s.split('/')[:-1]+[''])
 
 #6 If you mean "/" as in path separator, the function you want is: 

 os.path.dirname(your_argument)
 

 If not, then you want: 

 def your_function(your_argument):
 result= your_argument.rstrip("/").rpartition("/")[0]
 if result:
  return result + "/"
 return result
 

 Please specify what should be the result when "test/" is used as an argument: should it be "/" or ""? I assumed the second in my code above.