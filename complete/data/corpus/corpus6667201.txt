Question (ID-6667201): How to define Two-dimensional array in python I want to define Two-dimensional array whit out range like this : 

 Matrix = [][]
 

 but It's Wrong
I define this but make error too : 

 &gt;&gt;Matrix = [5][5]

Matrix = [5][5] # Recall 2nd parameter to zeros is the type
IndexError: list index out of range
 

 What is my false? 
 Answers (Total-7): #0 If you really want a matrix, you might be better off using numpy. 

 &gt;&gt;&gt; import numpy
&gt;&gt;&gt; numpy.zeros(25).reshape((5, 5))
array([[ 0., 0., 0., 0., 0.],
  [ 0., 0., 0., 0., 0.],
  [ 0., 0., 0., 0., 0.],
  [ 0., 0., 0., 0., 0.],
  [ 0., 0., 0., 0., 0.]])
&gt;&gt;&gt; numpy.matrix([[1, 2],[3, 4]])
matrix([[1, 2],
  [3, 4]])
 

 Other ways (with output removed for compactness): 

 &gt;&gt;&gt; numpy.matrix('1 2; 3 4')
&gt;&gt;&gt; numpy.arange(25).reshape((5, 5))
&gt;&gt;&gt; numpy.array(range(25)).reshape((5, 5))
&gt;&gt;&gt; numpy.ndarray((5, 5))
 
 #1 You should make a list of lists, the best way is use nested comprehensions: 

 &gt;&gt;&gt; matrix = [[0 for i in range(5)] for j in range(5)]
&gt;&gt;&gt; pprint.pprint(matrix)
[[0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0]]
 

 On your [5][5] example, you are creating a list with an integer "5" inside, and try to access its 5th item, and that naturally raises an IndexError because there is no 5th item.: 

 &gt;&gt;&gt; l = [5]
&gt;&gt;&gt; l[5]
Traceback (most recent call last):
 File "&lt;stdin&gt;", line 1, in &lt;module&gt;
IndexError: list index out of range
 
 #2 You're technically trying to index an uninitialized array. You have to first initialize the outer list with lists before adding items: 

 # Creates a list containing 5 lists initialized to 0
Matrix = [[0 for x in xrange(5)] for x in xrange(5)] 
 

 You can now add items to the list: 

 Matrix[0][0] = 1
Matrix[4][0] = 5

print Matrix[0][0] # prints 1
print Matrix[4][0] # prints 5
 
 #3 You can easily simulate a two dimensonal array by nesting list data types like so.. 

 matrix = [[ ], [ ]] 

 this would be a 1x2 matrix
notice that the two lists inside are null and can be filled up later, each of the nested lists are used as two rows... so by using n number lists with n number of items in each
we come to a a array with NxN ,rows x coulmns. 

 so finally the code would be like so... 

 n = 5
matrix = [ [0 for x in range(n)]] * n
 
 #4 If you want to create an empty matrix, the correct syntax is 

 matrix = [[]]
 

 And if you want to generate a matrix of size 5 filled with 0, 

 matrix = [[0 for i in xrange(5)] for i in xrange(5)]
 
 #5 In Python you will be creating a list of lists. You do not have to declare the dimensions ahead of time, but you can. For example: 

 matrix = []
matrix.append([])
matrix.append([])
matrix[0].append(2)
matrix[1].append(3)
 

 Now matrix[0][0] == 2 and matrix[1][0] == 3. You can also use the list comprehension syntax. This example uses it twice over to build a "two-dimensional list": 

 from itertools import count, takewhile
matrix = [[i for i in takewhile(lambda j: j &lt; (k+1) * 10, count(k*10))] for k in range(10)]
 
 #6 Here is a shorter notation for initializing a list of lists: 

 matrix = [[0]*5 for i in range(5)]
 

 Unfortunately shortening this to something like 5*[5*[0]] doesn't really work because you end up with 5 copies of the same list, so when you modify one of them they all change, for example: 

 &gt;&gt;&gt; matrix = 5*[5*[0]]
&gt;&gt;&gt; matrix
[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]
&gt;&gt;&gt; matrix[4][4] = 2
&gt;&gt;&gt; matrix
[[0, 0, 0, 0, 2], [0, 0, 0, 0, 2], [0, 0, 0, 0, 2], [0, 0, 0, 0, 2], [0, 0, 0, 0, 2]]