Question (ID-758819): Python: MySQLdb Connection Problems I'm having trouble with the MySQLdb module. 

 db = MySQLdb.connect(
 host = 'localhost', 
 user = 'root', 
 passwd = '', 
 db = 'testdb', 
 port = 3000)
 

 (I'm using a custom port) 

 the error I get is: 

 Error 2002: Can't connect to local MySQL server through socket '/var/lib/mysql/mysql.sock' (2) 

Which doesn't make much sense since that's the default connection set in my.conf.. it's as though it's ignoring the connection info I give..

The mysql server is definitely there:

 
[root@baster ~]# mysql -uroot -p -P3000
Enter password: 
Welcome to the MySQL monitor. Commands end with ; or \g.
Your MySQL connection id is 19
Server version: 5.0.77 Source distribution

Type 'help;' or '\h' for help. Type '\c' to clear the buffer.

mysql> use testdb;
Database changed
mysql> 
 

 I tried directly from the python prompt: 

 
>>> db = MySQLdb.connect(user='root', passwd='', port=3000, host='localhost', db='pyneoform')
Traceback (most recent call last):
File "", line 1, in 
File "/usr/lib64/python2.5/site-packages/MySQLdb/__init__.py", line 74, in Connect
return Connection(*args, **kwargs)
File "/usr/lib64/python2.5/site-packages/MySQLdb/connections.py", line 169, in __init__
super(Connection, self).__init__(*args, **kwargs2)
_mysql_exceptions.OperationalError: (2002, "Can't connect to local MySQL server through socket '/var/lib/mysql/mysql.sock' (2)")
>>>
 

 I'm confused... :( 
 Answers (Total-7): #0 Make sure that the mysql server is listening for tcp connections, which you can do with netstat -nlp (in *nix). This is the type of connection you are attempting to make, and db's normally don't listen on the network by default for security reasons. Also, try specifying --host=localhost when using the mysql command, this also try to connect via unix sockets unless you specify otherwise. If mysql is not configured to listen for tcp connections, the command will also fail. 

 Here's a relevant section from the mysql 5.1 manual on unix sockets and troubleshooting connections. Note that the error described (2002) is the same one that you are getting. 

 Alternatively, check to see if the module you are using has an option to connect via unix sockets (as David Suggests). 
 #1 add unix_socket='path_to_socket' where path_to_socket should be the path of the mysql socket, e.g. /var/run/mysqld/mysqld2.sock 
 #2 Maybe try adding the keyword parameter unix_socket = None to connect() ? 
 #3 As far as I can tell, the python connector can ONLY connect to mysql through a internet socket: unix sockets (the default for the command line client) is not supported. 

 In the CLI client, when you say "-h localhost", it actually interprets localhost as "Oh, localhost? I'll just connect to the unix socket instead", rather than the internet localhost socket. 

 Ie, the mysql CLI client is doing something magical, and the Python connector is doing something "consistent, but restrictive". 

 Choose your poison. (Pun not intended ;) ) 
 #4 i had this issue where the unix socket file was some place else, python was trying to connect to a non-existing socket. once this was corrected using the unix_socket option, it worked. 
 #5 Mysql uses sockets when the host is 'localhost' and tcp/ip when the host is anything else. By default Mysql will listen to both - you can disable either sockets or networking in you my.cnf file (see mysql.com for details). 

 In your case forget about the port=3000 the mysql client lib is not paying any attention to it since you are using localhost and specify the socket as in unix_socket='path_to_socket'. 

 If you decided to move this script to another machine you will need to change this connect string to use the actual host name or ip address and then you can loose the unix_socket and bring back the port. The default port for mysql is 3306 - you don't need to specify that port but you will need to specify 3000 if that is the port you are using. 
 #6 Not sure why yet but changing localhost to 127.0.0.1 solved my problem using MySQLdb: 

 db = MySQLdb.connect(
 host = '127.0.0.1', 
 user = 'root', 
 passwd = '', 
 db = 'testdb', 
 port = 3000)