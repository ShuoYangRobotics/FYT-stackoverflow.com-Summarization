Question (ID-4618298): randomly mix lines of 3 million-line file Everything is in the title. I'm wondering if any one knows a quick and with reasonable memory demands way of randomly mixing all the lines of a 3 million lines file. I guess it is not possible with a simple vim command, so any simple script using python or fortran may be an option too... I tried with python by using a random number generator, but did not manage to find a simple way out. 

 Thanks in advance! 
 Answers (Total-7): #0 import random
with open('the_file','r') as source:
 data = [ (random.random(), line) for line in source ]
data.sort()
with open('another_file','w') as target:
 for _, line in data:
  target.write( line )
 

 That should do it. 3 million lines will fit into most machine's memory unless the lines are HUGE (over 512 characters). 
 #1 Takes only a few seconds in Python: 

 &gt;&gt;&gt; import random
&gt;&gt;&gt; lines = open('3mil.txt').readlines()
&gt;&gt;&gt; random.shuffle(lines)
&gt;&gt;&gt; open('3mil.txt', 'w').writelines(lines)
 
 #2 On many systems the sort shell command takes -R to randomize its input. 
 #3 Here's another version 

 At the shell, use this. 

 python decorate.py | sort | python undecorate.py
 

 decorate.py 

 import sys
import random
for line in sys.stdin:
 sys.stdout.write( "{0}|{1}".format( random.random(), line ) )
 

 undecorate.py 

 import sys
for line in sys.stdin:
 _, _, data= line.partition("|")
 sys.stdout.write( line )
 

 Uses almost no memory. 
 #4 This is the same as Mr. Kugelman's, but using vim's built-in python interface: 

 :py import vim, random as r; cb = vim.current.buffer ; l = cb[:] ; r.shuffle(l) ; cb[:] = l
 
 #5 Found this page which has a solution (not sure it will work or not):
 http://www.skrinakcreative.com/wp/2009/05/cool-vim-random-line-shuffle-trick/ 
 #6 If you do not want to load everything into memory and sort it there, you have to store the lines on disk while doing random sorting. That will be very slow. 

 Here is a very simple, stupid and slow version. Note that this may take a surprising amount of diskspace, and it will be very slow. I ran it with 300.000 lines, and it takes several minutes. 3 million lines could very well take an hour. So: Do it in memory. Really. It's not that big. 

 import os
import tempfile
import shutil
import random
tempdir = tempfile.mkdtemp()
print tempdir

files = []
# Split the lines:
with open('/tmp/sorted.txt', 'rt') as infile:
 counter = 0 
 for line in infile:
  outfilename = os.path.join(tempdir, '%09i.txt' % counter)
  with open(outfilename, 'wt') as outfile:
   outfile.write(line)
  counter += 1
  files.append(outfilename)

with open('/tmp/random.txt', 'wt') as outfile:
 while files:
  index = random.randint(0, len(files) - 1)
  filename = files.pop(index)
  outfile.write(open(filename, 'rt').read())

shutil.rmtree(tempdir)
 

 Another version would be to store the files in an SQLite database and pull the lines randomly from that database. That is probably going to be faster than this.