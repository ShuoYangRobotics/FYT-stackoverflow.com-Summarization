Question (ID-4499073): Printing without newline (print 'a',) prints a space, how to remove? I have this code: 

 &gt;&gt;&gt; for i in xrange(20):
...  print 'a',
... 
a a a a a a a a a a a a a a a a a a a a
 

 I want to output 'a' , without ' ' like this: 

 aaaaaaaaaaaaaaaaaaaa
 

 Is it possible? 
 Answers (Total-8): #0 There are a number of ways of achieving your result. If you're just wanting a solution for your case, use string multiplication as @Ant mentions. This is only going to work if each of your print statements prints the same string. Note that it works for multiplication of any length string (e.g. 'foo' * 20 works). 

 &gt;&gt;&gt; print 'a' * 20
aaaaaaaaaaaaaaaaaaaa
 

 If you want to do this in general, build up a string and then print it once. This will consume a bit of memory for the string, but only make a single call to print . Note that string concatenation using += is now linear in the size of the string you're concatenating so this will be fast. 

 &gt;&gt;&gt; for i in xrange(20):
...  s += 'a'
... 
&gt;&gt;&gt; print s
aaaaaaaaaaaaaaaaaaaa
 

 Or you can do it more directly using sys.stdout . write() , which print is a wrapper around. This will write only the raw string you give it, without any formatting. Note that no newline is printed even at the end of the 20 a s. 

 &gt;&gt;&gt; for i in xrange(20):
...  sys.stdout.write('a')
... 
aaaaaaaaaaaaaaaaaaaa&gt;&gt;&gt; 
 

 Python 3 changes the print statement into a print() function , which allows you to set an end parameter. You can use it in >=2.6 by importing from __future__ . I'd avoid this in any serious 2.x code though, as it will be a little confusing for those who have never used 3.x. However, it should give you a taste of some of the goodness 3.x brings. 

 &gt;&gt;&gt; from __future__ import print_function
&gt;&gt;&gt; for i in xrange(20):
...  print('a', end='')
... 
aaaaaaaaaaaaaaaaaaaa&gt;&gt;&gt; 
 
 #1 You can suppress the space by printing an empty string to stdout between the print statements. 

 &gt;&gt;&gt; import sys
&gt;&gt;&gt; for i in range(20):
... print 'a',
... sys.stdout.write('')
... 
aaaaaaaaaaaaaaaaaaaa
 

 However, a cleaner solution is to first build the entire string you'd like to print and then output it with a single print statement. 
 #2 without what?
do you mean 

 &gt;&gt;&gt; print 'a' * 20
aaaaaaaaaaaaaaaaaaaa
 

 ? 
 #3 From http://docs.python.org/whatsnew/2.6.html#pep-3105-print-as-a-function 

 &gt;&gt;&gt; from __future__ import print_function
&gt;&gt;&gt; print('a', end='')
 

 Obviously that only works with python 2.6 or higher. 
 #4 Python 3.x: 

 for i in range(20):
 print('a', end='')
 

 Python 2.6 or 2.7: 

 from __future__ import print_function
for i in xrange(20):
 print('a', end='')
 
 #5 Either what Ant says , or accumulate into a string, then print once: 

 s = '';
for i in xrange(20):
 s += 'a'
print s
 
 #6 You could print a backspace character ( '\b' ): 

 for i in xrange(20):
 print '\ba',
 

 result: 

 aaaaaaaaaaaaaaaaaaaa
 
 #7 EDIT Dammit, misread question 

 Place an extra comma at the end of the statement 

 print "a",