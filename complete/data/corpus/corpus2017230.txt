Question (ID-2017230): Why aren't "and" and "or" operators in Python? I wasn't aware of this, but apparently the and and or keywords aren't operators. They don't appear in the list of python operators . Just out of sheer curiosity, why is this? And if they aren't operators, what exactly are they? 
 Answers (Total-6): #0 Because they're control flow constructs. Specifically: 

 
 if the left argument to and evaluates to False, the right argument doesn't get evaluated at all 
 if the left argument to or evaluates to True, the right argument doesn't get evaluated at all 
 

 Thus, it is not simply a matter of being reserved words. They don't behave like operators, since operators always evaluate all of their arguments. 

 You can contrast this with bitwise binary operators which, as the name implies, are operators: 

 &gt;&gt;&gt; 1 | (1/0)
Traceback (most recent call last):
 File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ZeroDivisionError: integer division or modulo by zero
&gt;&gt;&gt; 1 or (1/0)
1
 

 As you see, the bitwise OR ( | ) evaluates both its arguments. The or keyword, however, doesn't evaluate its right argument at all when the left argument evaluates to True; that's why no ZeroDivisionError is raised in the second statement. 
 #1 
 Python does not currently provide any ' xxx ' special methods corresponding to the 'and', 'or' and 'not' boolean operators. In the case of 'and' and 'or', the most likely reason is that these operators have short-circuiting semantics, i.e. the second operand is not evaluated if the result can be determined from the first operand. The usual technique of providing special methods for these operators therefore would not work. 
 

 Source: PEP 335 

 PEP 335 talks about adding the ability to have overloadable operators, and discusses this issue a bit. 
 #2 They're classifying them as keywords earlier in the document. 
 #3 It is explained here . 
 #4 They're keywords , because they're reserved identifiers, not special tokens of symbols. 
 #5 They can't be redefined to support type-specific operations, so they don't fall under the scope of the other operators.