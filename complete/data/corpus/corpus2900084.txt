Question (ID-2900084): Counting positive elements in a list with Python list comprehensions I have a list of integers and I need to count how many of them are > 0. 
I'm currently doing it with a list comprehension that looks like this: 

 sum([1 for x in frequencies if x &gt; 0])
 

 It seems like a decent comprehension but I don't really like the "1"; it seems like a bit of a magic number. Is there a more Pythonish way to do this? 
 Answers (Total-6): #0 sum(x &gt; 0 for x in frequencies)
 

 bool is a subclass of int : 

 In [15]: isinstance(True,int)
Out[15]: True
 

 and True 's value is 1: 

 In [16]: True==1
Out[16]: True
 
 #1 A slightly more Pythonic way would be to use a generator instead: 

 sum(1 for x in frequencies if x &gt; 0)
 

 This avoids generating the whole list before calling sum() . 
 #2 This works, but adding bool s as int s may be dangerous. Please take this code with a grain of salt (maintainability goes first): 

 sum(k&gt;0 for k in x)
 
 #3 You could use len() on the filtered list: 

 len([x for x in frequencies if x &gt; 0])
 
 #4 How about this? 

 reduce(lambda x, y: x+1 if y &gt; 0 else x, frequencies) 

 EDIT:
With inspiration from the accepted answer from @~unutbu: 

 reduce(lambda x, y: x + (y &gt; 0), frequencies) 
 #5 If the array only contains elements >= 0 (i.e. all elements are either 0 or a positive integer) then you could just count the zeros and subtract this number form the length of the array: 

 len(arr) - arr.count(0)