Question (ID-8246484): inverting dictionary in python I have this dictionary 

 {'jackie chan': ('rush hour', 'rush hour 2'), 
 'crish tucker': ('rush hour', 'rush hour 2')}
 

 I want the inverse dictionary to be 

 {'rush hour': ('jackie chan', 'crish tucker'), 
 'rush hour 2': ('jackie chan', 'crish tucker')}
 

 I already got the function to inverse but it doesn't look like the second dictionary 

 def invert_actor_dict(actor_dict):
 movie_dict = {}
 for key,value in actor_dict.iteritems():

  for actor in value:
   if actor in movie_dict:
    movie_dict[actor].append(key)
   else:
    movie_dict[actor] = (key)
 return movie_dict
 
 Answers (Total-8): #0 Your code has two problems 

 The first problem you have is at these lines: 

 if actor in movie_dict:
 movie_dict[actor].append(key)
else:
 movie_dict[actor] = (key)
 

 When you write movie_dict[actor] = (key) , you are not creating a tuple - the parenthesis are just for precedence. To create a tuple, you would have to add a comma at the end: 

 movie_dict[actor] = (key,)
 

 Anyway, this will not work as well, because tuples are immutable. You should either use a list: 

 if actor in movie_dict:
 movie_dict[actor].append(key)
else:
 movie_dict[actor] = [key] # Square brackets
 

 or create new tuples: 

 if actor in movie_dict:
 movie_dict[actor] = movie_dict[actor] + (key,)
else:
 movie_dict[actor] = (key,)
 

 I strongly suggest you to use the first option. If you really need to use tuples, convert the lists to tuples after the processing. 

 The second problem is that you seem to expect 

 'rush hour 2'
 

 to be equal to 

 'rush hour 2'
 

 as seen in the dictionary: 

 {'jackie chan': 
 ('rush hour', 'rush hour 2'), 
 'crish tucker': 
 ('rush hour', 'rush hour 2')}
 

 But this is not true: 

 &gt;&gt;&gt; 'rush hour 2' == 'rush hour 2'
False
 

 How could you solve it? Well, the simplest solution I devise is to split the string at spaces and then rejoin it with only one space: 

 def invert_actor_dict(actor_dict):
 movie_dict = {}
 for key,value in actor_dict.iteritems():
  for actor in value:
   split_movie_name = key.split()
   # 'rush  hour 2'.split() == ['rush', 'hour', '2']
   movie_name = " ".join(split_movie_name)
   # " ".join(['rush', 'hour', '2']) == 'rush hour 2'
   if actor in movie_dict:
    movie_dict[actor].append(movie_name)
   else:
    movie_dict[actor] = [movie_name]
 return movie_dict
 
 #1 You can easily do this with collections.defaultdict : 

 def invert_dict(d):
 inverted_dict = collections.defaultdict(set)
 for actor, movies in d.iteritems():
  for movie in movies:
   inverted_dict.add(actor)
 return inverted_dict
 
 #2 def invert_actor_dict(actor_dict):
 movie_dict = {}
 for actor,movies in actor_dict.iteritems(): 

  for movie in movies:
   if not movie_dict.has(movie):
    movie_dict[movie]=[]
   movie_dict[movie].append(actor)
 return movie_dict
 
 #3 d = {'jackie chan': ('rush hour', 'rush hour 2'), 'crish tucker': ('rush hour', 'rush hour 2')}
h = dict()

for actor, films in d.items():
 for film in films:
  if not film in h:
   h[film] = list()
  h[film].append(actor)
 
 #4 d = {'rush hour': ('jackie chan', 'crish tucker'), 'rush hour 2': ('jackie chan', 'crish tucker')}

result = {}

for film, names in d.items():
 for name in names:
  if not name in result:
   result[name] = set([film])
  else:
   result[name].add(film)

print result
 

 Result: 

 {'crish tucker': set(['rush hour', 'rush hour 2']), 'jackie chan': set(['rush hour', 'rush hour 2'])}
 
 #5 The only problem you have is you're using (key) to represent a list, which should be [key]. 

 def invert_actor_dict(actor_dict):
 movie_dict = {}
 for key,value in actor_dict.iteritems():

  for actor in value:
   if actor in movie_dict:
    movie_dict[actor].append(key)
   else:
    movie_dict[actor] = (key)
 return movie_dict
 
 #6 There is a very convenient setdefault method in a dict object. With using it, the code simplifies to the following: 

 d = {'rush hour': ('jackie chan', 'crish tucker'), 'rush hour 2': ('jackie chan', 'crish tucker')}

result = {}

for film, names in d.items():
 for name in names:
  result.setdefault(name,set([])).add(film)

print result
 
 #7 A dictionary is by default not not sortable, so you can not sort it. You can look into the structure ordered dictionary if the order matters