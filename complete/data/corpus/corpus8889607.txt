Question (ID-8889607): If an item may not exist in a list, can we still do if-else to check condition? Suppose we have 

 mystr = 'hello.py'
mystr = 'hello'
if not 'py' in mystr.rsplit('.')[1]:
 

 The first case is fine, but the second case results in an "out of range" error. 

 Goal: 

 If .py exists in the string, do nothing. If .py is not part of the filename, do XYZ.
Note : The user input may or may not have a .'extension-type'. 

 Attempt: 

 Either check the length, or convert the list into a string. 

 Any alternative? I am not sure if this is too localized. Just wondering. 

 Thanks. 
 Answers (Total-6): #0 I'd simply write 

 if not mystr.endswith('.py'):
 

 (Assuming, of course, that I've understood your intent.) 
 #1 I would suggest you not overlook the criminally underused partition and rpartition methods. The advantage is that you always get a 3-tuple back, even if the text you're splitting on is not found. 

 partitioned = mystr.rpartition(".")
if partitioned[1] and partitioned[2] == "py":
 # do something
 
 #2 You could use the posixpath module to find the extension of a file name: 

 &gt;&gt;&gt; import posixpath
&gt;&gt;&gt; posixpath.splitext('hello.py')[1]
'.py'
&gt;&gt;&gt; posixpath.splitext('hello')[1]
''
&gt;&gt;&gt; posixpath.splitext('hello.py.txt')[1]
'.txt'
&gt;&gt;&gt; posixpath.splitext('.ssh')[1]
''
 
 #3 Why not utilize str.rfind? 

 mystr = 'hello.py'
index = mystr.rfind('.py')
if index &gt; 0: #found, do something
else: #not found, do something else
 
 #4 Why can't you just check for it? 

 if '.py' in mystr:
 # do foo
else:
 # do bar
 

 But if I am understanding you correctly, this should work better: 

 if '.py' in os.path.splitext(mystr)[0]:
 # do foo
else:
 # do bar
 

 os.path.splitext() splits the filename into the filename and the extension. 
 #5 if ".py" in os.path.splitext(mystr)[-1]:
 # do
 

 os.path.splitext(mystr)[-1] will grab the "last" element in the list.
In cases where there is only one element it will return that one. 

 So this will not throw an OutofRange exception.
Also, os.path.splitext() will always return two objects.