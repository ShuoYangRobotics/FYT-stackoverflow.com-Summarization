Question (ID-8622493): Using python, how can I merge or join two lists so that their values don't overlap? First off, I apologize for my inaccurate vocabulary. I am an absolute ground-zero beginner. Anyways, I am attempting to solve this problem: 
 http://projecteuler.net/problem=1 

 To be brief, I'm trying to write a script that will find the sum of all the multiples of 3 or 5 below 1000. 

 My (extremely basic) approach was with this program: 

 ##Multiples of 3
x = range(3, 1000, 3)

##Multiples of 5
y = range(5, 1000, 5)

a = sum(x)
b = sum(y)
n = a + b

print n
 

 I realized that this was wrong because there are numbers like 15 that are included twice (it's a multiple of both 5 and 3).
So is there a way to fix this or am I approaching this problem from a completely wrong angle?
Or do I need to just study more before I try solving this problem?
I also apologize if this has been explained in a previous post, but I looked around for a bit. 
 Answers (Total-6): #0 You can use a set to eliminate the duplicates: 

 &gt;&gt;&gt; len(x)
333
&gt;&gt;&gt; len(y)
199
&gt;&gt;&gt; s = set(x + y)
&gt;&gt;&gt; len(s)
532
 

 Then you can sum the members of the set instead. 
 #1 It is called inclusion exclusion principle so you can do like 

 ##Multiples of 3
x = range(3, 1000, 3)

##Multiples of 5
y = range(5, 1000, 5)

##multiple of 15 are counted twice
z=range(15,1000,15)


a = sum(x)
b = sum(y)
c = sum(z)
n = a + b -c
print(n)
 

 but beauty is in using generators or list comprehensions 

 a = sum(i for i in range(1000) if i%3 == 0 or i%5 == 0 )
print(a)
 

 Where % is modulo and is remainder in integer devision.
Nice thing about this is that codes reads so fluently and is direct translation of rules and can be read from left to right. 

 Both algorithms run times depends on n in this case is 1000. If n would be for instance 1000000000 you would have to wait for long time to complete. If you apply little mathematics you can find out that 

 sum(a for a in range(a1,a2,n)) 
 

 is actually arithmetic progression and total of this can be calculated in constant time no matter how big n is. http://en.wikipedia.org/wiki/Project_Euler#Example_problem_and_solutions 
 #2 Simple method: 

 sum(set(x+y)) 

 set s have a fair bit of functionality you'll find useful for the PE problems. 

 You could also do it with a simple loop over the entire range pretty easily. 
 #3 You're looking for sets . 

 ##Multiples of 3
x = range(3, 1000, 3)

##Multiples of 5
y = range(5, 1000, 5)

x = list(set(x) - set(y))
 

 Depending on what you're doing, you'll have to change the code. The above removes everything in y from x . It's like lists but you can do arithmetic on the items. 
 #4 To merge sorted sequences you could use heapq.merge : 

 import heapq
print list(heapq.merge(xrange(3, 20, 3), xrange(5, 20, 5)))
# -&gt; [3, 5, 6, 9, 10, 12, 15, 15, 18]
 

 To remove duplicate items you could use unique_justseen recipe from itertools documentation : 

 print list(unique_justseen([3, 5, 6, 9, 10, 12, 15, 15, 18]))
# -&gt; [3, 5, 6, 9, 10, 12, 15, 18]
 

 In this case unique_justseen() could be simplified to: 

 from itertools import groupby, imap
from operator import itemgetter

def unique_justseen(iterable):
 return imap(itemgetter(0), groupby(iterable))
 

 These functions don't require input arguments to be sequences. They accept arbitrary iterables (including infinite) e.g., to generate an infinite sequence of multiples of 3 or 5: 

 import heapq
from itertools import count, takewhile

m3, m5 = count(3, 3), count(5, 5) 
m3_5 = heapq.merge(m3, m5)
uniq_m3_5 = unique_justseen(m3_5) # *all* unique multiples of 3 or 5
 

 To find the solution: 

 print sum(takewhile(lambda x: x &lt; 1000, uniq_m3_5))
# -&gt; 233168
# check that it is correct
print sum(set(range(3, 1000, 3) + range(5, 1000, 5)))
# -&gt; 233168
print sum(x for x in xrange(1000) if x % 3 == 0 or x % 5 == 0)
# -&gt; 233168
print sumk(3, 1000) + sumk(5, 1000) - sumk(15, 1000)
# -&gt; 233168
 

 Where sumk() is: 

 def sumk(k, n):
 m = (n-1)//k
 return k*m*(m+1)//2
 

 The formula is from the Wikipedia link provided by @ralu . 
 #5 I don't know if this is less effecient, but making two sets and doing boolean operations on both to remove duplicates seems redundant since the definition of a set is 

 
 an unordered collection of distinct hashable objects 
 (emphasis added) 
 

 so just add both ranges to one set and let "creating" the set remove the dupes: 

 sum(set(range(3, 1000, 3) + range(5, 1000, 5)))