Question (ID-5636986): How can you run a python function stored in a different file I know how to do this in C, but I'm not sure how to do it in python. I'm trying to make a python program which will read from an external file, then execute a function name which was read from that file. Example: 

 File structure: 

 main.py 
map.py 
Scripts/ 
 script1.py
 

 map.py contains just an array and a function to get the correct array index: 

 map = ["One","script1.function_one","Two","scrip1.function_two"]
def return_mapping(str):
 for i in range(0,len(map)):
 if str in map[i]:
  return map[i+1]
 

 The functions: "function_one()" and "function_two()" are defined in script1.py.
main.py will contain something like this: 

 selection = raw_input("What function would you like to run?")
function_ptr = map.return_mapping(selection)
#This is where I don't know what the correct code is... I want to now execute
#whatever function was returned.
 

 Any suggestions? 
 Answers (Total-6): #0 In your Scripts/ directory, add a blank file called __init__.py 

 Then in your map.py file, do this: 

 from Scripts import script1

map = {"One" : script1.function_one, "Two" : script1.function_two]

def return_mapping(str):
 return map[str]
 
 #1 In map.py, the following is simpler: 

 import Scripts.script1 as script1
map = {"One" : script1.function_one, "Two" : script1.function_two]
def return_mapping(str):
 return map[str]
 

 In main.py: 

 selection = raw_input("What function would you like to run?")
function_ptr = map.return_mapping(selection)
# to call the function: function_ptr(my_args)
 

 edit : 

 As mike said, you have to put an empty file called __init__.py in your Scripts directory 
 #2 You need to use import . This might be what you're looking for: 

 from Scripts.script1 import function_one, function_two
print choices:
print "function_one"
print "function_two"
selection = raw_input("What function would you like to run?")
if selection == "function_one":
 function_one()
elif selection == "function_two":
 function_two()
else:
 print "not a choice"
 

 Edit: Given your additional requirements, consider this: 

 main.py 

 from Scripts.script1 import functions
print choices:
for func in script1.functions:
 print func
selection = raw_input("What function would you like to run?")
script1.functions[selection]()
 

 and in script1.py 

 from collections import defaultdict
def _no_function(*args, *kwargs):
 print "No such function"

functions = defaultdict(_no_function)
def function_one():
 pass

functions['function_one'] = function_one
 

 This solution permits you to call arbitrary functions without using eval as long as they are added to the dictionary in their respective source files. Furthermore, by using a defaultdict you can provide a function when the one requested is not present. Ultimately, import is still what you need. 
 #3 As said before, you should use import . More informations can be found here: Python Documentation 
 #4 The suggestions by Mike Lewis or Simon are probably what you want, but if you really need to call a function whose name as is determined at runtime, you can do this: 

 result = eval(function_ptr + '()')
 

 where function_ptr is a string containing the function name. 
 #5 If you want to be able to use a path to any file, no matter where it is: 

 import imp
import sys

mod = imp.load_source('any_name', 'path_to_your_file')
# this will get and execute your function
get_attr(mod, 'your_function_name')()
# if you want to execute load_source more than once you have to do the following, otherwise the code is not updated:
del sys.modules['any_name']