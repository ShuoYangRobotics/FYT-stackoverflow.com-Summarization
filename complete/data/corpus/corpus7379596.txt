Question (ID-7379596): creepy design in python can somebody help me with the following piece of the code: 

 try:
 #do some things
 myClass.close()
except Exception, error:
 myClass.close()
 raise error
 

 as You see I can't use here finally because in that case I will not know if an error actually occured, and I need to raise this error (raise error) 

 my question is how can I avoid using this two times myClass.close()? thanks in advance for any help 
 Answers (Total-6): #0 You can use finally :) 

 This should do what you want: 

 try:
 #do some things
finally:
 myClass.close()
 
 #1 You can chain try , except and finally since Python 2.5 : 

 try:
 # Do some things...
 pass
except Exception, error:
 # Log the error...
 raise
finally:
 myClass.close()
 
 #2 This is equivalent to your code: 

 try:
 #do some things
finally:
 myClass.close()
 

 First it calls myClass.close() and if there was a error it is raised again. 

 You can also have this to handle specific exceptions: 

 try:
 #do some things
except Exception, error:
 raise # re-raise the original exception
finally:
 myClass.close()
 
 #3 Next to a finally (that would work) you could also use a context manager that calls your myClass.close() method on exit. 
 #4 Nest it. 

 try:
 try:
 ...
 except ...:
 raise error
finally:
 myClass.close()
 
 #5 Regardless this will not work.
If you already raised an exception/error the first time you invoked myClass.close(), calling it again will be of no help.
The error handling keywords are for implementing fallbacks, reporting and routing of the error-flow. 

 See here for error handling:
 Python Error Handling with try/finally