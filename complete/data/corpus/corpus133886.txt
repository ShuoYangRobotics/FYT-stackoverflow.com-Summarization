Question (ID-133886): Simple regex-based lexer in Python Lexical analyzers are quite easy to write when you have regexes. Today I wanted to write a simple general analyzer in Python, and came up with: 

 import re
import sys

class Token(object):
 """ A simple Token structure.
  Contains the token type, value and position. 
 """
 def __init__(self, type, val, pos):
  self.type = type
  self.val = val
  self.pos = pos

 def __str__(self):
  return '%s(%s) at %s' % (self.type, self.val, self.pos)


class LexerError(Exception):
 """ Lexer error exception.

  pos:
   Position in the input line where the error occurred.
 """
 def __init__(self, pos):
  self.pos = pos


class Lexer(object):
 """ A simple regex-based lexer/tokenizer.

  See below for an example of usage.
 """
 def __init__(self, rules, skip_whitespace=True):
  """ Create a lexer.

   rules:
    A list of rules. Each rule is a `regex, type`
    pair, where `regex` is the regular expression used
    to recognize the token and `type` is the type
    of the token to return when it's recognized.

   skip_whitespace:
    If True, whitespace (\s+) will be skipped and not
    reported by the lexer. Otherwise, you have to 
    specify your rules for whitespace, or it will be
    flagged as an error.
  """
  self.rules = []

  for regex, type in rules:
   self.rules.append((re.compile(regex), type))

  self.skip_whitespace = skip_whitespace
  self.re_ws_skip = re.compile('\S')

 def input(self, buf):
  """ Initialize the lexer with a buffer as input.
  """
  self.buf = buf
  self.pos = 0

 def token(self):
  """ Return the next token (a Token object) found in the 
   input buffer. None is returned if the end of the 
   buffer was reached. 
   In case of a lexing error (the current chunk of the
   buffer matches no rule), a LexerError is raised with
   the position of the error.
  """
  if self.pos &gt;= len(self.buf):
   return None
  else:
   if self.skip_whitespace:
    m = self.re_ws_skip.search(self.buf[self.pos:])

    if m:
     self.pos += m.start()
    else:
     return None

   for token_regex, token_type in self.rules:
    m = token_regex.match(self.buf[self.pos:])

    if m:
     value = self.buf[self.pos + m.start():self.pos + m.end()]
     tok = Token(token_type, value, self.pos)
     self.pos += m.end()
     return tok

   # if we're here, no rule matched
   raise LexerError(self.pos)

 def tokens(self):
  """ Returns an iterator to the tokens found in the buffer.
  """
  while 1:
   tok = self.token()
   if tok is None: break
   yield tok


if __name__ == '__main__':
 rules = [
  ('\d+',    'NUMBER'),
  ('[a-zA-Z_]\w+', 'IDENTIFIER'),
  ('\+',    'PLUS'),
  ('\-',    'MINUS'),
  ('\*',    'MULTIPLY'),
  ('\/',    'DIVIDE'),
  ('\(',    'LP'),
  ('\)',    'RP'),
  ('=',    'EQUALS'),
 ]

 lx = Lexer(rules, skip_whitespace=True)
 lx.input('erw = _abc + 12*(R4-623902) ')

 try:
  for tok in lx.tokens():
   print tok
 except LexerError, err:
  print 'LexerError at position', err.pos
 

 It works just fine, but I'm a bit worried that it's too inefficient. Are there any regex tricks that will allow me to write it in a more efficient / elegant way ? 

 Specifically, is there a way to avoid looping over all the regex rules linearly to find one that fits ? 

 Thanks in advance 
 Answers (Total-6): #0 You can merge all your regexes into one using the "|" operator and let the regex library do the work of discerning between tokens. Some care should be taken to ensure the preference of tokens (for example to avoid matching a keyword as an identifier). 
 #1 It's possible that combining the token regexes will work, but you'd have to benchmark it. Something like: 

 x = re.compile('(?P&lt;NUMBER&gt;[0-9]+)|(?P&lt;VAR&gt;[a-z]+)')
a = x.match('9999').groupdict() # =&gt; {'VAR': None, 'NUMBER': '9999'}
if a:
 token = [a for a in a.items() if a[1] != None][0]
 

 The filter is where you'll have to do some benchmarking... 

 Update: I tested this, and it seems as though if you combine all the tokens as stated and write a function like: 

 def find_token(lst):
 for tok in lst:
  if tok[1] != None: return tok
 raise Exception
 

 You'll get roughly the same speed (maybe a teensy faster) for this. I believe the speedup must be in the number of calls to match, but the loop for token discrimination is still there, which of course kills it. 
 #2 re.match is anchored. You can give it a position argument: 

 pos = 0
end = len(text)
while pos &lt; end:
 match = regexp.match(text, pos)
 # do something with your match
 pos = match.end()
 

 Have a look for pygments which ships a shitload of lexers for syntax highlighting purposes with different implementations, most based on regular expressions. 
 #3 This isn't exactly a direct answer to your question, but you might want to look at ANTLR . According to this document the python code generation target should be up to date. 

 As to your regexes, there are really two ways to go about speeding it up if you're sticking to regexes. The first would be to order your regexes in the order of the probability of finding them in a default text. You could figure adding a simple profiler to the code that collected token counts for each token type and running the lexer on a body of work. The other solution would be to bucket sort your regexes (since your key space, being a character, is relatively small) and then use a array or dictionary to perform the needed regexes after performing a single discrimination on the first character. 

 However, I think that if you're going to go this route, you should really try something like ANTLR which will be easier to maintain, faster, and less likely to have bugs. 
 #4 these are not so simple, but may be worth looking at... 

 python module pyparsing (pyparsing.wikispaces.com) allows specifying grammar - then using it to parse text. Douglas, thanks for the post about ANTLR I haven't heard of it. Also there's PLY - python2 and python3 compatible implementation of lex/yacc. 

 I've written an ad-hoc regex-based parser myself first, but later realized that I might benefit from using some mature parsing tool and learning concepts of context independent grammar, etc. 

 The advantage of using grammar for parsing is that you can easily modify the rules and formalize quite complex syntax for whatever you are parsing. 
 #5 I suggest using the re.Scanner class, it's not documented in the standard library, but it's well worth using. Here's an example: 

 import re

scanner = re.Scanner([
 (r"-?[0-9]+\.[0-9]+([eE]-?[0-9]+)?", lambda scanner, token: float(token)),
 (r"-?[0-9]+", lambda scanner, token: int(token)),
 (r" +", lambda scanner, token: None),
])

&gt;&gt;&gt; scanner.scan("0 -1 4.5 7.8e3")[0]
[0, -1, 4.5, 7800.0]