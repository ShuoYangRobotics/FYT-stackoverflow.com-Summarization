Question (ID-2168522): python string split I am trying to recognise user typed strings such as "exit" or "add number" using this: 

 command, data = input('&gt;').split(" ", 1)
 

 It works for two word input, but not one word of input ("need more than 1 value to unpack"). 

 What is the best way of accepting both one/two word inputs? 
 Answers (Total-6): #0 Unless you're using Python 3 you shouldn't be using the input -function for user input. Use the raw_input -function instead. 

 As for the actual question; retrieve the result of the split as a list. 

 The first item in the list will be the command, and the optional following items will be the "arguments". 
 #1 This is what partition is for: 

 command, _, data = raw_input('&gt;').partition(" ")
 

 If only one word was specified, data will be assigned an empty string. 
 #2 I am certain that someone is going to come up with a "Pythonic" solution, but what ever happened to just accepting it as a list and checking it afterward? 

 command_data = raw_input('&gt;').split(" ", 1)
if len(command_data) &gt; 1:
 do some brilliant stuff next
 

 Sorry, I think the C++ side of my brain is getting moody :) 

 Edit: Maybe str.partition is what you're looking for. At least you're guaranteed a 3-tuple to unpack. Mind you if you ever add a second argument to the command you'll have to find a new solution. 
 #3 The best way is to build a parser, but if you just want something to work quickly you could just have a list of the commands you want to allow, such as: 

 commands = ['foo', 'bar', 'exit', 'hello world', 'add number']
 

 Then for each command check if your input satisfies s.startswith(command) . If so, you can do the appropriate thing for that command. 
 #4 line = raw_input('&gt;').split(" ", 1)
command = line[0]
data = line[1] if len(line) &gt; 1 else ""
 

 Make sure you use raw_input if you don't want your data being evaluated as a Python expression. 
 #5 command, data = (input('&gt;') + ' ').split(" ", 1)