Question (ID-2156027): What questions should every good Python developer be able to answer? What questions do you think should a good Python programmer be able to respond to? 

 PS: I have seen this question based on other languages but not Python! 
 Answers (Total-15): #0 Why should you refer to "names" and "binding" in Python instead of "variables" and "assignment"? 
 #1 
 how do you sort a list of dicts by the value each has for key 'foo' ? 
 how do you get the highest 10 integers out of a list of a million integers? 
 how do you sort a list of strings in case-insensitive alphabetical order? 
 given a list of ints, how do you make a string with their str forms separated by spaces? 
 
 #2 What is duck typing ? 
 #3 How can you use a mutable object as a default value to a function? 

 And the closely related... 

 What are possible consequences of doing this? 

 def append_to( b, c=[] ):
 c.append( b )
 
 #4 Some fancier language features: 

 
 What are generators, iterators? (bonus points for views ) 
 What are "new-style" classes
and how do they differ from old-style
classes? 
 What are packages, how do you make one? 
 What are decorators? 
 

 I'd say anyone with some experience has used one of these: 

 
 Where can you find a deque, priority queue, 
binheap implementation? 
 Have you worked with Twisted, SciPy, 
NumPy, GTK/Qt/Wx? 
 What is PyPi, what is easy_install ? 
 
 #5 I have a list of lists: 

 l=[[0]]*10
print(l)
# [[0], [0], [0], [0], [0], [0], [0], [0], [0], [0]]
 

 Why is it that when I change one element, all the elements change: 

 l[0][0]=1
print(l)
# [[1], [1], [1], [1], [1], [1], [1], [1], [1], [1]]
 
 #6 What's a Python decorator and how is it used? 
 #7 Why does this happen? Why isn't the answer -1? 

 &gt;&gt;&gt; 3.1-4.1
-0.99999999999999956
 
 #8 What is the difference between str and unicode, and which would you use in what circumstances? 
 #9 What is list comprehension? What is 'lambda' used for? 
 #10 What is going to print : 

 def paradox():
 try:
  raise Exception("Here")
 except:
  return "There"
 finally:
  return "Or maybe there"

 return "Or it that here?"

print paradox()
 

 I love this one, because even the best programmers idle before answering. 
 #11 This is the most often heard question (at least to me) 

 Why would I use python if I already know xxxx (insert any language here) ? 

 I know, not as impressive as the other answers.... 
 #12 What kinds of application would Python not be good for? 
 #13 
 What do you get when you do "hello " * n where n is a number. 
 What does 10 ** 2 do? 
 How do you unpack a tuple? 
 
 #14 Why is mutability and immutability important? When ought you to care? (Note: The author of this question is still quite fuzzy on these.) 

 While much is "batteries included," what are the three most esoteric add-ons to Python you have used? 

 What is your general strategy for researching and performing Windows functions in Python? 

 Tell me about your favorite Python idiom. How did you discover it? How did you refine it? 

 What are some of the shortcomings in the development of Python and the surrounding ecosystem?