Question (ID-1922849): Boolean Query if: 

 x = 0
b = x==0
 

 and i print be it would print 'true' 

 but if i did: 

 
 x = 0 
 b = x ==3 
 

 and i printed be it would be false.
In stead of it printing false how would i take the boolean value 'b' to print what text i wanted? 

 let me explain further: 

 bool = all(n &gt; 0 for n in list) 

if bool != 'True':
 print 'a value is not greater than zero'
 

 But it prints nothing? 
 Answers (Total-8): #0 Something like this you mean? 

 x = 0
if x != 3:
 print "x does not equal 3"
 
 #1 I think perhaps the following will help alleviate some of your confusion... 

 &gt;&gt;&gt; 0==0
True
&gt;&gt;&gt; 'True'
'True'
&gt;&gt;&gt; (0==0) == 'True'
False
&gt;&gt;&gt; (0==0) == True
True
&gt;&gt;&gt;
 
 #2 An if statement as other answers suggest is a possibility (and you could add an else clause to print something specific in each case). More direct is an if/else operator : 

 print('equality' if b else 'diversity')
 

 You could also use indexing, since False has the int value 0 and True the int value 1: 

 print(['different', 'the same'][b])
 

 but I find that a bit less readable than the if variants. 
 #3 Remove the quotes around True: 

 bool = all(n &gt; 0 for n in list) 

if bool != True:
 print 'a value is not greater than zero'
 

 or, you can also check for False: 

 bool = all(n &gt; 0 for n in list) 

if bool == False:
 print 'a value is not greater than zero'
 

 There are several other "shortcut" ways of writing it, but since you're a beginner let's not confuse the subject more than necessary. 
 #4 &gt;&gt;&gt; x = 0
&gt;&gt;&gt; if not x == 3: print 'x does not equal 3'
x does not equal 3
 

 lte me explain further: 

 &gt;&gt;&gt; list = [-1, 1, 2, 3]
&gt;&gt;&gt; if not all(n &gt; 0 for n in list): print 'a value is not greater than zero'
a value is not greater than zero

# =&gt; or shorter ...
&gt;&gt;&gt; if min(list) &lt; 0: print 'a value is not greater than zero'
a value is not greater than zero
 

 note that list is a builtin and shouldn't be used as a variable name. 

 &gt;&gt;&gt; list
&lt;type 'list'&gt;
&gt;&gt;&gt; list = [1, 2, "value not greater than 0"]
&gt;&gt;&gt; list
[1, 2, "value not greater than 0"]
&gt;&gt;&gt; del list
&gt;&gt;&gt; list
&lt;type 'list'&gt;
...
 
 #5 a = lambda b :("not true","true")[b == 3]
print a(3)
 

 will do it for you if you want to put it in a lambda 
 #6 You will need to do the printing yourself, as everyone suggested here. 

 It's worthy to note that some languages (e.g. Scala, Ruby, Groovy) have language features that enable you to write: 

 x should be(3)
 

 And that will report: 

 0 should be 3 but is not.
 

 In Groovy, with Spock testing framework , you can write: 

 def "my test":
 when: x = 0
 expect: x == 3
 

 And that would output: 

 Condition not satisfied: 

 x == 3
| | |
0 | 3
 false
 

 I don't think this possibly cleanly in python though. 
 #7 &gt;&gt;&gt; 'True' is not True
True
 

 'True' is a string 

 True is a boolean 

 They have nothing to do with each other, except coincidentally. The string value happens to have the same letters as the boolean literal. But that's just a coincidence.