Question (ID-3875596): equivalent of Python's "with" in Ruby In Python, the with statement is used to make sure that clean-up code always gets called, regardless of exceptions being thrown or function calls returning. For example: 

 with open("temp.txt", "w") as f:
 f.write("hi")
 raise ValueError("spitespite")
 

 Here, the file is closed, even though an exception was raised. A better explanation is here . 

 Is there an equivalent for this construct in Ruby? Or can you code one up, since Ruby has continuations? 
 Answers (Total-6): #0 Ruby has syntactically lightweight support for literal anonymous procedures (called blocks in Ruby). Therefore, it doesn't need a new language feature for this. 

 (In general, it is a bad sign, if you need to add language features. You should be able to implement everything in a library, otherwise it is a sign of bad language design.) 

 So, what you normally do, is to write a method which takes a block of code, allocates the resource, executes the block of code in the context of that resource and then closes the resource. 

 Something like this: 

 def with(klass, *args)
 yield r = klass.open(*args)
ensure
 r.close
end
 

 You could use it like this: 

 with File, 'temp.txt', 'w' do |f|
 f.write 'hi'
 raise 'spitespite'
end
 

 However, this is a very procedural way to do this. Ruby is an object-oriented language, which means that the responsibility of properly executing a block of code in the context of a File should belong to the File class: 

 File.open 'temp.txt', 'w' do |f|
 f.write 'hi'
 raise 'spitespite'
end
 

 This could be implemented something like this: 

 def File.open(*args)
 f = new(*args)
 return f unless block_given?
 yield f
ensure
 f.close if block_given?
end
 

 This is a general pattern that is implemented by lots of classes in the Ruby core library, standard libraries and third-party libraries. 

 

 A more close correspondence to the generic Python context manager protocol would be: 

 def with(ctx)
 yield ctx.setup
ensure
 ctx.teardown
end

class File
 def setup; self end
 alias_method :teardown, :close
end

with File.open('temp.txt', 'w') do |f|
 f.write 'hi'
 raise 'spitespite'
end
 

 Note that this is virtually indistinguishable from the Python example, but it didn't require the addition of new syntax to the language. 
 #1 The equivalent in Ruby would be to pass a block to the File.open method. 

 File.open(...) do |file|
 #do stuff with file
end #file is closed
 

 This is the idiom that Ruby uses and one that you should get comfortable with. 
 #2 You could use Block Arguments to do this in Ruby: 

 class Object 
 def with(obj) 
  obj.__enter__ 
  yield 
  obj.__exit__ 
 end 
end
 

 Now, you could add __enter__ and __exit__ methods to another class and use it like this: 

 with GetSomeObject("somefile.text") do |foo| 
 do_something_with(foo)
end 
 
 #3 You could always use a try..catch..finally block, where the finally section contains code to clean up. 

 Edit: sorry, misspoke: you'd want begin..rescue..ensure . 
 #4 I believe you are looking for ensure . 
 #5 I'll just add some more explanations for others; credit should go to them. 

 Indeed, in Ruby, clean-up code is as others said, in ensure clause; but wrapping things in blocks is ubiquitous in Ruby, and this is how it is done most efficiently and most in spirit of Ruby. When translating, don't translate directly word-for-word, you will get some very strange sentences. Similarly, don't expect everything from Python to have one-to-one correspondence to Ruby. 

 From the link you posted: 

 class controlled_execution:
 def __enter__(self):
  set things up
  return thing
 def __exit__(self, type, value, traceback):
  tear things down

with controlled_execution() as thing:
  some code
 

 Ruby way, something like this (man, I'm probably doing this all wrong :D ): 

 def controlled_executor
 begin
 do_setup
 yield
 ensure
 do_cleanup
 end
end

controlled_executor do ...
 some_code
end
 

 Obviously, you can add arguments to both controlled executor (to be called in a usual fashion), and to yield (in which case you need to add arguments to the block as well). Thus, to implement what you quoted above, 

 class File
 def my_open(file, mode="r")
 handle = open(file, mode)
 begin
  yield handle
 ensure
  handle.close
 end
 end
end

File.my_open("temp.txt", "w") do |f|
 f.write("hi")
 raise Exception.new("spitesprite")
end