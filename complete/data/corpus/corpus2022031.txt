Question (ID-2022031): Python append() vs. + operator on lists, why do these give different results? Why do these two operations give different results? 

 &gt;&gt;&gt; c = [1, 2, 3]
&gt;&gt;&gt; c
[1, 2, 3]
&gt;&gt;&gt; c += c
&gt;&gt;&gt; c
[1, 2, 3, 1, 2, 3]
&gt;&gt;&gt; c = [1, 2, 3]
&gt;&gt;&gt; c.append(c)
&gt;&gt;&gt; c
[1, 2, 3, [...]]
&gt;&gt;&gt; 
 

 In the last case there's actually infinite recursion. c[-1] and c are the same. Why is it different with the + operation? 
 Answers (Total-6): #0 To explain "why": 

 The + operation adds the array elements to the original array. The array.append operation inserts the array (or any object) into the end of the original array, which results in a reference to self in that spot (hence the infinite recursion). 

 The difference here is that the + operation acts specific when you add an array (it's overloaded like others, see this chapter on sequences) by concatenating the element. The append-method however does literally what you ask: append the object on the right-hand side that you give it (the array or any other object), instead of taking its elements. 

 An alternative 

 Use extend() if you want to use a function that acts similar to the + operator (as others have shown here as well). It's not wise to do the opposite: to try to mimic append with the + operator for lists (see my earlier link on why). 

 Little history 

 For fun, a little history: the birth of the array module in Python in February 1993. it might surprise you, but arrays were added way after sequences and lists came into existence. 
 #1 append is appending an element to a list. if you want to extend the list with the new list you need to use extend . 

 &gt;&gt;&gt; c = [1, 2, 3]
&gt;&gt;&gt; c.extend(c)
&gt;&gt;&gt; c
[1, 2, 3, 1, 2, 3]
 
 #2 Python lists are heterogeneous that is the elements in the same list can be any type of object. The expression: c.append(c) appends the object c what ever it may be to the list. In the case it makes the list itself a member of the list. 

 The expression c += c adds two lists together and assigns the result to the variable c . The overloaded + operator is defined on lists to create a new list whose contents are the elements in the first list and the elements in the second list. 

 So these are really just different expressions used to do different things by design. 
 #3 you should use extend() 

 &gt;&gt;&gt; c=[1,2,3]
&gt;&gt;&gt; c.extend(c)
&gt;&gt;&gt; c
[1, 2, 3, 1, 2, 3]
 

 other info: http://stackoverflow.com/questions/252703/python-append-vs-extend 
 #4 The method you're looking for is extend() . From the Python documentation : 

 list.append(x)
 Add an item to the end of the list; equivalent to a[len(a):] = [x].

list.extend(L)
 Extend the list by appending all the items in the given list; equivalent to a[len(a):] = L.

list.insert(i, x)
 Insert an item at a given position. The first argument is the index of the element before which to insert, so a.insert(0, x) inserts at the front of the list, and a.insert(len(a), x) is equivalent to a.append(x).
 
 #5 See the documentation : 

 
 list.append(x) 
 
 
 Add an item to the end of the list; equivalent to a[len(a):] = [x]. 
 
 
 list.extend(L)
 - Extend the list by appending all the items in the given list;
 equivalent to a[len(a):] = L. 
 

 c.append(c) "appends" c to itself as an element . Since a list is a reference type, this creates a recursive data structure. 

 c += c is equivalent to extend(c) , which appends the elements of c to c.