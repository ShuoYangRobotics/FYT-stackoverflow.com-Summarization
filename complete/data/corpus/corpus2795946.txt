Question (ID-2795946): getting Ceil() of Decimal in python? Is there a way to get the ceil of a high precision Decimal in python? 

 &gt;&gt;&gt; import decimal;
&gt;&gt;&gt; decimal.Decimal(800000000000000000001)/100000000000000000000
Decimal('8.00000000000000000001')
&gt;&gt;&gt; math.ceil(decimal.Decimal(800000000000000000001)/100000000000000000000)
8.0
 

 math rounds the value and returns non precise value 
 Answers (Total-6): #0 x = decimal.Decimal('8.00000000000000000000001')
with decimal.localcontext() as ctx:
 ctx.prec=100000000000000000
 ctx.rounding=decimal.ROUND_CEILING
 y = x.to_integral_exact()
 
 #1 The most direct way to take the ceiling of a Decimal instance x is to use x.to_integral_exact(rounding=ROUND_CEILING) . There's no need to mess with the context here. Note that this sets the Inexact and Rounded flags where appropriate; if you don't want the flags touched, use x.to_integral_value(rounding=ROUND_CEILING) instead. Example: 

 &gt;&gt;&gt; from decimal import Decimal, ROUND_CEILING
&gt;&gt;&gt; x = Decimal('-123.456')
&gt;&gt;&gt; x.to_integral_exact(rounding=ROUND_CEILING)
Decimal('-123')
 

 Unlike most of the Decimal methods, the to_integral_exact and to_integral_value methods aren't affected by the precision of the current context, so you don't have to worry about changing precision: 

 &gt;&gt;&gt; from decimal import getcontext
&gt;&gt;&gt; getcontext().prec = 2
&gt;&gt;&gt; x.to_integral_exact(rounding=ROUND_CEILING)
Decimal('-123')
 

 By the way, in Python 3.x, math.ceil works exactly as you want it to, except that it returns an int rather than a Decimal instance. 
 #2 You can do this using the precision and rounding mode option of the Context constructor. 

 ctx = decimal.Context(prec=1, rounding=decimal.ROUND_CEILING)
ctx.divide(decimal.Decimal(800000000000000000001), decimal.Decimal(100000000000000000000))
 

 EDIT: You should consider changing the accepted answer.. Although the prec can be increased as needed, to_integral_exact is a simpler solution. 
 #3 &gt;&gt;&gt; decimal.Context(rounding=decimal.ROUND_CEILING).quantize(
... decimal.Decimal(800000000000000000001)/100000000000000000000, 0)
Decimal('9')
 
 #4 def decimal_ceil(x):
 int_x = int(x)
 if x - int_x == 0:
  return int_x
 return int_x + 1
 
 #5 I'm sure there are library functions to do this (as Ignacio Vazquez-Abrams points out), but since you haven't accepted any answer, I got the impression that you wanted to see how it's done - your own version of ceil. So here is one possible solution: 

 def ceil(d):
 return [eval("int(d) + [0,1][int(bool(d-int(d)))]"), eval("int(d)")][int(d&lt;0)]
 

 Hope this helps