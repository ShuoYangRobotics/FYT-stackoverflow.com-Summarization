Question (ID-5937629): String to dictionary I am trying to convert a string to dictionary. Example: 

 Milk, Cheese, Bottle
 

 The program will convert it to dictionary. 

 {"Milk":"NULL", "Cheese":"NULL", "Bottle":"NULL"}
 

 How do I do it? 
 Answers (Total-6): #0 &gt;&gt;&gt; string = 'Milk, Cheese, Bottle'
&gt;&gt;&gt; dict((key, None) for key in string.split(', '))
{'Cheese': None, 'Milk': None, 'Bottle': None}
 
 #1 &gt;&gt;&gt; s = "Milk, Cheese, Bottle"
&gt;&gt;&gt; d = dict.fromkeys(s.split(', '),"NULL")
&gt;&gt;&gt; d
{'Cheese': 'NULL', 'Milk': 'NULL', 'Bottle': 'NULL'}
 
 #2 dict.fromkeys((k.strip() for k in "Milk, Cheese, Bottle".split(',')), 'NULL')
 
 #3 s = 'Milk, Cheese'
d = { }
for s in s.split(', '):
 d[s] = 'NULL'
 

 You can also use dictionary comprehensions in the latest Python versions: 

 s = 'Milk, Cheese'
d = {key:'NULL' for key in s.split(', ')}
 
 #4  &gt;&gt;&gt; from collections import defaultdict:
 &gt;&gt;&gt; s = "Milk, Cheese, Bottle"
 &gt;&gt;&gt; j = s.split(',')
 &gt;&gt;&gt; d = defaultdict()
 &gt;&gt;&gt; for k in j:
  d[k]= 'NULL'
 &gt;&gt;&gt; dict(d)
 
 #5 This is essentially the same solution as Zaur Nasibov's, but using list comprehension to run the for loop in fewer lines 

 s = "Milk, Cheese, Bottle"
d = dict((i, None) for i in [i.strip() for i in s.split(',')])

&gt;&gt;&gt; print d
{'Cheese': None, 'Milk': None, 'Bottle': None}
 

 Hope this helps