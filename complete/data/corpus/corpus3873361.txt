Question (ID-3873361): Finding multiple occurrences of a string within a string in Python How do I find multiple occurrences of a string within a string in Python? Consider this: 

 &gt;&gt;&gt; text = "Allowed Hello Hollow"
&gt;&gt;&gt; text.find("ll")
1
&gt;&gt;&gt; 
 

 So the first occurrence of ll is at 1 as expected. How do I find the next occurrence of it? 

 Same question is valid for a list. Consider: 

 &gt;&gt;&gt; x = ['ll', 'ok', 'll']
 

 How do I find all the ll with their indexes? 
 Answers (Total-6): #0 &gt;&gt;&gt; import re
&gt;&gt;&gt; text = "Allowed Hello Hollow"
&gt;&gt;&gt; for m in re.finditer( 'll', text ):
...  print( 'll found', m.start(), m.end() )

ll found 1 3
ll found 10 12
ll found 16 18
 

 Alternatively, if you don't want the overhead of RegularExpressions: 

 &gt;&gt;&gt; text = "Allowed Hello Hollow"
&gt;&gt;&gt; index = 0
&gt;&gt;&gt; while index &lt; len( text ):
...  index = text.find( 'll', index )
...  if index == -1:
...   break
...  print( 'll found at', index )
...  index += 2 # +2 because len('ll') == 2

ll found at 1
ll found at 10
ll found at 16
 

 This works also for lists. 
 #1 FWIW, here are a couple of non-RE alternatives that I think are neater than poke's solution . 

 The first uses str.index and checks for ValueError : 

 def findall(sub, string):
 """
 &gt;&gt;&gt; text = "Allowed Hello Hollow"
 &gt;&gt;&gt; tuple(findall('ll', text))
 (1, 10, 16)
 """
 index = 0 - len(sub)
 try:
  while True:
   index = string.index(sub, index + len(sub))
   yield index
 except ValueError:
  pass
 

 The second tests uses str.find and checks for the sentinel of -1 by using iter : 

 def findall_iter(sub, string):
 """
 &gt;&gt;&gt; text = "Allowed Hello Hollow"
 &gt;&gt;&gt; tuple(findall_iter('ll', text))
 (1, 10, 16)
 """
 def next_index(length):
  index = 0 - length
  while True:
   index = string.find(sub, index + length)
   yield index
 return iter(next_index(len(sub)).next, -1)
 

 To apply any of these functions to a list, tuple or other iterable of strings, you can use a higher-level function —one that takes a function as one of its arguments— like this one: 

 def findall_each(findall, sub, strings):
 """
 &gt;&gt;&gt; texts = ("fail", "dolly the llama", "Hello", "Hollow", "not ok")
 &gt;&gt;&gt; list(findall_each(findall, 'll', texts))
 [(), (2, 10), (2,), (2,), ()]
 &gt;&gt;&gt; texts = ("parallellized", "illegally", "dillydallying", "hillbillies")
 &gt;&gt;&gt; list(findall_each(findall_iter, 'll', texts))
 [(4, 7), (1, 6), (2, 7), (2, 6)]
 """
 return (tuple(findall(sub, string)) for string in strings)
 
 #2 For your list example: 

 In [1]: x = ['ll','ok','ll']

In [2]: for idx, value in enumerate(x):
 ...:  if value == 'll':
 ...:   print idx, value  
0 ll
2 ll
 

 If you wanted all the items in a list that contained 'll', you could also do that. 

 In [3]: x = ['Allowed','Hello','World','Hollow']

In [4]: for idx, value in enumerate(x):
 ...:  if 'll' in value:
 ...:   print idx, value
 ...:   
 ...:   
0 Allowed
1 Hello
3 Hollow
 
 #3 &gt;&gt;&gt; for n,c in enumerate(text):
... try:
...  if c+text[n+1] == "ll": print n
... except: pass
...
1
10
16
 
 #4 For the list example, use a comprehension: 

 &gt;&gt;&gt; l = ['ll', 'xx', 'll']
&gt;&gt;&gt; print [n for (n, e) in enumerate(l) if e == 'll']
[0, 2]
 

 Similarly for strings: 

 &gt;&gt;&gt; text = "Allowed Hello Hollow"
&gt;&gt;&gt; print [n for n in xrange(len(text)) if text.find('ll', n) == n]
[1, 10, 16]
 

 this will list adjacent runs of "ll', which may or may not be what you want: 

 &gt;&gt;&gt; text = 'Alllowed Hello Holllow'
&gt;&gt;&gt; print [n for n in xrange(len(text)) if text.find('ll', n) == n]
[1, 2, 11, 17, 18]
 
 #5 I think what you are looking for is string.count 

 "Allowed Hello Hollow".count('ll')
&gt;&gt;&gt; 3
 

 Hope this helps