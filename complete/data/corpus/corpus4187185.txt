Question (ID-4187185): How can I check if my python object is a number? Pretty simple question, I think. In Java the numeric types all descend from Number so I would use 

 (x instanceof Number).
 

 There must be python equivalent but I'm having trouble finding it. 

 Thanks, 

 Neal 
 Answers (Total-7): #0 In mor recent Python version (2.6+; in older versions you're pretty much limited to checking for a few hardcoded types), the correct way is 

 &gt;&gt;&gt; import numbers
&gt;&gt;&gt; import decimal
&gt;&gt;&gt; [isinstance(x, numbers.Number) for x in (0, 0.0, 0j, decimal.Decimal(0))]
[True, True, True, True]
 

 This uses ABCs and will work for all build-in number-like classes, and also for all third-party classes if they are worth their salt (registered as subclasses of the Number ABC). However, in many cases you shouldn't worry about checking typed manually - Python is duck-typed and mixing somewhat compatible types usually works, yet it will barf an error message when some operation doesn't make sense ( 4 - "1" ), so manually checking this is rarely really needed. It's just bonus, you can add it when finishing this module to avoid pestering others with implementation details. 
 #1 That's not really how python works. Just use it like you would a number, and if someone passes you something that's not a number, fail. It's the programmer's responsibility to pass in the correct types. 
 #2 I think this would work: 

 isinstance(x, (int, long, float, complex)) 
 #3 Sure you can use isinstance , but be aware that this is not how Python works. Python is a duck typed language. You should not explicitly check your types. A TypeError will be raised if the incorrect type was passed. 

 So just assume it is an int . Don't bother checking. 
 #4 Use python's isinstance function: 

 &gt;&gt;&gt; a =2
&gt;&gt;&gt; isinstance(a,int)
True
 
 #5 isinstance(1, int) # works for ints. 

 not sure about all different types of numbers in one single test. 
 #6 Use Number from the numbers module to test isinstance(n, Number) (available since 2.6). 

 &gt;&gt;&gt; from numbers import Number
... from decimal import Decimal
... from fractions import Fraction
... for n in [2, 2.0, Decimal('2.0'), complex(2,0), Fraction(2,1), '2']:
...  print '%15s %s' % (n.__repr__(), isinstance(n, Number))
    2 True
   2.0 True
 Decimal('2.0') True
   (2+0j) True
 Fraction(2, 1) True
   '2' False
 

 This is, of course, contrary to duck typing. If you are more concerned about how an object acts rather than what it is, perform your operations as if you have a number and use exceptions to tell you otherwise.