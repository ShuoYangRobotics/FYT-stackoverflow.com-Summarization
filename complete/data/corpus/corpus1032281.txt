Question (ID-1032281): Python: finding keys with unique values in a dictionary? I receive a dictionary as input, and want to return a list of keys for which the dictionary values are unique in the scope of that dictionary. 

 I will clarify with an example. Say my input is dictionary a, constructed as follows: 

 a = dict()
a['cat'] =  1
a['fish'] =  1
a['dog'] =  2 # &lt;-- unique
a['bat'] =  3
a['aardvark'] = 3
a['snake'] = 4 # &lt;-- unique
a['wallaby'] = 5
a['badger'] = 5
 

 The result I expect is ['dog', 'snake'] . 

 There are obvious brute force ways to achieve this, however I wondered if there's a neat Pythonian way to get the job done. 
 Answers (Total-9): #0 I think efficient way if dict is too large would be 

 countMap = {}
for v in a.itervalues():
 countMap[v] = countMap.get(v,0) + 1
uni = [ k for k, v in a.iteritems() if countMap[v] == 1]
 
 #1 Note that this actually is a bruteforce: 

 l = a.values()
b = [x for x in a if l.count(a[x]) == 1]
 
 #2 &gt;&gt;&gt; b = []
&gt;&gt;&gt; import collections
&gt;&gt;&gt; bag = collections.defaultdict(lambda: 0)
&gt;&gt;&gt; for v in a.itervalues():
...  bag[v] += 1
...
&gt;&gt;&gt; b = [k for (k, v) in a.iteritems() if bag[v] == 1]
&gt;&gt;&gt; b.sort() # optional
&gt;&gt;&gt; print b
['dog', 'snake']
&gt;&gt;&gt;
 
 #3 Here is a solution that only requires traversing the dict once: 

 def unique_values(d):
 seen = {} # dict (value, key)
 result = set() # keys with unique values
 for k,v in d.iteritems():
  if v in seen:
   result.discard(seen[v])
  else:
   seen[v] = k
   result.add(k)
 return list(result)
 
 #4 A little more verbose, but does need only one pass over a: 

 revDict = {}
for k, v in a.iteritems():
 if v in revDict:
  revDict[v] = None
 else:
  revDict[v] = k

[ x for x in revDict.itervalues() if x != None ]
 

 ( I hope it works, since I can't test it here ) 
 #5 What about subclassing? 

 class UniqueValuesDict(dict):

 def __init__(self, *args):
  dict.__init__(self, *args)
  self._inverse = {}

 def __setitem__(self, key, value):
  if value in self.values():
   if value in self._inverse:
    del self._inverse[value]
  else:
   self._inverse[value] = key
  dict.__setitem__(self, key, value)

 def unique_values(self):
  return self._inverse.values()

a = UniqueValuesDict()

a['cat'] =  1
a['fish'] =  1
a[None] =  1
a['duck'] =  1
a['dog'] =  2 # &lt;-- unique
a['bat'] =  3
a['aardvark'] = 3
a['snake'] = 4 # &lt;-- unique
a['wallaby'] = 5
a['badger'] = 5

assert a.unique_values() == ['dog', 'snake']
 
 #6 Here's another variation. 

 &gt;&gt;&gt; import collections
&gt;&gt;&gt; inverse= collections.defaultdict(list)
&gt;&gt;&gt; for k,v in a.items():
...  inverse[v].append(k)
... 
&gt;&gt;&gt; [ v[0] for v in inverse.values() if len(v) == 1 ]
['dog', 'snake']
 

 I'm partial to this because the inverted dictionary is such a common design pattern. 
 #7 You could do something like this (just count the number of occurrences for each value): 

 def unique(a):
 from collections import defaultdict
 count = defaultdict(lambda: 0)
 for k, v in a.iteritems():
  count[v] += 1
 for v, c in count.iteritems():
  if c &lt;= 1:
   yield v
 
 #8 Use nested list comprehensions! 

 print [v[0] for v in 
   dict([(v, [k for k in a.keys() if a[k] == v])
      for v in set(a.values())]).values()
  if len(v) == 1]