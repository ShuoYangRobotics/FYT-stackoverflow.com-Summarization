Question (ID-1285911): python: How do I check that multiple keys are in a dict in one go? I want to do something like: 

 foo = {'foo':1,'zip':2,'zam':3,'bar':4}

if ("foo","bar") in foo:
 #do stuff
 

 I'm not sure if its possible but would like to know. :-) 
 Answers (Total-10): #0 Well, you could do this: 

 &gt;&gt;&gt; if all (k in foo for k in ("foo","bar")):
...  print "They're there!"
...
They're there!
 
 #1 if set(("foo", "bar")) &lt;= set(myDict): ...
 
 #2 How about 

 if all([key in foo for key in ["foo","bar"]]):
 #do stuff
 pass
 
 #3 Using sets : 

 if set(("foo", "bar")).issubset(foo):
 #do stuff
 

 Alternatively: 

 if set(("foo", "bar")) &lt;= set(foo):
 #do stuff
 
 #4 Simple benchmarking rig for 3 of the alternatives. 

 Put in your own values for D and Q 

 
>>> from timeit import Timer
>>> setup='''from random import randint as R;d=dict((str(R(0,1000000)),R(0,1000000)) for i in range(D));q=dict((str(R(0,1000000)),R(0,1000000)) for i in range(Q));print("looking for %s items in %s"%(len(q),len(d)))'''

>>> Timer('set(q) &lt;= set(d)','D=1000000;Q=100;'+setup).timeit(1)
looking for 100 items in 632499
0.28672504425048828

#This one only works for Python3
>>> Timer('set(q) &lt;= d.keys()','D=1000000;Q=100;'+setup).timeit(1)
looking for 100 items in 632084
2.5987625122070312e-05

>>> Timer('all(k in d for k in q)','D=1000000;Q=100;'+setup).timeit(1)
looking for 100 items in 632219
1.1920928955078125e-05
 
 #5 How about using lambda? 

 if reduce( (lambda x, y: x and foo.has_key(y) ), [ True, "foo", "bar"] ): # do stuff
 
 #6 In case you want to: 

 
 also get the values for the keys 
 check more than one dictonary 
 

 then: 

 from operator import itemgetter
foo = {'foo':1,'zip':2,'zam':3,'bar':4}
keys = ("foo","bar") 
getter = itemgetter(*keys) # returns all values
try:
 values = getter(foo)
except KeyError:
 # not both keys exist
 pass
 
 #7 Not to suggest that this isn't something that you haven't thought of, but I find that the simplest thing is usually the best: 

 if ("foo" in foo) and ("bar" in foo):
 # do stuff
 
 #8 &gt;&gt;&gt; if 'foo' in foo and 'bar' in foo:
...  print 'yes'
... 
yes
 

 Jason, () aren't necessary in Python. 
 #9 Alex Martelli's solution set(queries) &lt;= set(my_dict) is the shortest code but may not be the fastest. Assume Q = len(queries) and D = len(my_dict). 

 This takes O(Q) + O(D) to make the two sets, and then (one hopes!) only O(min(Q,D)) to do the subset test -- assuming of course that Python set look-up is O(1) -- this is worst case (when the answer is True). 

 The generator solution of hughdbrown (et al?) all(k in my_dict for k in queries) is worst-case O(Q). 

 Complicating factors: 
(1) the loops in the set-based gadget are all done at C-speed whereas the any-based gadget is looping over bytecode. 
(2) The caller of the any-based gadget may be able to use any knowledge of probability of failure to order the query items accordingly whereas the set-based gadget allows no such control. 

 As always, if speed is important, benchmarking under operational conditions is a good idea.