Question (ID-2414201): How do I make this sorting case insensitive? def sortProfiles(p):
 return sorted(p, key=itemgetter('first_name'))
 

 I have a list with dictionaries. This function allows me to sort them by their first_name. However, it's case-sensitive. 
 Answers (Total-6): #0 &gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; p = [{'fn':'bill'}, {'fn':'Bob'}, {'fn':'bobby'}]
&gt;&gt;&gt; sorted(p, key=itemgetter('fn'))
[{'fn': 'Bob'}, {'fn': 'bill'}, {'fn': 'bobby'}]
&gt;&gt;&gt; sorted(p, key=lambda x: x['fn'].lower())
[{'fn': 'bill'}, {'fn': 'Bob'}, {'fn': 'bobby'}]
&gt;&gt;&gt;
 
 #1 Here's a way: 

 return sorted(p, key=lambda x: x['first_name'].lower())
 
 #2 It looks like you want sorted(p, key=lambda d: d['first_name'].lower()) . 
 #3 def sortProfiles(p):
 return sorted(p, key=lambda el: el['first_name'].lower())
 
 #4 &gt;&gt;&gt; def my_itemgetter(attr):
  def get_attr(obj):
   return obj.get(attr, "").lower()
  return get_attr

&gt;&gt;&gt; a= [{"a":"dA"},{"a":"ab"},{"a":"Ac"},{"a":"aa"}]
&gt;&gt;&gt; sorted(a, key=my_itemgetter("a"))
[{'a': 'aa'}, {'a': 'ab'}, {'a': 'Ac'}, {'a': 'dA'}]
 
 #5 If you dislike lambda , you can use a named function as your key-extractor, e.g: 

 def sortProfiles(p):
 def lowerName(d):
  return d['first_name'].lower()
 return sorted(p, key=lowerName)
 

 The def statement can appear just about anywhere another statement could, including in another function's body. In this case, the choice among a nested def , a lambda , or a separate def outside of sortProfiles , is mostly a matter of style, though the last of these could offer some performance gain.