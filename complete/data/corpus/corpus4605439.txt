Question (ID-4605439): What is the simplest way to swap char in a string with Python? I want to swap each pair of characters in a string. '2143' becomes '1234' , 'badcfe' becomes 'abcdef' . 

 How can I do this in Python? 
 Answers (Total-8): #0 The usual way to swap to items in Python is: 

 a, b = b, a
 

 So it would seem to me that you just do the same with an extended slice. It is slightly complicated because strings aren't mutable so you have to convert to a list and then back to a string, but what I'd do is: 

 &gt;&gt;&gt; s = 'badcfe'
&gt;&gt;&gt; t = list(s)
&gt;&gt;&gt; t[::2], t[1::2] = t[1::2], t[::2]
&gt;&gt;&gt; ''.join(t)
'abcdef'
 
 #1 oneliner: 

 &gt;&gt;&gt; s = 'badcfe'
&gt;&gt;&gt; ''.join([ s[x:x+2][::-1] for x in range(0, len(s), 2) ])
'abcdef'
 

 
 s[x:x+2] returns string slice from x to x+2; it is safe for odd len(s). 
 [::-1] reverses the string in Python 
 range(0, len(s), 2) returns 0, 2, 4, 6 ... while x &lt; len(s) 
 
 #2 Here's one way... 

 &gt;&gt;&gt; s = '2134'
&gt;&gt;&gt; def swap(c, i, j):
... c = list(c)
... c[i], c[j] = c[j], c[i]
... return ''.join(c)
...
&gt;&gt;&gt; swap(s, 0, 1)
'1234'
&gt;&gt;&gt;
 
 #3 Loop over length of string by twos and swap: 

 def oddswap(st):
 s = list(st)
 for c in range(0,len(s),2):
  t=s[c]
  s[c]=s[c+1]
  s[c+1]=t

 return "".join(s)
 

 giving: 

 &gt;&gt;&gt; s
'foobar'
&gt;&gt;&gt; oddswap(s)
'ofbora'
 

 and fails on odd-length strings with an IndexError exception. 
 #4 ''.join(s[i+1]+s[i] for i in range(0, len(s), 2)) # 10.6 usec per loop
 

 or 

 ''.join(x+y for x, y in zip(s[1::2], s[::2])) # 10.3 usec per loop
 

 or if the string can have an odd length: 

 ''.join(x+y for x, y in itertools.izip_longest(s[1::2], s[::2], fillvalue=''))
 

 Note that this won't work with old versions of Python (if I'm not mistaking older than 2.5). 

 The benchmark was run on python-2.7-8.fc14.1.x86_64 and a Core 2 Duo 6400 CPU with s='0123456789'*4 . 
 #5 Do you want the digits sorted? Or are you swapping odd/even indexed digits? Your example is totally unclear. 

 Sort: 

 s = '2143'
p=list(s)
p.sort()
s = "".join(p)
 

 s is now '1234'. The trick is here that list(string) breaks it into characters. 
 #6 Like so: 

 &gt;&gt;&gt; s = "2143658709"
&gt;&gt;&gt; ''.join([s[i+1] + s[i] for i in range(0, len(s), 2)])
'1234567890'

&gt;&gt;&gt; s = "badcfe"
&gt;&gt;&gt; ''.join([s[i+1] + s[i] for i in range(0, len(s), 2)])
'abcdef'
 
 #7 re.sub(r'(.)(.)',r"\2\1",'abcdef1234')
 

 However re is a bit slow. 

 def swap(s):
 i=iter(s)
 while True:
  a,b=next(i),next(i)
  yield b
  yield a

''.join(swap("abcdef1234"))