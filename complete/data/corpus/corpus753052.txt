Question (ID-753052): Strip html from strings in python from mechanize import Browser
br = Browser()
br.open('http://somewebpage')
html = br.response().readlines()
for line in html:
 print line
 

 When print a line in an html file, I'm trying to find a way to only show the contents of each HTML element and not the formatting itself. If it finds '&lt;a href="whatever.com"&gt;some text&lt;/a&gt;' it will only print 'some text', '&lt;b&gt;hello&lt;/b&gt;' prints 'hello', etc etc. How would one go about doing this? 
 Answers (Total-7): #0 I think you will want to look into Beautiful Soup . Once you do, use the advice from this article and strip the HTML elements very simply like this: 

 from BeautifulSoup import BeautifulSoup

''.join(BeautifulSoup(page).findAll(text=True))
 
 #1 I always used this function to strip html tags, as it requires only the python stdlib. 

 from HTMLParser import HTMLParser

class MLStripper(HTMLParser):
 def __init__(self):
  self.reset()
  self.fed = []
 def handle_data(self, d):
  self.fed.append(d)
 def get_data(self):
  return ''.join(self.fed)

def strip_tags(html):
 s = MLStripper()
 s.feed(html)
 return s.get_data()
 
 #2 I haven't thought much about the cases it will miss, but you can do a simple regex: 

 re.sub('&lt;[^&lt;]+?&gt;', '', text)
 

 For those that don't understand regex, this searches for a string '&lt;...>', where the inner content is made of one or more (+) characters that isn't a '&lt;'. The '?' means that it will match the smallest string it can find. eg. Given &lt;'p>Hello&lt;'/p> , it will match &lt;'p> and &lt;'/p> separately with the '?'. Without it, it will match the entire string &lt;..Hello..> . 

 If non-tag '&lt;' appears in html (eg. 2 &lt; 3), it should be written as an escape sequence &amp;... anyway so the '^&lt;' may be unnecessary. 
 #3 You can use either a different HTML parser ( like lxml , or Beautiful Soup ) -- one that offers functions to extract just text. Or, you can run a regex on your line string that strips out the tags. See http://www.amk.ca/python/howto/regex/ for more. 
 #4 you can write your own function 

 def StripTags(text): 
  finished = 0 
  while not finished: 
   finished = 1 
   start = text.find("&lt;") 
   if start &gt;= 0: 
    stop = text[start:].find("&gt;") 
    if stop &gt;= 0: 
     text = text[:start] + text[start+stop+1:] 
     finished = 0 
  return text 
 
 #5 This method works flawlessly for me and requires no additional installations: 

 import re
import htmlentitydefs

def convertentity(m):
 if m.group(1)=='#':
  try:
   return unichr(int(m.group(2)))
  except ValueError:
   return '&amp;#%s;' % m.group(2)
  try:
   return htmlentitydefs.entitydefs[m.group(2)]
  except KeyError:
   return '&amp;%s;' % m.group(2)

def converthtml(s):
 return re.sub(r'&amp;(#?)(.+?);',convertentity,s)

html = converthtml(html)
html.replace("&amp;nbsp;", " ") ## Get rid of the remnants of certain formatting(subscript,superscript,etc).
 
 #6 I needed a way to strip tags and decode HTML entities to plain text. The following solution is based on Eloff's answer (which I couldn't use because it strips entities). 

 from HTMLParser import HTMLParser
import htmlentitydefs

class HTMLTextExtractor(HTMLParser):
 def __init__(self):
  HTMLParser.__init__(self)
  self.result = [ ]

 def handle_data(self, d):
  self.result.append(d)

 def handle_charref(self, number):
  codepoint = int(number[1:], 16) if number[0] in (u'x', u'X') else int(number)
  self.result.append(unichr(codepoint))

 def handle_entityref(self, name):
  codepoint = htmlentitydefs.name2codepoint[name]
  self.result.append(unichr(codepoint))

 def get_text(self):
  return u''.join(self.result)

def html_to_text(html):
 s = HTMLTextExtractor()
 s.feed(html)
 return s.get_text()
 

 A quick test: 

 html = u'&lt;a href="#"&gt;Demo &lt;em&gt;(&amp;not; \u0394&amp;#x03b7;&amp;#956;&amp;#x03CE;)&lt;/em&gt;&lt;/a&gt;'
print repr(html_to_text(html))
 

 Result: 

 u'Demo (\xac \u0394\u03b7\u03bc\u03ce)'
 

 Error handling: 

 
 Invalid HTML structure may cause an HTMLParseError . 
 Invalid named HTML entities (such as &amp;#apos; , which is valid in XML and XHTML, but not plain HTML) will cause a ValueError exception. 
 Numeric HTML entities specifying code points outside the Unicode range acceptable by Python (such as, on some systems, characters outside the Basic Multilingual Plane ) will cause a ValueError exception.