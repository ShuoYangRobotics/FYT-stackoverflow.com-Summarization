Question (ID-5628055): Execute statement every N iterations in Python I have a very long loop, and I would like to check the status every N iterations, in my specific case I have a loop of 10 million elements and I want to print a short report every millionth iteration. 

 So, currently I am doing just (n is the iteration counter): 

 if (n % 1000000==0):
 print('Progress report...')
 

 but I am worried I am slowing down the process by computing the modulus at each iteration, as one iteration lasts just few milliseconds. 

 Is there a better way to do this? Or shouldn't I worry at all about the modulus operation? 
 Answers (Total-7): #0 Is it really slowing down? You have to try and see for yourself. It won't be much of a slowdown, but if we're talking about nanoseconds it may be considerable. Alternatively you can convert one 10 million loop to two smaller loops: 

 m = 1000000
for i in range(10):
 for i in range(m):
  // do sth
 print("Progress report")
 
 #1 How about keeping a counter and resetting it to zero when you reach the wanted number? Adding and checking equality is faster than modulo. 

 printcounter = 0

# Whatever a while loop is in Python
while (...): 
 ...
 if (printcounter == 1000000):
  print('Progress report...')
  printcounter = 0
 ...
 printcounter += 1
 

 Although it's quite possible that the compiler is doing some sort of optimization like this for you already... but this may give you some peace of mind. 
 #2 I'd do some testing to see how much time your modulus calls are consuming. You can use timeit for that. If your results indicate a need for time reduction, another approach which eliminates your modulus calculation: 

 for m in xrange(m_min, m_max):
 for n in xrange(n_min, n_max):
  #do_n_stuff
 print('Progress report...')
 
 #3 Something like that ? : 

 for n in xrange(1000000,11000000,1000000):
 for i in xrange(n-1000000,n):
  x = 10/2
 print 'Progress at '+str(i)
 

 result 

 Progress at 999999
Progress at 1999999
Progress at 2999999
Progress at 3999999
Progress at 4999999
Progress at 5999999
Progress at 6999999
Progress at 7999999
Progress at 8999999
Progress at 9999999
 

 . 

 EDIT 

 Better: 

 for n in xrange(0,10000000,1000000):
 for i in xrange(n,n+1000000):
  x = 10/2
 print 'Progress at '+str(i)
 

 And inspired from pajton: 

 m = 1000000
for n in xrange(0,10*m,m):
 for i in xrange(n,n+m):
  x = 10/2
 print 'Progress at '+str(i+1)
 

 I prefer this that I find more immediately readable than the pajton's solution.
It keeps the display of a value depending of i 
 #4 It's fast enough that I wouldn't worry about it. 

 If you really wanted to speed it up, you could do this to avoid the modulus 

 if (n == 1000000):
 n = 0
 print('Progress report...')
 
 #5 It's difficult to know how your system will optimize your code without testing. 

 You could simplify the relational part by realizing that zero is evaluated as false. 

 if(not N % 10000000)
 do stuff
 
 #6 This makes the inner loop lean, and m does not have to be divisible by interval . 

 m = 10000000
interval = 1000000
i = 0
while i &lt; m:
 checkpoint = min(m, i+interval)
 for j in xrange(i, checkpoint):
  #do something
 i = checkpoint
 print "progress"