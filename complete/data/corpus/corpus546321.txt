Question (ID-546321): Python date time, get date 6 months from now I am using the datetime module. I am looking to calculate the date 6 months from the current date. Could someone give me a little help doing this? 

 Edit: The reason I am wanting to generate a date 6 months from the current date is to produce a Review Date. If the user enters data into the system it will have a review date of 6 months from the date they entered the data. Does this help? 

 Cheers 

 Eef 
 Answers (Total-23): #0 I found this solution to be good. 

 from datetime import date
from dateutil.relativedelta import relativedelta

six_months = date.now() + relativedelta( months = +6 )
 

 The advantage of this approach is that it takes care of issues with 28,30,31 days etc. This becomes very useful in handling business rules and scenarios (say invoice generation etc.) 

 $ date(2010,12,31)+relativedelta(months=+1)
 datetime.date(2011, 1, 31)

$ date(2010,12,31)+relativedelta(months=+2)
 datetime.date(2011, 2, 28)
 
 #1 Well, that depends what you mean by 6 months from the current date. 

 1) natural months, 

  (day,month,year) = (day,(month+6)%12,year+(month+6)/12)
 

 2) bankers definition, 6*30 

  date += datetime.timedelta(6*30)
 
 #2 import datetime
print (datetime.date.today() + datetime.timedelta(6*365/12)).isoformat()
 
 #3 What do you mean by '6 months'. Is 2009-02-13 + 6 months == 2009-08-13 or is it 2009-02-13 + 6*30 days? 

 import mx.DateTime as dt

#6 Months
dt.now()+dt.RelativeDateTime(months=6)
#result is '2009-08-13 16:28:00.84'

#6*30 days
dt.now()+dt.RelativeDateTime(days=30*6)
#result is '2009-08-12 16:30:03.35'
 

 More info about mx.DateTime 
 #4 Just use the timetuple method to extract the months, add your months and build a new dateobject. If there is a already existing method for this I do not know it. 

 import datetime

def in_the_future(months=1):
 year, month, day = datetime.date.today().timetuple()[:3]
 new_month = month + months
 return datetime.date(year + (new_month / 12), new_month % 12, day)
 

 The API is a bit clumsy, but works as an example. Will also obviously not work on corner-cases like 2008-01-31 + 1 month. :) 
 #5 Dateutil package has implementation of such functionality. But be aware, that this will be naive , as others pointed already. 
 #6 There's no direct way to do it with Python's datetime. 

 Check out the relativedelta type at python-dateutil . It allows you to specify a time delta in months. 
 #7 Use the python datetime module to add a timedelta of six months to datetime.today() . 

 http://docs.python.org/library/datetime.html 

 You will of course have to solve the issue raised by Johannes Wei√ü-- what do you mean by 6 months? 
 #8 This solution works correctly for December, which most of the answers on this page do not.
You need to first shift the months from base 1 (ie Jan = 1) to base 0 (ie Jan = 0) before using modulus ( % ) or integer division ( // ), otherwise November (11) plus 1 month gives you 12, which when finding the remainder ( 12 % 12 ) gives 0. 

 (And dont suggest "(month % 12) + 1" or Oct + 1 = december!) 

 def AddMonths(d,x):
 newmonth = ((( d.month - 1) + x ) % 12 ) + 1
 newyear = d.year + ((( d.month - 1) + x ) // 12 ) 
 return datetime.date( newyear, newmonth, d.day)
 

 However ... This doesnt account for problem like Jan 31 + one month. So we go back to the OP - what do you mean by adding a month? One soln is to backtrack until you get to a valid day, given that most people would presume the last day of jan, plus one month, equals the last day of Feb.
This will work on negative numbers of months too.
Proof: 

 &gt;&gt;&gt; import datetime
&gt;&gt;&gt; AddMonths(datetime.datetime(2010,8,25),1)
datetime.date(2010, 9, 25)
&gt;&gt;&gt; AddMonths(datetime.datetime(2010,8,25),4)
datetime.date(2010, 12, 25)
&gt;&gt;&gt; AddMonths(datetime.datetime(2010,8,25),5)
datetime.date(2011, 1, 25)
&gt;&gt;&gt; AddMonths(datetime.datetime(2010,8,25),13)
datetime.date(2011, 9, 25)
&gt;&gt;&gt; AddMonths(datetime.datetime(2010,8,25),24)
datetime.date(2012, 8, 25)
&gt;&gt;&gt; AddMonths(datetime.datetime(2010,8,25),-1)
datetime.date(2010, 7, 25)
&gt;&gt;&gt; AddMonths(datetime.datetime(2010,8,25),0)
datetime.date(2010, 8, 25)
&gt;&gt;&gt; AddMonths(datetime.datetime(2010,8,25),-12)
datetime.date(2009, 8, 25)
&gt;&gt;&gt; AddMonths(datetime.datetime(2010,8,25),-8)
datetime.date(2009, 12, 25)
&gt;&gt;&gt; AddMonths(datetime.datetime(2010,8,25),-7)
datetime.date(2010, 1, 25)&gt;&gt;&gt; 
 
 #9 I know this was for 6 months, however the answer shows in google for "adding months in python" if you are adding one month: 

 import calendar

date = datetime.date.today() //Or your date

datetime.timedelta(days=calendar.monthrange(date.year,date.month)[1])
 

 this would count the days in the current month and add them to the current date, using 365/12 would ad 1/12 of a year can causes issues for short / long months if your iterating over the date. 
 #10 The QDate class of PyQt4 has an addmonths function. 

 &gt;&gt;&gt;from PyQt4.QtCore import QDate 
&gt;&gt;&gt;dt = QDate(2009,12,31) 
&gt;&gt;&gt;required = dt.addMonths(6) 

&gt;&gt;&gt;required
PyQt4.QtCore.QDate(2010, 6, 30)

&gt;&gt;&gt;required.toPyDate()
datetime.date(2010, 6, 30)
 
 #11 So, here is an example of the dateutil.relativedelta which I found useful for iterating through the past year, skipping a month each time to the present date: 

 &gt;&gt;&gt; import datetime
&gt;&gt;&gt; from dateutil.relativedelta import relativedelta
&gt;&gt;&gt; today = datetime.datetime.today()
&gt;&gt;&gt; month_count = 0
&gt;&gt;&gt; while month_count &lt; 12:
... day = today - relativedelta(months=month_count)
... print day
... month_count += 1
... 
2010-07-07 10:51:45.187968
2010-06-07 10:51:45.187968
2010-05-07 10:51:45.187968
2010-04-07 10:51:45.187968
2010-03-07 10:51:45.187968
2010-02-07 10:51:45.187968
2010-01-07 10:51:45.187968
2009-12-07 10:51:45.187968
2009-11-07 10:51:45.187968
2009-10-07 10:51:45.187968
2009-09-07 10:51:45.187968
2009-08-07 10:51:45.187968
 

 As with the other answers, you have to figure out what you actually mean by "6 months from now." If you mean "today's day of the month in the month six years in the future" then this would do: 

 datetime.datetime.now() + relativedelta(months=6)
 
 #12 I solved this problem like this: 

 import calendar
from datetime import datetime
moths2add = 6
now = datetime.now()
current_year = now.year
current_month = now.month
#count days in months you want to add using calendar module
days = sum(
 [calendar.monthrange(current_year, elem)[1] for elem in range(current_month, current_month + moths)]
 )
print now + days
 
 #13 This is what I came up with. It moves the correct number of months and years but ignores days (which was what I needed in my situation). 

 import datetime

month_dt = 4
today = datetime.date.today()
y,m = today.year, today.month
m += month_dt-1
year_dt = m//12
new_month = m%12
new_date = datetime.date(y+year_dt, new_month+1, 1)
 
 #14 I use this function to change year and month but keep day: 

 def replace_month_year(date1, year2, month2):
 try:
  date2 = date1.replace(month = month2, year = year2)
 except:
  date2 = datetime.date(year2, month2 + 1, 1) - datetime.timedelta(days=1)
 return date2
 

 You should write: 

 new_year = my_date.year + (my_date.month + 6) / 12
new_month = (my_date.month + 6) % 12
new_date = replace_month_year(my_date, new_year, new_month)
 
 #15 I think it would be safer to do something like this instead of manually adding days: 

 import datetime
today = datetime.date.today()

def addMonths(dt, months = 0):
 new_month = months + dt.month
 year_inc = 0
 if new_month&gt;12:
  year_inc +=1
  new_month -=12
 return dt.replace(month = new_month, year = dt.year+year_inc)

newdate = addMonths(today, 6)
 
 #16 import datetime


'''
Created on 2011-03-09

@author: tonydiep
'''

def add_business_months(start_date, months_to_add):
 """
 Add months in the way business people think of months. 
 Jan 31, 2011 + 1 month = Feb 28, 2011 to business people
 Method: Add the number of months, roll back the date until it becomes a valid date
 """
 # determine year
 years_change = months_to_add / 12

 # determine if there is carryover from adding months
 if (start_date.month + (months_to_add % 12) &gt; 12 ):
  years_change = years_change + 1

 new_year = start_date.year + years_change

 # determine month
 work = months_to_add % 12
 if 0 == work:
  new_month = start_date.month
 else:
  new_month = (start_date.month + (work % 12)) % 12

 if 0 == new_month:
  new_month = 12 

 # determine day of the month
 new_day = start_date.day
 if(new_day in [31, 30, 29, 28]):
  #user means end of the month
  new_day = 31


 new_date = None
 while (None == new_date and 27 &lt; new_day):
  try:
   new_date = start_date.replace(year=new_year, month=new_month, day=new_day)
  except:
   new_day = new_day - 1 #wind down until we get to a valid date

 return new_date


if __name__ == '__main__':
 #tests
 dates = [datetime.date(2011, 1, 31),
    datetime.date(2011, 2, 28),
    datetime.date(2011, 3, 28),
    datetime.date(2011, 4, 28),
    datetime.date(2011, 5, 28),
    datetime.date(2011, 6, 28),
    datetime.date(2011, 7, 28),
    datetime.date(2011, 8, 28),
    datetime.date(2011, 9, 28),
    datetime.date(2011, 10, 28),
    datetime.date(2011, 11, 28),
    datetime.date(2011, 12, 28),
    ]
 months = range(1, 24)
 for start_date in dates:
  for m in months:
   end_date = add_business_months(start_date, m)
   print("%s\t%s\t%s" %(start_date, end_date, m))
 
 #17 my modification to tony diep's answer, possibly marginally more elegant: 

 def add_months(date, months):
 month = date.month + months - 1
 year = date.year + (month / 12)
 month = (month % 12) + 1
 day = date.day
 while (day &gt; 0):
  try:
   new_date = date.replace(year=year, month=month, day=day)
   break
  except:
   day = day - 1 
 return new_date
 

 adds months according to a business needs interpretation 
 #18 I have a better way to solve the 'February 31st' problem: 

 def add_months(start_date, months):
 import calendar

 year = start_date.year + (months / 12)
 month = start_date.month + (months % 12)
 day = start_date.day

 if month &gt; 12:
  month = month % 12
  year = year + 1

 days_next = calendar.monthrange(year, month)[1]
 if day &gt; days_next:
  day = days_next

 return start_date.replace(year, month, day)
 

 I think that it also works with negative numbers (to subtract months), but I haven't tested this very much. 
 #19 Modified the AddMonths() for use in Zope and handling invalid day numbers: 

 def AddMonths(d,x):
 days_of_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
 newmonth = ((( d.month() - 1) + x ) % 12 ) + 1
 newyear = d.year() + ((( d.month() - 1) + x ) // 12 ) 
 if d.day() &gt; days_of_month[newmonth-1]:
  newday = days_of_month[newmonth-1]
 else:
  newday = d.day() 
 return DateTime( newyear, newmonth, newday)
 
 #20 import time

def add_month(start_time, months): 

  ret = time.strptime(start_time, '%Y-%m-%d')
  t = list(ret)

  t[1] += months

  if t[1] &gt; 12:
   t[0] += 1 + int(months / 12)

   t[1] %= 12

  return int(time.mktime(tuple(t)))
 
 #21 Rework of an earlier answer by user417751. Maybe not so pythonic way, but it takes care of different month lengths and leap years. In this case 31 January 2012 + 1 month = 29 February 2012. 

 import datetime
import calendar

def add_mths(d, x):
 newday = d.day
 newmonth = (((d.month - 1) + x) % 12) + 1
 newyear = d.year + (((d.month - 1) + x) // 12)
 if newday &gt; calendar.mdays[newmonth]:
  newday = calendar.mdays[newmonth]
  if newyear % 4 == 0 and newmonth == 2:
   newday += 1
 return datetime.date(newyear, newmonth, newday)
 
 #22 Modified Johannes Wei's answer in the case 1new_month = 121. This works perfectly for me. The months could be positive or negative. 

 def addMonth(d,months=1):
 year, month, day = d.timetuple()[:3]
 new_month = month + months
 return datetime.date(year + ((new_month-1) / 12), (new_month-1) % 12 +1, day)