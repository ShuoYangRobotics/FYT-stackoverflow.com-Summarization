Question (ID-612372): Can you give a Django app a verbose name for use throughout the admin? In the same way that you can give fields and models verbose names that appear in the Django admin, can you give an app a custom name? 
 Answers (Total-9): #0 You can give your application a custom name by defining app_label in your model definition. But as django builds the admin page it will hash models by their app_label, so if you want them to appear in one application, you have to define this name in all models of your application. 

 class MyModel(models.Model):
  pass
 class Meta:
  app_label = 'My APP name'
 
 #1 No, but you can copy admin template and define app name there. 
 #2 Give them a verbose_name property. 

 Don't get your hopes up. You will also need to copy the index view from django.contrib.admin.sites into your own ProjectAdminSite view and include it in your own custom admin instance: 

 class ProjectAdminSite(AdminSite):
 def index(self, request, extra_context=None):
  copied stuff here...

admin.site = ProjectAdminSite()
 

 then tweak the copied view so that it uses your verbose_name property as the label for the app. 

 I did it by adding something a bit like this to the copied view: 

   try:
   app_name = model_admin.verbose_name
  except AttributeError:
   app_name = app_label
 

 While you are tweaking the index view why not add an 'order' property too. 
 #3 Well I started an app called todo and have now decided I want it to be named Tasks . The problem is that I already have data within my table so my work around was as follows. Placed into the models.py: 

  class Meta:
  app_label = 'Tasks'
  db_table = 'mytodo_todo'
 

 Hope it helps. 
 #4 If you have more than one model in the app just create a model with the Meta information and create subclasses of that class for all your models. 

 class MyAppModel(models.Model):
 class Meta:
  app_label = 'My App Label'

class Category(MyAppModel):
  name = models.CharField(max_length=50)
 
 #5 I'm using django-admin-tools for that. 
 #6 For Django 1.4 (not yet released, but trunk is pretty stable), you can use the following method. It relies on the fact that AdminSite now returns a TemplateResponse, which you can alter before it is rendered. 

 Here, we do a small bit of monkey patching to insert our behaviour, which can be avoided if you use a custom AdminSite subclass. 

 from functools import wraps
def rename_app_list(func):
 m = {'Sites': 'Web sites',
   'Your_app_label': 'Nicer app label',
 }

 @wraps(func)
 def _wrapper(*args, **kwargs):
  response = func(*args, **kwargs)
  app_list = response.context_data.get('app_list')

  if app_list is not None:
   for a in app_list:
    name = a['name']
    a['name'] = m.get(name, name)
  title = response.context_data.get('title')
  if title is not None:
   app_label = title.split(' ')[0]
   if app_label in m:
    response.context_data['title'] = "%s administration" % m[app_label]
  return response
 return _wrapper

admin.site.__class__.index = rename_app_list(admin.site.__class__.index)
admin.site.__class__.app_index = rename_app_list(admin.site.__class__.app_index)
 

 This fixes the index and the app_index views. It doesn't fix the bread crumbs in all other admin views. 
 #7 It would be nice to be able to set the applications verbose_name in either it's init .py or admin.py file. So the init .py file in your applications directory could look like: 

 class Meta:
 verbose_name = 'My Django App'
 

 Django 1.2 maybe? 
 #8 You can't give apps a custom name (at the moment at least; I believe this is going to be addressed at some point), but you can give your fields a 
"display name" by passing the verbose_name keyword argument to your fields (this is also conveniently the first positonal argument). 

 So, you can do either: 

 address = models.CharField(blank=False, max_length=250, verbose_name='Address (Line 1)')
 

 or 

 address = models.CharField('Address (Line 1)', blank=False, max_length=250)
 

 â€¦and the admin will display these "pretty" versions instead. 

 I'm not sure if you're saying you know this already or not, but if not, you can give your models custom names too, also with the verbose_name (and verbose_name_plural ) properties in the model's Meta class , like: 

 class ModelName(models.Model):
 # your model definition here

 class Meta:
  verbose_name = 'verbose model name'
  verbose_name_plural = 'plural verbose model name'