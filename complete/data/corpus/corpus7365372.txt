Question (ID-7365372): Is there a pythonic way of knowing when the first and last loop in a for is being passed through? I have a template in which I placed, let's say 5 forms, but all disabled to be posted except for the first one. The next form can only be filled if I click a button that enables it first. 

 I'm looking for a way to implement a Django-like forloop.last templatetag variable in a for loop inside an acceptance test to decide whether to execute a method that enables the next form or not. 

 Basically what I need to do is something like: 

 for form_data in step.hashes:
 # get and fill the current form with data in form_data
 if not forloop.last:
  # click the button that enables the next form
# submit all filled forms
 
 Answers (Total-6): #0 I don't know of anything built-in, but you can easily write a generator to give you the required information: 

 def firstlast(seq):
 seq = iter(seq)
 el = prev = next(seq)
 is_first = True
 for el in seq:
  yield prev, is_first, False
  is_first = False
  prev = el
 yield el, is_first, True


&gt;&gt;&gt; list(firstlast(range(4)))
[(0, True, False), (1, False, False), (2, False, False), (3, False, True)]
&gt;&gt;&gt; list(firstlast(range(0)))
[]
&gt;&gt;&gt; list(firstlast(range(1)))
[(0, True, True)]
&gt;&gt;&gt; list(firstlast(range(2)))
[(0, True, False), (1, False, True)]
&gt;&gt;&gt; for count, is_first, is_last in firstlast(range(3)):
 print(count, "first!" if is_first else "", "last!" if is_last else "")


0 first! 
1 
2 last!
 
 #1 You could use enumerate and compare the counter with the length of the list: 

 for i, form_data in enumerate(step.hashes):
 if i &lt; len(step.hashes):
  whatever()
 
 #2 for form_data in step.hashes[:-1]:
 # get and fill the current form with data in form_data
for form_data in step.hashes[-1:]:
 # get and fill the current form with data in form_data
 # click the button that enables the next form
# submit all filled forms
 

 Don't like the repetition of get and fill the current form with data in form_data ? Define a function. 
 #3 Generator with buffer. 

 def first_last( iterable ):
 i= iter(iterable)
 f= next(i)
 yield f, "first"
 n= next(i)
 for another in i:
  yield n, None
  n= another
 yield n, "last"

for item, state in first_list( iterable ):
 # state is "first", None or "last". 
 

 Zipping two sequences 

 flags = ["first"] + (len(iterable)-2)*[None] + ["last"]
for item, state in zip( iterable, flags ):
 # state is "first", None or "last".
 
 #4 If I am understanding your question correctly, you want a simple test for whether you are at the beginning or end of the list? 

 If that's the case, this would do it: 

 for item in list:
 if item != list[-1]:
  #Do stuff
 

 For the first item in the list, you would replace "-1" with 0. 
 #5 I think he wants to have a wrapper around the iterator that provides first / last queries,
also the parameter could be an iterator so all sort of len() would faild 

 Here it is what I came up so far, the trick is to use a double iterator, one that looks ahead
one step of the first: 

 class FirstLastIter(object):

 def __init__(self, seq):
  self._seq_iter = iter(seq)
  self._seq_iter_next = iter(seq)
  self._idx = -1
  self._last = None
  self.next_next()

 @property
 def first(self):
  return self._idx == 0

 @property
 def last(self):
  return self._last == True

 def __iter__(self):
  return self

 def next_next(self):
  try:
   self._seq_iter_next.next()
  except StopIteration:
   self._last = True

 def next(self):
  val = self._seq_iter.next()
  self._idx += 1
  self.next_next()
  return val

for x in FirstLastIter([]):
 print x

iterator = FirstLastIter([1])
for x in iterator:
 print x,iterator.first,iterator.last

iterator = FirstLastIter([1,2,3])
for x in iterator:
 print x,iterator.first,iterator.last
 

 returns: 

 1 True True
1 True False
2 False False
3 False True