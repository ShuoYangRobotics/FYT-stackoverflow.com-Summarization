Question (ID-3847386): Testing if a list contains another list with Python How can I test if a list contains another list. Say there was a function called contains: 

 contains([1,2], [-1, 0, 1, 2]) # Returns [2, 3] (conatins returns [start, end])
contains([1,3], [-1, 0, 1, 2]) # Returns False
contains([1, 2], [[1, 2], 3) # Returns False
contains([[1, 2]], [[1, 2], 3]) # Returns [0, 0]
 

 Edit: 

 contains([2, 1], [-1, 0, 1, 2]) # Returns False
contains([-1, 1, 2], [-1, 0, 1, 2]) # Returns False
contains([0, 1, 2], [-1, 0, 1, 2]) # Returns [1, 3]
 
 Answers (Total-9): #0 After OP's edit: 

 def contains(small, big):
 for i in xrange(1 + len(big) - len(small)):
  if small == big[i:i+len(small)]:
   return i, i + len(small) - 1
 return False
 
 #1 Here is my version: 

 def contains(small, big):
 for i in xrange(len(big)-len(small)+1):
  for j in xrange(len(small)):
   if big[i+j] != small[j]:
    break
  else:
   return i, i+len(small)
 return False
 

 It returns a tuple of (start, end+1) since I think that is more pythonic, as Andrew Jaffe points out in his comment. It does not slice any sublists so should be reasonably efficient. 

 One point of interest for newbies is that it uses the else clause on the for statement - this is not something I use very often but can be invaluable in situations like this. 

 This is identical to finding substrings in a string, so for large lists it may be more efficient to implement something like the Boyer-Moore algorithm . 
 #2 [Note this answer doesn't work. My bad.] 

 If all items are unique, you can use sets. 

 &gt;&gt;&gt; items = set([-1, 0, 1, 2])
&gt;&gt;&gt; items.issubset(set([1, 2]))
True
&gt;&gt;&gt; items.issubset(set([1, 3]))
False
 
 #3 This works and is fairly fast since it does the linear searching using the builtin list.index() method and == operator: 

 def contains(sub, pri):
 M, N = len(pri), len(sub)
 i, LAST = 0, M-N+1
 while True:
  try:
   found = pri.index(sub[0], i, LAST) # find first elem in sub
  except ValueError:
   return False
  if pri[found:found+N] == sub:
   return [found, found+N-1]
  else:
   i = found+1
 
 #4 I tried to make this as efficient as possible. 

 It uses a generator; those unfamiliar with these beasts are advised to check out their documentation and that of yield expressions . 

 Basically it creates a generator of values from the subsequence that can be reset by sending it a true value. If the generator is reset, it starts yielding again from the beginning of sub . 

 Then it just compares successive values of sequence with the generator yields, resetting the generator if they don't match. 

 When the generator runs out of values, i.e. reaches the end of sub without being reset, that means that we've found our match. 

 Since it works for any sequence, you can even use it on strings, in which case it behaves similarly to str.find , except that it returns False instead of -1 . 

 As a further note: I think that the second value of the returned tuple should, in keeping with Python standards, normally be one higher. i.e. "string"[0:2] == "st" . But the spec says otherwise, so that's how this works. 

 It depends on if this is meant to be a general-purpose routine or if it's implementing some specific goal; in the latter case it might be better to implement a general-purpose routine and then wrap it in a function which twiddles the return value to suit the spec. 

 def reiterator(sub):
 """Yield elements of a sequence, resetting if sent ``True``."""
 it = iter(sub)
 while True:
  if (yield it.next()):
   it = iter(sub)

def find_in_sequence(sub, sequence):
 """Find a subsequence in a sequence.

 &gt;&gt;&gt; find_in_sequence([2, 1], [-1, 0, 1, 2])
 False
 &gt;&gt;&gt; find_in_sequence([-1, 1, 2], [-1, 0, 1, 2])
 False
 &gt;&gt;&gt; find_in_sequence([0, 1, 2], [-1, 0, 1, 2])
 (1, 3)
 &gt;&gt;&gt; find_in_sequence("subsequence",
 ...     "This sequence contains a subsequence.")
 (25, 35)
 &gt;&gt;&gt; find_in_sequence("subsequence", "This one doesn't.")
 False

 """
 start = None
 sub_items = reiterator(sub)
 sub_item = sub_items.next()
 for index, item in enumerate(sequence):
  if item == sub_item:
   if start is None: start = index
  else:
   start = None
  try:
   sub_item = sub_items.send(start is None)
  except StopIteration:
   # If the subsequence is depleted, we win!
   return (start, index)
 return False
 
 #5 Here's a straightforward algorithm that uses list methods: 

 #!/usr/bin/env python

def list_find(what, where):
 """Find `what` list in the `where` list.

 Return index in `where` where `what` starts
 or -1 if no such index.

 &gt;&gt;&gt; f = list_find
 &gt;&gt;&gt; f([2, 1], [-1, 0, 1, 2])
 -1
 &gt;&gt;&gt; f([-1, 1, 2], [-1, 0, 1, 2])
 -1
 &gt;&gt;&gt; f([0, 1, 2], [-1, 0, 1, 2])
 1
 &gt;&gt;&gt; f([1,2], [-1, 0, 1, 2])
 2
 &gt;&gt;&gt; f([1,3], [-1, 0, 1, 2])
 -1
 &gt;&gt;&gt; f([1, 2], [[1, 2], 3])
 -1
 &gt;&gt;&gt; f([[1, 2]], [[1, 2], 3])
 0
 """
 if not what: # empty list is always found
  return 0
 try:
  index = 0
  while True:
   index = where.index(what[0], index)
   if where[index:index+len(what)] == what:
    return index # found
   index += 1 # try next position
 except ValueError:
  return -1 # not found

def contains(what, where):
 """Return [start, end+1] if found else empty list."""
 i = list_find(what, where)
 return [i, i + len(what)] if i &gt;= 0 else [] #NOTE: bool([]) == False

if __name__=="__main__":
 import doctest; doctest.testmod()
 
 #6 From this thread , I found the built-in any function in python. This will work perfectly for you. 

 From the help page of any:
 

 any(...)
 any(iterable) -&gt; bool

 Return True if bool(x) is True for any x in the iterable.
 

 

 def isAList(x):
 return type(x) == type([])

def containsAList(L):
 return any([isAList(x) for x in L])
 

 You could also shorten the code by using lambda and map like so: 

 any(map(lambda x: type(x) == type([]), L))
 

 Hope this helps 
 #7 I think this one is fast... 

 def issublist(subList, myList, start=0):
 if not subList: return 0
 lenList, lensubList = len(myList), len(subList)
 try:
  while lenList - start &gt;= lensubList:
   start = myList.index(subList[0], start)
   for i in xrange(lensubList):
    if myList[start+i] != subList[i]:
     break
   else:
    return start, start + lensubList
   start += 1
  return False
 except:
  return False
 
 #8 May I humbly suggest the Rabin-Karp algorithm if the big list is really big. The link even contains almost-usable code in almost-Python.