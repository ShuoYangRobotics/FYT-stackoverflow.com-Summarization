Question (ID-974741): wget Vs urlretrieve of python I have a task to download Gbs of data from a website. The data is in form of .gz files, each file being 45mb in size. 

 The easy way to get the files is use "wget -r -np -A files url". This will donwload data in a recursive format and mirrors the website. The donwload rate is very high 4mb/sec. 

 But, just to play around I was also using python to build my urlparser. 

 Downloading via Python's urlretrieve is damm slow, possible 4 times as slow as wget. The download rate is 500kb/sec. I use HTMLParser for parsing the href tags. 

 I am not sure why is this happening. Are there any settings for this. 

 Thanks 
 Answers (Total-11): #0 Probably a unit math error on your part. 

 Just noticing that 500KB/s (kilobytes) is equal to 4Mb/s (megabits) . 
 #1 As for the html parsing, the fastest/easiest you will probably get is using lxml 
As for the http requests themselves: httplib2 is very easy to use, and could possibly speed up downloads because it supports http 1.1 keep-alive connections and gzip compression. There is also pycURL which claims to be very fast (but more difficult to use), and is build on curllib, but I've never used that. 

 You could also try to download different files concurrently, but also keep in mind that trying to optimize your download times too far may be not very polite towards the website in question. 

 Sorry for the lack of hyperlinks, but SO tells me "sorry, new users can only post a maximum of one hyperlink" 
 #2 Transfer speeds can be easily misleading.. Could you try with the following script, which simply downloads the same URL with both wget and urllib.urlretrieve - run it a few times incase you're behind a proxy which caches the URL on the second attempt. 

 For small files, wget will take slightly longer due to the external process' startup time, but for larger files that should be come irrelevant. 

 from time import time
import urllib
import subprocess

target = "http://example.com" # change this to a more useful URL

wget_start = time()

proc = subprocess.Popen(["wget", target])
proc.communicate()

wget_end = time()


url_start = time()
urllib.urlretrieve(target)
url_end = time()

print "wget -&gt; %s" % (wget_end - wget_start)
print "urllib.urlretrieve -&gt; %s" % (url_end - url_start)
 
 #3 urllib works for me as fast as wget. try this code. it shows the progress in percentage just as wget. 

 import sys, urllib
def reporthook(a,b,c): 
 # ',' at the end of the line is important!
 print "% 3.1f%% of %d bytes\r" % (min(100, float(a * b) / c * 100), c),
 #you can also use sys.stdout.write
 #sys.stdout.write("\r% 3.1f%% of %d bytes" 
 #     % (min(100, float(a * b) / c * 100), c)
 sys.stdout.flush()
for url in sys.argv[1:]:
  i = url.rfind('/')
  file = url[i+1:]
  print url, "-&gt;", file
  urllib.urlretrieve(url, file, reporthook)
 
 #4 Maybe you can wget and then inspect the data in Python? 
 #5 import subprocess

myurl = 'http://some_server/data/'
subprocess.call(["wget", "-r", "-np", "-A", "files", myurl])
 
 #6 There shouldn't be a difference really. All urlretrieve does is make a simple HTTP GET request. Have you taken out your data processing code and done a straight throughput comparison of wget vs. pure python? 
 #7 Please show us some code. I'm pretty sure that it has to be with the code and not on urlretrieve. 

 I've worked with it in the past and never had any speed related issues. 
 #8 You can use wget -k to engage relative links in all urls. 
 #9 please look at below, extremely strange problem.
 urllib.urlopen is giving strange result 
 #10 Since python suggests using urllib2 instead of urllib , I take a test between urllib2.urlopen and wget . 

 The result is, it takes nearly the same time for both of them to download the same file.Sometimes, urllib2 performs even better. 

 The advantage of wget lies in a dynamic progress bar to show the percent finished and the current download speed when transferring. 

 The file size in my test is 5MB .I haven't used any cache module in python and I am not aware of how wget works when downloading big size file.