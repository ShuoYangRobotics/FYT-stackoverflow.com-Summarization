Question (ID-8895074): Protect commas on consecutive string.join() and string.split() Suppose the following code (notice the commas inside the strings): 

 &gt;&gt;&gt; a = ['1',",2","3,"]
 

 I need to concatenate the values into a single string. Naive example: 

 &gt;&gt;&gt; b = ",".join(a)
&gt;&gt;&gt; b
'1,,2,3,'
 

 And later I need to split the resulting object again: 

 &gt;&gt;&gt; b.split(',')
['1', '', '2', '3', '']
 

 However, the result I am looking for is the original list: 

 ['1', ',2', '3,']
 

 What's the simplest way to protect the commas in this process? The best solution I came up with looks rather ugly. 

 Note: the comma is just an example. The strings can contain any character. And I can choose other characters as separators. 
 Answers (Total-6): #0 
 The strings can contain any character. 
 

 If no matter what you use as a delimiter, there is a chance that the item itself contains the delimiter character, then use the csv module : 

 import csv

class PseudoFile(object):
 # http://stackoverflow.com/a/8712426/190597
 def write(self, string):
  return string
writer = csv.writer(PseudoFile())
 

 This concatenates the items in a using commas: 

 a = ['1',",2","3,"]
line = writer.writerow(a)
print(line)
# 1,",2","3,"
 

 This recovers a from line : 

 print(next(csv.reader([line])))
# ['1', ',2', '3,']
 
 #1 Do you have to use comas to separate the items? Else you could also use another symbol that is not used in the items of the list. 

 In [1]: '|'.join(['1', ',2', '3,']).split('|')
Out[1]: ['1', ',2', '3,']
 

 Edit: The string may apparently contain any character. Is it an option to use the json module? You could just dump and load the list. 

 In [3]: json.dumps(['1', ',2', '3,'])
Out[3]: '["1", ",2", "3,"]'

In [4]: json.loads('["1", ",2", "3,"]')
Out[4]: [u'1', u',2', u'3,']
 

 Edit #2: If you may not use it, you could use str.encode('string-encode') to escape the characters in your string and then enclose the encoded version into single quotes and separate those with comas: 

 In [10]: print "'example'".encode('string-escape')
\'example\' #' (have to close the opened string for stackoverflow

In [11]: print r"\'example\'".decode('string-escape')
'example'
 

 Edit #3: Running example of str.encode('string-encode') : 

 import re

def list_to_str(list):
 return ','.join("'{}'".format(s.encode('string-escape')) for s in list)

def str_to_list(str):
 return re.findall(r"'([^']*)'", str)

if __name__ == '__main__':
 a = ['1', ',2', '3,']
 b = list_to_str(a)
 print 'It is {} that this works.'.format(str_to_list(b) == a)
 
 #2 When you are serializing a list to a String, then you need to choose as a separator a character that doesn't appear in the list items. Can't you just replace the comma with another character? 

 b = ";".join(a)
b.split(';')
 
 #3 Does the delimiter need to be only a single character? If not then you can use a delimiter made up of a sequence of characters that definitley wont appear in your string, like |#| or something similar. 
 #4 You need to escape the comma and probably also escape the escape sequence. Here's one way: 

 &gt;&gt;&gt; a = ['1',",2","3,"]
&gt;&gt;&gt; b = ','.join(s.replace('%', '%%').replace(',', '%2c') for s in a)
&gt;&gt;&gt; [s.replace('%2c', ',').replace('%%', '%') for s in b.split(',')]
['1', ',2', '3,']
&gt;&gt;&gt; b
'1,%2c2,3%2c'
&gt;&gt;&gt; 
 
 #5 I would join and split using another character than "," , e.g. ";" : 

 &gt;&gt;&gt; b = ";".join(a)
&gt;&gt;&gt; b.split(';')
['1', ',2', '3,']