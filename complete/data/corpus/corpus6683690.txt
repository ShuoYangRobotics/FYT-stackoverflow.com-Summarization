Question (ID-6683690): Making a list of evenly spaced numbers in a certain range in python What is a pythonic way of making list of arbitrary length containing evenly spaced numbers (not just whole integers) between given bounds? For instance: 

 my_func(0,5,10) # ( lower_bound , upper_bound , length )
# [ 0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5 ] 
 

 Note the Range() function only deals with integers. And this: 

 def my_func(low,up,leng):
 list = []
 step = (up - low) / float(leng)
 for i in range(leng):
  list.append(low)
  low = low + step
 return list
 

 seems too complicated. Any ideas? 
 Answers (Total-6): #0 You can use the following approach: 

 [lower + x*(upper-lower)/length for x in range(length)]
 

 lower and/or upper must be assigned as floats for this approach to work. 
 #1 Given numpy, you could use linspace : 

 Including the right endpoint (5): 

 In [46]: import numpy as np
In [47]: np.linspace(0,5,10)
Out[47]: 
array([ 0.  , 0.55555556, 1.11111111, 1.66666667, 2.22222222,
  2.77777778, 3.33333333, 3.88888889, 4.44444444, 5.  ])
 

 Excluding the right endpoint: 

 In [48]: np.linspace(0,5,10,endpoint=False)
Out[48]: array([ 0. , 0.5, 1. , 1.5, 2. , 2.5, 3. , 3.5, 4. , 4.5])
 
 #2 f = 0.5
a = 0
b = 9
d = [x * f for x in range(a, b)]
 

 would be a way to do it. 
 #3 Similar to Howard's answer but a bit more efficient: 

 def my_func(low, up, leng):
 step = ((up-low) * 1.0 / leng)
 return [low+i*step for i in xrange(leng)]
 
 #4 Similar to unutbu's answer, you can use numpy's arange function, which is analog to python's intrinsic function range. Notice that the end point is not included, as in range: 

 &gt;&gt;&gt; import numpy as N
&gt;&gt;&gt; a=N.arange(0,5,0.5)
&gt;&gt;&gt; a
array([ 0. , 0.5, 1. , 1.5, 2. , 2.5, 3. , 3.5, 4. , 4.5])
&gt;&gt;&gt; import numpy as N
&gt;&gt;&gt; a=N.arange(0,5,0.5) # returns a numpy array
&gt;&gt;&gt; a
array([ 0. , 0.5, 1. , 1.5, 2. , 2.5, 3. , 3.5, 4. , 4.5])
&gt;&gt;&gt; a.tolist() # if you prefer it as a list
[0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5]
 
 #5 You can use the folowing code: 

 def float_range(initVal, itemCount, step):
 for x in xrange(itemCount):
  yield initVal
  initVal += step

[x for x in float_range(1, 3, 0.1)]