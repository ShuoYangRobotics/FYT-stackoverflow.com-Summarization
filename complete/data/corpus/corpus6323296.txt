Question (ID-6323296): Python remove anything that is not a letter or number I'm having a little trouble with Python regular expressions. 

 What is a good way to remove all characters in a string that are not letters or numbers? 

 Thanks! 
 Answers (Total-7): #0 '\W' is the same as [^A-Za-z0-9_] plus accented chars from your locale. 

 &gt;&gt;&gt; re.sub('\W', '', 'text 1, 2, 3...')
'text123'
 

 Maybe you want to keep the spaces or have all the words (and numbers): 

 &gt;&gt;&gt; re.findall('\w+', 'my. text, --without-- (punctuation) 123')
['my', 'text', 'without', 'punctuation', '123']
 
 #1 In the char set matching rule [...] you can specify ^ as first char to mean "not in" 

 import re
re.sub("[^0-9a-zA-Z]",  # Anything except 0..9, a..z and A..Z
  "",     # replaced with nothing
  "this is a test!!") # in this string

--&gt; 'thisisatest'
 
 #2 Also you can try to use isalpha and isnumeric methods the following way: 

 text = 'base, sample test;'
getVals = lambda x: (c for c in text if c.isalpha() or c.isnumeric())
map(lambda word: ' '.join(getVals(word)): text.split(' '))
 
 #3 you can use predefined regex in python : \W corresponds to the set [^a-zA-Z0-9_] . Then, 

 import re
s = 'Hello dutrow 123'
re.sub('\W', '', s)
--&gt; 'Hellodutrow123'
 
 #4 There are other ways also you may consider e.g. simply loop thru string and skip unwanted chars e.g. assuming you want to delete all ascii chars which are not letter or digits 

 &gt;&gt;&gt; newstring = [c for c in "a!1#b$2c%3\t\nx" if c in string.letters + string.digits]
&gt;&gt;&gt; "".join(newstring)
'a1b2c3x'
 

 or use string.translate to map one char to other or delete some chars e.g. 

 &gt;&gt;&gt; todelete = [ chr(i) for i in range(256) if chr(i) not in string.letters + string.digits ]
&gt;&gt;&gt; todelete = "".join(todelete)
&gt;&gt;&gt; "a!1#b$2c%3\t\nx".translate(None, todelete)
'a1b2c3x'
 

 this way you need to calculate todelete list once or todelete can be hard-coded once and use it everywhere you need to convert string 
 #5 You need to be more specific: 

 
 What about Unicode "letters"? ie, those with diacriticals. 
 What about white space? (I assume this is what you DO want to delete along with punctuation) 
 When you say "letters" do you mean A-Z and a-z in ASCII only? 
 When you say "numbers" do you mean 0-9 only? What about decimals, separators and exponents? 
 

 It gets complex quickly... 

 A great place to start is an interactive regex site, such as RegExr 

 You can also get Python specific Python Regex Tool 
 #6 [\w] matches (alphanumeric or underscore). 

 [\W] matches (not (alphanumeric or underscore)), which is equivalent to (not alphanumeric and not underscore) 

 You need [\W_] to remove ALL non-alphanumerics. 

 When using re.sub(), it will be much more efficient if you reduce the number of substitutions (expensive) by matching using [\W_]+ instead of doing it one at a time. 

 Now all you need is to define alphanumerics: 

 str object, only ASCII A-Za-z0-9: 

  re.sub(r'[\W_]+', '', s)
 

 str object, only locale-defined alphanumerics: 

  re.sub(r'[\W_]+', '', s, flags=re.LOCALE)
 

 unicode object, all alphanumerics: 

  re.sub(ur'[\W_]+', u'', s, flags=re.UNICODE)
 

 Examples for str object: 

 &gt;&gt;&gt; import re, locale
&gt;&gt;&gt; sall = ''.join(chr(i) for i in xrange(256))
&gt;&gt;&gt; len(sall)
256
&gt;&gt;&gt; re.sub('[\W_]+', '', sall)
'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'
&gt;&gt;&gt; re.sub('[\W_]+', '', sall, flags=re.LOCALE)
'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'
&gt;&gt;&gt; locale.setlocale(locale.LC_ALL, '')
'English_Australia.1252'
&gt;&gt;&gt; re.sub('[\W_]+', '', sall, flags=re.LOCALE)
'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\x83\x8a\x8c\x8e\
x9a\x9c\x9e\x9f\xaa\xb2\xb3\xb5\xb9\xba\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\
xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd8\xd9\xda\xdb\xdc\xdd\xde\
xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\
xf3\xf4\xf5\xf6\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff'
# above output wrapped at column 80
 

 Unicode example: 

 &gt;&gt;&gt; re.sub(ur'[\W_]+', u'', u'a_b A_Z \x80\xFF \u0404', flags=re.UNICODE)
u'abAZ\xff\u0404'