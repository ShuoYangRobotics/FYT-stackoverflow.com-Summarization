Question (ID-459668): Is there a builtin "hash to string" in Perl? I'm coming to learn Perl from a Python background where the following hash-to-string conversion is built in to the language: 

 &gt;&gt;&gt; d = {'a': 1, 'b': 2, 'c': 3}
&gt;&gt;&gt; str(d)
"{'a': 1, 'c': 3, 'b': 2}"
 

 Is there a builtin and/or module that has a subroutine with output along the lines of: 

 "('a' =&gt; 1, 'b' =&gt; 2, 'c' =&gt; 3)"
 

 Strangely, a web search for perl "hash to string" doesn't turn up anything along the lines I'm looking for. Thanks! 
 Answers (Total-6): #0 use Data::Dumper;
local $Data::Dumper::Terse = 1;
my $str = Dumper({a =&gt; 1, b =&gt; 2, c =&gt; 3});
 
 #1 See also JSON : 

 #!/usr/bin/perl
use warnings; use strict;
use JSON;

my $data = {a =&gt; 1, b=&gt; 2, c =&gt; 3};

print to_json($data);
 

 This produces: 

 {"c":3,"a":1,"b":2}
 
 #2 There is the Data::Dumper module which one way to do this sort of transformation. 
 #3 Use Data::Dump instead of Data::Dumper. It's basically the same, except without that annoying $VAR1 = ... cruft: 

 use Data::Dump "pp";
print pp({a =&gt; 1, b =&gt; 2, c =&gt; 3});
 

 Produces: 

 { a =&gt; 1, b =&gt; 2, c =&gt; 3 }
 

 If you're on Windows, Data::Dump has come pre-installed with ActivePerl since version 5.8. 
 #4 Yet Another Swallow Solution: 

 sub pp {
 my $h = shift();
 qq[{${\(join',',map"$_=&gt;$h-&gt;{$_}",keys%$h)}}]
}
print pp({a =&gt; 1, b =&gt; 2, c =&gt; 3});
 

 But use Data::Dumper instead. 

 For very fancy output you can use also: 

 use Data::Dumper;
use Perl::Tidy;
sub pp {
  local $Data::Dumper::Terse = 1;
  local $Data::Dumper::Indent = 0;
  my $source = Dumper(@_);
  my $result;
  Perl::Tidy::perltidy(
    source  =&gt; \$source,
    destination =&gt; \$result,
    argv  =&gt; [qw(-pbp -nst)]
  );
  return $result;
}
 

 If you prefer some keys should be first than you can use this approach (i want type first and position second): 

  local $Data::Dumper::Sortkeys = sub {
   [ sort {
       if ( $b eq 'type' )  {1}
       elsif ( $a eq 'type' )  {-1}
       elsif ( $b eq 'position' ) {1}
       elsif ( $a eq 'position' ) {-1}
       else      { $a cmp $b }
       } keys %{ $_[0] }
   ];
 };
 
 #5 Several of the above solutions have a problem if you have the potential for multi-level structures. 

 Specifically this flag: 

 $Data::Dumper::Terse = 1;
 

 As noted on the perldoc page for Data::Dumper, the "terse" flag could general not perl parseable output. 

 If you possibly are going to have multi-depth structures the proper thing to do would be to instead use: 

 $Data::Dumper::Indent = 0;
 

 Which is guaranteed to be perl parseable by eval, which makes for a very very easy way of doing serialization to plaintext...