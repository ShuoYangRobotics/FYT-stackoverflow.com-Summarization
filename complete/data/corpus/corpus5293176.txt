Question (ID-5293176): python/clojure equivalent to mathematica's NestWhileList Impetus: I was looking for something in python which would get me 

 f([1,2,3]) == [[1,2,3], [2,3], [3]]
 

 In clojure, this would just be (nest rest #(not (empty? %)) lst) , or it would if we had a nest function. Do we? I'm tired of staring at the clojure api list.. 

 Better approaches in python or clojure would also be appreciated.. 
 Answers (Total-6): #0 data = [1,2,3]
result = [ data[i:] for i in range(len(data)) ]
 
 #1 Return seqs: 

 user&gt; (take-while seq (iterate rest [1 2 3]))
([1 2 3] (2 3) (3))
 

 Return vectors: 

 user&gt; (take-while seq (iterate #(subvec % 1) [1 2 3]))
([1 2 3] [2 3] [3])
 

 I've seen this pattern packaged up into an iterate-while function, which is pretty much the same as your nest function: 

 (defn iterate-while [pred f x]
 (take-while pred (iterate f x)))
 

 Note that (seq x) is equivalent to, and preferred over, (not (empty? x)) 
 #2 Maybe something like this (the first thing that came to my mind, and I haven't been doing clojure recently, so it might not be the best solution): 

 (take-while identity (iterate next [1 2 3]))
 

 Update: 

 This solution Justin suggested is preferable (shorter, [] input, etc.): 

 (take-whil­e seq (iter­ate rest ...))
 
 #3 user&gt; (reductions conj [] [1 2 3])
([] [1] [1 2] [1 2 3])
 

 Gets you the empty version as well. If you want, you can instead do 

 user&gt; (take-while identity (iterate next [1 2 3]))
([1 2 3] (2 3) (3))
 

 or 

 user&gt; (rest (reductions conj [] [1 2 3]))
([1] [1 2] [1 2 3])
 
 #4 (partition-all 3 1 [1 2 3])
 

 yields 

 ((1 2 3) (2 3) (3))
 

 if you want it in a vector format 

 (vec (map vec (partition-all 3 1 [1 2 3])))
 

 p.s. the 3 and the 1 in partition-all prior to the [1 2 3] define that the vector should be partitioned in groups of 3, with a stepsize of 1, and are not part of the input vector. I use partition-all instead of partition, because partition-all doesn't mind about groups being shorter than the specified length of 3. 
 #5 Python: 

 def f(l):
 while l:
  yield l[:]
  l.pop(0)
 

 The copy ( [:] ) depends on whether you want a copy of the list or you are OK with modifying it in place. If you only need one of the sublists at a time, it may be faster to remove the copy and iterate over f . 

 Note also that a list is not the best data structure for this.