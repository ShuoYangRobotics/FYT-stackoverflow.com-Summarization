Question (ID-3908727): python regex question What is the correct regex statement using re.search() to find and return a file extension in a string. 

 Such as:
 (.+).(avi|rar|zip|txt) 

 I need it to search a string and if it contains any of those avi, rar, etc) return just that extension. 

 Thanks! 

 EDIT: should add that is needs to be case insensitive 
 Answers (Total-6): #0 the standard library is better ;) 

 &gt;&gt;&gt; os.path.splitext('hello.py')
('hello', '.py')
 
 #1 You need: 

 (.)\.(avi|rar|zip|txt)$
 

 Note the backslash to escape the dot. This will make it look for a literal dot rather than any character. 

 To make it case insensitive, use the RE.I flag in your search call. 

 re.search(r'(.)\.(avi|rar|zip|txt)$', string, re.I)
 
 #2 Short interactive run: 

 &gt;&gt;&gt; import re
&gt;&gt;&gt; pat="(.+)\.(avi|rar|zip|txt)"
&gt;&gt;&gt; re.search(pat, "abcdefg.zip", re.IGNORECASE).groups()
('abcdefg', 'zip')
&gt;&gt;&gt; re.search(pat, "abcdefg.ZIP", re.IGNORECASE).groups()
('abcdefg', 'ZIP')
&gt;&gt;&gt; 
 
 #3 (.+)[.](avi|rar|zip|txt)
 

 Then the group 2 will be extension. 

 I have just written a blog about Regular Expression
 http://blogs.appframe.com/erikv/2010-09-23-Regular-Expression 
if you want to read more about this. 
 #4 Since I think regex is evil... 

 def return_extension(filename):
 '''(This functions assumes that filenames such as `.foo` have extension
 `foo`.)
 '''
 tokens = filename.split('.')

 return '' if len(tokens) == 1 else tokens[-1]
 

 ...I advocate simply parsing the filename. 
 #5 If you know that the extension is at the very end of the string, this should work well: 

 .\.(avi|rar|zip|txt)$
 

 
 The first bit will ensure that there's some character before the dot. 
 The $ specifies that the file extension is at the end of the string, i.e. the $ means "the string ends here". For gory details on this, including some edge cases with newlines that you should be aware of see the comment discussion for JoshD's answer , as well as the entry for $ in the docs . 
 

 So then the only entry in the match.groups() tuple, i.e. match.groups()[0] , will be the extension itself.