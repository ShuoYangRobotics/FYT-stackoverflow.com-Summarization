Question (ID-823561): What does += mean in Python? I see code like this for example in Python: 

  if cnt &gt; 0 and len(aStr) &gt; 1:
  while cnt &gt; 0:     
   aStr = aStr[1:]+aStr[0]
   cnt += 1
 

 What does the += mean? 
 Answers (Total-6): #0 a += b is essentially the same as a = a + b , except that: 

 
 + always returns a newly allocated object, but += should (but doesn't have to) modify the object in-place if it's mutable (e.g. list or dict , but int and str are immutable). 
 In a = a + b , a is evaluated twice. 
 

 http://docs.python.org/reference/simple_stmts.html#augmented-assignment-statements 

 

 If this is the first time you encounter the += operator, you may wonder why it matters that it may modify the object in-place instead of building a new one. Here is an example: 

 # two variables referring to the same list
&gt;&gt;&gt; list1 = []
&gt;&gt;&gt; list2 = list1

# += modifies the object pointed to by list1 and list2
&gt;&gt;&gt; list1 += [0]
&gt;&gt;&gt; list1, list2
([0], [0])

# + creates a new, independent object
&gt;&gt;&gt; list1 = []
&gt;&gt;&gt; list2 = list1
&gt;&gt;&gt; list1 = list1 + [0]
&gt;&gt;&gt; list1, list2
([0], [])
 
 #1 a += b
 

 is in this case the same as 

 a = a + b
 

 In this case cnt += 1 means that cnt is increased by one. 

 Note that the code you pasted will loop indefinitely if cnt > 0 and len(aStr) > 1. 

 Edit : quote Carl Meyer : ``[..] the answer is misleadingly mostly correct. There is a subtle but very significant difference between + and +=, see Bastien's answer .''. 
 #2 Google 'python += operator' leads you to http://docs.python.org/library/operator.html 

 Search for += once the page loads up for a more detailed answer. 
 #3 FYI: it looks like you might have an infinite loop in your example... 

 if cnt &gt; 0 and len(aStr) &gt; 1:
 while cnt &gt; 0:     
  aStr = aStr[1:]+aStr[0]
  cnt += 1
 

 
 a condition of entering the loop is that cnt is greater than 0 
 the loop continues to run as long as cnt is greater than 0 
 each iteration of the loop increments cnt by 1 
 

 The net result is that cnt will always be greater than 0 and the loop will never exit. 
 #4 += is the in-place addition operator . 

 It's the same as doing cnt = cnt + 1 . For example: 

 &gt;&gt;&gt; cnt = 0
&gt;&gt;&gt; cnt += 2
&gt;&gt;&gt; print cnt
2
&gt;&gt;&gt; cnt += 42
&gt;&gt;&gt; print cnt
44
 

 The operator is often used in a similar fashion to the ++ operator in C-ish languages, to increment a variable by one in a loop ( i += 1 ) 

 There are similar operator for subtraction/multiplication/division/power and others: 

 i -= 1 # same as i = i - 1
i *= 2 # i = i * 2
i /= 3 # i = i / 3
i **= 4 # i = i ** 4
 

 The += operator also works on strings, for example: 

 &gt;&gt;&gt; s = "Hi"
&gt;&gt;&gt; s += " there"
&gt;&gt;&gt; print s
Hi there
 

 People tend to recommend against doing this for performance reason, but for the most scripts this really isn't an issue. To quote from the "Sequence Types" docs : 

 
 
 If s and t are both strings, some Python implementations such as CPython can usually perform an in-place optimization for assignments of the form s=s+t or s+=t. When applicable, this optimization makes quadratic run-time much less likely. This optimization is both version and implementation dependent. For performance sensitive code, it is preferable to use the str.join() method which assures consistent linear concatenation performance across versions and implementations. 
 
 

 The str.join() method refers to doing the following: 

 mysentence = []
for x in range(100):
 mysentence.append("test")
" ".join(mysentence)
 

 ..instead of the more obvious: 

 mysentence = ""
for x in range(100):
 mysentence += " test"
 

 The problem with the later is (aside from the leading-space), depending on the Python implementation, the Python interpreter will have to make a new copy of the string in memory every time you append (because strings are immutable), which will get progressively slower the longer the string to append is.. Whereas appending to a list then joining it together into a string is a consistent speed (regardless of implementation) 

 If you're doing basic string manipulation, don't worry about it. If you see a loop which is basically just appending to a string, consider constructing an array, then "".join() 'ing it. 
 #5 it means "append "THIS" to the current value" 

 example: 

 a = "hello";
a += " world"; 

 printing a now will output: "hello world"