Question (ID-534375): Passing values in Python When you pass a collection like list, array to another function in python, does it make a copy of it, or is it just a pointer? 
 Answers (Total-7): #0 Python passes by reference . 

 
 Python passes references-to-objects by
 value (like Java), and everything in
 Python is an object. This sounds
 simple, but then you will notice that
 some data types seem to exhibit
 pass-by-value characteristics, while
 others seem to act like
 pass-by-reference... what's the deal? 
 
 It is important to understand mutable
 and immutable objects. Some objects,
 like strings, tuples, and numbers, are
 immutable. Altering them inside a
 function/method will create a new
 instance and the original instance
 outside the function/method is not
 changed. Other objects, like lists
 and dictionaries are mutable, which
 means you can change the object
 in-place. Therefore, altering an
 object inside a function/method will
 also change the original object
 outside. 
 
 #1 Thing is, the whole reference/value concept won't fit into python. Python has no "value" of a variable. Python has only objects and names that refer to objects. 

 So when you call a function and put a "name" inside the parenthesis, like this: 

 def func(x): # defines a function that takes an argument
 ... # do something here

func(myname) # calling the function
 

 The actual object that myname is pointing is passed, not the name myname itself . Inside the function another name ( x ) is given to refer to the same object passed. 

 You can modify the object inside the function if it is mutable, but you can't change what the outside name is pointing to . Just the same that happens when you do 

 anothername = myname
 

 Therefore I can answer your question with: 

 it is "pass by value" but all values are just references to objects. 
 #2 A refernce is passed but if the parameter is an immutable object, modifying it within the method will create a new instance. 

 Here's a thread on the subject. 
 #3 The object is passed. Not a copy, but a reference to the underlying object. 
 #4 I would also recommend looking at the copy module: 

 Python documentation for copy 

 It will help you to understand the underlying issues and how to use it to perform your own deep copy. 
 #5 By reference: 

 &gt;&gt;&gt; x = [0,1,2,3]
&gt;&gt;&gt; def foo(x_list):
 x_list[0] = 1


&gt;&gt;&gt; foo(x)
&gt;&gt;&gt; x
[1, 1, 2, 3]
 
 #6 @Harper this will not work when x is a number,string or a tuple. 

 To put it in simple words, we can say that in python functions, the parameters passed are references to the objects and these references are passed by value.