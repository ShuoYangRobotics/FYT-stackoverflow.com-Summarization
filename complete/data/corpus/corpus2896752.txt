Question (ID-2896752): Removing Item From List - during iteration - what's wrong with this idiom? As an experiment, I did this: 

 letters=['a','b','c','d','e','f','g','h','i','j','k','l']
for i in letters:
 letters.remove(i)
print letters
 

 The last print shows that not all items were removed ? (every other was). 

 IDLE 2.6.2  
&gt;&gt;&gt; ================================ RESTART ================================
&gt;&gt;&gt; 
['b', 'd', 'f', 'h', 'j', 'l']
&gt;&gt;&gt; 
 

 What's the explanation for this ? How it could this be re-written to remove every item ? 
 Answers (Total-6): #0 Some answer explain why this happens and some explain what you should've done. I'll shamelessly put the pieces together. 

 

 
 What's the explanation for this? 
 

 Because the Python language is designed to handle this use case differently. The documentation makes it clear: 

 
 It is not safe to modify the sequence being iterated over in the loop (this can only happen for mutable sequence types, such as lists). If you need to modify the list you are iterating over (for example, to duplicate selected items) you must iterate over a copy . 
 

 Emphasis mine. See the linked page for more -- the documentation is copyrighted and all rights are reserved. 

 You could easily understand why you got what you got, but it's basically undefined behavior that can easily change with no warning from build to build. Just don't do it. 

 It's like wondering why i += i++ + ++i does whatever the hell it is it that line does on your architecture on your specific build of your compiler for your language -- including but not limited to trashing your computer and making demons fly out of your nose :) 

 

 
 How it could this be re-written to remove every item ? 
 

 
 del letters[:] (if you need to change all references to this object) 
 letters[:] = [] (if you need to change all references to this object) 
 letters = [] (if you just want to work with a new object) 
 

 Maybe you just want to remove some items based on a condition? In that case, you should iterate over a copy of the list. The easiest way to make a copy is to make a slice containing the whole list with the [:] syntax, like so: 

 #remove unsafe commands
commands = ["ls", "cd", "rm -rf /"]
for cmd in commands[:]:
 if "rm " in cmd:
 commands.remove(cmd)
 
 #1 You cannot modify the list you are iterating, otherwise you get this weird type of result. To do this, you must iterate over a copy of the list: 

 for i in letters[:]:
 letters.remove(i)
 
 #2 You cannot iterate over a list and mutate it at the same time, instead iterate over a slice: 

 letters=['a','b','c','d','e','f','g','h','i','j','k','l']
for i in letters[:]: # note the [:] creates a slice
  letters.remove(i)
print letters
 

 That said, for a simple operation such as this, you should simply use: 

 letters = []
 
 #3 It removes the first occurrence, and then checks for the next number in the sequence. Since the sequence has changed it takes the next odd number and so on... 

 
 take "a" 
 remove "a" -> the first item is now "b" 
 take the next item, "c"
-... 
 
 #4 what you want to do is: 

 letters[:] = []
 

 or 

 del letters[:]
 

 This will preserve original object letters was pointing to. Other options like, letters = [] , would create a new object and point letters to it: old object would typically be garbage-collected after a while. 

 The reason not all values were removed is that you're changing list while iterating over it. 

 ETA : if you want to filter values from a list you could use list comprehensions like this: 

 &gt;&gt;&gt; letters=['a','b','c','d','e','f','g','h','i','j','k','l']
&gt;&gt;&gt; [l for l in letters if ord(l) % 2]
['a', 'c', 'e', 'g', 'i', 'k']
 
 #5 Probably python uses pointers and the removal starts at the front. The variable „letters“ in the second line partially has a different value than tha variable „letters“ in the third line. When i is 1 then a is being removed, when i is 2 then b had been moved to position 1 and c is being removed. You can try to use „while“.