Question (ID-3608411): Python: How can I find all files with a particular extension? I am trying to find all the .c files in a directory using Python. 

 I wrote this, but it is just returning me all files - not just .c files. 

 import os
import re

results = []

for folder in gamefolders:
 for f in os.listdir(folder):
  if re.search('.c', f):
   results += [f]

print results
 

 How can I just get the .c files? 
 Answers (Total-8): #0 Try "glob": 

 &gt;&gt;&gt; import glob
&gt;&gt;&gt; glob.glob('./[0-9].*')
['./1.gif', './2.txt']
&gt;&gt;&gt; glob.glob('*.gif')
['1.gif', 'card.gif']
&gt;&gt;&gt; glob.glob('?.gif')
['1.gif']
 
 #1 try changing the inner loop to something like this 

 results += [each for each in os.listdir(folder) if each.endswith('.c')]
 
 #2 for _,_,filenames in os.walk(folder):
 for file in filenames:
  fileExt=os.path.splitext(file)[-1]
  if fileExt == '.c':
   results.append(file)
 
 #3 KISS 

 # KISS

import os

results = []

for folder in gamefolders:
 for f in os.listdir(folder):
  if f.endswith('.c'):
   results.append(f)

print results
 
 #4 For another alternative you could use fnmatch 

 import fnmatch
import os

results = []
for root, dirs, files in os.walk(path)
 for _file in files:
  if fnmatch.fnmatch(_file, '*.c'):
   results.append(os.path.join(root, _file))

print results
 

 or with a list comprehension: 

 for root, dirs, files in os.walk(path)
 [results.append(os.path.join(root, _file))\
  for _file in files if \
   fnmatch.fnmatch(_file, '*.c')] 
 

 or using filter: 

 for root, dirs, files in os.walk(path):
 [results.append(os.path.join(root, _file))\
  for _file in fnmatch.filter(files, '*.c')]  
 
 #5 import os, re
cfile = re.compile("^.*?\.c$")
results = []

for name in os.listdir(directory):
 if cfile.match(name):
  results.append(name)
 
 #6 If you replace '.c' with '[.]c$' , you're searching for files that contain .c as the last two characters of the name, rather than all files that contain a c , with at least one character before it. 

 Edit : Alternatively, match f[-2:] with '.c' , this MAY be computationally cheaper than pulling out a regexp match. 
 #7 The implementation of shutil.copytree is in the docs. I mofdified it to take a list of extentions to INCLUDE. 

 def my_copytree(src, dst, symlinks=False, *extentions):
 """ I modified the 2.7 implementation of shutils.copytree
 to take a list of extentions to INCLUDE, instead of an ignore list.
 """
 names = os.listdir(src)
 os.makedirs(dst)
 errors = []
 for name in names:
  srcname = os.path.join(src, name)
  dstname = os.path.join(dst, name)
  try:
   if symlinks and os.path.islink(srcname):
    linkto = os.readlink(srcname)
    os.symlink(linkto, dstname)
   elif os.path.isdir(srcname):
    my_copytree(srcname, dstname, symlinks, *extentions)
   else:
    ext = os.path.splitext(srcname)[1]
    if not ext in extentions:
     # skip the file
     continue
    copy2(srcname, dstname)
   # XXX What about devices, sockets etc.?
  except (IOError, os.error), why:
   errors.append((srcname, dstname, str(why)))
  # catch the Error from the recursive copytree so that we can
  # continue with other files
  except Error, err:
   errors.extend(err.args[0])
 try:
  copystat(src, dst)
 # except WindowsError: # cant copy file access times on Windows
 #  pass
 except OSError, why:
  errors.extend((src, dst, str(why)))
 if errors:
  raise Error(errors)
 

 Usage: For example, to copy only .config and .bat files.... 

 
 
  
  my_copytree(source, targ, '.config', '.bat')