Question (ID-8525765): load parameters from a file in Python I am writing a Python class to model a process and I want to initialized the parameters from a file, say 'input.dat' . The format of the input file looks like this. 

 'input.dat' file: 

 Z0: 0 0
k: 0.1
g: 1
Delta: 20
t_end: 300
 

 The code I wrote is the following. It works but appears redundant and inflexible. Is there a better way to do the job? Such as a loop to do readline() and then match the keyword? 

 def load(self,filename="input.dat"):
 FILE = open(filename)
 s = FILE.readline().split()
 if len(s) is 3:
  self.z0 = [float(s[1]),float(s[2])] # initial state
 s = FILE.readline().split()
 if len(s) is 2:
  self.k = float(s[1]) # kappa
 s = FILE.readline().split()
 if len(s) is 2:
  self.g = float(s[1])
 s = FILE.readline().split()
 if len(s) is 2:
  self.D = float(s[1]) # Delta
 s = FILE.readline().split()
 if len(s) is 2:
  self.T = float(s[1]) # end time
 
 Answers (Total-10): #0 
 If you are open to some other kind of file where you can keep your parameters, I would suggest you to use YAML file. 
 The python lib is PyYAML This is how you can easily use it with Python 
 For better introduction, look at the wiki article : http://en.wikipedia.org/wiki/YAML 
 The benefit is you can read the parameter values as list, maps 
 You would love it! 
 
 #1 Try the following: 

 def load(self, filename="input.dat"):
 d = {"Z0": "z0", "k": "k", "g": "g", "Delta": "D", "t_end": "T"}
 FILE = open(filename)
 for line in FILE:
  name, value = line.split(":")
  value = value.strip()
  if " " in value:
   value = map(float, value.split())
  else:
   value = float(value)
  setattr(self, d[name], value)
 

 Proof that it works: 

 &gt;&gt;&gt; class A(object): pass
...
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; load(a)
&gt;&gt;&gt; a.__dict__
{'k': 0.10000000000000001, 'z0': [0.0, 0.0], 'D': 20.0, 'g': 1.0, 'T': 300.0}
 
 #2 You can loop over the lines in a file as follows: 

 for line in FILE:
 s = line.split
 var = s[0]
 if var == 'z0:':
  self.z0 = [float(s1), float(s2)]
 elif var == 'k:':
   etc. 
 

 and so on. 
 #3 Perhaps this might give you what you need: 

 def load(self,filename='input.dat'):
 with open(filename) as fh:
  for line in fh:
   s = line.split()
   if len(s) == 2:
    setattr(self,s[1],s[2])
   elif len(s) == 3:
    setattr(self,s[1],s[2:])
 

 I also didn't include any error checking, but setattr is very handy. 
 #4 Something like this: 

 def load(self,filename="input.dat"):

 # maps names to number of fields they need
 # only necessary for variables with more than 1 field
 argmap = dict(Z0=2)

 # maps config file names to their attribute names on the object
 # if name is the same both places, no need
 namemap = dict(Z0="z0", Delta="D", t_end="T")

 with open(filename) as FILE:
  for line in FILE:
   s = line.split()
   var = s[0].rstrip(":")
   try:
    val = [float(x) for x in s[1:]]
   except ValueError:
    continue
   if len(val) == varmap.get(var, 1):
    if len(val) == 1:
     val = val[0]
    setattr(self, namemap.get(var, var), val)
 
 #5 Though this may not look very intuitive and you may have to change your program approach a bit, but the following approach is more flexible and clean. 

 fin=open("input.dat")
params={k:[float(i) for i in v.split()]
for k,v in (f[:-1].split(":") for f in fin.xreadlines())}
&gt;&gt;&gt; params.keys() #Will List all the variables
['k', 't_end', 'Z0', 'g', 'Delta']
&gt;&gt;&gt; params['k'][0] #Value of K
0.1
&gt;&gt;&gt; params['Z0'] #Value of Z0 as a List
[0.0, 0.0]
&gt;&gt;&gt; 
 

 If you don;t intend to save single valued variables as list you might do it this way 

 for k,v in (f[:-1].split(":") for f in fin.xreadlines()):
  v= [float(i) for i in v.split()]
 if len(v) == 1: v = v[0]
 params[k] = v
 

 Note*** 

 What you are trying to do here is... 

 
 Read the file one line at a time. 
 Split the Line with the delimiter ":" 
 The first part is the key and the rest is value. 
 Iterate over the values to convert to float. Would create a list 
 Through a Dictionary Comprehension, add the key and the generated value. 
 

 If tomorrow the input file specification changes, you don't need to change the parsing logic and accommodate more floating point variables as required. 
 #6 Python objects have a built-in __dict__ member. You can modify it, and then refer to properties as obj.key . 

 class Data(object):
 def __init__(self, path='infile.dat'):
 with open(path, 'r') as fo:
  for line in fo.readlines():
  if len(line) &lt; 2: continue

  parts = [s.strip(' :\n') for s in line.split(' ', 1)]
  numbers = [float(s) for s in parts[1].split()]

  # This is optional... do you want single values to be stored in lists?
  if len(numbers) == 1: numbers = numbers[0]
  self.__dict__[parts[0]] = numbers
  # print parts -- debug

obj = Data('infile.dat')
print obj.g
print obj.Delta
print obj.Z0
 

 At the end of this, we print out a few of the keys. Here's the output of those. 

 1.0
20.0
[0.0, 0.0]
 

 For consistency, you can remove the line marked "optional" in my code, and have all objects in lists -- regardless of how many elements they have. That will make using them quite a bit easier, because you never have to worry about obj.g[0] returning an error. 
 #7 Here's another one 

 def splitstrip(s):
 return s.split(':')[1].strip()

with open('input.dat','r') as f:
 a.z0 = [float(x) for x in splitstrip(f.readline()).split(' ')]
 a.k, a.g, a.D, a.T = tuple([float(splitstrip(x)) for x in f.read().rstrip().split('\n')])
 

 ;) 
 #8 Assuming the params are coming from a safe place (made by you or users, not the internet), just make the parameters file a Python file, params.py : 

 Z0 = (0, 0)
k = 0.1
g = 1
Delta = 20
t_end = 300
 

 Then in your code all you need is: 

 import params
fancy_calculation(10, k=params.k, delta=params.Delta)
 

 The beauty of this is two-fold: 1) simplicity, and 2) you can use the power of Python in your parameter descriptions -- particularly useful here, for example: 

 k = 0.1
Delta = 20
g = 3 * k + Delta
 

 Alternatively, you could use Python's built-in JSON or ConfigParser .INI parser modules. 
 #9 As others have mentioned, in Python you can create object attributes on-the-fly. That means you could do something like the following can create a Params object as it's read-in. I've tried to make the code data-driven and thus relatively flexible. 

 # maps label to attribute name and types
label_attr_map = {
  "Z0:": ["z0", float, float],
  "k:": [ "k", float],
  "g:": [ "g", float],
 "Delta:": [ "D", float],
 "t_end:": [ "T", float]
}

class Params(object):
 def __init__(self, input_file_name):
  with open(input_file_name, 'r') as input_file:
   for line in input_file:
    row = line.split()
    label = row[0]
    data = row[1:] # rest of row is data list

    attr = label_attr_map[label][0]
    datatypes = label_attr_map[label][1:]

    values = [(datatypes[i](data[i])) for i in range(len(data))]
    self.__dict__[attr] = values if len(values) &gt; 1 else values[0]


params = Params('input.dat')
print 'params.z0:', params.z0
print 'params.k:', params.k
print 'params.g:', params.g
print 'params.D:', params.D
print 'params.T:', params.T
 

 Output: 

 params.z0: [0.0, 0.0]
params.k: 0.1
params.g: 1.0
params.D: 20.0
params.T: 300.0