Question (ID-9072847): Interpreting Strings as Other Data Types in Python I'm reading a file into python 2.4 that's structured like this: 

 field1: 7
field2: "Hello, world!"
field3: 6.2
 

 The idea is to parse it into a dictionary that takes fieldfoo as the key and whatever comes after the colon as the value. 

 I want to convert whatever is after the colon to it's "actual" data type, that is, '7' should be converted to an int , "Hello, world!" to a string, etc. The only data types that need to be parsed are ints, floats and strings. Is there a function in the python standard library that would allow one to make this conversion easily? 

 The only things this should be used to parse were written by me, so (at least in this case) safety is not an issue. 
 Answers (Total-6): #0 First parse your input into a list of pairs like fieldN: some_string . You can do this easily with re module, or probably even simpler with slicing left and right of the index line.strip().find(': ') . Then use a literal eval on the value some_string : 

 &gt;&gt;&gt; import ast
&gt;&gt;&gt; ast.literal_eval('6.2')
6.2
&gt;&gt;&gt; type(_)
&lt;type 'float'&gt;
&gt;&gt;&gt; ast.literal_eval('"Hello, world!"')
'Hello, world!'
&gt;&gt;&gt; type(_)
&lt;type 'str'&gt;
&gt;&gt;&gt; ast.literal_eval('7')
7
&gt;&gt;&gt; type(_)
&lt;type 'int'&gt;
 
 #1 For older python versions, like the one being asked, the eval function can be used but, to reduce evilness, a dict to be the global namespace should be used as second argument to avoid function calls. 

 &gt;&gt;&gt; [eval(i, {"__builtins__":None}) for i in ['6.2', '"Hello, world!"', '7']]
[6.2, 'Hello, world!', 7]
 
 #2 You can attempt to convert it to an int first using the built-in function int() . If the string cannot be interpreted as an int a ValueError exception is raised. You can then attempt to convert to a float using float() . If this fails also then just return the initial string 

 def interpret(val):
 try:
  return int(val)
 except ValueError:
  try:
   return float(val)
  except ValueError:
   return val
 
 #3 Since the "only data types that need to be parsed are int , float and str " , maybe somthing like this will work for you: 

 entries = {'field1': '7', 'field2': "Hello, world!", 'field3': '6.2'}

for k,v in entries.items():
 if v.isdecimal():
  conv = int(v)
 else:
  try:
   conv = float(v)
  except ValueError:
   conv = v
 entries[k] = conv

print(entries)
# {'field2': 'Hello, world!', 'field3': 6.2, 'field1': 7}
 
 #4 Hope this helps to do what you are trying to do: 

 #!/usr/bin/python

a = {'field1': 7}
b = {'field2': "Hello, world!"}
c = {'field3': 6.2}

temp1 = type(a['field1'])
temp2 = type(b['field2'])
temp3 = type(c['field3'])

print temp1
print temp2
print temp3
 
 #5 Thanks to wim for helping me figure out what I needed to search for to figure this out. 

 One can just use eval() : 

 &gt;&gt;&gt; a=eval("7")
&gt;&gt;&gt; b=eval("3")
&gt;&gt;&gt; a+b
10
&gt;&gt;&gt; b=eval("7.2")
&gt;&gt;&gt; a=eval("3.5")
&gt;&gt;&gt; a+b
10.699999999999999
&gt;&gt;&gt; a=eval('"Hello, "')
&gt;&gt;&gt; b=eval('"world!"')
&gt;&gt;&gt; a+b
'Hello, world!'