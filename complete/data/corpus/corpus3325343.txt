Question (ID-3325343): Why Python is not full object-oriented? I want to know , why Python is not full object-oriented ? (e.g : Does not support private , public , protected) .
What`s the advantage and disadvantage of this ? By this expressions , Python is suitable for what applications (Desktop , Scientific , Web or ...) ? 

 Thanks . 
 Answers (Total-8): #0 Guido once said that "we are all consenting adults here". Here's the longer explanation from long ago: http://mail.python.org/pipermail/tutor/2003-October/025932.html 

 There's an agreement that underscores mean private elements and you should not use them. Unless you know what you're doing and you really want to. 

 The link also mentions another way to put it in case of Perl: 

 
 "a Perl module would prefer that you
 stayed out of its living room 
 because you weren't invited, not
 because it has a shotgun." 
 
 #1 Python doesn't support strong encapsulation , which is only one of many features associated with the term "object-oriented". 

 The answer is simply philosophy. Guido doesn't like hiding things, and many in the Python community agree with him. 
 #2 I believe Python is more of a very practical, pragmatic language. 

 Concepts which offer value to the developer are put in, without too much consideration about theological concepts like "proper OO design" and stuff. It's a language for people who have real work to do. 

 I think Python is suitable for all kinds of environments, though Desktop is a bit difficult due to the lack of a single framework. For all applications it's handy to use a framework,
like NumPy for computational stuff, Twisted or Django for web stuff, and WxWidgets or other for Desktop stuff. 
 #3 Access modifiers (public, private, protected, etc) are not required for class-based programming . They are just a feature, like multiple inheritance . 
 #4 it does support public and private. 

 See http://diveintopython.org/object_oriented_framework/private_functions.html ,found from 5 seconds on google. 
 #5 I think Python is designed to be a hybrid. You can write in object oriented or functional styles. 

 The hallmarks of object-orientation are abstraction, encapsulation, inheritance, and polymorphism. Which of these are missing from Python? 

 Object-orientation is a continuum. We might say that Smalltalk is the purest of the pure, and all others occupy different places on the scale. 

 No one can say what the value of being 100% pure is. It's possible to write very good object-oriented code in languages that aren't Smalltalk, Python included. 

 Python is useful in all those areas: scientific (NumPy), web (Django), and desktop. 
 #6 What exactly is full object oriented? Alan Kay said "Actually I made up the term "object-oriented", and I can tell you I did not have C++ in mind.". Admittedly, he probably did not have python in mind either, but it is worth noting that Smalltalk also protects classes by convention, no mandate. 
 #7 A language is said to Full Objective Oriented if it has no primitive data tipes. Each data type we need to construct.