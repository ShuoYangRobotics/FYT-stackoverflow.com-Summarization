Question (ID-6359734): merge multiple lines into single line by value of column I have a tab-delimited text file that is very large. Many lines in the file have the same value for one of the columns in the file. I want to put them into same line. For example: 

 a foo
a bar
a foo2
b bar
c bar2
 

 After run the script it should become: 

 a foo;bar;foo2
b bar
c bar2
 

 how can I do this in either a shell script or in Python? 

 thanks. 
 Answers (Total-6): #0 With awk you can try this 

 { a[$1] = a[$1] ";" $2 }
END { for (item in a ) print item, a[item] }
 

 So if you save this awk script in a file called awkf.awk and if your input file is ifile.txt, run the script 

 awk -f awkf.awk ifile.txt | sed 's/ ;/ /'
 

 The sed script is to remove out the leading ; 

 Hope this helps 
 #1 from collections import defaultdict

items = defaultdict(list)
for line in open('sourcefile'):
 key, val = line.split('\t')
 items[key].append(val)

result = open('result', 'w')
for k in sorted(items):
 result.write('%s\t%s\n' % (k, ';'.join(items[k])))
result.close() 
 

 not tested 
 #2 Tested with Python 2.7: 

 import csv

data = {}

reader = csv.DictReader(open('infile','r'),fieldnames=['key','value'],delimiter='\t')
for row in reader:
 if row['key'] in data:
  data[row['key']].append(row['value'])
 else:
  data[row['key']] = [row['value']]

writer = open('outfile','w')
for key in data:
 writer.write(key + '\t' + ';'.join(data[key]) + '\n')
writer.close()
 
 #3 def compress(infilepath, outfilepath):
 input = open(infilepath, 'r')
 output = open(outfilepath, 'w')
 prev_index = None

 for line in input:
  index, val = line.split('\t')
  if index == prev_index:
   output.write(";%s" %val)
  else:
   output.write("\n%s %s" %(index, val))
 input.close()
 output.close()
 

 Untested, but should work. Please leave a comment if there are any concerns 
 #4 A Perl way to do it: 

 #!/usr/bin/perl 
use strict;
use warnings;
use Data::Dumper;

open my $fh, '&lt;', 'path/to/file' or die "unable to open file:$!";
my %res;
while(&lt;$fh&gt;) {
 my ($k, $v) = split;
 push @{$res{$k}}, $v;
}
print Dumper \%res;
 

 output: 

 $VAR1 = {
  'c' =&gt; [
    'bar2'
    ],
  'a' =&gt; [
    'foo',
    'bar',
    'foo2'
    ],
  'b' =&gt; [
    'bar'
    ]
 };
 
 #5 #! /usr/bin/env perl

use strict;
use warnings;

# for demo only
*ARGV = *DATA;

my %record;
my @order;
while (&lt;&gt;) {
 chomp;
 my($key,$combine) = split;

 push @order, $key unless exists $record{$key};
 push @{ $record{$key} }, $combine;
}

print $_, "\t", join(";", @{ $record{$_} }), "\n" for @order;

__DATA__
a foo
a bar
a foo2
b bar
c bar2
 

 Output (with tabs converted to spaces because Stack Overflow breaks the output): 

 a  foo;bar;foo2
b  bar
c  bar2