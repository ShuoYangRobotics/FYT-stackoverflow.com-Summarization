Question (ID-757949): Why doesn't the regex match when I add groups? I have this regex code in python : 

 if re.search(r"\{\\fad|fade\(\d{1,4},\d{1,4}\)\}", text):
 print(re.search(r"\{\\fad|fade\((\d{1,4}),(\d{1,4})\)\}", text).groups())
 

 text is {\fad(200,200)}Ã‰pisode 101 : {\i1}The Ghost{\i0}\Nv. 1.03 and read from a file (don't know if that helps). 

 This returns the following: 

 (None, None)
 

 When I change the regex in the print to r"\{\\fad\((\d{1,4}),(\d{1,4})\)\}" , it returns the correct values: 

 (200, 200)
 

 Can anyone see why the conditional fad|fade matches the regex in the re.search but doesn't return the correct values of the groups in the print? 

 Thanks. 
 Answers (Total-6): #0 Put extra parens around the choice: re.search(r"{(?:\\fad|fade)\((\d{1,4}),(\d{1,4})\)}", text).groups() 

 Also, escaping {} braces isn't necessary, it just needlessly clutters your regexp. 
 #1 The bracket is part of the or branch starting with fade, so it's looking for either "{fad" or "fade(...". You need to group the fad|fade part together. Try: 

 r"\{\\(?:fad|fade)\(\d{1,4},\d{1,4}\)\}"
 

 [Edit] 
The reason you do get into the if block is because the regex is matching, but only because it detects it starts with "{\fad". However, that part of the match contains no groups. You need to match with the part that defines the groups if you want to capture them. 
 #2 Try this: 

 r"\{\\fade?\(\d{1,4},\d{1,4}\)\}"
 
 #3 I think your conditional is looking for "\fad" or "fade", I think you need to move a \ outside the grouping if you want to look for "\fad" or "\fade". 
 #4 Try this instead: 

 r"\{\\fade?\((\d{1,4}),(\d{1,4})\)\}"
 

 The e? is an optional e .
The way you have it now matches {\fad or fade(0000,0000)} 
 #5 I don't know the python dialect of regular expressions, but wouldn't you need to 'group' the "fad|fade" somehow to make sure it isn't trying to find "fad OR fade(etc..."?