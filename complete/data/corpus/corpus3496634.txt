Question (ID-3496634): python:[[1,2],[3,4],[5,6],[7,8]] transform into [[1],[2,3],[4,5],[6,7],[8]] and vice versa my current solution-pointers would be 

 
 ether via a iterator class which yields the new assembled inner lists 
 or via a iter function which yields the new assembled inner lists 
 

 is there another, better way to solve this challenge? 

 Edit 

 @Glenn: good objection.
I wasn't thinking of that because I experienced lists not ordered in the manner I thought. 

 @THC4k: thank you for your solution. I learned chain.from_iterable 

 @Mike DeSimone: Hmm tested your solution but something went wrong maybe I missed something yet,... 

 @Jamie and Odomontois:
Thank you for pointing out to be more detailed 

 my goal 

 I am forging a small algorithm which transforms a list of tasks – pairs/tuples: (start,stop) –
to a simplified list of task, where the overlapping tasks merged together. 

 One exeption: my algorithm fails when one event is completely overlapped by another (s1 s2 e2 e1 ) 

 Detailed: 

 
 I've a list 'taskList' with pairs (lesson
learned - tuples :). 
 each tuple
consists of 2 datetimeobjects: start
and end of a task. 
 important: the
chronology of 'taskList' where the
order is determined by start because
tasks may overlapp 
 'taskList' consists several days, therefore datetime objects 
 

 Example, just string representation of time for readability 

 taskList = [(9:00,10:00),(9:30,11:00),(11:00,12:30),(13:30,14:00),(14:00,18:00)]
 

 final endresult : 

 result = [(9:00,12:30), (13:30,18:00)]
 

 now my thought was, when I rearrange the 'taskList' in the manner I questioned 

 taskListT1 = [(9:00,),(10:00,9:30),(11:00,11:00),(12:30,13:30),(14:00,14:00),(18:00,)]
 

 now I can eliminate those tuples (a,b) where a >= b: 

 taskListT2 = [(9:00,),(12:30,13:30),(18:00,)]
 

 and transform back: 

 result = [(9:00,12:30), (13:30,18:00)]
 
 Answers (Total-6): #0 Well, here is the solutions with yield: 

 # transform forwards
def transform_pairs( lst ):
 it = iter(lst)
 a,last = next(it)
 yield [a]
 for a,b in it:
  yield last, a
  last = b
 yield [last]
 

 Transforming the list back should look very similar, but I'll leave that to the reader. 

 Here is another slightly more complicated one that can transform in both directions. It yield tuples because lists of fixed length are lame . 

 from itertools import chain

def transform( iterable, offset):
 it = chain.from_iterable(iterable) # turn it back to one long list.
 if offset:
  yield next(it), # the trailing `,` makes this a tuple.
 for item in it:
  try:
   x = next(it)
  except StopIteration: # there is no 2nd item left
   yield item,
  else:
    yield item, x # yield the pair

print list(transform(transform([[1,2],[3,4],[5,6],[7,8]], True), False))
 
 #1 Going for the 'another, better way' option (even gets the OP's exception correct): 

 def compress_task_list(tasks):
 tasks = list(tasks)
 tasks.sort(key=lambda item: item[0]) # make sure list is in order by start time
 result = []
 first_start = tasks[0][0]
 final_stop = tasks[0][1]
 for start, stop in tasks[1:]:
  if start &gt; final_stop:
   result.append((first_start, final_stop))
   first_start = start
   final_stop = stop
  elif stop &gt; final_stop:
   final_stop = stop
 result.append((first_start, final_stop))
 return tuple(result)

if __name__ == '__main__':
 import unittest

 class Test_Compress_Task_List(unittest.TestCase):
  def test_01(self):
   "completely separate"
   initial = ((8.0, 9.5), (10.0, 12.0), (13.0, 15.5), (16.0, 17.0))
   expected = ((8.0, 9.5), (10.0, 12.0), (13.0, 15.5), (16.0, 17.0))
   self.assertEqual(compress_task_list(initial), expected)
  def test_02(self):
   "end equals start"
   initial = ((8.0, 9.5), (9.5, 12.0), (13.0, 15.5), (15.5, 17.0))
   expected = ((8.0, 12.0), (13.0, 17.0))
   self.assertEqual(compress_task_list(initial), expected)
  def test_03(self):
   "end equals start (with more empty times)"
   initial = ((8.0, 8.5), (8.5, 10.0), (10.25, 12.0), (12.5, 13.75), (13.75, 15.0), (15.25, 16.0), (16.0, 17.0))
   expected = ((8.0, 10.0), (10.25, 12.0), (12.5, 15.0), (15.25, 17.0))
   self.assertEqual(compress_task_list(initial), expected)
  def test_04(self):
   "out of order, cross-overs, and tasks completely inside other tasks"
   initial = ((8.0, 8.5), (8.0, 10.0), (10.25, 12.0), (10.0, 11.5), (13.0, 15.5), (14.0, 15.0), (16.0, 17.0))
   expected = ((8.0, 12.0), (13.0, 15.5), (16.0, 17.0))
   self.assertEqual(compress_task_list(initial), expected)

 unittest.main()
 

 Remember, this is Python, and readability counts. ;) 
 #2 This works, but it feels like something more Pythonic is out there: 

 l = [[1,2], [3,4], [5,6], [7,8]]
o = []
last = []
for a, b in l:
 o.append(last+[a])
 last = [b]
o.append(last)

print o
 

 prints 

 [[1], [2, 3], [4, 5], [6, 7], [8]]
 

 This body also works: 

 o = [[l[0][0]]]
for i in range(len(l)-1):
 o.append([l[i][1], l[i+1][0]])
o.append([l[-1][1]])
 
 #3 l = [[1,2], [3,4], [5,6], [7,8]]
m = [([] if i==0 else [l[i-1][1]] )+([] if i==len(l) else [l[i][0]]) for i in xrange(len(l)+1)]
 
 #4 Do you mean: 

 pairs = [[1,2], [3,4], [5,6], [7,8]]
print pairs, '-&gt;',
transformed = ([[pairs[0][0]]]+
    [[a,b] for a,b in zip(
     (second for first, second in pairs[:-1]),
     (first for first, second in pairs[1:]))]+
    [[pairs[-1][-1]]]
    )
print transformed
""" Output:
[[1, 2], [3, 4], [5, 6], [7, 8]] -&gt; [[1], [2, 3], [4, 5], [6, 7], [8]]
"""
 
 #5 This is a generator that can work with a generator or list input, so you don't have to keep everything in memory: 

 def shift_pairs(inPairs):
 lastPair = None
 for pair in inPairs:
  if lastPair:
   yield [lastPair[1], pair[0]]
  else:
   yield [pair[0]]
  lastPair = pair
 yield [lastPair[1]]
 

 I must point out that, in Python, lists of short, fixed length are usually done as tuples: 

 def shift_pairs(inPairs):
 lastPair = None
 for pair in inPairs:
  if lastPair:
   yield (lastPair[1], pair[0])
  else:
   yield (pair[0],)
  lastPair = pair
 yield (lastPair[1],)