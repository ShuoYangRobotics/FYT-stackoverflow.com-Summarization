Question (ID-965694): What's the official way of storing settings for python programs? Django uses real Python files for settings, Trac uses a .ini file, and some other pieces of software uses XML files to hold this information. 

 Are one of these approaches blessed by Guido and/or the Python community more than another? 
 Answers (Total-9): #0 Depends on the predominant intended audience. 

 If it is programmers who change the file anyway, just use python files like settings.py 

 If it is end users then, think about ini files. 
 #1 As many have said, there is no "offical" way. There are, however, many choices. There was a talk at PyCon this year about many of the available options. 
 #2 I am not sure that there is an 'official' way (it is not mentioned in the Zen of Python :) )- I tend to use the Config Parser module myself and I think that you will find that pretty common. I prefer that over the python file approach because you can write back to it and dynamically reload if you want. 
 #3 Just one more option, PyQt. Qt has a platform independent way of storing settings with the QSettings class. Underneath the hood, on windows it uses the registry and in linux it stores the settings in a hidden conf file. QSettings works very well and is pretty seemless. 
 #4 It depends largely on how complicated your configuration is. If you're doing a simple key-value mapping and you want the capability to edit the settings with a text editor, I think ConfigParser is the way to go. 

 If your settings are complicated and include lists and nested data structures, I'd use XML or JSON and create a configuration editor. 

 For really complicated things where the end user isn't expected to change the settings much, or is more trusted, just create a set of Python classes and evaluate a Python script to get the configuration. 
 #5 Don't know if this can be considered "official", but it is in standard library: 14.2. ConfigParser — Configuration file parser . 

 This is, obviously, not an universal solution, though. Just use whatever feels most appropriate to the task, without any necessary complexity (and — especially — Turing-completeness! Think about automatic or GUI configurators). 
 #6 I use a shelf ( http://docs.python.org/library/shelve.html ): 

 shelf = shelve.open(filename)
shelf["users"] = ["David", "Abraham"]
shelf.sync() # Save
 
 #7 why would Guido blessed something that is out of his scope? No there is nothing particular blessed. 
 #8 It is more of convenience. There is no official way per say. But using XML files would make sense as they can be manipulated by various other applications/libraries.