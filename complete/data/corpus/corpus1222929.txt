Question (ID-1222929): GIL in Python 3.1 Does anybody knows fate of Global Interpreter Lock in Python 3.1 against C++ multithreading integration 
 Answers (Total-7): #0 GIL is still there in CPython 3.1; the Unladen Swallow projects aims (among many other performance boosts) to eventually remove it, but it's still a way from its goals, and is working on 2.6 first with the intent of eventually porting to 3.x for whatever x will be current by the time the 2.y version is considered to be done. For now, multiprocessing (instead of threading) remains the way of choice for using multiple cores in CPython (IronPython and Jython are fine too, but they don't support Python 3 currently, nor do they make C++ integration all that easy either;-). 
 #1 The GIL is a good thing. 

 Just make your C++ application release the GIL while it is doing its multithreaded work. Python code will continue to run in the other threads, unspoiled. Only acquire the GIL when you have to touch python objects. 
 #2 The GIL will not affect your code which does not use python objects. In Numpy, we release the GIL for computational code (linear algebra calls, etc...), and the underlying code can use multithreading freely (in fact, those are generally 3rd party libraries which do not know anything about python) 
 #3 Significant changes will occur in the GIL for Python 3.2. Take a look at the What's New for Python 3.2 , and the thread that initiated it in the mailing list . 

 While the changes don't signify the end of the GIL, they herald potentially enormous performance gains. 

 Update0 

 
 The general performance gains with the new GIL in 3.2 by Antoine Pitrou were negligible, and instead focused on improving contention issues that arise in certain corner cases. 
 An admirable effort by David Beazley was made to implement a scheduler to significantly improve performance when CPU and IO bound threads are mixed, which was unfortunately shot down. 
 The Unladen Swallow work was proposed for merging in Python 3.3, but this has been withdrawn due to lack of results in that project. PyPy is now the preferred project and is currently requesting funding to add Python3k support. There's very little chance that PyPy will become the default at present. 
 

 Efforts have been made for the last 15 years to remove the GIL from CPython but for the foreseeable future it is here to stay. 
 #4 I guess there will always be a GIL.
The reason is performance. Making all the low level access thread safe - means putting a mutex around each hash operation etc. is heavy. Remember that a simple statement like 

 self.foo(self.bar, 3, val)
 

 Might already have at least 3 (if val is a global) hashtable lookups at the moment and maybe even much more if the method cache is not hot (depending on the inheritance depth of the class) 

 It's expensive - that's why Java dropped the idea and introduced hashtables which do not use a monitor call to get rid of its "Java Is Slow" trademark. 
 #5 As I understand it the "brainfuck" scheduler will replace the GIL from python 3.2 

 BFS bainfuck scheduler 
 #6 If the GIL is getting in the way, just use the multiprocessing module. It spawns new processes but uses the threading model and (most of the) api. In other words, you can do process-based parallelism in a thread-like way.