Question (ID-4092528): How to clamp an integer to some range? (in Python) I have the following code: 

 new_index = index + offset
if new_index &lt; 0:
 new_index = 0
if new_index &gt;= len(mylist):
 new_index = len(mylist) - 1
return mylist[new_index]
 

 Basically, I calculate a new index and use that to find some element from a list. In order to make sure the index is inside the bounds of the list, I needed to write those 2 if statements spread into 4 lines. That's quite verbose, a bit ugly... Dare I say, it's quite un-pythonic . 

 Is there any other simpler and more compact solution? (and more pythonic ) 

 Yes, i know I can use if else in one line, but it is not readable: 

 new_index = 0 if new_index &lt; 0 else len(mylist) - 1 if new_index &gt;= len(mylist) else new_index
 

 I also know I can chain max() and min() together. It's more compact, but I feel it's kinda obscure, more difficult to find bugs if I type it wrong. In other words, I don't find it very straightforward. 

 new_index = max(0, min(new_index, len(mylist)-1))
 
 Answers (Total-8): #0 sorted((minval, value, maxval))[1]
 

 for example: 

 &gt;&gt;&gt; minval=3
&gt;&gt;&gt; maxval=7
&gt;&gt;&gt; for value in range(10):
... print sorted((minval, value, maxval))[1]
... 
3
3
3
3
4
5
6
7
7
7
 
 #1 This is pretty clear, actually. Many folks learn it quickly. You can use a comment to help them. 

 new_index = max(0, min(new_index, len(mylist)-1))
 
 #2 See numpy.clip : 

 index = numpy.clip(index, 0, len(my_list) - 1)
 
 #3 Whatever happened to my beloved readable Python language? :-) 

 Seriously, just make it a function: 

 def addInRange (val, add, minval, maxval):
 newval = val + add
 if newval &lt; minval: return minval
 if newval &gt; maxval: return maxval
 return newval
 

 then just call it with something like: 

 val = addInRange (val, 7, 0, 42)
 

 Or a simpler, more flexible, solution where you do the calculation yourself: 

 def restrict (val, minval, maxval):
 if val &lt; minval: return minval
 if val &gt; maxval: return maxval
 return val

x = restrict (x+10, 0, 42)
 

 If you wanted to, you could even make the min/max a list so it looks more "mathematically pure": 

 x = restrict (val+7, [0, 42])
 
 #4 Why not write your own clamp() function taking three arguments: value, min, and max? 
 #5 If your code seems too unwieldy, a function might help: 

 def clamp(minvalue, value, maxvalue):
 return max(minvalue, min(value, maxvalue))

new_index = clamp(0, new_index, len(mylist)-1)
 
 #6 Chaining max() and min() together is the normal idiom I've seen. If you find it hard to read, write a helper function to encapsulate the operation: 

 def clamp(minimum, x, maximum):
 return max(minimum, min(x, maximum))
 
 #7 Avoid writing functions for such small tasks, unless you apply them often, as it will clutter up your code. 

 for individual values: 

 min(clamp_max, max(clamp_min, value))
 

 for lists of values: 

 map(lambda x: min(clamp_max, max(clamp_min, x)), values)