Question (ID-1520548): How does Python's triple-quote string work? How should this function be changed to return "123456" ? 

 def f():
 s = """123
 456"""
 return s
 

 UPDATE: Everyone, the question is about understanding how to not have \t or whatever when having a multiline comment, not how to use the re module. 
 Answers (Total-9): #0 def f():
 s = """123\
456"""
 return s
 

 Don't indent any of the blockquote lines after the first line; end every line except the last with a backslash. 
 #1 Don't use a triple-quoted string when you don't want extra whitespace, tabs and newlines. 

 Use implicit continuation, it's more elegant: 

 def f():
 s = ('123'
   '456')
 return s
 
 #2 Maybe I'm missing something obvious but what about this: 

 def f():
 s = """123456"""
 return s
 

 or simply this: 

 def f():
 s = "123456"
 return s
 

 or even simpler: 

 def f():
 return "123456"
 

 If that doesn't answer your question, then please clarify what the question is about. 
 #3 Subsequent strings are concatenated, so you can use: 

 def f():
 s = ("123"
   "456")
 return s
 

 This will allow you to keep indention as you like. 
 #4 def s():
 return 123456
 

 Should do it. 

 If you are asking how to change strings to integers this is generally done with int(). In this case you would need to strip the new line in the middle. This can be done in different ways, the easiest is: 

 int("""123
456""".replace('\n', ''))
 
 #5 re.sub('\D+', '', s)
 

 will return a string, if you want an integer, convert this string with int . 
 #6 Try 

 import re
 

 and then 

  return re.sub("\s+", "", s)
 
 #7 textwrap.dedent("""\
    123
    456""")
 

 From the standard library. First "\" is necessary because this function works by removing the common leading whitespace. 
 #8 My guess is: 

 def f():
 s = """123
 456"""
 return u'123456'
 

 Minimum change and does what is asked for.