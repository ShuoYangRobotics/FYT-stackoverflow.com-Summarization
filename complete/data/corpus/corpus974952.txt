Question (ID-974952): In Python, how do I split an integer into digits? I'm writing a program which calculates the check digit of an ISBN number. I have to read the user's input (nine digits of an ISBN) into an integer variable, and then multiply the last digit by 2, the second last digit by 3 and so on. How can I "split" the integer into its constituent digits to do this? As this is a basic exercise I am not supposed to use a list. 
 Answers (Total-6): #0 Just create a string out of it. 

 myinteger = 212345
number_string = str(myinteger)
 

 That's enough. Now you can iterate over it: 

 for ch in number_string:
 print ch # will print each digit in order
 

 Or you can slice it: 

 print number_string[:2] # first two digits
print number_string[-3:] # last three digits
print number_string[3] # forth digit
 

 

 Or better, don't convert the user's input to an integer (the user types a string) 

 isbn = raw_input()
for pos, ch in enumerate(reversed(isbn)):
 print "%d * %d is %d" % pos + 2, int(ch), int(ch) * (pos + 2)
 

 For more information read a tutorial . 
 #1 while number:
 digit = number % 10
 # do whatever with digit
 number /= 10
 

 On each iteration of the loop, it removes the last digit from number, assigning it to $digit. 
It's in reverse, starts from the last digit, finishes with the first 
 #2 list_of_ints = [int(i) for i in str(ISBN)]
 

 Will give you a sorted list of ints. Of course, given duck typing, you might as well work with str(ISBN). 

 Edit: As mentioned in the comments, this list isn't sorted in the sense of being ascending or descending, but it does have a defined order (sets, dictionaries, etc in python in theory don't, although in practice the order tends to be fairly reliable). If you want to sort it: 

 list_of_ints.sort() 

 is your friend. Note that sort() sorts in place (as in, actually changes the order of the existing list) and doesn't return a new list. 
 #3 On Older versions of Python... 

 map(int,str(123))
 

 On New Version 3k 

 list(map(int,str(123)))
 
 #4 Convert it to string and map over it with the int() function. 

 map(int, str(1231231231))
 
 #5 How about a one-liner list of digits... 

 ldigits = lambda n, l=[]: not n and l or l.insert(0,n%10) or ldigits(n/10,l)