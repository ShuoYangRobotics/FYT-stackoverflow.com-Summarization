Question (ID-5828123): Nested List and count() I want to get the number of times x appears in the nested list. 

 if the list is: 

 list = [1,2,1,1,4]
list.count(1)
&gt;&gt;3
 

 This is OK. But if the list is: 

 list = [[1,2,3],[1,1,1]]
 

 How can I get the number of times 1 appears? In this case, 4. 
 Answers (Total-7): #0 itertools and collections modules got just the stuff you need (flatten the nested lists with itertools.chain and count with collections.Counter 

 import itertools, collections

data = [[1,2,3],[1,1,1]]
counter = collections.Counter(itertools.chain(*data))
print counter[1]
 

 Use a recursive flatten function instead of itertools.chain to flatten nested lists of arbitrarily level depth 

 import operator, collections

def flatten(lst):
 return reduce(operator.iadd, (flatten(i) if isinstance(i, collections.Sequence) else [i] for i in lst))
 

 reduce with operator.iadd has been used instead of sum so that the flattened is built only once and updated in-place 
 #1 &gt;&gt;&gt; L = [[1, 2, 3], [1, 1, 1]]
&gt;&gt;&gt; sum(x.count(1) for x in L)
4
 
 #2 Here is yet another approach to flatten a nested sequence. Once the sequence is flattened it is an easy check to find count of items. 

 

 def flatten(seq,container=None):
 if container is None:
  container = []
 for s in seq:
  if hasattr(s,'__iter__'):
   flatten(s,container)
  else:
   container.append(s)
 return container


c = flatten([(1,2),(3,4),(5,[6,7,['a','b']]),['c','d',('e',['f','g','h'])]])
print c
print c.count('g')

d = flatten([[[1,(1,),((1,(1,))), [1,[1,[1,[1]]]], 1, [1, [1, (1,)]]]]])
print d
print d.count(1)
 

 

 The above code prints: 

 
[1, 2, 3, 4, 5, 6, 7, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']
1
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
12

 
 #3 Try this: 

 reduce(lambda x,y: x+y,list,[]).count(1)
 

 Basically, you start with an empty list [] and add each element of the list list to it. In this case the elements are lists themselves and you get a flattened list. 

 PS: Just got downvoted for a similar answer in another question! 

 PPS: Just got downvoted for this solution as well! 
 #4 For the heck of it: count to any arbitrary nesting depth, handling tuples, lists and arguments: 

 hits = lambda num, *n: ((1 if e == num else 0)
 for a in n
  for e in (hits(num, *a) if isinstance(a, (tuple, list)) else (a,)))

lst = [[[1,(1,),((1,(1,))), [1,[1,[1,[1]]]], 1, [1, [1, (1,)]]]]]
print sum(hits(1, lst, 1, 1, 1))

15
 
 #5 If there is only one level of nesting flattening can be done with this list comprenension: 

 &gt;&gt;&gt; L = [[1,2,3],[1,1,1]]
&gt;&gt;&gt; [ item for sublist in L for item in sublist ].count(1)
4
&gt;&gt;&gt; 
 
 #6 def nested_count(lst, x):
 return lst.count(x) + sum(
  nested_count(l,x) for l in lst if isinstance(l,list))
 

 This function returns the number of occurrences, plus the recursive nested count in all contained sub-lists. 

 &gt;&gt;&gt; data = [[1,2,3],[1,1,[1,1]]]
&gt;&gt;&gt; print nested_count(data, 1)
5