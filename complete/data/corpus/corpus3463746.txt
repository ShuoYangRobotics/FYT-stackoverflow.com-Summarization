Question (ID-3463746): 'in-place' string modifications in Python In Python, strings are immutable. 

 What is the standard idiom to walk through a string character-by-character and modify it? 

 The only methods I can think of are some genuinely stanky hacks related to joining against a result string. 

 -- 

 In C: 

 for(int i = 0; i &lt; strlen(s); i++)
{
 s[i] = F(s[i]);
}
 

 This is super expressive and says exactly what I am doing. That is what I am looking for. 
 Answers (Total-12): #0 you can use the UserString module: 

 &gt;&gt;&gt; import UserString
... s = UserString.MutableString('Python')
... print s
Python
&gt;&gt;&gt; s[0] = 'c'
&gt;&gt;&gt; print s
cython
 
 #1 The Python analog of your C: 

 for(int i = 0; i &lt; strlen(s); i++)
{
 s[i] = F(s[i]);
}
 

 would be: 

 s = "".join(F(c) for c in s)
 

 which is also very expressive. It says exactly what is happening, but in a functional style rather than a procedural style. 
 #2 Don't use a string, use something mutable like bytearray: 

 #!/usr/bin/python

s = bytearray("my dog has fleas")
for n in xrange(len(s)):
 s[n] = chr(s[n]).upper()
print s
 

 Results in: 

 MY DOG HAS FLEAS
 

 Edit: 

 Since this is a bytearray , you aren't (necessarily) working with characters . You're working with bytes . So this works too: 

 s = bytearray("\x81\x82\x83")
for n in xrange(len(s)):
 s[n] = s[n] + 1
print repr(s)
 

 gives: 

 bytearray(b'\x82\x83\x84')
 

 If you want to modify characters in a Unicode string, you'd maybe want to work with memoryview , though that doesn't support Unicode directly. 
 #3 I'd say the most Pythonic way is to use map() : 

 s = map(func, s) # func has been applied to every character in s
 

 This is the equivalent of writing: 

 s = "".join(func(c) for c in s)
 
 #4 Strings are iterable and can be walked through like lists. Strings also have a number of basic methods such as .replace() that might be what you're looking for. All string methods return a new string. So instead of modifying the string in place you can simply replace its existing value. 

 &gt;&gt;&gt; mystring = 'robot drama'
&gt;&gt;&gt; mystring = mystring.replace('r', 'g')
&gt;&gt;&gt; mystring
'gobot dgama'
 
 #5 &gt;&gt;&gt; mystring = "Th1s 1s my str1ng"
&gt;&gt;&gt; mystring.replace("1", "i")
'This is my string'
 

 If you want to store this new string you'll have to mystring = mystring.replace("1", "i") . This is because in Python strings are immutable. 
 #6 string.translate is probably the closest function to what you're after. 
 #7 Assigning a particular character to a particular index in a string is not a particularly common operation, so if you find yourself needing to do it, think about whether there may be a better way to accomplish the task. But if you do need to, probably the most standard way would be to convert the string to a list, make your modifications, and then convert it back to a string. 

 s = 'abcdefgh'
l = list(s)
l[3] = 'r'
s2 = ''.join(l)
 

 EDIT: As posted in bstpierre's answer, bytearray is probably even better for this task than list , as long as you're not working with Unicode strings. 

 s = 'abcdefgh'
b = bytearray(s)
b[3] = 'r'
s2 = str(b)
 
 #8 def modifyIdx(s, idx, newchar):
 return s[:idx] + newchar + s[idx+1:]
 
 #9 If I ever need to do something like that I just convert it to a mutable list 

 For example... (though it would be easier to use sort (see second example) ) 

 &gt;&gt;&gt; s = "abcdfe"
&gt;&gt;&gt; s = list(s)
&gt;&gt;&gt; s[4] = "e"
&gt;&gt;&gt; s[5] = "f"
&gt;&gt;&gt; s = ''.join(s)
&gt;&gt;&gt; print s
abcdef
&gt;&gt;&gt;
# second example
&gt;&gt;&gt; s.sort()
&gt;&gt;&gt; s = ''.join(s)
 
 #10 You can use StringIO or cStringIO classes to receive file-like mutable interface of string. 
 #11 Here is an example using translate to switch "-" with "." and uppercase "a"s 

 &gt;&gt;&gt; from string import maketrans
&gt;&gt;&gt; trans_table = maketrans(".-a","-.A")
&gt;&gt;&gt; "foo-bar.".translate(trans_table)
'foo.bAr-'
 

 This is much more efficient that flipping to byte array and back if you just need to do single char replacements