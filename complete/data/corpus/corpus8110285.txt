Question (ID-8110285): Updating the list by adding the interest rate [Python] I just started learning Python and I am having a problem wring a specific function. Basically, this function should update the list by adding the interest rate. 

 lst = [[25, 10, 300], [7, 30, 80], [7, 530, 24],[65, 30, 2]]
rate = [0.5, 0.02, 0.15]
 

 Output: 

 [37.5, 10.2, 345.0]
[10.5, 30.6, 92.0]
[10.5, 540.6, 27.6]
[97.5, 30.6, 2.3]
 

 Here is what I have so far: 

 def multiply(lst, rate):
 for i in range(len(lst)):
  lst[i] += rate[i] * lst[i]
 

 I am getting an error message:
"TypeError: can't multiply sequence by non-int of type 'float'" 

 Thank you 
 Answers (Total-7): #0 lst[i] is a list of numbers, not a number itself. You can't multiply a list of numbers by a number, but you can multiply the elements in the list by the number. 
 #1 You're indexing into both lst and rate with the loop variable i -- but one list has four elements and the other list has three elements. You're either going to miss an element from one list -- or try to access a non-existent element in the other list. 
 #2 def multiply(lst, rate):
 lst2 = []
 for litem in lst:
  lst2.append([item + (r * item) for r, item in zip(rate, litem)])
 return lst2
 
 #3 You can use numpy for this kind of stuff: 

 &gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; lst = np.array([[25, 10, 300], [7, 30, 80], [7, 530, 24],[65, 30, 2]])
&gt;&gt;&gt; rate = [0.5, 0.02, 0.15]
&gt;&gt;&gt; lst + lst*rate
array([[ 37.5, 10.2, 345. ],
  [ 10.5, 30.6, 92. ],
  [ 10.5, 540.6, 27.6],
  [ 97.5, 30.6, 2.3]])
 

 If numpy is overkill for you, this could help you out: 

 &gt;&gt;&gt; lst = [[25, 10, 300], [7, 30, 80], [7, 530, 24],[65, 30, 2]]
&gt;&gt;&gt; rate = [0.5, 0.02, 0.15]
&gt;&gt;&gt; [[x+x*y for x,y in zip(row, rate)] for row in lst]
[[37.5, 10.2, 345.0], [10.5, 30.6, 92.0], [10.5, 540.6, 27.6], [97.5, 30.6, 2.3]]
 

 Explanation: zip(row, rate) turns [rate, rate, rate], [item, item item] into [(item, rate), (item, rate), (item, rate)] ; the comprehension creates rows of [item+item*rate, item+item*rate, item+item*rate] . 
 #4 def multiply(lst,rate):
 r = [] # Stores the list the method will return
 for inner_list in lst:
  temp = [] # stores the calculated values
  for amount in inner_list:
  temp.append(amount*(rate[inner_list.index(amount)]+1))
  r.append(temp)
 return r
 

 The function works like this: 

 
 Steps through the list of amounts 
 At every loop, it resets (creates a new temporary list) called temp 
 For each amount in list 
 It finds the rate for that amount, the rate is found by the index:
 y = [25,10,300]
 y[0] is 25
 We need to multiply it by the rate of 0.5
 rate = [0.5,0.02,0.15]
 rate[0] = 0.5 

 Since the index of 0.5 is the same as the index for the amount, we can use the index method of lists to fetch the index (or key) for a particular value. 
 

 See http://docs.python.org/tutorial/datastructures.html for information on the index() method. 
 #5 You could also do:
 map(lambda x: map(lambda y, z: y+y*z, x, rate), lst) 

 map applies the function to each element of the list. When called with more than one element, it applies the function corresponding elements from each list (i.e. func(list1[0], list2[0]) and func(list1[1], list2[1]) and so on). The inner map works on each element of lst , and computes the interest rate for each number in the sublist. The outer map supplies the inner map with the sublists of lst . 
 #6 In Python the expression 

 list * number
 

 means concatenating number copies of the list... for example 

 [1, 2, 3] * 3 --&gt; [1, 2, 3, 1, 2, 3, 1, 2, 3]
 

 The error message is because you tried to multiply a list and a list.
That operation (meaning an element-by-element operation) is supported with that syntax for numpy array objects, but for regular Python lists you need instead to compute the result explicitly. One approach is using for example list comprehension: 

 x = [1, 2, 3]
y = [4, 5, 6]
[a*b for a, b in zip(x, y)] --&gt; [4, 10, 18]
 

 To solve your problem using list comprehensions then the code is: 

 [[x+x*y for x, y in zip(L, rate)] for L in lst]

--&gt; [[37.5, 10.199999999999999, 345.0],
  [10.5, 30.600000000000001, 92.0],
  [10.5, 540.60000000000002, 27.600000000000001],
  [97.5, 30.600000000000001, 2.2999999999999998]]
 

 Note that those long trails of decimals are present because of the inherent inaccuracy of floating point arithmetic and is present for this datatype also in other languages (simply some of them hide the fact by rounding when doing output).