Question (ID-4435169): Python: Good way to append to a string I want an efficient way to append string to another. 

 Is there any good built-in method to use? 
 Answers (Total-6): #0 Don't prematurely optimize. If you have no reason to believe there's a speed bottleneck caused by string concatenations then just stick with + and += : 

 s = 'foo'
s += 'bar'
s += 'baz'
 

 That said, if you're aiming for something like Java's StringBuilder, the canonical Python idiom is to add items to a list and then use str.join to concatenate them all at the end: 

 l = []
l.append('foo')
l.append('bar')
l.append('baz')

s = ''.join(l)
 
 #1 Don't. 

 That is, for most cases you are better off generating the whole string in one go rather then appending to an existing string. 

 For example, don't do: obj1.name + ":" + str(obj1.count) 

 Instead: use "%s:%d" % (obj1.name, obj1.count) 

 That will be easier to read and more efficient. 
 #2 If you only have one reference to a string and you concatenate another string to the end, Python now special cases this and tries to extend the string in place. 

 The end result is that the operation is amortized O(n) 

 eg 

 s = ""
for i in range(n):
 s+=str(n)
 

 used to be O(n^2), but now it is O(n) 

 From the source (stringmodule.c) 

 PyString_ConcatAndDel(register PyObject **pv, register PyObject *w)
{
 PyString_Concat(pv, w);
 Py_XDECREF(w);
}


/* The following function breaks the notion that strings are immutable:
 it changes the size of a string. We get away with this only if there
 is only one module referencing the object. You can also think of it
 as creating a new string object and destroying the old one, only
 more efficiently. In any case, don't use this if the string may
 already be known to some other part of the code...
 Note that if there's not enough memory to resize the string, the original
 string object at *pv is deallocated, *pv is set to NULL, an "out of
 memory" exception is set, and -1 is returned. Else (on success) 0 is
 returned, and the value in *pv may or may not be the same as on input.
 As always, an extra byte is allocated for a trailing \0 byte (newsize
 does *not* include that), and a trailing \0 byte is stored.
*/
 
 #3 If you need to do many append operations to build a large string, you can use StringIO or cStringIO. The interface is like a file. ie: you write to append text to it. 

 If you're just appending two strings then just use + . 
 #4 str1 = "Hello"
str2 = "World"
newstr = " ".join((str1, str2))
 

 That joins str1 and str2 with a space as separators. You can also do "".join(str1, str2, ...) . str.join() takes an iterable, so you'd have to put the strings in a list or a tuple. 

 That's about as efficient as it gets for a builtin method. 
 #5 it really depends on your application. If you're looping through hundreds of words and want to append them all into a list, 

 .join()
 

 is better. But if you're putting together a long sentence, you're better off using 

 '+='