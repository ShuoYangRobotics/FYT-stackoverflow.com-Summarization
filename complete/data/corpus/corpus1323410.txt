Question (ID-1323410): 'has_key()' or 'in'? I wonder what is better to do: 

 d = {'a': 1, 'b': 2}
'a' in d
True
 

 or: 

 d = {'a': 1, 'b': 2}
d.has_key('a')
True
 
 Answers (Total-7): #0 in is definitely more pythonic, in fact has_key() was removed in python 3.x: http://docs.python.org/3.1/whatsnew/3.0.html#builtins 
 #1 in wins hands-down, not just in elegance (and not being deprecated;-) but also in performance, e.g.: 

 $ python -mtimeit -s'd=dict.fromkeys(range(99))' '12 in d'
10000000 loops, best of 3: 0.0983 usec per loop
$ python -mtimeit -s'd=dict.fromkeys(range(99))' 'd.has_key(12)'
1000000 loops, best of 3: 0.21 usec per loop
 

 While the following observation is not always true, you'll notice that usually , in Python, the faster solution is more elegant and Pythonic; that's why -mtimeit is SO helpful -- it's not just about saving a hundred nanoseconds here and there!-) 
 #2 According to python docs : 

 
 has_key() is deprecated in favor of
 key in d. 
 
 #3 My $0.02: the more Pythonic answer would be to use in . 
 #4 Use dict.has_key() if (and only if) your code is required to be runnable by Python versions earlier than 2.3 (when key in dict was introduced). 
 #5 has_key is a dictionary method, but in will work on any collection, and even when __contains__ is missing, in will use any other method to iterate the collection to find out. 
 #6 There is one example where in actually kills your performance. 

 If you use in on a O(1) container that only implements __getitem__ and has_key() but not __contains__ you will turn an O(1) search into an O(N) search (as in falls back to a linear search via __getitem__ ). 

 Fix is obviously trivial: 

 def __contains__(self, x):
 return self.has_key(x)