Question (ID-9082099): Python, loop through files in a folder and do a word count I am new to python and I need to write a script that counts all the words in all the txt files in a directory. This is what I have so far, the else works when just opening a txt file, but when I enter a directory it fails. I know I need an append somewhere, I have tried it a few different ways but with little luck. 

 *edit I would like the results to be lumped together. So far its 2 separate results. I tried making a new list and having it appended with counter. but it broke. Thanks again, this is a good community 

 import re
import os
import sys
import os.path
import fnmatch
import collections

def search( file ):

 if os.path.isdir(path) == True:
  for root, dirs, files in os.walk(path):
   for file in files:
    words = re.findall('\w+', open(file).read().lower())
    ignore = ['the','a','if','in','it','of','or','on','and','to']
    counter=collections.Counter(x for x in words if x not in ignore)
    print(counter.most_common(10))

 else:
  words = re.findall('\w+', open(path).read().lower())
  ignore = ['the','a','if','in','it','of','or','on','and','to']
  counter=collections.Counter(x for x in words if x not in ignore)
  print(counter.most_common(10))

path = input("Enter file and path, place ' before and after the file path: ")
search(path)

raw_input("Press enter to close: ")
 
 Answers (Total-7): #0 Change line 14 to: 

 words = re.findall('\w+', open(os.path.join(root, file)).read().lower())
 

 Also, if you replace the input line with 

 path = raw_input("Enter file and path")
 

 Then you won't need to include ' before and after the path 
 #1 When iterating the results of os.walk , file will contain just the filename without the directory containing it. You need to join the directory name with the filename: 

 for root, dirs, files in os.walk(path):
 for name in files:
  file_path = os.path.join(root, name)
  #do processing on file_path here
 

 I recommend moving the code that processes a file to its own function - this way you won't need to write it twice, and it will be easier to debug problems. 
 #2 It looks like the parameter for the function definition is wrong. It should be: 

 def search(path):
 

 The ignore is correct but can be made faster by using a set instead of a list: 

 ignore = set(['the','a','if','in','it','of','or','on','and','to'])
 

 Otherwise, this is nice looking code :-) 
 #3 Change to: 

 for file in files:
 fullPath="%s/%s"%(path,file)
 
 #4 It's because the "files" list only contains the file names, not the full paths.
You have to use : 

 import os.path 

 ... 

 and replace "open(file)" by "open(os.path.join(root,file))". 
 #5 I suggest looking at generator tricks for system programmers by David M. Beazley . it shows how to create little generator loops to do everything you have here. Basically, using the gengrep example, but replacing grep with word counting: 

 # gencount.py
#
# Count the words in a sequence of lines

import re, collections
def gen_count(lines):
 patc = re.compile('\w+')
 ignore = ['the','a','if','in','it','of','or','on','and','to']
 for line in lines:
  words = patc.findall(line)
  counter=collections.Counter(x for x in words if x not in ignore)
  for count in counter.most_common(10):
   yield count

# Example use

if __name__ == '__main__':
 from genfind import gen_find
 from genopen import gen_open
 from gencat import gen_cat
 path = raw_input("Enter file and path, place ' before and after the file path: ")

 findnames = gen_find("*.txt",path)
 openfiles = gen_open(findnames)
 alllines = gen_cat(openfiles)

 currcount = gen_count(alllines)
 for c in currcount:
  print c
 
 #6 
 You should have two functions: one that goes through a file and counts the words, and another that goes through the files in a directory and recursively calls itself when it finds directories. The per-file function should take a full path to the file and open the file itself. 
 Reading the whole file in at once might run you out of memory. A line-by-line approach is better. Even better than that would be to write a generator function that reads, say, 4K at a time and outputs individual words, but that might be going overboard for this assignment. 
 Look at os.path.walk() . 
 Use raw_input if you're using Python 2. People will ignore that "quote the path" prompt.