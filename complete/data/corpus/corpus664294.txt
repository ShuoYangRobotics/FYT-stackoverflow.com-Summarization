Question (ID-664294): Just declaring a variable in Python? Is it possible to just declaring a variable in Python, like so?: 

 var 

 so that it's gonna be initialized to None? 

 It seems like python allows this, but as soon as you access it, it crashes. 

 Is this possible? If not, why? 

 EDIT: I wanna do this for cases like this: 

 value

for index in sequence:

 if value == None and conditionMet:
  value = index
  break
 

 Duplicate 

 
 Uninitialised value in python (by same author) 
 Are there any declaration keywords in Python? (by the same author) 
 

 Related 

 
 Python: variable scope and function calls 
 Other languages have "variables" 
 
 Answers (Total-8): #0 Why not just do this: 

 var = None
 

 Python is dynamic, so you don't need to declare things; they exist automatically in the first scope where they're assigned. So, all you need is a regular old assignment statement as above. 

 This is nice, because you'll never end up with an uninitialized variable. But be careful -- this doesn't mean that you won't end up with incorrectly initialized variables. If you init something to None , make sure that's what you really want, and assign something more meaningful if you can. 
 #1 I'm heartily recommend to read Other languages have "variables" (that I added as a related link to your question) in 2 minutes you'll know that Python has "names", not "variables". 

 val = None
# ...
if val is None:
 val = any_object
 
 #2 I'm not sure what you're trying to do. Python is a very dynamic language; you don't usually need to declare variables until you're actually going to assign to or use them. I think what you want to do is just 

 foo = None
 

 which will assign the value None to the variable foo . 

 EDIT: What you really seem to want to do is just this: 

 #note how I don't do *anything* with value here
#we can just start using it right inside the loop

for index in sequence:
 if conditionMet:
  value = index
  break

try:
 doSomething(value)
except NameError:
 print "Didn't find anything"
 

 It's a little difficult to tell if that's really the right style to use from such a short code example, but it is a more "Pythonic" way to work. 

 EDIT: below is comment by JFS (posted here to show the code) 

 Unrelated to the OP's question but the above code can be rewritten as: 

 for item in sequence:
 if some_condition(item): 
  found = True
  break
else: # no break or len(sequence) == 0
 found = False

if found:
 do_something(item)
 

 NOTE: if some_condition() raises an exception then found is unbound. 
NOTE: if len(sequence) == 0 then item is unbound. 

 The above code is not advisable. Its purpose is to illustrate how local variables work, namely whether "variable" is "defined" could be determined only at runtime in this case.
Preferable way: 

 for item in sequence:
 if some_condition(item):
  do_something(item)
  break
 

 Or 

 found = False
for item in sequence:
 if some_condition(item):
  found = True
  break

if found:
 do_something(item)
 
 #3 I usually initialize the variable to something that denotes the type like 

 var = ""
 

 or 

 var = 0
 

 If it is going to be an object then don't initialize it until you instantiate it: 

 var = Var()
 
 #4 First of all, my response to the question you've originally asked 

 Q: How do I discover if a variable is defined at a point in my code? 

 A: Read up in the source file until you see a line where that variable is defined. 

 But further, you've given a code example that there are various permutations of that are quite pythonic. You're after a way to scan a sequence for elements that match a condition, so here are some solutions: 

 def findFirstMatch(sequence):
 for value in sequence:
  if matchCondition(value):
   return value

 raise LookupError("Could not find match in sequence")
 

 Clearly in this example you could replace the raise with a return None depending on what you wanted to achieve. 

 If you wanted everything that matched the condition you could do this: 

 def findAllMatches(sequence):
 matches = []
 for value in sequence:
  if matchCondition(value):
   matches.append(value)

 return matches
 

 There is another way of doing this with yield that I won't bother showing you, because it's quite complicated in the way that it works. 

 Further, there is a one line way of achieving this: 

 all_matches = [value for value in sequence if matchCondition(value)]
 
 #5 You look like you're trying to write C in Python. If you want to find something in a sequence, Python has builtin functions to do that, like 

 value = sequence.index(blarg)
 
 #6 If I'm understanding your example right, you don't need to refer to 'value' in the if statement anyway. You're breaking out of the loop as soon as it could be set to anything. 

 value = None
for index in sequence:
 doSomethingHere
 if conditionMet:
  value = index
  break
 
 #7 Well, if you want to check if a variable is defined or not then why not check if its in the locals() or globals() arrays? Your code rewritten: 

 for index in sequence:
 if 'value' not in globals() and conditionMet:
  value = index
  break
 

 If it's a local variable you are looking for then replace globals() with locals().