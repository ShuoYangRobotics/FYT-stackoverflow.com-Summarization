Question (ID-9053545): Finding the sum of even valued terms in fibonacci sequence #!/usr/bin/python2

"""
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
"""

odd, even = 0,1
total = 0
while True:
 odd = odd + even #Odd
 even = odd + even  #Even
 if even &lt; 4000000:
  total += even
 else:
  break
print total
 

 My algo: 

 
 If I take first 2 numbers as 0, 1; the number that I find first in while loop will be an odd number and first of Fibonacci series. 
 This way I calculate the even number and each time add the value of even to total. 
 If value of even is greater than 4e6, I break from the infinite loop. 
 

 I have tried so much but my answer is always wrong. Googling says answer should be 4613732 but I always seem to get 5702886 

 Thanks for the support. 
 Answers (Total-7): #0 Basically what you're doing here is adding every second element of the fibonacci sequence while the question asks to only sum the even elements. 

 What you should do instead is just iterate over all the fibonacci values below 4000000 and do a if value % 2 == 0: total += value . The % is the remainder on division operator, if the remainder when dividing by 2 equals 0 then the number is even. 

 E.g.: 

 prev, cur = 0, 1
total = 0
while True:
 prev, cur = cur, prev + cur
 if cur &gt;= 4000000:
  break
 if cur % 2 == 0:
  total += cur
print(total)
 
 #1 Your code includes every other term, not the even- valued ones. To see what's going on, print even just before total += even - you'll see odd numbers. What you need to do instead is check the number you're adding to the total for evenness with the modulo operator: 

 total = 0
x, y = 0, 1
while y &lt; 4000000:
 x, y = y, x + y
 if x % 2:
  continue
 total += x

print total
 
 #2 it should be: 

 odd, even = 1,0
 

 Also, every third numer is even (even + odd + odd = even). 
 #3 If you add every second value of the fibonacci sequence you'll get the next fibonacci value after the last added value. For example: 

 f(0) + f(2) + f(4) = f(5)
0 + 1 + 3 + 8 = 13
 

 But your code currently does not add the first even value 1 . 
 #4 Other answers are correct but note that to just add all even numbers in an array, just do
myarray=[1, 2, 3, 5, 8, 13, 21, 34, 55, 89] 

 sum(map(lambda k:k if k%2 else 0, myarray))
 

 or 

 sum([k if k%2 else 0 for k in [1,2,3,4,5]])
 
 #5 Every 3rd item in the Fibonnaci sequence is even. So, you could have this: 

 prev, cur = 0, 1
count = 1
total = 0
while True:
 prev, cur = cur, prev + cur
 count = count + 1
 if cur &gt;= 4000000:
  break
 if count % 3 == 0:
  total += cur
print(total)
 

 or this (changing your code as little as possible): 

 even, odd = 0,1      # this line was corrected
total = 0
while True:
 secondOdd = even + odd     # this line was changed
 even = odd + secondOdd  #Even   # this line was changed
 if even &lt; 4000000:
  total += even
  odd = secondOdd + even    # this line was added
 else:
  break
print total
 

 

 Another way would be (by the use of some simple math) to check that the sum of a2+a5+a8+a11+...+a(3N+2) (the sum of even Fibonacci values) is equal to (a(3N+4)-1)/2 . So, if you can calculate directly that number, there is no need to calculate all the previous Fibonacci numbers. 
 #6 def fibonacci_iter(limit):
 a, b = 0, 1
 while a &lt; limit:
  yield a
  a, b = b, a + b

print sum(a for a in fibonacci_iter(4e6) if not (a &amp; 1))