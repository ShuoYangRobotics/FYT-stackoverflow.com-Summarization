Question (ID-8553037): What is the right way to create a list from variable and another list? This is the only way i can think of looks like this: 

 var = 1
list = [2, 3, 4]
newList = [var,] + list
 

 Is it the right way? 

 Update: I need to make a new list so insert would not help 
 Answers (Total-6): #0 Your method is fine (other than the extra comma not needed for a 1-list); people have done it this way for a long time. 
 #1 I am not sure what you want to imply by using the , after var but generally you won;t need it. As you were trying to get other options here is another way to do 

 lst.insert(0,var)
 

 If you are not intending to modify the original list you may want to copy it to another list 

 newList=lst[::]
 

 and then do the insert 

 lst.insert(0,var)
 

 It's a matter of style but I prefer 

 newList=[var]+lst
 

 Note* * 
Generally if you are not intending to modify the original list, 

 newlst = [var] + lst
 

 looks cleaner 

 but in case you want to modify in place your options are 

 lst = [var] + lst
 

 or 

 lst.insert(0,var)
 

 The later one is preferable because it is more readable and moreover you can use it inside lambda and list-comprehension :-) 
 #2 In general you want to avoid adding things to the start of a list in Python: it's O(n) in cost. 

 If you have to (and often the inefficiency doesn't matter), you can do this: 

 [a] + other_list
 

 If you don't mind updating the list you have, you can do this: 

 other_list.insert(0, a)
 

 If you can use an iterator rather than a list, you can efficiently use: 

 itertools.chain([a], other_list)
 
 #3 Use the append method: 

 list.append(var)
 

 or insert of you want to place the new element in the beginning: 

 list.insert(0,var)
 
 #4 What about this? 

 a_list = []
v = 1
list_to_add = [2, 3, 4]
a_list.append(v)
a_list.extend(list_to_add)
 
 #5 For your reference, go through this LIST