Question (ID-425604): Best Way To Determine if a Sequence is in another sequence in Python This is a generalization of the "string contains substring" problem to (more) arbitrary types. 

 Given an sequence (such as a list or tuple), what's the best way of determining whether another sequence is inside it? As a bonus, it should return the index of the element where the subsequence starts: 

 Example usage (Sequence in Sequence): 

 &gt;&gt;&gt; seq_in_seq([5,6], [4,'a',3,5,6])
3
&gt;&gt;&gt; seq_in_seq([5,7], [4,'a',3,5,6])
-1 # or None, or whatever
 

 So far, I just rely on brute force and it seems slow, ugly, and clumsy. 
 Answers (Total-6): #0 I second the Knuth-Morris-Pratt algorithm. By the way, your problem (and the KMP solution) is exactly recipe 5.13 in Python Cookbook 2nd edition. You can find the related code at http://code.activestate.com/recipes/117214/ 

 It finds all the correct subsequences in a given sequence, and should be used as an iterator: 

 &gt;&gt;&gt; for s in KnuthMorrisPratt([4,'a',3,5,6], [5,6]): print s
3
&gt;&gt;&gt; for s in KnuthMorrisPratt([4,'a',3,5,6], [5,7]): print s
(nothing)
 
 #1 Same thing as string matching sir... Knuth-Morris-Pratt string matching 
 #2 Here's a brute-force approach O(n*m) (similar to @mcella's answer ). It might be faster then the Knuth-Morris-Pratt algorithm implementation in pure Python O(n+m) (see @Gregg Lind answer ) for small input sequences. 

 #!/usr/bin/env python
def index(subseq, seq):
 """Return an index of `subseq`uence in the `seq`uence.

 Or `-1` if `subseq` is not a subsequence of the `seq`.

 The time complexity of the algorithm is O(n*m), where

  n, m = len(seq), len(subseq)

 &gt;&gt;&gt; index([1,2], range(5))
 1
 &gt;&gt;&gt; index(range(1, 6), range(5))
 -1
 &gt;&gt;&gt; index(range(5), range(5))
 0
 &gt;&gt;&gt; index([1,2], [0, 1, 0, 1, 2])
 3
 """
 i, n, m = -1, len(seq), len(subseq)
 try:
  while True:
   i = seq.index(subseq[0], i + 1, n - m + 1)
   if subseq == seq[i:i + m]:
    return i
 except ValueError:
  return -1

if __name__ == '__main__':
 import doctest; doctest.testmod()
 

 I wonder how large is the small in this case? 
 #3 &gt;&gt;&gt; def seq_in_seq(subseq, seq):
...  while subseq[0] in seq:
...   index = seq.index(subseq[0])
...   if subseq == seq[index:index + len(subseq)]:
...    return index
...   else:
...    seq = seq[index + 1:]
...  else:
...   return -1
... 
&gt;&gt;&gt; seq_in_seq([5,6], [4,'a',3,5,6])
3
&gt;&gt;&gt; seq_in_seq([5,7], [4,'a',3,5,6])
-1
 

 Sorry I'm not an algorithm expert, it's just the fastest thing my mind can think about at the moment, at least I think it looks nice (to me) and I had fun coding it. ;-) 

 Most probably it's the same thing your brute force approach is doing. 
 #4 Brute force may be fine for small patterns. 

 For larger ones, look at the Aho-Corasick algorithm . 
 #5 Here is another KMP implementation: 

 def seq_in_seq(seq1,seq2):
 '''
 Return the index where seq1 appears in seq2, or -1 if 
 seq1 is not in seq2, using the Knuth-Morris-Pratt algorithm

 based heavily on code by Neale Pickett &lt;neale@woozle.org&gt;
 found at: woozle.org/~neale/src/python/kmp.py

 &gt;&gt;&gt; seq_in_seq(range(3),range(5))
 0
 &gt;&gt;&gt; seq_in_seq(range(3)[-1:],range(5))
 2
 &gt;&gt;&gt;seq_in_seq(range(6),range(5))
 -1
 '''
 def compute_prefix_function(p):
  m = len(p)
  pi = [0] * m
  k = 0
  for q in xrange(1, m):
   while k &gt; 0 and p[k] != p[q]:
    k = pi[k - 1]
   if p[k] == p[q]:
    k = k + 1
   pi[q] = k
  return pi

 t,p = list(tee(seq2)[0]), list(tee(seq1)[0])
 m,n = len(p),len(t)
 pi = compute_prefix_function(p)
 q = 0
 for i in range(n):
  while q &gt; 0 and p[q] != t[i]:
   q = pi[q - 1]
  if p[q] == t[i]:
   q = q + 1
  if q == m:
   return i - m + 1
 return -1