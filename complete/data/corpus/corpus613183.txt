Question (ID-613183): Python: Sort a dictionary by value I have a dictionary of values read from 2 fields in a database: a string field and a numeric field. The string field is unique so that is the key of the dictionary. 

 I can sort on the keys, but how can I sort based on the values? 

 Note: I have read this post 72899 and probably could change my code to have a list of dictionaries but since I do not really need a list of dictionaries I wanted to know if there a simpler solution. 
 Answers (Total-17): #0 It is not possible to sort a dict, only to get a representation of a dict that is sorted. Dicts are inherently orderless, but other types, such as lists and tuples, are not. So you need a sorted representation, which will be a listâ€”probably a list of tuples. For instance, 

 import operator
x = {1: 2, 3: 4, 4:3, 2:1, 0:0}
sorted_x = sorted(x.iteritems(), key=operator.itemgetter(1))
 

 sorted_x will be a list of tuples sorted by the second element in each tuple. dict(sorted_x) == x . 
 #1 As simple as: sorted(dict1, key=dict1.get) 

 Well, it is actually possible to do a "sort by dictionary values". Recently had to do that in a Code Golf ( http://stackoverflow.com/questions/3169051#3170549 ). Abridged, the problem was of the kind: given a text, count how often each word is encountered and display list of the top words, sorted by decreasing frequency. 

 If you construct dictionary with the words as keys and the number of occurences of each word as value, simplified here as 

 d = defaultdict(int)
for w in text.split():
 d[w] += 1
 

 then you can get list of the words in order of frequency of use with sorted(d, key=d.get) - the sort iterates over the dictionary keys, using as sort-key the number of word occurrences. 

 for w in sorted(d, key=d.get, reverse=True):
 print w, d[w]
 

 I am writing this detailed explanation to illustrate what do people often mean by "i can easily sort a dictionary by key but how do i sort by value" - and i think the OP was trying to address such issue. And the solution is to do sort of list of the keys, based on the values, as shown above. 
 #2 Dicts can't be sorted, but you can build sorted list from them. 

 A sorted list of dict values: 

 sorted(d.values())
 

 A list of (key, value) pairs, sorted by value: 

 from operator import itemgetter
sorted(d.items(), key=itemgetter(1))
 
 #3 You could use: 

 sorted(d.items(), key=lambda x: x[1]) 

 This will sort the dictionary by the values of each entry within the dictionary from smallest to largest. 
 #4 in recent Python 2.7, we have new OrderedDict type, which remembers the order in which the items were added. 

 &gt;&gt;&gt; d = {"third": 3, "first": 1, "fourth": 4, "second": 2}

&gt;&gt;&gt; for k, v in d.items():
...  print "%s: %s" % (k, v)
second: 2
fourth: 4
third: 3
first: 1

&gt;&gt;&gt; d
{'second': 2, 'fourth': 4, 'third': 3, 'first': 1}

&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; # make a new ordered dictionary from the original,
&gt;&gt;&gt; # sorting its items by values
&gt;&gt;&gt; d_sorted_by_value = OrderedDict(sorted(d.items(), key=lambda x: x[1]))

&gt;&gt;&gt; # behaves like a normal dict
&gt;&gt;&gt; for k, v in d_sorted_by_value.items():
...  print "%s: %s" % (k, v)
first: 1
second: 2
third: 3
fourth: 4

&gt;&gt;&gt; d_sorted_by_value
OrderedDict([('first': 1), ('second': 2), ('third': 3), ('fourth': 4)])
 
 #5 Pretty much the same as Hank Gay's answer; 

 
sorted([(value,key) for (key,value) in mydict.items()])
 
 #6 You can create an "inverted index", also 

 from collections import defaultdict
inverse= defaultdict( list )
for k, v in originalDict.items():
 inverse[v].append( k )
 

 Now your inverse has the values; each value has a list of applicable keys. 

 for k in sorted(inverse):
 print k, inverse[k]
 
 #7 New Answer -- two years late... 

 

 It can often be very handy to use namedtuple . For example, you have a dictionary of 'name' as keys and 'score' as values and you want to sort on 'score': 

 import collections
Player = collections.namedtuple('Player', 'score name')
d = {'John':5, 'Alex':10, 'Richard': 7}
 

 sorting with lowest score first: 

 worst = sorted(Player(v,k) for (k,v) in d.items())
 

 sorting with highest score first: 

 best = sorted([Player(v,k) for (k,v) in d.items()], reverse=True)
 

 Now you can get the name and score of, let's say the second-best player (index=1) very Pythonically like this: 

  player = best[1]
 player.name
  'Richard'
 player.score
   7
 
 #8 Technically, dictionaries aren't sequences, and therefore can't be sorted. You can do something like 

 sorted(a_dictionary.values())
 

 assuming performance isn't a huge deal. 

 UPDATE: Thanks to the commenters for pointing out that I made this way too complicated in the beginning. 
 #9 import operator
origin_list = [
 {"name": "foo", "rank": 0, "rofl": 20000},
 {"name": "Silly", "rank": 15, "rofl": 1000},
 {"name": "Baa", "rank": 300, "rofl": 20},
 {"name": "Zoo", "rank": 10, "rofl": 200},
 {"name": "Penguin", "rank": -1, "rofl": 10000}
]
print "&gt;&gt; Original &gt;&gt;"
for foo in origin_list:
 print foo

print "\n&gt;&gt; Rofl sort &gt;&gt;"
for foo in sorted(origin_list, key=operator.itemgetter("rofl")):
 print foo

print "\n&gt;&gt; Rank sort &gt;&gt;"
for foo in sorted(origin_list, key=operator.itemgetter("rank")):
 print foo
 

 
 
  
  Original >> {'name': 'foo', 'rank': 0, 'rofl': 20000} {'name': 'Silly',
  'rank': 15, 'rofl': 1000} {'name':
  'Baa', 'rank': 300, 'rofl': 20}
  {'name': 'Zoo', 'rank': 10, 'rofl':
  200} {'name': 'Penguin', 'rank': -1,
  'rofl': 10000} 
  
  Rofl >> {'name': 'Baa', 'rank': 300, 'rofl': 20} {'name': 'Zoo',
  'rank': 10, 'rofl': 200} {'name':
  'Silly', 'rank': 15, 'rofl': 1000}
  {'name': 'Penguin', 'rank': -1,
  'rofl': 10000} {'name': 'foo', 'rank':
  0, 'rofl': 20000} 
  
  Rank >> {'name': 'Penguin', 'rank': -1, 'rofl': 10000} {'name': 'foo', 'rank': 0, 'rofl': 20000} {'name':
  'Zoo', 'rank': 10, 'rofl': 200}
  {'name': 'Silly', 'rank': 15, 'rofl':
  1000} {'name': 'Baa', 'rank': 300,
  'rofl': 20} 
  
 
 
 #10 I had the same problem, I solved it like this: 

 WantedOutput = sorted(MyDict,key= lambda x : MyDict[x]) 

 (people who answer: "It is not possible to sort a dict" did not read the question!!
In fact "I can sort on the keys, but how can I sort based on the values?" clearly means that he wants a list of the keys sorted according to the value of their values.) 

 Please remark that the order is not well defined (keys with the same value will be in an arbitrary order in the output list) 
 #11 Use ValueSortedDict from dicts : 

 from dicts.sorteddict import ValueSortedDict
d = {1: 2, 3: 4, 4:3, 2:1, 0:0}
sorted_dict = ValueSortedDict(d)
print sorted_dict.items() 

[(0, 0), (2, 1), (1, 2), (4, 3), (3, 4)]
 
 #12 from django.utils.datastructures import SortedDict

def sortedDictByKey(self,data):
 """Sorted dictionary order by key"""
 sortedDict = SortedDict()
 if data:
  if isinstance(data, dict):
   sortedKey = sorted(data.keys())
   for k in sortedKey:
    sortedDict[k] = data[k]
 return sortedDict
 
 #13 Iterate through a dict and sort it by its values in descending order: 

 $ python --version
Python 3.2.2

$ cat sort_dict_by_val_desc.py 
dictionary = dict(siis = 1, sana = 2, joka = 3, tuli = 4, aina = 5)
for word in sorted(dictionary, key=dictionary.get, reverse=True):
 print(word, dictionary[word])

$ python sort_dict_by_val_desc.py 
aina 5
tuli 4
joka 3
sana 2
siis 1
 
 #14 import operator
slovar_sorted=sorted(slovar.items(), key=operator.itemgetter(1), reverse=True)
print(slovar_sorted)
 

 This Works in 3.1.x 
 #15 If your values are integers, and you use Python 2.7 or newer, you can use collections.Counter instead of dict . The most_common method will give you all items, sorted by the value. 
 #16 I find it strange that no one has posted this. Worked nicely for me. 

 d = {100: 2, 3: 40, 4000:3, 2:1, 0:0}
for key in sorted(d.keys(), key=int):
 print key



0
2
3
100
4000