Question (ID-264575): Python - one variable equals another variable when it shouldn't Here is my sample code. It is meant to be an iterative procedure for gauss seidel (matrix solver). Essentially when the error is small enough it breaks out of the while loop. 

 i=1
while (i&gt;0):
 x_past = x_present

 j=0
 while(j&lt;3):
  value=0
  k=0
  while(k&lt;3):
   if(k!=j):
    if(i==1):
     if(k&gt;j):
      value=value+0
     else:
      value=value+x_present[k]*eqn[j][k] 
    else:
     value=value+x_present[k]*eqn[j][k]
   else:
    value=value+eqn[j][k]
   k=k+1
  x_present[j:j+1]=[value]
  j=j+1
 print "X_PAST"
 print x_past
 print "X_PRESENT"
 print x_present 
 if(error(x_past, x_present)&lt;10**-2):
  break;
 i=i+1
 

 I've reduced the code so its more manageable. if you don't understand what its doing its not really that important to solving this problem. 

 Here is the issue. Everytime 

 x_present[j:j+1]=[value]
 

 is run, x_past is made equal to x_present. I don't know why this is the case as the only place i have set x_past equal to x_present is at the top of the loop. If I take away the 

 x_past=x_present
 

 sentence, x_past is never made equal to x_present. This leads me to think it is some combination of the two statements that is causing the issue. 

 This is a big problem cause if x_past = x_present the error = 0 every time and the loop breaks after the first iteration. The code does work, for example if I tell the code to run for 8 iterations and the break it gives me the answer its supposed to. 

 I've been trying to figure this out for the last 4 hours and am completely stumped. I haven't been working with python long, so my trouble shooting skills syntax wise aren't that great. Any help would be appreciated!! 
 Answers (Total-7): #0 Yes, I think the answers here show your problem.
Just to try and clarify a little bit. 

 You're referencing a list, so when the list changes any reference to that list will reflect that change. To demonstrate: 

 &gt;&gt;&gt; x_present = [4,5,6]
&gt;&gt;&gt;
&gt;&gt;&gt; x_past = x_present
&gt;&gt;&gt;
&gt;&gt;&gt; x_past
[4, 5, 6]
&gt;&gt;&gt;
&gt;&gt;&gt; x_present.append(7)
&gt;&gt;&gt;
&gt;&gt;&gt; x_past
[4, 5, 6, 7]
&gt;&gt;&gt;
 

 If you want a copy of the list you have to do do this, listcopy = mylist[:] . 

 &gt;&gt;&gt; x_past = x_present[:]
&gt;&gt;&gt; x_past
[4, 5, 6, 7]
&gt;&gt;&gt;
&gt;&gt;&gt; x_present.append(8)
&gt;&gt;&gt;
&gt;&gt;&gt; x_past
[4, 5, 6, 7]
 
 #1 What are x_past and x_present? I don't know much Python, but from a .NET/Java perspective, if they're references to some data structure (a map or whatever) then making them references to the same object (as you do at the start) will mean that any changes made through one variable will be visible through the other. It sounds like you need to take a copy of the data structure instead of just doing a reference assignment. Does the data structure you're working with have any kind of "clone" functionality available? 

 As I say though, I don't know much Python so this could be totally wrong... 
 #2 As others pointed out the answer is to replace: x_past = x_present by x_past = x_present[:] . In general you could use a copy module to copy an object in Python. 

 &gt;&gt;&gt; import copy
&gt;&gt;&gt; a = range(10)
&gt;&gt;&gt; a
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; b = a
&gt;&gt;&gt; a += 10, 11
&gt;&gt;&gt; a
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
&gt;&gt;&gt; b
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
&gt;&gt;&gt; c = copy.copy(a) # shallow copy
&gt;&gt;&gt; c
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
&gt;&gt;&gt; del a[3:]
&gt;&gt;&gt; a
[0, 1, 2]
&gt;&gt;&gt; b
[0, 1, 2]
&gt;&gt;&gt; c
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
 

 Your code is unpythonic to say the least. 

 It could be replaced by something like the following code: 

 import copy
# assert(len(x_present) &gt;= len(eqn))

first = True
while True:
 x_past = copy.copy(x_present) # copy

 for j, eqj in enumerate(eqn):
  x_present[j] = sum(x_present[k] * eqj[k] 
       for k in range(j if first else len(eqj)) 
       if k != j)
  x_present[j] += eqj[j] 

 print "X_PAST\n%s\nX_PRESENT\n%s" % (x_past, x_present)
 if allequal(x_past, x_present, tolerance=10**-2):
  break
 first = False
 

 Here's a definition of allequal() (using an absolute error. It might or might not be a good idea in your case (you could use a relative error instead)): 

 def allequal(x, y, tolerance):
 return (len(x) == len(y) and 
   all(-tolerance &lt; (xx - yy) &lt; tolerance
    for xx, yy in zip(x, y)))
 
 #3 It looks as if x_present is a list. I suspect that this means that the assignment x_last = x_present makes x_last into an alias, i.e. they reference the same variable. Might this be the case? 
 #4 try changing the x_past = x_present line to x_past = [x for x in x_present] and see if it helps. 

 the list copy shorthand is my favorite python feature since i can do one-liners that are not possible in other languages: 

 greaterthan100 = [x for x in number if x &gt; 100] 

 notinblacklist = [x for x in mylist if x not in blacklist] 

 firstchildofbigfamily = [x.child[0] for x in familylist if len(x.child) &gt; 10] 
 #5 I would go with monkut and Jon Skeet answer. 

 And I have a question and advice :) 

 
 How you managed to get out from while loop if you increment variable i every time? 
 Use debugger :) 
 

 I tried pydev for Eclipse and it's doing a nice job. 

 hf 
 #6 In Python, everything is an object.
So the statement x_past = x_present point to the same reference.