Question (ID-5844672): Delete an element from a dictionary Is there a way to delete an element from a dictionary in Python? 

 I know I can just call .pop on the dictionary, but that returns the element that was removed. What I'm looking for is something returns the dictionary minus the element in question. 

 At present I have a helper function that accepts the dictionary in question as parameter, and then returns a dictionary with the element removed, Is there a more elegant solution? 
 Answers (Total-6): #0 The del statement removes an element: 

 del d[key]
 

 However, this mutates the existing dictionary so the contents of the dictionary changes for anybody else who has a reference to the same instance. To return a new dictionary, make a copy of the dictionary: 

 def removekey(d, key):
 r = dict(d)
 del r[key]
 return r
 
 #1 &gt;&gt;&gt; def delete_key(dict, key):
...  del dict[key]
...  return dict
... 
&gt;&gt;&gt; test_dict = {'one': 1, 'two' : 2}
&gt;&gt;&gt; print delete_key(test_dict, 'two')
{'one': 1}
&gt;&gt;&gt;
 

 this doesn't do any error handling, it assumes the key is in the dict, you might want to check that first and raise if its not 
 #2 I think your solution is best way to do it. But if you want another solution, you can create a new dictionary with using the keys from old dictionary without including your specified key, like this: 

 &gt;&gt;&gt; a
{0: 'zero', 1: 'one', 2: 'two', 3: 'three'}
&gt;&gt;&gt; {i:a[i] for i in a if i!=0}
{1: 'one', 2: 'two', 3: 'three'}
 
 #3 The del statement is what you're looking for. If you have a dictionary named foo with a key called 'bar', you can delete 'bar' from foo like this: 

 del foo['bar']
 

 Note that this permanently modifies the dictionary being operated on. If you want to keep the original dictionary, you'll have to create a copy beforehand: 

 &gt;&gt;&gt; foo = {'bar': 'baz'}
&gt;&gt;&gt; fu = dict(foo)
&gt;&gt;&gt; del foo['bar']
&gt;&gt;&gt; print foo
{}
&gt;&gt;&gt; print fu
{'bar': 'baz'}
 
 #4 d = {1: 2, '2': 3, 5: 7}
del d[5]
print 'd = ', d
 

 Result: d = {1: 2, '2': 3} 
 #5 No, there is no other way than 

 def dictMinus(dct, val):
 copy = dct.copy()
 del copy[val]
 return copy
 

 However, often creating copies of only slightly altered dictionaries is probably not a good idea because it will result in comparatively large memory demands. It is usually better to log the old dictionary(if even necessary) and then modify it.