Question (ID-5150958): Lists in Python Is the List in python homogeneous or heterogeneous? 
 Answers (Total-7): #0 &gt;&gt;&gt; def a(): pass
&gt;&gt;&gt; lst=[1,'one',{1:'one'},a,[1,1],(1,),True,set((1,))]
&gt;&gt;&gt; for each in lst:
... print type(each), str(each)
... 
&lt;type 'int'&gt; 1
&lt;type 'str'&gt; one
&lt;type 'dict'&gt; {1: 'one'}
&lt;type 'function'&gt; &lt;function a at 0x100496938&gt;
&lt;type 'list'&gt; [1, 1]
&lt;type 'tuple'&gt; (1,)
&lt;type 'bool'&gt; True
&lt;type 'set'&gt; set([1])
 

 Any questions? 
 #1 The List in Python is heterogeneous - the same list can accept objects of various different types. 

 There is a snippet here which gives you a homogeneous list in Python. No idea how that piece of code would perform however. 
 #2 Please try a simple 

 a=[1, "a"]
 

 and see if it throws an error before asking a question. 

 Btw, it does not. 
 #3 I found Fredrik Lundh's tutorial on Python's lists to be very helpful. 
 #4 Your question does not make much sense since everything in Python is an object.
And a list can hold arbitrary instances of objects if needed. 
 #5 Lists in Python can be heterogeneous, but by the general convention it is preferable that they only contain homogeneous elements. Python tuples are the natural data structure for heterogeneous sequences. 

 Of course you can argue that both tuples and lists are just homogeneous sequences of Python objects, but that is a misleading oversimplification and doesn't add any value. 

 Since tuples are immutable and lists are mutable you could also argue that mutability is the real distinction between them. However, that is not how they were intended. More on this can be found in this question . 
 #6 It depends if you talk about the direct elements of a list or its indirect elements. 

 I believe that a list is in reality a list of references, not of objects, and that when the interpeter has to use a list, it knows that in fact it must manipulate the objects to which the references are pointing, not the references themselves: that's the "execution model" of Python, I think. 

 
 What I call indirect element of a
list are the objects that
constitute the value of the list . 
 What I call direct elements are the references to these objects that constitutes the implementation of the list. 
 

 So: 

 
 considered as a list of
references , a list is
 homogenous : all the elements are variables, in the plain sense of
variable = chunk of memory whose
value can change (while the value of
an object never changes) 
 considered as a list of the objects 
pointed by the references, a list is
 heterogenous . The innuendo being that their TYPES are heterogenous. 
 

 That's my understanding. I don't know if I am fully right.