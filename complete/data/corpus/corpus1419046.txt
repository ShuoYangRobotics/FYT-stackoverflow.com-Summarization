Question (ID-1419046): Python normal arguments vs. keyword arguments Could someone explain the differences to me? Aren't all arguments "keyword arguments"? They all have names, and can all be assigned by that name instead of the position. Do keyword arguments mean ones with default values? (Note: I'm talking about pure python, no C) 

 Thanks. 

 EDIT: I just realized there's two types of each: 

 def func(*args, **kwargs): ----&gt; args: positional kwargs:keyword
res = calc(1, 3, spam="eggs")  ----&gt; 1, 3: positional spam="eggs": keyword
 

 I was talking about the second, but thinking of it being decided in the implementation, not the method call. 
 Answers (Total-6): #0 There are two ways to assign argument values to function parameters, both are used. 

 
 By Position. Positional arguments do not have keywords and are assigned first. 
 By Keyword. Keyword arguments have keywords and are assigned second, after positional arguments. 
 

 Note that you have the option to use positional arguments. 

 If you don't use positional arguments, then -- yes -- everything you wrote turns out to be a keyword argument. 

 When you call a function you make a decision to use position or keyword or a mixture. You can choose to do all keywords if you want. Some of us do not make this choice and use positional arguments. 
 #1 there are two related concepts, both called "keyword arguments". 

 On the calling side, which is what other commenters have mentioned, you have the ability to specify some function arguments by name. You have to mention them after all of the arguments without names (positional arguments), and there must be default values for any parameters which were not mentioned at all. 

 The other concept is on the function definition side: You can define a function that takes parameters by name -- and you don't even have to specify what those names are. These are pure keyword arguments, and can't be passed positionally. The syntax is 

 def my_function(arg1, arg2, **kwargs)
 

 Any keyword arguments you pass into this function will be placed into a dictionary named kwargs. You can examine the keys of this dictionary at run-time, like this: 

 def my_function(**kwargs):
 print str(kwargs)

my_function(a=12, b="abc")

{'a': 12, 'b': 'abc'}
 
 #2 There is one last language feature where the distinction is important. Consider the following function: 

 def foo(*positional, **keywords):
 print "Positional:", positional
 print "Keywords:", keywords
 

 The *positional argument will store all of the positional arguments passed to foo() , with no limit to how many you can provide. 

 &gt;&gt;&gt; foo('one', 'two', 'three')
Positional: ('one', 'two', 'three')
Keywords: {}
 

 The **keywords argument will store any keyword arguments: 

 &gt;&gt;&gt; foo(a='one', b='two', c='three')
Positional: ()
Keywords: {'a': 'one', 'c': 'three', 'b': 'two'}
 

 And of course, you can use both at the same time: 

 &gt;&gt;&gt; foo('one','two',c='three',d='four')
Positional: ('one', 'two')
Keywords: {'c': 'three', 'd': 'four'}
 

 These features are rarely used, but occasionally they are very useful, and it's important to know which arguments are positional or keywords. 
 #3 Using keyword arguments is the same thing as normal arguments except order doesn't matter. For example the two functions calls below are the same: 

 def foo(bar, baz):
 pass

foo(1, 2)
foo(baz=2, bar=1)
 
 #4 Normal Arguments 

 They have no keywords before them. The order is important! 

 func(1,2,3, "foo")
 

 Keyword Arguments 

 They have keywords in the front. They can be in any order! 

 func(foo="bar", baz=5, hello=123)

func(baz=5, foo="bar", hello=123)
 

 You should also know that if you use default arguments and neglect to insert the keywords, then the order will then matter! 

 def func(foo=1, baz=2, hello=3): ...
func("bar", 5, 123)
 
 #5 I'm surprised no one has mentioned the fact that you can mix positional and keyword arguments to do sneaky things like this using *args and **kwargs ( from this site ): 

 def test_var_kwargs(farg, **kwargs):
 print "formal arg:", farg
 for key in kwargs:
  print "another keyword arg: %s: %s" % (key, kwargs[key])
 

 This allows you to use arbitrary keyword arguments that may have keys you don't want to define upfront.