Question (ID-2526815): Moon / Lunar Phase Algorithm Does anyone know an algorithm to either calculate the moon phase or age on a given date or find the dates for new/full moons in a given year? 

 Googling tells me the answer is in some Astronomy book, but I don't really want to buy a whole book when I only need a single page. 

 Update: 

 I should have qualified my statement about googling a little better. I did find solutions that only worked over some subset of time (like the 1900's); and the trig based solutions that would be more computationally expensive than I'd like. 

 S Lott in his Python book has several algorithms for calculating Easter on a given year, most are less than ten lines of code and some work for all days in the Gregorian calendar. Finding the full moon in March is a key piece of finding Easter so I figured there should be an algorithm that doesn't require trig and works for all dates in the Gregorian calendar. 
 Answers (Total-7): #0 I think you searched on wrong google: 

 
 http://home.att.net/~srschmitt/zenosamples/zs_lunarphasecalc.html 
 http://www.voidware.com/moon_phase.htm 
 http://www.ben-daglish.net/moon.shtml 
 http://www.faqs.org/faqs/astronomy/faq/part3/section-15.html 
 
 #1 I ported some code to Python for this a while back. I was going to just link to it, but it turns out that it fell off the web in the meantime, so I had to go dust it off and upload it again. See moon.py which is derived from John Walker's moontool . 

 I can't find a reference for this for what time spans it's accurate for either, but seems like the authors were pretty rigorous. Which means yes, it does use trig, but I can't imagine what the heck you would be using this for that would make it computationally prohibitive. Python function call overhead is probably more than the cost of the trig operations. Computers are pretty fast at computing. 
 #2 Also, pyephem â€” scientific-grade astronomy routines [ PyPI ], which is a Python package but has the computational guts in C , and that does say 

 
 Precision &lt; 0.05" from -1369 to +2950. 
 Uses table lookup techniques to limit calls to trigonometric functions. 
 
 #3 I know that you're looking for Python but if you can understand C# there's an open source project out there called Chronos XP which does this very well. 
 #4 If you don't need high accuracy, you can always (ab)use a lunar (or lunisolar) calendar class (e.g., HijriCalendar or ChineseLunisolarCalendar in Microsoft .NET) to calculate the (approximate) moon phase of any date, as the calendar's "day-of-month" property, being a lunar (or lunisolar) calendar day, always corresponds to the moon phase (e.g., day 1 is the new moon, day 15 is the full moon, etc.) 
 #5 I found a Python solution here (untested, no idea if it works; you'd have to verify this yourself). 

 def moon_phase(month, day, year):
 ages = [18, 0, 11, 22, 3, 14, 25, 6, 17, 28, 9, 20, 1, 12, 23, 4, 15, 26, 7]
 offsets = [-1, 1, 0, 1, 2, 3, 4, 5, 7, 7, 9, 9]
 description = ["new (totally dark)",
  "waxing crescent (increasing to full)",
  "in its first quarter (increasing to full)",
  "waxing gibbous (increasing to full)",
  "full (full light)",
  "waning gibbous (decreasing from full)",
  "in its last quarter (decreasing from full)",
  "waning crescent (decreasing from full)"]
 months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]

 if day == 31:
  day = 1
 days_into_phase = ((ages[(year + 1) % 19] + ((day + offsets[month-1]) % 30) + (year &lt; 1900)) % 30)
 index = int((days_into_phase + 2) * 16/59.0)
 if index &gt; 7:
  index = 7
 status = description[index]

 # light should be 100% 15 days into phase
 light = int(2 * days_into_phase * 100/29)
 if light &gt; 100:
  light = abs(light - 200);
 date = "%d%s%d" % (day, months[month-1], year)

 return date, status, light

month = 3
day = 26
year = 2010 # use yyyy format

date, status, light = moon_phase(month, day, year)
print "moon phase on %s is %s, light = %d%s" % (date, status, light, '%')
 
 #6 A quick google revealed this .