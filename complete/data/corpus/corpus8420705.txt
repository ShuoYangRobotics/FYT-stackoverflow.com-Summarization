Question (ID-8420705): Example use of "continue" statement in Python? The definition of the continue statement is: "The continue statement continues with the next iteration of the loop." I can't find any good example of code. 

 Could someone suggest some simple cases where "continue" is necessary? 
 Answers (Total-6): #0 I like to use continue in loops where there are a lot of contitions to be fulfilled before you get "down to business". So instead of code like this: 

 for x, y in zip(a, b):
 if x &gt; y:
  z = calculate_z(x, y)
  if y - z &lt; x:
   y = min(y, z)
   if x ** 2 - y ** 2 &gt; 0:
    lots()
    of()
    code()
    here()
 

 I get code like this: 

 for x, y in zip(a, b):
 if x &lt;= y:
  continue
 z = calculate_z(x, y)
 if y - z &gt;= x:
  continue
 y = min(y, z)
 if x ** 2 - y ** 2 &lt;= 0:
  continue
 lots()
 of()
 code()
 here()
 

 By doing it this way I avoid very deeply nested code. Also, it is easy to optimize the loop by eliminating the most frequently occurring cases first, so that I only have to deal with the infrequent but important cases (e.g. divisor is 0) when there is no other showstopper. 
 #1 Usually the situation where continue is necessary/useful, is when you want to skip the remaining code in the loop and continue iteration. 

 I don't really believe it's necessary, since you can always use if statements to provide the same logic, but it might be useful to increase readability of code. 
 #2 def filter_out_colors(elements):
 colors = ['red', 'green']
 result = []
 for element in elements:
 if element in colors:
  continue # skip the element
 # You can do whatever here
 result.append(element)
 return result

 &gt;&gt;&gt; filter_out_colors(['lemon', 'orange', 'red', 'pear'])
 ['lemon', 'orange', 'pear']
 
 #3 You might find that using continue makes your code cleaner when you need to handle a case where you need to skip the rest of the loop. 

 Here's a slighly cleaned up example from some code I've written recently: 

 watchdirs = ['/some/nfs/directory1',
    '/some/nfs/directory2']

for dir in watchdirs:
 try:
  os.listdir(dir)
 except OSError:
  print "mount not available: %s\nskipping it for now" % (dir)
  continue
 

 Usually you can achieve the same result with an If block wrapping parts of the loop body, but I think this reads better. 
 #4 Consider this example 

 I have changed the code a bit to include the continue statement. This will also help you understand how we can easily circumvent the usage. 

 def Test():
 fin1=open("file1.txt") #File as per your First Table
 fin2=open("file2.txt") #File as per your Second Table
 fin1.readline()  #Skip the Header
 fin2.readline()  #Skip the Header
 #Sort The First list and create an Iterator
 data1=iter(sorted([[f.split()[1],f.split()[2],f.split()[0]] 
    for f in fin1.xreadlines()],key=operator.itemgetter(0))) 
 #Sort The Second List and create an Iterator
 data2=iter(sorted([f.split() for f in fin2.xreadlines()],
    key=operator.itemgetter(0))) 
 # Print The Header
 print "{0:10}{1:10}{2:10}{3:10}{4:10}{5:10}".format("gene_id",
               "start",
               "stop",
               "position",
               "nucleotide",
               "support")
 try:
  v1=data1.next() #Read First Item from First List
  v2=data2.next() #Read Second Item from First List
  #Loop Until One of the List has reached the end
  while True: 
   if v2[0] &gt; v1[1]:
    #If the Position is greater than stop range (from first list)
    #read the next item from the first list
    v1=data1.next()
    continue # Example of Continue
   # If the Position is greater or equal than the start range 
   # (We are in the range)
   if v2[0] &gt;= v1[0]: 
    #Format and Print it
    print "{0:10}{1:10}{2:10}{3:10}{4:10}{5:10}".format(v1[2],
                 v1[0],
                 v1[1],
                 v2[0],
                 v2[1],
                 v2[2]) 
   v2=data2.next() 
 except StopIteration:
  None
 
 #5 For example if you want to do diferent things depending on the value of a variable: 

 for items in range(0,100):
 if my_var &lt; 10:
  continue
 elif my_var == 10:
  print("hit")
 elif my_var &gt; 10:
  print("passed")
 my_var = my_var + 1
 

 In the example above if I use break the interpreter will skip the loop. But with continue it only skips the if-elif statements and go directly to the next item of the loop.