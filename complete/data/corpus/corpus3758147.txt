Question (ID-3758147): Easiest way to read/write a file's content in Python In Ruby you can read from a file using s = File.read(filename) . The shortest and clearest I know in Python is 

 with file(filename) as f:
 s = f.read()
 

 Is there any other way to do it that makes it even shorter (preferably one line) and more readable? 

 Note: initially I phrased the question as "doing this in a single line of code". As pointed by S.Lott, shorter doesn't necessary mean more readable. So I rephrased my question just to make clear what I meant. I think the Ruby code is better and more readable not necessarily because it's one line versus two (though that matters as well), but also because it's a class method as opposed to an instance method, which poses no question about who closes the file, how to make sure it gets closed even if an exception is raised, etc. As pointed in the answers below, you can rely on the GC to close your file (thus making this a one-liner), but that makes the code worse even though it's shorter. Not only by being unportable, but by making it unclear. 
 Answers (Total-7): #0 with file('x.py') as f: s = f.read()
 

 ***grins*** 
 #1 This is same as above but does not handle errors: 

 s = open(filename, 'r').read()
 
 #2 This isn't Perl; you don't want to force-fit multiple lines worth of code onto a single line. Write a function, then calling the function takes one line of code. 

 def read_file(fn):
 """
 &gt;&gt;&gt; import os
 &gt;&gt;&gt; fn = "/tmp/testfile.%i" % os.getpid()
 &gt;&gt;&gt; open(fn, "w+").write("testing")
 &gt;&gt;&gt; read_file(fn)
 'testing'
 &gt;&gt;&gt; os.unlink(fn)
 &gt;&gt;&gt; read_file("/nonexistant")
 Traceback (most recent call last):
  ...
 IOError: [Errno 2] No such file or directory: '/nonexistant'
 """
 with open(fn) as f:
  return f.read()

if __name__ == "__main__":
 import doctest
 doctest.testmod()
 
 #3 If you're open to using libraries, try installing forked-path (with either easy_install or pip). 

 Then you can do: 

 from path import path
s = path(filename).bytes()
 

 This library is fairly new, but it's a fork of a library that's been floating around Python for years and has been used quite a bit. Since I found this library years ago, I very seldom use os.path or open() any more. 
 #4 contents = open(filename).read()
 
 #5 Slow, ugly, platform-specific... but one-liner ;-) 

 import subprocess

contents = subprocess.Popen('cat %s' % filename, shell = True, stdout = subprocess.PIPE).communicate()[0]
 
 #6 contents = open(filename)
 

 This gives you generator so you must save somewhere the values though, or 

 contents = [line for line in open(filename)]
 

 This does the saving to list explicit close is not then possible (at least with my knowledge of Python).