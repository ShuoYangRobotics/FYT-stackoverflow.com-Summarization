Question (ID-5757094): Decimal zero padding I need to output decimal numbers in a price format, 

 i.e. 

 10 = 10.00
11.1 = 11.10 

 How can I achieve this using decimal.Decimal class ? 

 pad_zero(Decimal('10.0'))
&gt;&gt;&gt;Decimal('10.00')
 

 * EDIT: *format method does not fit my need because I need to pass it on as decimal, I understand though, that i can convert it back to afterwards, but such to-and-fro seems somewhat unpythonic. 
 Answers (Total-7): #0 try this : 

 Decimal('10.0').quantize(Decimal('1.00'))
 
 #1 There's a good example of how to format Decimal objects as a "money formatted string" in the Python documentation for the decimal module . 

 I'm a little surprised at how awkward it is -- usually formatting in Python is fairly straightforward. 
 #2 I would follow the moneyfmt recipe in the Python Decimal documentation Recipes section . 

 This recipe creates a function that takes a decimal value and returns a string formatted as a currency. 

 &gt;&gt;&gt; d = Decimal('10.0')
&gt;&gt;&gt; moneyfmt(d, curr='$')
'$10.00'
 

 Below is the actual code, copied sans examples from the Decimal Recipe documentation: 

 def moneyfmt(value, places=2, curr='', sep=',', dp='.',
    pos='', neg='-', trailneg=''):
 """Convert Decimal to a money formatted string.

 places: required number of places after the decimal point
 curr: optional currency symbol before the sign (may be blank)
 sep:  optional grouping separator (comma, period, space, or blank)
 dp:  decimal point indicator (comma or period)
    only specify as blank when places is zero
 pos:  optional sign for positive numbers: '+', space or blank
 neg:  optional sign for negative numbers: '-', '(', space or blank
 trailneg:optional trailing minus indicator: '-', ')', space or blank

 """
 q = Decimal(10) ** -places  # 2 places --&gt; '0.01'
 sign, digits, exp = value.quantize(q).as_tuple()
 result = []
 digits = map(str, digits)
 build, next = result.append, digits.pop
 if sign:
  build(trailneg)
 for i in range(places):
  build(next() if digits else '0')
 build(dp)
 if not digits:
  build('0')
 i = 0
 while digits:
  build(next())
  i += 1
  if i == 3 and digits:
   i = 0
   build(sep)
 build(curr)
 build(neg if sign else pos)
 return ''.join(reversed(result))
 
 #3 For currency calculations, I prefer this. 

 &gt;&gt;&gt; penny=Decimal('0.01')
&gt;&gt;&gt; Decimal('10').quantize(penny)
Decimal('10.00')
 

 It's wordy but explicit. 

 For currency formatting, I use format() . 
 #4 Set the precision for your context before you create your instance: 

 &gt;&gt;&gt; getcontext().prec = 2
 
 #5 It should be quite simple like this (if you don't use decimal.Decimal class as suggested by S. Lott ) : 

  &gt;&gt;&gt; decimal_fmt = "{:.2f}" 
 &gt;&gt;&gt; x = 10
 &gt;&gt;&gt; print(decimal_fmt.format(x))
 10.00
 &gt;&gt;&gt; x = 11.1
 &gt;&gt;&gt; print(decimal_fmt.format(x))
 11.10
 
 #6 Instead of using Decimal('10.0') you could use float('10.0') which will produce the effect you require. 

 Edit: Realised that you were looking to represent it with 2 decimal places. In this case, there's a good example in the Python docs for converting a Decimal() object to money: http://docs.python.org/library/decimal.html#recipes