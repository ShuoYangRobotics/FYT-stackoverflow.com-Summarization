Question (ID-3382552): Python regex help needed I need to get info from a website that outputs it between &lt;font color="red"&gt;needed-info-here&lt;/font&gt; OR &lt;span style="font-weight:bold;"&gt;needed-info-here&lt;/span&gt; , randomly. 

 I can get it when I use 

 start = '&lt;font color="red"&gt;'
end = '&lt;/font&gt;'
expression = start + '(.*?)' + end
match = re.compile(expression).search(web_source_code)
needed_info = match.group(1)
 

 , but then I have to pick to fetch either &lt;font&gt; or &lt;span&gt; , failing, when the site uses the other tag. 

 How do I modify the regular expression so it would always succeed? 
 Answers (Total-6): #0  Don't parse HTML with regex. 

 Regex is not the right tool to use for this problem. Look up BeautifulSoup or lxml . 
 #1 You can join two alternatives with a vertical bar: 

 start = '&lt;font color="red"&gt;|&lt;span style="font-weight:bold;"&gt;'
end = '&lt;/font&gt;|&lt;/span&gt;'
 

 since you know that a font tag will always be closed by &lt;/font&gt; , a span tag always by &lt;/span&gt; . 

 However, consider also using a solid HTML parser such as BeautifulSoup, rather than rolling your own regular expressions, to parse HTML, which is particularly unsuitable in general for getting parsed by regular expressions. 
 #2 Although regular expressions are not your best choice for parsing HTML. 

 For the sake of education, here is a possible answer to your question: 

 start = '&lt;(?P&lt;tag&gt;font|tag) color="red"&gt;'
end = '&lt;/(?P=tag)&gt;'
expression = start + '(.*?)' + end
 
 #3 expression = '(&lt;font color="red"&gt;(.*?)&lt;/font&gt;|&lt;span style="font-weight:bold;"&gt;(.*?)&lt;/span&gt;)'
match = re.compile(expression).search(web_source_code)
needed_info = match.group(2)
 

 This would get the job done but you shouldn't really be using regex to parse html 
 #4 Regex and HTML are not such a good match, HTML has too many potential variations that will trip up your regex. BeautifulSoup is the standard tool to employ here, but I find pyparsing can be just as effective, and sometimes even simpler to construct when trying to locate a particular tag relative to a particular previous tag. 

 Here is how to address your question using pyparsing: 

 html = """ need to get info from a website that outputs it between &lt;font color="red"&gt;needed-info-here&lt;/font&gt; OR &lt;span style="font-weight:bold;"&gt;needed-info-here&lt;/span&gt;, randomly.
&lt;font color="white"&gt;but not this info&lt;/font&gt; and 
&lt;span style="font-weight:normal;"&gt;dont want this either&lt;/span&gt;
"""

from pyparsing import *

font,fontEnd = makeHTMLTags("FONT")
# only match &lt;font&gt; tags with color="red"
font.setParseAction(withAttribute(color="red"))
# only match &lt;span&gt; tags with given style
span,spanEnd = makeHTMLTags("SPAN")
span.setParseAction(withAttribute(style="font-weight:bold;"))

# define full match patterns, define "body" results name for easy access
fontpattern = font + SkipTo(fontEnd)("body") + fontEnd
spanpattern = span + SkipTo(spanEnd)("body") + spanEnd

# now create a single pattern, matching either of the other patterns
searchpattern = fontpattern | spanpattern

# call searchString, and extract body element from each match
for text in searchpattern.searchString(html):
 print text.body
 

 Prints: 

 needed-info-here
needed-info-here
 
 #5 I haven't used Python, but if you make expressions equal to the following, it should work: 

 /(?P&lt;open&gt;&lt;(font|span)[^&gt;]*&gt;)(?P&lt;info&gt;[^&lt;]+)(?P&lt;close&gt;&lt;\/(font|span)&gt;)/gi
 

 Then just access your needed info with the name "info". 

 PS - I also agree about the "not parsing HTML with regex" rule, but if you know that it will appear in either font or span tags, then so be it... 

 Also, why use the font tag? I haven't used a font tag since I learned CSS.