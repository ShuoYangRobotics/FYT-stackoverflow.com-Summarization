Question (ID-4378384): Finding smallest contiguous integers in a Python set What is the best way to get a list of the smallest N contiguous integers in a Python set? 

 &gt;&gt;&gt; s=set([5,6,10,12,13,15,30,40,41,42,43,44,55,56,90,300,500])
&gt;&gt;&gt; s
set([42, 43, 44, 5, 6, 90, 300, 30, 10, 12, 13, 55, 56, 15, 500, 40, 41])
&gt;&gt;&gt; smallest_contiguous(s,5)
[40,41,42,43,44]
&gt;&gt;&gt; smallest_contiguous(s,6)
[]
 

 Edit: Thanks for the answers, everyone. 
 Answers (Total-6): #0 Sven has the right idea. You can avoid having to check supersets by just checking the number N - 1 ahead. 

 def smallest_contiguous(s, N):
 lst = list(s)
 lst.sort()
 Nm = N-1
 for i in xrange(len(lst) - Nm):
  if lst[i] + Nm == lst[i + Nm]:
   return range(lst[i], lst[i]+N)
 return []
 

 This will only always be correct for a set as input and knowing that the set only contains integers. 
 #1 How about this? 

 def smallest_contiguous(s, N):
 lst = sorted(s)
 for i in lst:
  t = range(i, i+N)
  if s.issuperset(t):
   return t
 return []
 

 It might not be the most efficient solution, but it is concise. 

 Edit: Justin's approach could also be made more concise: 

 def smallest_contiguous(s, N):
 lst = sorted(s)
 for a, b in zip(lst, lst[N - 1:]):
  if b - a == N - 1:
   return range(a, b + 1)
 return []
 
 #2 That should do it ... look ahead length - 1 steps in the sorted list. Since it contains integers only and is sorted, the difference must be length - 1 as well. 

 def smallest_contiguous(myset, length):
 if len(myset) &lt; length:
  return []

 s = sorted(myset)
 for idx in range(0, len(myset) - length + 1):
  if s[idx+length-1] - s[idx] == length - 1:
   return s[idx:idx+length]

 return []

s=set([5,6,10,12,13,15,30,40,41,42,43,44,55,56,90,300,500])
print smallest_contiguous(s, 5)
print smallest_contiguous(s, 6)
 
 #3 Here's one I came up with: 

 def smallest_contiguous(s,N):
 try:
  result = []
  while len(result) &lt; N:
   min_value = min(s)
   s.remove(min_value)
   if result == [] or min_value == result[-1] + 1:
    result.append(min_value)
   else:
    result = [min_value]
  return result
 except ValueError:
  return []
 

 It modifies the input set as a side effect. 
 #4 itertools to the rescue. groupby does all the grunt work here
The algorithm is O(n logn) because of the call to sorted() 

 &gt;&gt;&gt; from itertools import groupby, count
&gt;&gt;&gt; def smallest_contiguous(s, N):
...  for i,j in groupby(sorted(s), key=lambda i,c=count().next: i-c()):
...   res = list(j)
...   if len(res) == N:
...    return res
...  return []

... 
&gt;&gt;&gt; smallest_contiguous(s,5)
[40, 41, 42, 43, 44]
&gt;&gt;&gt; smallest_contiguous(s,6)
[]
 
 #5 def smallest_contiguous(s, n):
 xs = sorted(s)
 return next(x for i, x in enumerate(xs) if xs[i + n - 1] == x + n - 1)