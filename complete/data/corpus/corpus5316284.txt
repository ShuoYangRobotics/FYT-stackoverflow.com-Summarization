Question (ID-5316284): Python: run one function until another function finishes I have two functions, draw_ascii_spinner and findCluster(companyid) . 

 I would like to: 

 
 Run findCluster(companyid) in the backround and while its processing.... 
 Run draw_ascii_spinner until findCluster(companyid) finishes 
 

 How do I begin to try to solve for this (Python 2.7)? 
 Answers (Total-6): #0 You can use multiprocessing . Or, if findCluster(companyid) has sensible stopping points, you can turn it into a generator along with draw_ascii_spinner , to do something like this: 

 for tick in findCluster(companyid):
 ascii_spinner.next()
 
 #1 Use threads: 

 import threading, time

def wrapper(func, args, res):
 res.append(func(*args))

res = []
t = threading.Thread(target=wrapper, args=(findcluster, (companyid,), res))
t.start()
while t.is_alive():
 # print next iteration of ASCII spinner
 t.join(0.2)
print res[0]
 
 #2 This can be done with threads. FindCluster runs in a separate thread and when done, it can simply signal another thread that is polling for a reply. 
 #3 You'll want to do some research on threading, the general form is going to be this 

 
 Create a new thread for findCluster and create some way for the program to know the method is running - simplest in Python is just a global boolean 
 Run draw_ascii_spinner in a while loop conditioned on whether it is still running, you'll probably want to have this thread sleep for a short period of time between iterations 
 

 Here's a short tutorial in Python - http://linuxgazette.net/107/pai.html 
 #4 Generally, you will use Threads. Here is a simplistic approach which assumes, that there are only two threads: 1) the main thread executing a task , 2) the spinner thread: 

 #!/usr/bin/env python

import time
import thread

def spinner():
 while True:
  print '.'
  time.sleep(1)

def task():
 time.sleep(5)

if __name__ == '__main__':
 thread.start_new_thread(spinner, ())
 # as soon as task finishes (and so the program)
 # spinner will be gone as well
 task()
 
 #5 Run findCluster() in a thread (the Threading module makes this very easy), and then draw_ascii_spinner until some condition is met. 

 Instead of using sleep() to set the pace of the spinner, you can wait on the thread's wait() with a timeout.