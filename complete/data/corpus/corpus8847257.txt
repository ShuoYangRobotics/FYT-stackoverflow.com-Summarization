Question (ID-8847257): Algorithm to match 2 lists with wildcards I'm looking for an efficient way to match 2 lists, one wich contains complete information, and one which contains wildcards. I've been able to do this with wildcards of fixed lengths, but am now trying to do it with wildcards of variable lengths. 

 Thus: 

 match( ['A', 'B', '*', 'D'], ['A', 'B', 'C', 'C', 'C', 'D'] )
 

 would return True as long as all the elements are in the same order in both lists. 

 I'm working with lists of objects, but used strings above for simplicity. 
 Answers (Total-6): #0 [edited to justify no RE after OP comment on comparing objects] 

 It appears you are not using strings, but rather comparing objects. I am therefore giving an explicit algorithm â€” regular expressions provide a good solution tailored for strings, don't get me wrong, but from what you say as a comment to your questions, it seems an explicit, simple algorithm may make things easier for you. 

 It turns out that this can be solved with a much simpler algorithm than this previous answer : 

 def matcher (l1, l2):
 if (l1 == []):
  return (l2 == [] or l2 == ['*'])
 if (l2 == [] or l2[0] == '*'):
  return matcher(l2, l1)
 if (l1[0] == '*'):
  return (matcher(l1, l2[1:]) or matcher(l1[1:], l2))
 if (l1[0] == l2[0]):
  return matcher(l1[1:], l2[1:])
 else:
  return False
 

 The key idea is that when you encounter a wildcard, you can explore two options : 

 
 either advance in the list that contains the wildcard (and consider the wildcard matched whatever there was until now) 
 or advance in the list that doesn't contain the wildcard (and consider that whatever is at the head of the list has to be matched by the wildcard). 
 
 #1 How about the following: 

 import re

def match(pat, lst):
 regex = ''.join(term if term != '*' else '.*' for term in pat) + '$'
 s = ''.join(lst)
 return re.match(regex, s) is not None

print match( ['A', 'B', '*', 'D'], ['A', 'B', 'C', 'C', 'C', 'D'] )
 

 It uses regular expressions. Wildcards ( * ) are changed to .* and all other search terms are kept as-is. 

 One caveat is that if your search terms could contain things that have special meaning in the regex language, those would need to be properly escaped. It's pretty easy to handle this in the match function, I just wasn't sure if this was something you required. 
 #2 I'd recommend converting ['A', 'B', '*', 'D'] to '^AB.*D$' , ['A', 'B', 'C', 'C', 'C', 'D'] to 'ABCCCD' , and then using the re module (regular expressions) to do the match. 

 This will be valid if the elements of your lists are only one character each, and if they're strings. 

 something like: 

 import(re)
def myMatch( patternList, stringList ):
 # convert pattern to flat string with wildcards
 # convert AB*D to valid regex ^AB.*D$
 pattern = ''.join(patternList) 
 regexPattern = '^' + pattern.replace('*','.*') + '$' 
 # perform matching
 against = ''.join(stringList) # convert ['A','B','C','C','D'] to ABCCCD
 # return whether there is a match
 return (re.match(regexPattern,against) is not None)
 

 If the lists contain numbers, or words, choose a character that you wouldn't expect to be in either, for example # . Then ['Aa','Bs','Ce','Cc','CC','Dd'] can be converted to Aa#Bs#Ce#Cc#CC#Dd , the wildcard pattern ['Aa','Bs','*','Dd'] could be converted to ^Aa#Bs#.*#Dd$ , and the match performed. 

 Practically speaking this just means all the ''.join(...) becomes '#'.join(...) in myMatch . 
 #3 I agree with the comment regarding this could be done with regular expressions. For example: 

 import re

lst = ['A', 'B', 'C', 'C', 'C', 'D']
pattern = ['A', 'B', 'C+', 'D']

print re.match(''.join(pattern), ''.join(lst)) # Will successfully match
 

 Edit: As pointed out by a comment, it might be known in advance just that some character has to be matched, but not which one. In that case, regular expressions are useful still: 

 import re

lst = ['A', 'B', 'C', 'C', 'C', 'D']
pattern = r'AB(\w)\1*D'

print re.match(pattern, ''.join(lst)).groups()
 
 #4 I agree, regular expressions are usually the way to go with this sort of thing. This algorithm works, but it just looks convoluted to me. It was fun to write though. 

 def match(listx, listy):
 listx, listy = map(iter, (listx, listy))
 while 1:
  try:
   x = next(listx)
  except StopIteration:
   # This means there are values left in listx that are not in listy.
   try:
    y = next(listy)
   except StopIteration:
    # This means there are no more values to be compared in either
    # listx or listy; since no exception was raied elsewhere, the
    # lists match.
    return True
   else:
    # This means that there are values in listy that are not in
    # listx.
    return False
  else:
   try:
    y = next(listy)
   except StopIteration:
    # Similarly, there are values in listy that aren't in listx.
    return False
  if x == y:
   pass
  elif x == '*':
   try:
    # Get the value in listx after '*'.
    x = next(listx)
   except StopIteration:
    # This means that listx terminates with '*'. If there are any
    # remaining values of listy, they will, by definition, match.
    return True
   while 1:
    if x == y:
     # I didn't shift to the next value in listy because I
     # assume that a '*' matches the empty string and well as
     # any other.
     break
    else:
     try:
      y = next(listy)
     except StopIteration:
      # This means there is at least one remaining value in
      # listx that is not in listy, because listy has no
      # more values.
      return False
     else:
      pass
  # Same algorithm as above, given there is a '*' in listy.
  elif y == '*':
   try:
    y = next(listy)
   except StopIteration:
    return True
   while 1:
    if x == y:
     break
    else:
     try:
      x = next(listx)
     except StopIteration:
      return False
     else:
      pass
 
 #5 I had this c++ piece of code which seems to be doing what you are trying to do (inputs are strings instead of arrays of characters but you'll have to adapt stuff anyway). 

 bool Utils::stringMatchWithWildcards (const std::string str, const std::string strWithWildcards)
 PRINT("Starting in stringMatchWithWildcards('" &lt;&lt; str &lt;&lt; "','" &lt;&lt; strWithWildcards &lt;&lt; "')");
 const std::string wildcard="*";

 const bool startWithWildcard=(strWithWildcards.find(wildcard)==0);
 int pos=strWithWildcards.rfind(wildcard);
 const bool endWithWildcard = (pos!=std::string::npos) &amp;&amp; (pos+wildcard.size()==strWithWildcards.size());

 // Basically, the point is to split the string with wildcards in strings with no wildcard.
 // Then search in the first string for the different chunks of the second in the correct order
 std::vector&lt;std::string&gt; vectStr;
 boost::split(vectStr, strWithWildcards, boost::is_any_of(wildcard));
 // I expected all the chunks in vectStr to be non-empty. It doesn't seem the be the case so let's remove them.
 vectStr.erase(std::remove_if(vectStr.begin(), vectStr.end(), std::mem_fun_ref(&amp;std::string::empty)), vectStr.end());

 // Check if at least one element (to have first and last element)
 if (vectStr.empty())
 {
  const bool matchEmptyCase = (startWithWildcard || endWithWildcard || str.empty());
  PRINT("Match " &lt;&lt; (matchEmptyCase?"":"un") &lt;&lt; "successful (empty case) : '" &lt;&lt; str &lt;&lt; "' and '" &lt;&lt; strWithWildcards &lt;&lt; "'");
  return matchEmptyCase;
 }

 // First Element
 std::vector&lt;std::string&gt;::const_iterator vectStrIt = vectStr.begin();
 std::string aStr=*vectStrIt;
 if (!startWithWildcard &amp;&amp; str.find(aStr, 0)!=0) {
  PRINT("Match unsuccessful (beginning) : '" &lt;&lt; str &lt;&lt; "' and '" &lt;&lt; strWithWildcards &lt;&lt; "'");
  return false;
 }

 // "Normal" Elements
 bool found(true);
 pos=0;
 std::vector&lt;std::string&gt;::const_iterator vectStrEnd = vectStr.end();
 for ( ; vectStrIt!=vectStrEnd ; vectStrIt++)
 {
  aStr=*vectStrIt;
  PRINT( "Searching '" &lt;&lt; aStr &lt;&lt; "' in '" &lt;&lt; str &lt;&lt; "' from " &lt;&lt; pos);
  pos=str.find(aStr, pos);
  if (pos==std::string::npos)
  {
   PRINT("Match unsuccessful ('" &lt;&lt; aStr &lt;&lt; "' not found) : '" &lt;&lt; str &lt;&lt; "' and '" &lt;&lt; strWithWildcards &lt;&lt; "'");
   return false;
  } else
  {
   PRINT( "Found at position " &lt;&lt; pos);
   pos+=aStr.size();
  }
 }

 // Last Element
 const bool matchEnd = (endWithWildcard || str.rfind(aStr)+aStr.size()==str.size());
 PRINT("Match " &lt;&lt; (matchEnd?"":"un") &lt;&lt; "successful (usual case) : '" &lt;&lt; str &lt;&lt; "' and '" &lt;&lt; strWithWildcards);
 return matchEnd;
}

 /* Tested on these values :
 assert( stringMatchWithWildcards("ABC","ABC"));
 assert( stringMatchWithWildcards("ABC","*"));
 assert( stringMatchWithWildcards("ABC","*****"));
 assert( stringMatchWithWildcards("ABC","*BC"));
 assert( stringMatchWithWildcards("ABC","AB*"));
 assert( stringMatchWithWildcards("ABC","A*C"));
 assert( stringMatchWithWildcards("ABC","*C"));
 assert( stringMatchWithWildcards("ABC","A*"));

 assert(!stringMatchWithWildcards("ABC","BC"));
 assert(!stringMatchWithWildcards("ABC","AB"));
 assert(!stringMatchWithWildcards("ABC","AB*D"));
 assert(!stringMatchWithWildcards("ABC",""));

 assert( stringMatchWithWildcards("",""));
 assert( stringMatchWithWildcards("","*"));
 assert(!stringMatchWithWildcards("","ABC"));
 */
 

 It's not something I'm really proud of but it seems to be working so far. I hope you can find it useful.