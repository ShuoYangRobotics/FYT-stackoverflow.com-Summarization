Question (ID-2540567): Is there a Python equivalent to Perl's Data::Dumper? Is there a Python module that can be used in the same way as Perl's Data::Dumper module? 

 Edit: Sorry, I should have been clearer. I was mainly after a module for inspecting data rather than persisting. 

 BTW Thanks for the answers. This is one awesome site! 
 Answers (Total-6): #0 Data::Dumper has two main uses: data persistence and debugging/inspecting objects. As far as I know, there isn't anything that's going to work exactly the same as Data::Dumper. 

 I use pickle for data persistence. 

 I use pprint to visually inspect my objects / debug. 
 #1 Possibly a couple of alternatives: pickle , marshal , shelve . 
 #2 
 For serialization, there are many options. 

 
 One of the best is JSON, which is a language-agnostic standard for serialization. It is available in 2.6 in the stdlib json module and before that with the same API in the third-party simplejson module. 
 You do not want to use marshal , which is fairly low-level. If you wanted what it provides, you would use pickle. 
 I avoid using pickle the format is Python-only and insecure. Deserializing using pickle can execute arbitrary code. 

 
 If you did use pickle , you want to use the C implementation thereof. (Do import cPickle as pickle .) 
 
 
 For debugging, you usually want to look at the object's repr or to use the pprint module. 
 
 #3 I think the closest you will find is the pprint module. 

 &gt;&gt;&gt; l = [1, 2, 3, 4]
&gt;&gt;&gt; l.append(l)
&gt;&gt;&gt; d = {1: l, 2: 'this is a string'}
&gt;&gt;&gt; print d
{1: [1, 2, 3, 4, [...]], 2: 'this is a string'}

&gt;&gt;&gt; pprint.pprint(d)
{1: [1, 2, 3, 4, &lt;Recursion on list with id=47898714920216&gt;],
 2: 'this is a string'}
 
 #4 I too have been using Data::Dumper for quite some time and have gotten used to its way of displaying nicely formatted complex data structures. pprint as mentioned above does a pretty decent job, but I didn't quite like its formatting style. That plus pprint doesn't allow you to inspect objects like Data::Dumper does: 

 Searched on the net and came across these: 

 https://gist.github.com/1071857#file_dumper.pyamazon 

 &gt;&gt;&gt; y = { 1: [1,2,3], 2: [{'a':1},{'b':2}]}

&gt;&gt;&gt; pp = pprint.PrettyPrinter(indent = 4)
&gt;&gt;&gt; pp.pprint(y)
{ 1: [1, 2, 3], 2: [{ 'a': 1}, { 'b': 2}]}

&gt;&gt;&gt; print(Dumper.dump(y)) # Dumper is the python module in the above link
 

 
{
 1: [
  1 
  2 
  3
 ] 
 2: [
  {
   'a': 1
  } 
  {
   'b': 2
  }
 ]
}
 

 &gt;&gt;&gt; print(Dumper.dump(pp))
 

 
instance::pprint.PrettyPrinter
 __dict__ :: {
  '_depth': None 
  '_stream': file:: > 
  '_width': 80 
  '_indent_per_level': 4
 }
 

 Also worth checking is http://salmon-protocol.googlecode.com/svn-history/r24/trunk/salmon-playground/dumper.py It has its own style and seems useful too. 
 #5 Here is a simple solution for dumping nested data made up of dictionaries, lists, or tuples (it works quite well for me): 

 def printStruct(struc, indent=0):
 if isinstance(struc, dict):
 print ' '*indent+'{'
 for key,val in struc.iteritems():
  if isinstance(val, (dict, list, tuple)):
  print ' '*(indent+1) + str(key) + '=&gt; '
  printStruct(val, indent+2)
  else:
  print ' '*(indent+1) + str(key) + '=&gt; ' + str(val)
 print ' '*indent+'}'
 elif isinstance(struc, list):
 print ' '*indent + '['
 for item in struc:
  printStruct(item, indent+1)
 print ' '*indent + ']'
 elif isinstance(struc, tuple):
 print ' '*indent + '('
 for item in struc:
  printStruct(item, indent+1)
 print ' '*indent + ')'
 else: print ' '*indent + str(struc)
 

 See it at work: 

 &gt;&gt;&gt; d = [{'a1':1, 'a2':2, 'a3':3}, [1,2,3], [{'b1':1, 'b2':2}, {'c1':1}], 'd1', 'd2', 'd3']
&gt;&gt;&gt; printStruct(d)
[
 {
 a1=&gt; 1
 a3=&gt; 3
 a2=&gt; 2
 }
 [
 1
 2
 3
 ]
 [
 {
  b1=&gt; 1
  b2=&gt; 2
 }
 {
  c1=&gt; 1
 }
 ]
 d1
 d2
 d3
]