Question (ID-1380860): add variables to tuple i am learning python and creating a database connection.
while trying to add to the db, i am thinking of creating tuples out of information and then add them to the db. 

 WHAT I AM DOING:
i am taking info from the user and store them in variables. 
can i add these variables into a tuple? can you please help me with the syntax? 

 also if there is an efficient way of doing this, please share... 

 thanks a lot. 

 EDIT 
Let me edit this question a bit...I only need the tuple to enter info into the DB. once the info is added to the DB, should I delete the tuple? i mean i dont need the tuple anymore. 
 Answers (Total-6): #0 Tuples are immutable; you can't change which variables they contain after construction. However, you can concatenate or slice them to form new tuples: 

 a = (1, 2, 3)
b = a + (4, 5, 6)
c = b[1:]
 

 And, of course, build them from existing values: 

  name = "Joe"
 age = 40
 location = "New York"
 joe = (name, age, location)
 
 #1 It's as easy as the following: 

 info_1 = "one piece of info"
info_2 = "another piece"
vars = (info_1, info_2)
# 'vars' is now a tuple with the values ("info_1", "info_2")
 

 However, tuples in Python are immutable , so you cannot append variables to a tuple once it is created. 
 #2 You can start with a blank tuple with something like t = (). You can add with +, but you have to add another tuple. If you want to add a single element, make it a singleton: t = t + (element,). You can add a tuple of multiple elements with or without that trailing comma. 

 &gt;&gt;&gt; t = ()
&gt;&gt;&gt; t = t + (1,)
&gt;&gt;&gt; t
(1,)
&gt;&gt;&gt; t = t + (2,)
&gt;&gt;&gt; t
(1, 2)
&gt;&gt;&gt; t = t + (3, 4, 5)
&gt;&gt;&gt; t
(1, 2, 3, 4, 5)
&gt;&gt;&gt; t = t + (6, 7, 8,)
&gt;&gt;&gt; t
(1, 2, 3, 4, 5, 6, 7, 8)
 
 #3 I'm pretty sure the syntax for this in python is: 

 user_input1 = raw_input("Enter Name: ")
user_input2 = raw_input("Enter Value: ")
info = (user_input1, user_input2)
 

 once set, tuples cannot be changed. 
 #4 As other answers have noted, you cannot change an existing tuple, but you can always create a new tuple (which may take some or all items from existing tuples and/or other sources). 

 For example, if all the items of interest are in scalar variables and you know the names of those variables: 

 def maketuple(variables, names):
 return tuple(variables[n] for n in names)
 

 to be used, e.g, as in this example: 

 def example():
 x = 23
 y = 45
 z = 67
 return maketuple(vars(), 'x y z'.split())
 

 of course this one case would be more simply expressed as (x, y, z) (or even foregoing the names altogether, (23, 45, 67) ), but the maketuple approach might be useful in some more complicated cases (e.g. where the names to use are also determined dynamically and appended to a list during the computation). 
 #5 " once the info is added to the DB, should I delete the tuple? i mean i dont need the tuple anymore." 

 No. 

 Generally, there's no reason to delete anything. There are some special cases for deleting, but they're very, very rare. 

 Simply define a narrow scope (i.e., a function definition or a method function in a class) and the objects will be garbage collected at the end of the scope. 

 Don't worry about deleting anything. 

 [Note. I worked with a guy who -- in addition to trying to delete objects -- was always writing "reset" methods to clear them out. Like he was going to save them and reuse them. Also a silly conceit. Just ignore the objects you're no longer using. If you define your functions in small-enough blocks of code, you have nothing more to think about.]