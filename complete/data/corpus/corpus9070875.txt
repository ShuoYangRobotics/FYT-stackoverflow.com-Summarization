Question (ID-9070875): comparing arrays in python I am comparing two arrays in Python. Both are character arrays. 
The 1st array is a list of words from a query string. The second array is the list of words to be excluded from the query. 

 I have to compare these arrays and exclude words from the first array which are contained in the second array. 

 Hence I have to compare each word from the first array to the whole of second array and continue until all the words from the first array are exhausted. 

 I tried doing this: 

 for i in q_str:
 if q_str[i] in stop_arr:
  continue
 else:
  sans_arr[j] = q_arr[i]
  j = j + 1
 

 Where q_str is the query array, stop_arr contains the words to be excluded, and 
 sans_arr is a new array with the words excluded. 

 This code generates an error: "list indices must be integers not str". Please help; I'm new to Python. 
 Answers (Total-6): #0 Use sets instead of lists, which gives easy access to set operations, such as subtraction: 

 set1 = set(q_str)
set2 = set(stop_arr)

set3 = set1 - set2 # things which are in set1, but not in set2

# or

set4 = set1.difference(set2) # things which are in set1, but not in set2
 

 Here's an example: 

 &gt;&gt;&gt; u = set([1,2,3,4])
&gt;&gt;&gt; v = set([3,4,5,6])
&gt;&gt;&gt; u - v
set([1, 2])
&gt;&gt;&gt; u.difference(v)
set([1, 2])
&gt;&gt;&gt; v.difference(u)
set([5, 6])
 
 #1 It is not entirely clear whether you wish to preserve the ordering of words in q_str . If you do: 

 import re
q_str = 'I am comparing 2 arrays in python. both are character arrays. the 1st array is a list of words from a query string. the second array is the list of words to be excluded from the query.'
q_arr = re.split(r'[\s.,;]+', q_str)
stop_arr = set(['a', 'the', 'of', 'is', 'in', 'to', 'be', 'am', 'are', ''])
print [w for w in q_arr if w not in stop_arr]
 

 This produces: 

 ['I', 'comparing', '2', 'arrays', 'python', 'both', 'character', 'arrays', '1st',
 'array', 'list', 'words', 'from', 'query', 'string', 'second', 'array', 'list',
 'words', 'excluded', 'from', 'query']
 
 #2 'for i in q_str' iterates over the list in your loop returning a string each time. 

 I would lose the [i] in your loop 

 for word in q_str: 
 if word in stop_arr: 
  continue 
 else: 
  sans_arr[j] = word
  j=j+1 
 
 #3 When you are iterating over a list with a for loop, you will get the elements of the list, not indices. This means that i will actually be the strings from q_str , so instead of doing if q_str[i] in stop_arr you can check if i in stop_arr . This also means that you want to add i to sans_arr instead of q_arr[i] . 

 Also, unless sans_arr has already been created with a certain length, you probably want to do sans_arr.append(i) instead of your current approach of setting the element at a specific index and then incrementing your current index. 

 And since i makes more sense for an index than a word, I have renamed i in the loop to word : 

 for word in q_str:
 if word in stop_arr:
  continue
 else:
  sans_arr.append(word)
 
 #4 Solution for filtering query string keys-values 

 I assume q_str is the dictionary of key-value pairs from query string, stop_arr is a list with keys you do not want, and sans_arr is filtered q_str , without keys existing in stop_arr . 

 Under the above assumptions, the solution would look like this: 

 sans_arr = {x: q_str[x] for x in q_str if x not in stop_arr}
 

 Test 

 This is how it works: 

 &gt;&gt;&gt; q_str = {
 'test1': 'val1',
 'test2': 'val2',
 'test3': 'val3'
 }
&gt;&gt;&gt; stop_arr = ['test3','test4']
&gt;&gt;&gt; sans_arr = {x: q_str[x] for x in q_str if x not in stop_arr}
&gt;&gt;&gt; sans_arr
{'test1': 'val1', 'test2': 'val2'}
 
 #5 This code generates new array with all elements of q_str that not exists in stop_arr : 

 sans_arr = [ x for x in q_str if x not in stop_arr ]
 

 Disclaimer: I don't know if q_str is an array of string because you talk about a query array.