Question (ID-243865): How do I merge two python iterators? I have two iterators, a list and an itertools.count object (i.e. an infinite value generator). I would like to merge these two into a resulting iterator that will alternate yield values between the two: 

 &gt;&gt;&gt; import itertools
&gt;&gt;&gt; c = itertools.count(1)
&gt;&gt;&gt; items = ['foo', 'bar']
&gt;&gt;&gt; merged = imerge(items, c) # the mythical "imerge"
&gt;&gt;&gt; merged.next()
'foo'
&gt;&gt;&gt; merged.next()
1
&gt;&gt;&gt; merged.next()
'bar'
&gt;&gt;&gt; merged.next()
2
&gt;&gt;&gt; merged.next()
Traceback (most recent call last):
 ...
StopIteration
 

 What is the simplest, most concise way to do this? 
 Answers (Total-12): #0 A generator will solve your problem nicely. 

 def imerge(a, b):
 for i, j in itertools.izip(a,b):
  yield i
  yield j
 
 #1 You can do something that is almost exaclty what @Pramod first suggested. 

 def izipmerge(a, b):
 for i, j in itertools.izip(a,b):
 yield i
 yield j
 

 The advantage of this approach is that you won't run out of memory if both a and b are infinite. 
 #2 I'd do something like this. This will be most time and space efficient, since you won't have the overhead of zipping objects together. This will also work if both a and b are infinite. 

 def imerge(a, b):
 i1 = iter(a)
 i2 = iter(b)
 while True:
  try:
   yield i1.next()
   yield i2.next()
  except StopIteration:
   return
 
 #3 You can use zip as well as itertools.chain . This will only work if the first list is finite : 

 merge=itertools.chain(*[iter(i) for i in zip(['foo', 'bar'], itertools.count(1))])
 
 #4 I also agree that itertools is not needed. 

 But why stop at 2? 

 def tmerge(*iterators):
 for values in zip(*iterators):
  for value in values:
  yield value
 

 handles any number of iterators from 0 on upwards. 
 #5 I'm not sure what your application is, but you might find the enumerate() function more useful. 

 &gt;&gt;&gt; items = ['foo', 'bar', 'baz']
&gt;&gt;&gt; for i, item in enumerate(items):
... print item
... print i
... 
foo
0
bar
1
baz
2
 
 #6 One of the less well known features of Python is that you can have more for clauses in a generator expression. Very useful for flattening nested lists, like those you get from zip()/izip(). 

 def imerge(*iterators):
 return (value for row in itertools.izip(*iterators) for value in row)
 
 #7 Why is itertools needed? 

 def imerge(a,b):
 for i,j in zip(a,b):
 	yield i
 	yield j
 

 In this case at least one of a or b must be of finite length, cause zip will return a list, not an iterator. If you need an iterator as output then you can go for the Claudiu solution. 
 #8 Using itertools.izip(), instead of zip() as in some of the other answers, will improve performance: 

 As "pydoc itertools.izip" shows: "Works like the zip() function but consumes less memory by returning an iterator instead of a list." 

 Itertools.izip will also work properly even if one of the iterators is infinite. 
 #9 Use izip and chain together: 

 &gt;&gt;&gt; list(itertools.chain.from_iterable(itertools.izip(items, c))) # 2.6 only
['foo', 1, 'bar', 2]

&gt;&gt;&gt; list(itertools.chain(*itertools.izip(items, c)))
['foo', 1, 'bar', 2]
 
 #10 A concise method is to use a generator expression with itertools.cycle(). It avoids creating a long chain() of tuples. 

 generator = (it.next() for it in itertools.cycle([i1, i2]))
 
 #11 I prefer this other way which is much more concise: 

 iter = reduce(lambda x,y: itertools.chain(x,y), iters)