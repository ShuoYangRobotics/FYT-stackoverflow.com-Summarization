Question (ID-5393150): How do I obtain values(lines) from file2 using only indices in file1? I have one file1 with only indices, and second file2 contains the values of these indices of file1. How do I obtain these values from file2 using the indices in file1, and output its value to a third file.For simplicity sake, every index in file1 has its associated values in file2. 

 For example: 

 file1: 

 2
3
4
 

 file2 contents: 

 0.24 0.43    
0.34 0.28    
7.50 0.67    
0.23 0.78    
0.45 0.49    
 

 Expected result 

 7.50 0.67
0.23 0.78
0.45 0.49
 

 file1 #contains only indices
file2 #every index in file1 contains values with associated indices 

 fname = file1.readlines()
fname2 = file2.readlines()
outfile = open('Values.txt','w')

for index in fname:
 for line in fname2:
 if line == index:
  outfile.writelines(line)

print "all indices' values have been written to a file success
 
 Answers (Total-6): #0 These solutions do not rely on file1 being ordered, however they do load file2 into memory, which could be costly if file2 is large. you will notice however that wanted_lines and lines_out are generators in the first example, which should save a small amount of memory. 

 This example has no error handling, but is basically what you need. I'll knock together a better one in a sec. 

 wanted_lines = (int(line) for line in open(file1).readlines())
all_lines = [line.strip() for line in open(file1).readlines()]
lines_out = (all_lines[index] for index in wanted_lines)
open(file3, 'w').writelines(lines_out)
 

 

 Better: 

 all_lines = [line.strip() for line in open(file2).readlines()]
lines_out = []
for line in open(file1).readlines():
 try:
 index = int(line)
 lines_out.append(all_lines[index] + '\n')
 except IndexError:
 print file1, "is only", len(file1), "lines long, therefore has no", index+1, "th line."
 except:
 print "could not coerce", line.strip(), "to an int"
open(file3, 'w').writelines(lines_out)
 
 #1 fname = file1.readlines()
fname = [ int(i) for i in fname]
f = open("file2")
for number,line in enumerate(f):
 if number in fname :
   print line.rstrip()
f.close()
 
 #2 def copyLines(infname, outfname, lines, firstLine=0):
 lines = list(set(lines)) # remove duplicates
 lines.sort(reverse=True) # sort in descending order
 with open(infname, 'r') as inf, open(outfname, 'w') as outf:
  try:
   i = firstLine
   while lines:
    seek = lines.pop()
    while i&lt;seek:
     inf.next()
     i += 1
    outf.write(inf.next())
    i += 1
  except StopIteration: # hit end of file
   pass

def main():
 with open('file1') as inf:
  linesToRead = [int(ln) for ln in inf]

 copyLines('file2', 'Values.txt', linesToRead)  

if __name__=="__main__":
 main()
 

 Note that this will quit early if all desired lines have been found (ie if you only want lines 3-9 of a 1000-line file, it will only read to line 9). 
 #3 If you only want to do that, you can use a oneliner bash 

 join file1 &lt;(grep -v '^$' file2 | cat -n ) | cut -d ' ' -f 2- &gt; Values.txt
 

 but here, indices starts at 1 instead of 0. To start at 0: 

 join &lt;(awk '{print $1+1}' &lt; file1) &lt;(grep -v '^$' file2 | cat -n) | cut -d ' ' -f 2- &gt; Values.txt
 
 #4 If file2's lines don't have to be written in the order they appear in file1, and if file1's contents are small enough to fit in RAM, this should do it efficiently: 

 outfile = open('Values.txt','w')
desired = set(int(line) for line in open('file1').readlines())
for index, line in enumerate(open('file2')):
 if index in desired:
  outfile.write(line)
 

 This differs from kurumi's answer mainly in that it uses a set to hold the line numbers from file1 (O(1) instead of O(n) for checking whether to emit a line), and it uses file.write so no whitespace is altered from the original lines in file2. 
 #5 This version does not assume that indices in file1 are sorted. 

 indices = [int(x) for x in file("file1").readlines()]
data = file("file2").readlines()

for i in indices:
 print data[i]