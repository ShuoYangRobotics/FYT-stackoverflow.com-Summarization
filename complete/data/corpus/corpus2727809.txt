Question (ID-2727809): finding the missing values in a range using any scripting language - perl, python or shell script I got stuck in one problem of finding the missing values in a range and the range is also variable for the successive rows. 

 input 

 673 673 673 676 676 680
2667 2667 2668 2670 2671 2674 

 output should be like this 

 674 675 677 678 679
2669 2672 2673 

 This is just one part and the row values can be more also
If you need any clarification, please let me know. 
 Answers (Total-11): #0 In Python: 

 def report_missing_numbers(f):
 for line in f:
  numbers = [int(n) for n in line.split()]
  all_numbers = set(range(numbers[0], numbers[-1]))
  missing = all_numbers - set(numbers)
  yield missing
 

 Note: all_numbers is a bit of a lie, since the range excludes the final number, but since that number is guaranteed to be in the set, it doesn't affect the correctness of the algorithm. 

 Note: I removed the [-1] from my original answer, since int(n) doesn't care about the trailing '\n' . 
 #1 Perl: 

 use Modern::Perl;

for my $line (&lt;DATA&gt;) {
 chomp $line;
 my @numbers  = split /\s+/, $line;
 my ($min, $max) = (sort { $a &lt;=&gt; $b } @numbers)[0, -1];
 my @missing  = grep { not $_ ~~ @numbers } $min .. $max;
 say join " ", @missing;
}

__DATA__
673 673 673 676 676 680
2667 2667 2668 2670 2671 2674
 

 /I3az/ 
 #2 Python: 

 for line in open("inputfile.txt"):
 vals = set(map(int, line.split()))
 minv, maxv = min(vals), max(vals)
 missing = [str(v) for v in xrange(minv + 1, maxv) if v not in vals]
 print " ".join(missing)
 
 #3 Sample code Using Perl: 

 #!/usr/bin/perl
use strict;
use warnings;

my @missing;

while(&lt;DATA&gt;) {
 my @data = split (/[ ]/, $_);
 my $i = shift @data;
 foreach (@data) {
  if ($_ != ++$i) {
    push @missing, $i .. $_ - 1;
    $i = $_;
  }
 }
}

print join " ", @missing;

__DATA__
673 673 673 676 676 680
2667 2667 2668 2670 2671 2674
 

 OUTPUT 

 674 675 677 678 679 2669 2672 2673
 
 #4 Ruby: 

 $stdin.each_line do |line|
 numbers = line.scan(/\d+/).map(&amp;:to_i)
 missing = (numbers.min..numbers.max).to_a - numbers
 puts missing.join " "
end
 

 Golf version (79 characters): 

 puts $stdin.map{|l|n=l.scan(/\d+/).map(&amp;:to_i);((n.min..n.max).to_a-n).join" "}
 
 #5 Pure Bash: 

 while read -a line ; do
 firstvalue=${line[0]}
 lastvalue=${line[${#line[@]}-1]}
 output=()
 # prepare the output array
 for (( item=firstvalue; item&lt;=lastvalue; item++ )); do
 output[$item]=1
 done
 # unset array elements with an index from the input set
 for item in ${line[@]}; do
 unset "output[$item]"
 done
 # echo the remaining indices
 echo -e "${!output[@]}"
done &lt; "$infile"
 
 #6 Modification of Marcelo's solution with safe release of file handle in the event of an exception: 

 with open('myfile.txt') as f:
 numbers = [int(n) for n in f.readline()[:-1].split(' ')]
all_numbers = set(range(numbers[0], numbers[-1]))
missing = all_numbers - set(numbers)
 

 This also avoids using the builtin name file . 
 #7 Shell solution using Bash, sort, uniq &amp; jot (Mac OS X): 

 numbers="673 673 673 676 676 680"
numbers="2667 2667 2668 2670 2671 2674"
sorted=($(IFS=$'\n' echo "${numbers}" | tr " " '\n' | sort -u ))
low=${sorted[0]}
high=${sorted[@]: -1}
( printf "%s\n" "${sorted[@]}"; jot $((${high} - ${low} + 1)) ${low} ${high} ) | sort | uniq -u
 
 #8 bash solution: 
cat file_of_numbers| xargs -n2 seq | sort -nu 
 #9 Perl oneliner: 

 perl -lane'($a,$b)=@F[0,-1];$,=" ";@h{@F}=();print grep!exists$h{$_},$a..$b'
 
 #10 In Perl: 

 #!/usr/bin/perl

use 5.010;

for (1..1000) {
 say "I will not ask the internet to do my homework";
}