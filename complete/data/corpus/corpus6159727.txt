Question (ID-6159727): Shell-style list generation or variable expression in Python? ----Complete Rephrasing---- 

 I was working on a new class where each instance was essentially sequential and linked. I had thought, in a very shell scripty way, that I could define a function to compile a list of all of these instances if I named them systematically. Then I could do what I wanted in the first place, which was navigate through the sequence in some way. 

 But I see that this is a awful approach. As I understand it now, I should do one of the following instead: 

 
 Include embedded references in the class and thereby create a recursive data structure. 
 Create a list of all of the instances, which is perhaps updated in the class init or when a new instance is made. 
 Forget defining a new class in the first place and use a list of other objects. 
 

 I hope I've got that straight. Thanks again for the advice. 

 -----Original but edited generalized question----- 

 Hello, 

 I'm relatively new to Python and I find myself always wanted to generate a list of existing objects of some kind. Say I had three variables named x# where # is a number from 1 to 3. The sort of code I feel tempted to write would be something like: 

 n=1
List_Of_X=[]
while n &lt; 4:
 List_Of_X.append("x%s" % (n))
 n += 1
 

 But then of course I end up with a list of strings rather than variables. So, is there any way to 'express' the variables corresponding to the strings? Or better yet, create a list of variables in the first place? 

 Edit: The crux was not specifying a list manually - I wanted somehow to automate that. It seems from the answers below that I can use my admittedly crummy method above to generate a list of strings, then use the eval() function to express them. Or, use a somewhat complex method of generating a list of objects in the first place. 

 I get the feeling that either solutions are probably not the best practices but I appreciate all the help! Thanks. 
 Answers (Total-6): #0 Something like this: 

 list_of_x = [x1, x2, x3]
 
 #1 If you have code like this: 

 x1 = "foo"
x2 = "bar"
x3 = "goat"
 

 then you should replace it with: 

 x = ["foo", "bar", "goat"]
 

 You could do: 

 x = [x1, x2, x3]
 

 But that will copy the values from x1,x2, x3 into x. Changes made to x will not change x1, x2, x3. 

 If this strategy doesn't work for you, you need to show us more of what you are doing so we can help you. 
 #2 I think you first need to understand that there are no variables in Python. There are only references to objects. So it is a mistake to even think about "creating variables". They don't exist. 
 #3 You can use vars() , locals() , or globals() to create new variables, although needing to do this is pretty unusual: 

 for n in range(1, 4):
 vars()['x%s' % n] = n

&gt;&gt;&gt; x1, x2, x3
&lt;&lt;&lt; (1, 2, 3)
 
 #4 Ok, so part of the mystery seems to be capturing your variables x1, x2, ... when they spring into existence. If you manage to do that it should be easy to collect them in a list, right?! So you have to hunt for the place where you actually assign them a value, x1 = ... , x2 = ... ... 

 Maybe you are reading those values from a file, or from user input?! - Let's elaborate one case that Eevee mentioned in a comment, where x1, x2, ... are actually instances of a user-defined class. Then, rather than appending manually to a list after the assignment of one of your xN, you can let the class do the recording for you: 

 class C(object):
 instances = []
 def __init__(self):
  C.instances.append(self)

x1=C()
x2=C()
x3=C()

C.instances # &lt;= [&lt;__main__.C object at 0x01293230&gt;, ...]
 

 So you captured the values of x1, x2, ... in a nice list. Does that help? 
 #5 you can convert a variable to its value by using eval(var) 

 For example, in your case you could do: 

 map(eval,List_Of_X)
 

 if you wanted to convert your list of strings ['x1','x2',...] into their values, say [1,2,...] if x1=1 and x2=2