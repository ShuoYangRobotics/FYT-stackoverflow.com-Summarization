Question (ID-7529376): Pythonic way to mix two lists I have two lists of length n and n+1: 

 [a_1, a_2, ..., a_n]
[b_1, b_2, ..., b_(n+1)]
 

 I want a function giving as a result a list with alternate elements from the two, that is 

 [b_1, a_1, ..., b_n, a_n, b_(n+1)]
 

 The following works, but does not look smart: 

 def list_mixing(list_long,list_short):
 list_res = []
 for i in range(len(list_short)):
  list_res.extend([list_long[i], list_short[i]])
 list_res.append(list_long[-1])
 return list_res
 

 Can anyone suggest a more pythonic way of doing this? Thanks! 
 Answers (Total-8): #0 &gt;&gt;&gt; import itertools
&gt;&gt;&gt; a
['1', '2', '3', '4', '5', '6']
&gt;&gt;&gt; b
['a', 'b', 'c', 'd', 'e', 'f']
&gt;&gt;&gt; list(itertools.chain.from_iterable(zip(a,b)))
['1', 'a', '2', 'b', '3', 'c', '4', 'd', '5', 'e', '6', 'f']
 

 zip() produces a iterable with the length of shortest argument. You can either append a[-1] to the result, or use itertools.zip_longest (izip_longest for Python 2.x) with a fill value and delete that value afterwards. 

 And you can use more than two input sequences with this solution. 

 For not appending the last value, you can try this dirty approach, but I don't really recommend it, it isn't clear: 

 &gt;&gt;&gt; a
[1, 2, 3, 4, 5]
&gt;&gt;&gt; b
['a', 'b', 'c', 'd', 'e', 'f']
&gt;&gt;&gt; [a[i//2] if i%2 else b[i//2] for i in range(len(a)*2+1)]
['a', 1, 'b', 2, 'c', 3, 'd', 4, 'e', 5, 'f']
 

 (For Python 2.x, use single / ) 
 #1 mixing two lists is a job for zip : 

 res = []
for a,b in zip(list_long, list_short):
 res += [a,b]
 

 for lists of differing lengths, define your own function: 

 def mix(list_long, list_short):
 result = []
 i,j = iter(list_long), iter(list_short)
 for a,b in zip(i,j):
  res += [a,b]
 for rest in i:
  result += rest
 for rest in j:
  result += rest
 return result
 

 using the answer given by Mihail , we can shorten this to: 

 def mix(list_long, list_short):
 i,j = iter(list_long), iter(list_short)
 result = [item for sublist in zip(i,j) for item in sublist]
 result += [item for item in i]
 result += [item for item in j]
 return result
 
 #2 IMHO the best way is: 

 result = [item for sublist in zip(a,b) for item in sublist]
 

 It's also faster than sum and reduce ways. 

 UPD Sorry missed that your second list is bigger by one element :)
There is another crazy way: 

 result = [item for sublist in map(None, a, b) for item in sublist][:-1]
 
 #3 &gt;&gt;&gt; long = [1, 3, 5, 7]
&gt;&gt;&gt; short = [2, 4, 6]
&gt;&gt;&gt; mixed = []
&gt;&gt;&gt; for i in range(len(long)):
&gt;&gt;&gt;  mixed.append(long[i])
&gt;&gt;&gt;  if i &lt; len(short)
&gt;&gt;&gt;   mixed.append(short[i])
&gt;&gt;&gt; mixed
[1, 2, 3, 4, 5, 6, 7]
 
 #4 sum([[x,y] for x,y in zip(b,a)],[])+[b[-1]]
 

 Note: This works only for your given list lengths, but can easily be extended to arbitrary length lists. 
 #5 I would use a combination of the above answers: 

 &gt;&gt;&gt; a = ['1', '2', '3', '4', '5', '6']

&gt;&gt;&gt; b = ['a', 'b', 'c', 'd', 'e', 'f', 'g']

&gt;&gt;&gt; [i for l in izip_longest(a, b, fillvalue=object) for i in l if i is not object]
&lt;&lt;&lt; ['1', 'a', '2', 'b', '3', 'c', '4', 'd', '5', 'e', '6', 'f', 'g']
 
 #6 You could do something like the following (assuming len(list_long)==len(list_short)+1 : 

 def list_mixing(list_long,list_short):
 return [(list_long[i/2] if i%2==0 else list_short[i/2]) for i in range(len(list_long)+len(list_short)]
 

 Where I am using / for integer division (exactly what the operator is for that depends on the language version). 
 #7 Use zip. That will give you a list of tuples, like:
[('a_1', 'b_1'), ('a_2', 'b_2'), ('a_3', 'b_3')] 

 If you want to clean that up into a nice list, just iterate over the list of tuples with enumerate: 

 alist = ['a_1', 'a_2', 'a_3']
blist = ['b_1', 'b_2', 'b_3']
clist = []

for i, (a, b) in enumerate(zip(alist, blist)):
 clist.append(a)
 clist.append(b)
print clist
['a_1', 'b_1', 'a_2', 'b_2', 'a_3', 'b_3']