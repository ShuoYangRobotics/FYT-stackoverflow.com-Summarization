Question (ID-2802711): python-like Java IO library? Java is not my main programming language so I might be asking the obvious. 

 But is there a simple file-handling library in Java, like in python ? 

 For example I just want to say: 

 File f = Open('file.txt', 'w')
for(String line:f){
  //do something with the line from file
}
 

 Thanks! 

 UPDATE: Well, the stackoverflow auto-accepted a weird answer. It has to do with bounty that I placed - so if you want to see other answers, just scroll down! 
 Answers (Total-10): #0 I was thinking something more along the lines of: 

 File f = File.open("C:/Users/File.txt");

for(String s : f){
 System.out.println(s);
}
 

 Here is my source code for it: 

 import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.util.Iterator;

public abstract class File implements Iterable&lt;String&gt;{
 public final static String READ = "r";
 public final static String WRITE = "w";

 public static File open(String filepath) throws IOException{
  return open(filepath, READ);
 } 

 public static File open(String filepath, String mode) throws IOException{
 if(mode == READ){
  return new ReadableFile(filepath);
 }else if(mode == WRITE){
  return new WritableFile(filepath);
 }
 throw new IllegalArgumentException("Invalid File Write mode '" + mode + "'");
 }

 //common methods
 public abstract void close() throws IOException;

 // writer specific
 public abstract void write(String s) throws IOException;

}

class WritableFile extends File{
 String filepath;
 Writer writer;

 public WritableFile(String filepath){
  this.filepath = filepath;
 }

 private Writer writer() throws IOException{
  if(this.writer == null){
   writer = new BufferedWriter(new FileWriter(this.filepath));
  }
  return writer;
 }

 public void write(String chars) throws IOException{
  writer().write(chars);
 }

 public void close() throws IOException{
  writer().close();
 }

 @Override
 public Iterator&lt;String&gt; iterator() {  
  return null;
 }
}

class ReadableFile extends File implements Iterator&lt;String&gt;{
 private BufferedReader reader;
 private String line; 
 private String read_ahead;

 public ReadableFile(String filepath) throws IOException{  
  this.reader = new BufferedReader(new FileReader(filepath)); 
  this.read_ahead = this.reader.readLine();
 }

 private Reader reader() throws IOException{
   if(reader == null){
    reader = new BufferedReader(new FileReader(filepath)); 
   }
   return reader;
 }

 @Override
 public Iterator&lt;String&gt; iterator() {
  return this;
 }

 @Override
 public void close() throws IOException {
  reader().close();
 }

 @Override
 public void write(String s) throws IOException {
  throw new IOException("Cannot write to a read-only file.");
 }

 @Override
 public boolean hasNext() {  
  return this.read_ahead != null;
 }

 @Override
 public String next() {
  if(read_ahead == null)
   line = null;
  else
   line = new String(this.read_ahead);

  try {
   read_ahead = this.reader.readLine();
  } catch (IOException e) {
   read_ahead = null;
   reader.close()
  }
  return line;
 }

 @Override
 public void remove() {
  // do nothing  
 }
}
 

 and here is the unit-test for it: 

 import java.io.IOException;
import org.junit.Test;

public class FileTest {
 @Test
 public void testFile(){
  File f;
  try {
   f = File.open("File.java");
   for(String s : f){
    System.out.println(s);
   }
  } catch (IOException e) {
   e.printStackTrace();
  }
 }

 @Test
 public void testReadAndWriteFile(){
  File from;
  File to;
  try {
   from = File.open("File.java");
   to = File.open("Out.txt", "w");
   for(String s : from){   
    to.write(s + System.getProperty("line.separator"));
   }
   to.close();
  } catch (IOException e1) {
   e1.printStackTrace();
  } 
 }
}
 
 #1 Reading a file line by line in Java: 

 BufferedReader in = new BufferedReader(new FileReader("myfile.txt"));

String line;
while ((line = in.readLine()) != null) {
 // Do something with this line
 System.out.println(line);
}

in.close();
 

 Most of the classes for I/O are in the package java.io . See the API documentation for that package. Have a look at Sun's Java I/O tutorial for more detailed information. 

 addition : The example above will use the default character encoding of your system to read the text file. If you want to explicitly specify the character encoding, for example UTF-8, change the first line to this: 

 BufferedReader in = new BufferedReader(
 new InputStreamReader(new FileInputStream("myfile.txt"), "UTF-8"));
 
 #2 If you already have dependencies to Apache commons lang and commons io this could be an alternative: 

 String[] lines = StringUtils.split(FileUtils.readFileToString(new File("myfile.txt")), '\n');
for(String line: lines){
  //do something with the line from file
}
 

 (I would prefer Jesper's answer) 
 #3 If you want to iterate through a file by strings, a class you might find useful is the Scanner class. 

 import java.io.*;
import java.util.Scanner;

 public class ScanXan {
  public static void main(String[] args) throws IOException {
   Scanner s = null;
   try {
    s = new Scanner(new BufferedReader(new FileReader("myFile.txt")));

    while (s.hasNextLine()) {
     System.out.println(s.nextLine());
    }
   } finally {
    if (s != null) {
     s.close();
    }
   }
  }
 }
 

 The API is pretty useful: http://java.sun.com/javase/7/docs/api/java/util/Scanner.html 
You can also parse the file using regular expressions. 
 #4 I never get tired of pimping Google's guava-libraries , which takes a lot of the pain out of... well, most things in Java. 

 How about: 

 for (String line : Files.readLines(new File("file.txt"), Charsets.UTF_8)) {
 // Do something
}
 

 In the case where you have a large file, and want a line-by-line callback (rather than reading the whole thing into memory) you can use a LineProcessor , which adds a bit of boilerplate (due to the lack of closures... sigh) but still shields you from dealing with the reading itself, and all associated Exceptions : 

 int matching = Files.readLines(new File("file.txt"), Charsets.UTF_8, new LineProcessor&lt;Integer&gt;(){
 int count;

 Integer getResult() {return count;}

 boolean processLine(String line) {
  if (line.equals("foo")
   count++;
  return true;
 }
});
 

 If you don't actually want a result back out of the processor, and you never abort early (the reason for the boolean return from processLine ) you could then do something like: 

 class SimpleLineCallback extends LineProcessor&lt;Void&gt; {
 Void getResult{ return null; }

 boolean processLine(String line) {
  doProcess(line);
  return true;
 }

 abstract void doProcess(String line);
}
 

 and then your code might be: 

 Files.readLines(new File("file.txt"), Charsets.UTF_8, new SimpleLineProcessor(){
 void doProcess(String line) {
  if (line.equals("foo");
   throw new FooException("File shouldn't contain 'foo'!");
 }
});
 

 which is correspondingly cleaner. 
 #5  public static void main(String[] args) throws FileNotFoundException {
 Scanner scanner = new Scanner(new File("scan.txt"));
 try {
  while (scanner.hasNextLine()) {
  System.out.println(scanner.nextLine());
  }
 } finally {
  scanner.close();
 }
 }
 

 Some caveats: 

 
 That uses the default system encoding, but you should specify the file encoding 
 Scanner swallows I/O exceptions, so you may want to check ioException() at the end for proper error handling 
 
 #6 Simple example using Files.readLines() from guava-io with a LineProcessor callback: 

 import java.io.File;
import java.io.IOException;

import com.google.common.base.Charsets;
import com.google.common.io.Files;
import com.google.common.io.LineProcessor;

public class GuavaIoDemo {

 public static void main(String[] args) throws Exception {
  int result = Files.readLines(new File("/home/pascal/.vimrc"), //
   Charsets.UTF_8, // 
   new LineProcessor&lt;Integer&gt;() {
    int counter;

    public Integer getResult() {
     return counter;
    }

    public boolean processLine(String line) throws IOException {
     counter++;
     System.out.println(line);
     return true;
    }
   });
 }
}
 
 #7 You could use jython which lets you run Python syntax in Java. 
 #8 Nice example here: Line by line iteration 
 #9 Try looking at groovy! 

 Its a superset of Java that runs in hte JVM. Most valid Java code is also valid Groovy so you have access any of the million java APIs directly. 

 In addition it has many of the higher level contructs familiar to Pythonists, plus
a number of extensions to take the pain out of Maps, Lists, sql, xml and you guessed it -- file IO.