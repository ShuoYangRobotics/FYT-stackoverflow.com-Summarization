Question (ID-4417316): I need a stand alone python interpreter/compiler! Ok so i am in need of a python compiler (from .py or .pyw to .exe). 

 the only ones i have come across are: 

 - cx_freeze (doesnt work) 

 - py2exe (way too complicated) 

 EDIT: 
both of the programs above are complicated (to me) because you have to make all these setup files, and type in a bunch of parameters and commands to get them to work,i found something called gui2exe.py however i cant seem to get it to load correctly... any thoughts? 

 So what i was looking for was a program that you do not have to run through the python command line. Prefereably a stand alone program, that you can just select the file and select the output (.exe) and click convert. Nothing too complicated as i am just starting out. 

 The reason i want this is because i have a program that my friend wanted to take a look at but he doesnt want to download python in order to view it. Also i dont want him to be able to change the source code. 

 Any Ideas? 
 Answers (Total-6): #0 Pyinstallet might help... 

 however py2exe is not complicated... 

 take a look at this py2exe sample setup (from here, but it's italian, so i translated it http://bancaldo.wordpress.com/2010/05/13/python-py2exe-setup-py-sample/ ) 

 #!/usr/bin/python

from distutils.core import setup
import py2exe, sys, wx, os

# Se eseguito senza argomenti, crea l'exe in quiet mode.
# If executed without args, it makes the exe in quiet mode
if len(sys.argv) == 1:
 sys.argv.append("py2exe")
 sys.argv.append("-q")

class FileBrowser(wx.FileDialog):
 def __init__(self):
  wildcard = "Python files (*.py)|*.py|" \
   "Tutti i files (*.*)|*.*"
  dialog = wx.FileDialog(None, "Choose the file", os.getcwd(),
   "", wildcard, wx.OPEN)
  if dialog.ShowModal() == wx.ID_OK:
   print(dialog.GetPath())
  self.file = dialog.GetPath()
  self.fin = open(self.file, 'r')
  dialog.Destroy()

class Target:
 def __init__(self, **kw):
  self.__dict__.update(kw)
  # info di versione
  self.version = "1.0.0"
  self.company_name = "Bancaldo TM"
  self.copyright = "no copyright"
  self.name = "py2exe sample files"

manifest_template = '''
&lt;?xml version='1.0' encoding='UTF-8' standalone='yes'?&gt;
&lt;assembly xmlns='urn:schemas-microsoft-com:asm.v1' manifestVersion='1.0'&gt;
 &lt;trustInfo xmlns="urn:schemas-microsoft-com:asm.v3"&gt;
 &lt;security&gt;
  &lt;requestedPrivileges&gt;
  &lt;requestedExecutionLevel level='asInvoker' uiAccess='false' /&gt;
  &lt;/requestedPrivileges&gt;
 &lt;/security&gt;
 &lt;/trustInfo&gt;
 &lt;dependency&gt;
 &lt;dependentAssembly&gt;
  &lt;assemblyIdentity
  type='win32'
  name='Microsoft.VC90.CRT'
  version='9.0.21022.8'
  processorArchitecture='*'
  publicKeyToken='1fc8b3b9a1e18e3b' /&gt;
 &lt;/dependentAssembly&gt;
 &lt;/dependency&gt;
 &lt;dependency&gt;
 &lt;dependentAssembly&gt;
  &lt;assemblyIdentity
   type="win32"
   name="Microsoft.Windows.Common-Controls"
   version="6.0.0.0"
   processorArchitecture="*"
   publicKeyToken="6595b64144ccf1df"
   language="*" /&gt;
 &lt;/dependentAssembly&gt;
 &lt;/dependency&gt;
&lt;/assembly&gt;
'''
# File Browser
app = wx.PySimpleApp()
fb = FileBrowser()
# Assegno il nome all'eseguibile di uscita
# Give the name at the exe file being created
textentry = wx.TextEntryDialog(None, "name file EXE?",'','')
if textentry.ShowModal() == wx.ID_OK:
 destname = textentry.GetValue()

RT_MANIFEST = 24

test_wx = Target(
 description = "A GUI app",
 script = fb.file,  # programma sorgente dal quale creiamo l'exe
       # source from wich we create the exe
 other_resources = [(RT_MANIFEST, 1, manifest_template % dict(prog="tried"))],
 icon_resources = [(1, "py.ico")],
# dest_base = "prova_banco") # Nome file di destinazione
        #Name Destination file
 dest_base = destname) # Nome file di destinazione

setup(
 data_files=["py.ico"],
 options = {"py2exe": {"compressed": 1,
       "optimize": 2,
       "ascii": 1,
       "bundle_files": 1}},
 zipfile = None,
 windows = [test_wx],
 )
 

 it inclused also a small graphic interface wich help you on choose the file ;) 

 EDIT: 

 this is a simpler sample, maybe it's more useful :) 

 from distutils.core import setup
import py2exe
setup(
    name = 'AppPyName',
    description = 'Python-based App',
    version = '1.0',
    windows = [{'script': 'Main.pyw'}],
    options = {'py2exe': {'bundle_files': 1,'packages':'encodings','includes': 'cairo, pango, pangocairo, atk, gobject',}},
    data_files=[ 'gui.glade',]
    zipfile = None, 
)
 

 STEP BY STEP TUTORIAL: 

 1-create a .py file, naming it, for example, 'hello.py', that has not a GUI
2- make a setup.py file 

 from distutils.core import setup
import py2exe

setup(console=['hello.py'])
 

 notice the use of 'console' instead of 'windows', 'cause you have not a gui 

 then, move your hello.py file and your setup.py file in Python directory; then open the cmd, and once you've arrived at the correct directory (usually C:\python2x), type: 

 python setup.py py2exe
 

 you're exe file will be in the dist directory. if some .dll are missing, simply download it and place in python directory. 

 once your program will be more complicated, it may require other instructions; look at the other 2 setup.py samples i've posted.
hope this help 
 #1 One option might be to use IronPython. IronPython is another dialect of python that targets .NET, and works quite easily with MS Visual Studio. 
 #2 py2exe - Python to Windows EXE
py2exe converts your Python programs to standalone Windows executables that can run without your users needing to install Python. Note that this is not a native code compiler - your code is still interpreted. py2exe merely provides all the necessary pieces so that when your end users double-click on your executable, the Python interpreter will start up to interpret your code. py2exe is released under the Mozilla Public License 
 #3 Have a look at gui2exe , it's a pretty good frontend to py2exe, pyinstaller, etc. 
 #4 It's not something I would recommend to a beginner, but if you are comfortable with C/C++ compilers, you could try Shed Skin . If your Python source code meets certain requirements, Shed Skin can translate it into C++ and compile the C++ into a binary executable. 
 #5 You could also simply provide your friend a ZIP file containing python.exe, the python libs, and your python application (in pyc) along with a batch to start python.exe with your script. Python is fairly easy to run without it being 'installed'.