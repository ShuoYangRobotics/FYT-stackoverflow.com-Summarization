Question (ID-725782): Python: List concatenation. What is difference in "append" and "+= []"? What is the difference in: 

 some_list1 = []
some_list1.append("something")
 

 and 

 some_list2 = []
some_list2 += ["something"]
 

 I hope this hasn't been already posted. If so just point me in that direction :) 

 Thanks for your help. 

 EDIT 
I've edited the title to reflect what I actually mean: "+ []" should have been "+= []". 
 Answers (Total-7): #0 For your case the only difference is performance: append is twice as fast. 

 Python 3.0 (r30:67507, Dec 3 2008, 20:14:27) [MSC v.1500 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.Timer('s.append("something")', 's = []').timeit()
0.20177424499999999
&gt;&gt;&gt; timeit.Timer('s += ["something"]', 's = []').timeit()
0.41192320500000079

Python 2.5.1 (r251:54863, Apr 18 2007, 08:51:08) [MSC v.1310 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.Timer('s.append("something")', 's = []').timeit()
0.23079359499999999
&gt;&gt;&gt; timeit.Timer('s += ["something"]', 's = []').timeit()
0.44208112500000141
 

 In general case append will add one item to the list, while += will copy all elements of right-hand-side list into the left-hand-side list. 

 Update: perf analysis 

 Comparing bytecodes we can assume that append version wastes cycles in LOAD_ATTR + CALL_FUNCTION , and += version -- in BUILD_LIST . Apparently BUILD_LIST outweighs LOAD_ATTR + CALL_FUNCTION . 

 &gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(compile("s = []; s.append('spam')", '', 'exec'))
 1   0 BUILD_LIST    0
    3 STORE_NAME    0 (s)
    6 LOAD_NAME    0 (s)
    9 LOAD_ATTR    1 (append)
    12 LOAD_CONST    0 ('spam')
    15 CALL_FUNCTION   1
    18 POP_TOP
    19 LOAD_CONST    1 (None)
    22 RETURN_VALUE
&gt;&gt;&gt; dis.dis(compile("s = []; s += ['spam']", '', 'exec'))
 1   0 BUILD_LIST    0
    3 STORE_NAME    0 (s)
    6 LOAD_NAME    0 (s)
    9 LOAD_CONST    0 ('spam')
    12 BUILD_LIST    1
    15 INPLACE_ADD
    16 STORE_NAME    0 (s)
    19 LOAD_CONST    1 (None)
    22 RETURN_VALUE
 

 We can improve performance even more by removing LOAD_ATTR overhead: 

 &gt;&gt;&gt; timeit.Timer('a("something")', 's = []; a = s.append').timeit()
0.15924410999923566
 
 #1 In the example you gave, there is no difference, in terms of output, between append and += . But there is a difference between append and + (which the question originally asked about). 

 &gt;&gt;&gt; a = []
&gt;&gt;&gt; id(a)
11814312
&gt;&gt;&gt; a.append("hello")
&gt;&gt;&gt; id(a)
11814312

&gt;&gt;&gt; b = []
&gt;&gt;&gt; id(b)
11828720
&gt;&gt;&gt; c = b + ["hello"]
&gt;&gt;&gt; id(c)
11833752
&gt;&gt;&gt; b += ["hello"]
&gt;&gt;&gt; id(b)
11828720
 

 As you can see, append and += have the same result; they add the item to the list, without producing a new list. Using + adds the two lists and produces a new list. 
 #2  some_list2 += ["something"]
 

 is actually 

 some_list2.extend(["something"])
 

 for one value, there is no difference.
Documentation states, that: 

 
 s.append(x)  same as s[len(s):len(s)] = [x] 
 s.extend(x)  same as s[len(s):len(s)] = x 
 

 Thus obviously s.append(x) is same as s.extend([x]) 
 #3 &gt;&gt;&gt; a=[]
&gt;&gt;&gt; a.append([1,2])
&gt;&gt;&gt; a
[[1, 2]]
&gt;&gt;&gt; a=[]
&gt;&gt;&gt; a+=[1,2]
&gt;&gt;&gt; a
[1, 2]
 

 See that append adds a single element to the list, which may be anything. +=[] joins the lists. 
 #4 += is an assignment. When you use it you're really saying ‘some_list2= some_list2+['something']’. Assignments involve rebinding, so: 

 l= []

def a1(x):
 l.append(x) # works

def a2(x):
 l= l+[x] # assign to l, makes l local
    # so attempt to read l for addition gives UnboundLocalError

def a3(x):
 l+= [x] # fails for the same reason
 

 The += operator should also normally create a new list object like list+list normally does: 

 &gt;&gt;&gt; l1= []
&gt;&gt;&gt; l2= l1

&gt;&gt;&gt; l1.append('x')
&gt;&gt;&gt; l1 is l2
True

&gt;&gt;&gt; l1= l1+['x']
&gt;&gt;&gt; l1 is l2
False
 

 However in reality: 

 &gt;&gt;&gt; l2= l1
&gt;&gt;&gt; l1+= ['x']
&gt;&gt;&gt; l1 is l2
True
 

 This is because Python lists implement __iadd__() to make a += augmented assignment short-circuit and call list.extend() instead. (It's a bit of a strange wart this: it usually does what you meant, but for confusing reasons.) 

 In general, if you're appending/extended an existing list, and you want to keep the reference to the same list (instead of making a new one), it's best to be explicit and stick with the append()/extend() methods. 
 #5 In addition to the aspects described in the other answers, append and +[] have very different behaviors when you're trying to build a list of lists. 

 &gt;&gt;&gt; list1=[[1,2],[3,4]]
&gt;&gt;&gt; list2=[5,6]
&gt;&gt;&gt; list3=list1+list2
&gt;&gt;&gt; list3
[[1, 2], [3, 4], 5, 6]
&gt;&gt;&gt; list1.append(list2)
&gt;&gt;&gt; list1
[[1, 2], [3, 4], [5, 6]]
 

 list1+['5','6'] adds '5' and '6' to the list1 as individual elements. list1.append(['5','6']) adds the list ['5','6'] to the list1 as a single element. 
 #6 The performance tests here are not correct: 

 
 You shouldn't run the profile only once. 
 If comparing append vs. += [] number of times you should declare append as a local function. 
 time results are different on different python versions: 64 and 32 bit 
 

 e.g. 

 
 
  
  timeit.Timer('for i in xrange(100): app(i)', 's = [] ; app = s.append').timeit() 
  
 
 

 good tests can be found here: http://markandclick.com/1/post/2012/01/python-list-append-vs.html