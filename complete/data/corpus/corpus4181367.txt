Question (ID-4181367): python: possible to filter dict? I have a dict with following structure: 

 {5:"djdj", 6:"8899", 7:"998kdj"}
 

 The key is int typed and it's not sorted. 

 Now I want all the elements whose key is >= 6. 

 Is there easy way to do that? 
 Answers (Total-7): #0 [v for k,v in mydict.items() if k &gt;= 6] 
 #1 What do you mean by "elements"? 

 If you want a dict of key-value pairs with keys â‰¥6, Python 2.7+ and 3.x support dict comprehensions . 

 { k: v for k, v in mydict.items() if k &gt;= 6 }
 

 You can get this in earlier versions of Python 

 dict( (k, v) for k, v in mydict.items() if k &gt;= 6 ) # Python 2.4+
dict([(k, v) for k, v in mydict.items() if k &gt;= 6]) # Python 2.0+
 

 by using expression generators or list comprehensions. 

 If you want a list of keys only, 

 [ k for k in mydict.keys() if k &gt;= 6 ]
filter( lambda k: k &gt;= 6, mydict.keys() )
 

 Similarly, if you want a list of values only, 

 [ v for k, v in mydict.items() if k &gt;= 6 ]
[ mydict[k] for k in mydict.keys() if k &gt;= 6 ]
map( mydict.get, filter( lambda k: k &gt;= 6, mydict.keys() ) )
 
 #2 If you know the largest key and have no missing keys you can also just go through the dictonary directly: [mydict[x] for x in range(6, largest_key+1)] . That would be the most efficient way. 
 #3 You can use a list comprehension : 

 mydict = {5:"djdj", 6:"8899", 7:"998kdj"}
print [k for k in mydict if k &gt;= 6] # prints "[6, 7]"
print dict([(k, mydict[k]) for k in mydict if k &gt;= 6]) # prints "{6:"8899", 7:"998kdj"}"
 
 #4 [ mydict[k] for k in filter(lambda x : x &gt; 6, mydict) ]
 
 #5 List comprehension seems to be what you seek but with a list of elements as opposed to keys: 

 a = {5:"djdj", 6:"8899", 7:"998kdj"}
[a[elem] for elem in a if elem &gt;= 6] #should give you "['8866', '998kd']"
 
 #6 To get a dictionary right away: (works in both python 2 and 3) 

 dict( (k,v) for k,v in mydict.items() if k &gt;= 6 )