Question (ID-793761): Built in python hash() function Windows XP, Python 2.5: 

 hash('http://stackoverflow.com') Result: 1934711907
 

 Google App Engine ( http://shell.appspot.com/ ): 

 hash('http://stackoverflow.com') Result: -5768830964305142685
 

 Why is that? How can I have a hash function which will give me same results across different platforms (Windows, Linux, Mac)? 
 Answers (Total-7): #0 As stated in the documentation, built-in hash() function is not designed for storing resulting hashes somewhere externally. It is used to provide object's hash value, to store them in dictionaries and so on. It's also implementation-specific (GAE uses a modified version of Python). Check out: 

 &gt;&gt;&gt; class Foo:
...  pass
... 
&gt;&gt;&gt; a = Foo()
&gt;&gt;&gt; b = Foo()
&gt;&gt;&gt; hash(a), hash(b)
(-1210747828, -1210747892)
 

 As you can see, they are different, as hash() uses object's hash method instead of 'normal' hashing algorithms, such as SHA. 

 Given the above, the rational choice is to use the hashlib module. 
 #1 use hashlib 
 #2 The response is absolutely no surprise: in fact 

 In [1]: -5768830964305142685L &amp; 0xffffffff
Out[1]: 1934711907L
 

 so if you want to get reliable responses on ASCII strings , just get the lower 32 bits as uint . The hash function for strings is 32-bit-safe and almost portable. 

 On the other side, you can't rely at all on getting the hash() of any object over which you haven't explicitly defined the __hash__ method to be invariant. 

 Over ASCII strings it works just because the hash is calculated on the single characters forming the string, like the following: 

 class string:
 def __hash__(self):
  if not self:
   return 0 # empty
  value = ord(self[0]) &lt;&lt; 7
  for char in self:
   value = c_mul(1000003, value) ^ ord(char)
  value = value ^ len(self)
  if value == -1:
   value = -2
  return value
 

 where the c_mul function is the "cyclic" multiplication (without overflow) as in C. 
 #3 At a guess, AppEngine is using a 64-bit implementation of Python (-5768830964305142685 won't fit in 32 bits) and your implementation of Python is 32 bits. You can't rely on object hashes being meaningfully comparable between different implementations. 
 #4 Hash results varies between 32bit and 64bit platforms 

 If a calculated hash shall be the same on both platforms consider using 

 def hash32(value):
 return hash(value) &amp; 0xffffffff
 
 #5 It probably just asks the operating system provided function, rather than its own algorithm. 

 As other comments says, use hashlib or write your own hash function. 
 #6 What about sign bit?
For example:
Hex value 0xADFE74A5 represents unsigned 2919134373 and signed -1375832923
Currect value must be signed (sign bit = 1) but python converts it as unsigned and we have incorrect hash value after translation from 64 to 32 bit. 

 Be careful using: 

 
 def hash32(value):
  return hash(value) &amp; 0xffffffff