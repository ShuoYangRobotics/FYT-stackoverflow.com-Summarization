Question (ID-1528932): How to create inline objects with properties in Python? In Javascript it would be: 

 var newObject = { 'propertyName' : 'propertyValue' };
 

 How to do it in Python? 
 Answers (Total-6): #0 obj = type('obj', (object,), {'propertyName' : 'propertyValue'})
 

 there are two kinds of type function uses . 
 #1 I don't know if there's a built-in way to do it, but you can always define a class like this: 

 class InlineClass(object):
 def __init__(self, dict):
	self.__dict__ = dict

obj = InlineClass({'propertyName' : 'propertyValue'})
 
 #2 I like Smashery's idea, but Python seems content to let you modify classes on your own: 

 &gt;&gt;&gt; class Inline(object):
...  pass
...
&gt;&gt;&gt; obj = Inline()
&gt;&gt;&gt; obj.test = 1
&gt;&gt;&gt; obj.test
1
&gt;&gt;&gt;
 

 Works just fine in Python 2.5 for me. Note that you do have to do this to a class derived from object - it won't work if you change the line to obj = object . 
 #3 Peter's answer 

 obj = lambda: None
obj.propertyName = 'propertyValue'
 
 #4 class test:
 def __setattr__(self,key,value):
  return value


myObj = test()
myObj.mykey = 'abc' # set your property and value
 
 #5 It is easy in Python to declare a class with an __init__() function that can set up the instance for you, with optional arguments. If you don't specify the arguments you get a blank instance, and if you specify some or all of the arguments you initialize the instance. 

 I explained it here (my highest-rated answer to date) so I won't retype the explanation. But, if you have questions, ask and I'll answer. 

 If you just want a generic object whose class doesn't really matter, you can do this: 

 class Generic(object):
 pass

x = Generic()
x.foo = 1
x.bar = 2
x.baz = 3
 

 An obvious extension would be to add an __str__() function that prints something useful. 

 This trick is nice sometimes when you want a more-convenient dictionary. I find it easier to type x.foo than x["foo"] .