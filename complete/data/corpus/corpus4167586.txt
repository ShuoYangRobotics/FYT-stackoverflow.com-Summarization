Question (ID-4167586): Permuting a list of chars takes all my memory (Python) I am building a dictionary of all the alpha and numbers. The problem with this code is "within matter of second consumes 100% of my memory". Do you think my implementation is bad?
Any Help is appreciated. 

 from timeit import Timer
from itertools import permutations
dictionary = []
small_alpha = map(chr, range(97,123))

lookup.append(small_alpha)

def test():
 for i in permutations(lookup, 10):
  dictionary.append(''.join(i))

if __name__ == '__main__':
 test()
 

 (Edited)
I am a well educated. No intent of hacking. This is realistically not possible even if I have 100 machines. No one can compute such a big number. Just was trying out if it is possible to some extent 
 Answers (Total-6): #0 There are 36!/(36-10)! = 922,393,263,052,800 permutations (~1 quadrillion) of 10 alphanumeric characters. Of course this will take all your memory. 

 Assuming each string takes 32 bytes to store (8 bytes for the pointer, 8 bytes for the length, 16 bytes for the content*, on a 64-bit machine), this requires 26.2 PiB of memory. 

 There is no way to store all permutations in a normal machine. Please state what you actually want to do. 

 (*: Actually it takes much more than that, since there are also type information, and in Python 3.x a character costs 2 bytes for UTF-16, and the list itself also takes memory.) 

 

 Even with just the alphabets the number of permutations is still 19,275,223,968,000 (~20 trillion), and still takes 561 TiB of memory for 32 bytes per string. 
 #1 You need about 90077467 GB of memory to store the result data. 

 2 GB of memory costs $13 (http://www.newegg.com/Product/Product.aspx?Item=N82E16820146214), so you can fix this easily for the low, low price of $585,503,535.50. 
 #2 You're doing things pretty much right, using itertools to provide a generator rather than actually producing a list -- right up until you try to create a list. That list simply is going to use up all your memory because it is in fact huge. You should probably write it to a file rather than trying to make a list in memory, but you will need a lot of disk space. 
 #3 If you're going to use itertools, then use it all the way! 

 This is a perfect situation for a lazy generator--no need to actually store either the permutations or the data. 

 import itertools

small_alpha = itertools.imap(chr, range(97, 123))
numbers = itertools.imap(chr, range(48, 58))
lookup = itertools.chain(small_alpha, numbers)
d = (''.join(i) for i in itertools.permutations(lookup, 10))

if __name__ == '__main__':
 perms = list(itertools.islice(d,10))
 print(perms)
 
 #4 you should utilize the cloud to solve this problem. using gnu parallel would provide you with additional resources to help you build your dictionary. http://unethicalblogger.com/posts/2010/11/gnuparallel_changed_my_life 
 #5 Firstly having variable called dictionary that is really a list is very confusing 

 Assuming you have enough memory, it would be much faster to use 

 dictionary = list(permutations(lookup, 10))
 

 However since you don't have enough memory, this will just use up your memory even faster