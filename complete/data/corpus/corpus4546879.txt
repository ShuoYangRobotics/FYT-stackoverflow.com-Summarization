Question (ID-4546879): Which one to prefer - line.lower() vs. word.lower() When I need to split a line, and put all words in a list as lowercase, which one would be the preferred way: 

 1.) 

  list = []
 for word in line.split():
  word = word.lower()
  list.append(word)
 

 2.) 

  list = []
 for word in line.lower().split():
  list.append(word)
 

 Is there any performance impact? Does it actually make any difference (except the second one being shorter). 

 EDIT 
Added the missing split() . 
 Answers (Total-6): #0 Maybe try list comprehension 

 [x.lower() for x in line]
 

 will return a list with the words lowered. If you want to omit spaces: 

 [x.lower() for x in line if x.strip() != '']
 
 #1 Something more compact maybe: 

 &gt;&gt;&gt; a = "I AM A DEVELOPER"

&gt;&gt;&gt; a.lower().split()
['i', 'am', 'a', 'developer']
 
 #2 I don't know about speed, but this doesn't do what you think it does: for word in line.lower() . It yields you characters, not words. 
 #3 As long as you are calling lower and append for each word, I don't think it really makes any difference the order in which you call them. 
 #4 My preference is: 

 words = line.lower().split()
 

 this is better than: 

 words = [word.lower() for word in line.split()]
 

 If n is the number of words, the first does n + 1 allocations, whereas the second does 2n. 
 #5 Since list comprehensions have already been pointed out in another answer, here's one other approach: 

 lst=map(lambda x: x.lower(),line)
 

 Also, please try not to use variable names like list that are already used in Python. That's really bad form and would cause a lot of confusion in any non-trivial project.