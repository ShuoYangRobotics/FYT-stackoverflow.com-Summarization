Question (ID-1506010): How to use export with Python on Linux I need to make an export like this in Python : 

 # export MY_DATA="my_export"
 

 I've tried to do : 

 # -*- python-mode -*-
# -*- coding: utf-8 -*-
import os
os.system('export MY_DATA="my_export"')
 

 But when I list export, "MY_DATA" not appear : 

 # export
 

 How I can do an export with Python without saving "my_export" into a file ? 
 Answers (Total-6): #0 You actually want to do 

 import os
os.environ["MY_DATA"] = "my_export"
 
 #1 export is a command that you give directly to the shell (e.g. bash ), to tell it to add or modify one of its environment variables. You can't change your shell's environment from a child process (such as Python), it's just not possible. 

 Here's what's happening with you try os.system('export MY_DATA="my_export"') ... 

 /bin/bash process, command `python yourscript.py` forks python subprocess
 |_
 /usr/bin/python process, command `os.system()` forks /bin/sh subprocess
 |_
  /bin/sh process, command `export ...` changes local environment
 

 When the bottom-most /bin/sh subprocess finishes running your export ... command, then it's discarded, along with the environment that you have just changed. 
 #2 You could try os.environ["MY_DATA"] instead. 
 #3 Not that simple: 

 python -c "import os; os.putenv('MY_DATA','1233')"
$ echo $MY_DATA # &lt;- empty
 

 But: 

 python -c "import os; os.putenv('MY_DATA','123'); os.system('bash')"
$ echo $MY_DATA #&lt;- 123
 
 #4 Look this:
 http://docs.python.org/library/os.html#os.putenv 

 This environtemt variable only work for the current subprocess! 
 #5 os.system ('/home/user1/exportPath.ksh') 

 exportPath.ksh: 

 export PATH=MY_DATA="my_export"