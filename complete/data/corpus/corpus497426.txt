Question (ID-497426): Deleting multiple elements from a list Is it possible to delete multiple elements from a list at the same time? If I want to delete elements at index 0 and 2, and try something like del somelist[0], followed by del somelist[2], the second statement will actually delete somelist[3]. 

 I suppose I could always delete the higher numbered elements first but I'm hoping there is a better way. 
 Answers (Total-8): #0 If you're deleting multiple non-adjacent items, then what you describe is the best way (and yes, be sure to start from the highest index). 

 If your items are adjacent, you can use the slice assignment syntax: 

 a[2:10] = []
 
 #1 prob not the best, but here it goes: 

 indices = 0, 2
somelist = [i for j, i in enumerate(somelist) if j not in indices]
 
 #2 So, you essentially want to delete multiple elements in one pass? In that case, the position of the next element to delete will be offset by however many were deleted previously. 

 Our goal is to delete all the vowels, which are precomputed to be indices 1, 4, and 7. Note that its important the to_delete indices are in ascending order, otherwise it won't work. 

 to_delete = [1, 4, 7]
target = list("hello world")
for offset, index in enumerate(to_delete):
 index -= offset
 del target[index]
 

 It'd be a more complicated if you wanted to delete the elements in any order. IMO, sorting to_delete might be easier than figuring out when you should or shouldn't subtract from index . 
 #3 As a function: 

 def multi_delete(list_, *args):
 indexes = sorted(list(args), reverse=True)
 for index in indexes:
  del list_[index]
 return list_
 

 Runs in n log(n) time, which should make it the fastest correct solution yet. 
 #4 You can do that way on a dict, not on a list. In a list elements are in sequence. In a dict they depend only on the index. 

 Simple code just to explain it by doing : 

 &gt;&gt;&gt; lst = ['a','b','c']
&gt;&gt;&gt; dct = {0: 'a', 1: 'b', 2:'c'}
&gt;&gt;&gt; lst[0]
'a'
&gt;&gt;&gt; dct[0]
'a'
&gt;&gt;&gt; del lst[0]
&gt;&gt;&gt; del dct[0]
&gt;&gt;&gt; lst[0]
'b'
&gt;&gt;&gt; dct[0]
Traceback (most recent call last):
 File "&lt;pyshell#19&gt;", line 1, in &lt;module&gt;
 dct[0]
KeyError: 0
&gt;&gt;&gt; dct[1]
'b'
&gt;&gt;&gt; lst[1]
'c'
 

 A way to "convert" a list in a dict is: 

 &gt;&gt;&gt; dct = {}
&gt;&gt;&gt; for i in xrange(0,len(lst)): dct[i] = lst[i]
 

 The inverse is: 

 lst = [dct[i] for i in sorted(dct.keys())]
 

 Anyway I think it's better to start deleting from the higher index as you said. 
 #5 I can actually think of two ways to do it: 

 
 slice the list like (this deletes the 1st,3rd and 8th elements) 

 somelist = somelist[1:2]+somelist[3:7]+somelist[8:] 
 do that in place, but one at a time: 

 somelist.pop(2)
somelist.pop(0) 
 
 #6 As a specialisation of Greg's answer, you can even use extended slice syntax. eg. If you wanted to delete items 0 and 2: 

 &gt;&gt;&gt; a= [0, 1, 2, 3, 4]
&gt;&gt;&gt; del a[0:3:2]
&gt;&gt;&gt; a
[1, 3, 4]
 

 This doesn't cover any arbitrary selection, of course, but it can certainly work for deleting any two items. 
 #7 here is another method which removes the elements in place. also if your list is really long, it is faster. 

 &gt;&gt;&gt; a = range(10)
&gt;&gt;&gt; remove = [0,4,5]
&gt;&gt;&gt; from collections import deque
&gt;&gt;&gt; deque((list.pop(a, i) for i in sorted(remove, reverse=True)), maxlen=0)

&gt;&gt;&gt; timeit.timeit('[i for j, i in enumerate(a) if j not in remove]', setup='import random;remove=[random.randrange(100000) for i in range(100)]; a = range(100000)', number=1)
0.1704120635986328

&gt;&gt;&gt; timeit.timeit('deque((list.pop(a, i) for i in sorted(remove, reverse=True)), maxlen=0)', setup='from collections import deque;import random;remove=[random.randrange(100000) for i in range(100)]; a = range(100000)', number=1)
0.004853963851928711