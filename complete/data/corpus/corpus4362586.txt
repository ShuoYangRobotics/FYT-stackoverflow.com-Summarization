Question (ID-4362586): Help me to sum a list of numbers in Python If I have a list of numbers such as [1,2,3,4,5...]
and I want to calculate (1+2)/2
and for the second,
(2+3)/2
and the third,
(3+4)/2, and so on. 

 How can I do that?
I would like to sum the first number with the second and divide it by 2, then sum the second with the third and divide by 2, and so on. 

 Also, how can I sum a list of numbers? 

 a = [1,2,3,4,5,...]
 

 Is it: 

 b = sum(a)
print b
 

 to get one number?
This doesn't work for me. 
Help me please. 
 Answers (Total-7): #0 Question 1: So you want (element 0 + element 1) / 2, (element 1 + element 2) / 2, ... etc. 

 What we do is make two lists: one of every element except the first, and one of every element except the last. Then the averages we want are the averages of each pair taken from the two lists. We use zip to take pairs from two lists. 

 Edit: I assume you want to see decimals in the result, even though your input values are integers. By default, Python does integer division: it discards the remainder. To divide things through all the way, we need to use floating-point numbers. Fortunately, dividing an int by a float will produce a float, so we just use 2.0 for our divisor instead of 2 . 

 Thus: 

 averages = [(x + y) / 2.0 for (x, y) in zip(my_list[:-1], my_list[1:])]
 

 Question 2: 

 That use of sum should work fine. The following works: 

 a = range(10)
# [0,1,2,3,4,5,6,7,8,9]
b = sum(a)
print b
# prints 45
 

 Also, you don't need to assign everything to a variable at every step along the way. print sum(a) works just fine. 

 You will have to be more specific about exactly what you wrote and how it isn't working. 
 #1 Sum list of numbers: 

 sum(list_of_nums)
 

 Calculating half of n and n - 1 (if I have the pattern correct), using a list comprehension : 

 [(x + (x - 1)) / 2 for x in list_of_nums]
 

 Sum adjacent elements, e.g. ((1 + 2) / 2) + ((2 + 3) / 2) + ... using reduce and lambdas 

 reduce(lambda x, y: (x + y) / 2, list_of_nums)
 
 #2 Generators are a easy way to write this: 

 from __future__ import division
# ^- so that 3/2 is 1.5 not 1 

def averages( lst ):
 it = iter(lst) # get a iterator over the list
 first = next(it)
 for item in it:
  yield (first+item)/2
  first = item

print list(averages(range(1,11)))
# [1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5]
 
 #3 Try using a list comprehension. Something like: 

 new_list = [(old_list[i] + old_list[i+1])/2 for i in range(len(old_list-1))]
 
 #4 In the spirit of itertools. Inspiration from the pairwise recipe. 

 from itertools import tee, izip

def average(iterable):
 "s -&gt; (s0,s1)/2.0, (s1,s2)/2.0, ..."
 a, b = tee(iterable)
 next(b, None)
 return ((x+y)/2.0 for x, y in izip(a, b))
 

 Examples: 

 &gt;&gt;&gt;list(average([1,2,3,4,5]))
[1.5, 2.5, 3.5, 4.5]
&gt;&gt;&gt;list(average([1,20,31,45,56,0,0]))
[10.5, 25.5, 38.0, 50.5, 28.0, 0.0]
&gt;&gt;&gt;list(average(average([1,2,3,4,5])))
[2.0, 3.0, 4.0]
 
 #5 Using the pairwise itertools recipe : 

 import itertools
def pairwise(iterable):
 "s -&gt; (s0,s1), (s1,s2), (s2, s3), ..."
 a, b = itertools.tee(iterable)
 next(b, None)
 return itertools.izip(a, b)

def pair_averages(seq):
 return ( (a+b)/2 for a, b in pairwise(seq) )
 
 #6 Short and simple: 

 def ave(x,y):
 return (x + y) / 2.0

map(ave, a[:-1], a[1:])
 

 And here's how it looks: 

 &gt;&gt;&gt; a = range(10)
&gt;&gt;&gt; map(ave, a[:-1], a[1:])
[0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5]
 

 Due to some stupidity in how Python handles a map over two lists, you do have to truncate the list, a[:-1] . It works more as you'd expect if you use itertools.imap : 

 &gt;&gt;&gt; import itertools
&gt;&gt;&gt; itertools.imap(ave, a, a[1:])
&lt;itertools.imap object at 0x1005c3990&gt;
&gt;&gt;&gt; list(_)
[0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5]