Question (ID-8370072): How do I replace characters in a string in Python? I'm trying to find the best way to do the following: 

 I have a string lets say: 

 str = "pkm adp"
 

 and I have a certain code in a dictionary to replace each charecter such as this one: 

 code = {'a': 'c', 'd': 'a', 'p': 'r', 'k': 'e', 'm': 'd'}
 

 ( 'a' should be replaced by 'c' , 'd' by 'a' ...) 

 How can I convert the first string using the required characters from the dictionary to get the new string? Here for example I should get "red car" as the new string. 
 Answers (Total-6): #0 Try this: 

 &gt;&gt;&gt; import string
&gt;&gt;&gt; code = {'a': 'c', 'd': 'a', 'p': 'r', 'k': 'e', 'm': 'd'}
&gt;&gt;&gt; trans = string.maketrans(*["".join(x) for x in zip(*code.items())])
&gt;&gt;&gt; str = "pkm adp"
&gt;&gt;&gt; str.translate(trans)
'red car'
 

 Explanation: 

 &gt;&gt;&gt; help(str.translate)
Help on built-in function translate:

translate(...)
 S.translate(table [,deletechars]) -&gt; string

 Return a copy of the string S, where all characters occurring
 in the optional argument deletechars are removed, and the
 remaining characters have been mapped through the given
 translation table, which must be a string of length 256.

&gt;&gt;&gt; help(string.maketrans)
Help on built-in function maketrans in module strop:

maketrans(...)
 maketrans(frm, to) -&gt; string

 Return a translation table (a string of 256 bytes long)
 suitable for use in string.translate. The strings frm and to
 must be of the same length.
 

 The maketrans line turns the dictionary into two separate strings suitable for input into maketrans : 

 &gt;&gt;&gt; code = {'a': 'c', 'd': 'a', 'p': 'r', 'k': 'e', 'm': 'd'}
&gt;&gt;&gt; code.items()
[('a', 'c'), ('p', 'r'), ('k', 'e'), ('m', 'd'), ('d', 'a')]
&gt;&gt;&gt; zip(*code.items())
[('a', 'p', 'k', 'm', 'd'), ('c', 'r', 'e', 'd', 'a')]
&gt;&gt;&gt; ["".join(x) for x in zip(*code.items())]
['apkmd', 'creda']
 
 #1 &gt;&gt;&gt; s = "pkm adp"
&gt;&gt;&gt; code = {'a': 'c', 'd': 'a', 'p': 'r', 'k': 'e', 'm': 'd'}
&gt;&gt;&gt; from string import maketrans
&gt;&gt;&gt; s.translate(maketrans(''.join(code.keys()), ''.join(code.values())))
'red car'
 
 #2 "".join(code.get(k, k) for k in str)
 

 would also work in your case. 

 code.get(k, k) returns code[k] if k is a valid key in code ; if it isn't, it returns k itself. 
 #3 though it would be tedious but a quick fix is str.replace("old", "new"). Here is the documentation for your help too http://www.tutorialspoint.com/python/string_replace.htm 
 #4 Assuming you are using Python 2.x: 

 &gt;&gt;&gt; from string import translate, maketrans
&gt;&gt;&gt; data = "pkm adp"
&gt;&gt;&gt; code = {'a': 'c', 'd': 'a', 'p': 'r', 'k': 'e', 'm': 'd'}
&gt;&gt;&gt; table = maketrans(''.join(code.keys()), ''.join(code.values()))
&gt;&gt;&gt; translate(data, table)
'red car'
 
 #5 &gt;&gt;&gt;print ''.join([code.get(s,s) for s in str])
'red car'