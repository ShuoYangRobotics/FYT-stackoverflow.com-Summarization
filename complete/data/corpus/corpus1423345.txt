Question (ID-1423345): Can I run a Python script as a service? Is it possible to run a Python script as a background service on a webserver? I want to do this for socket communication. 
 Answers (Total-6): #0 You might want to check out Twisted . 
 #1 You can make it a daemon. There is a PEP for a more complete solution, but I have found that this works well. 

 import os, sys

def become_daemon(our_home_dir='.', out_log='/dev/null', err_log='/dev/null', pidfile='/var/tmp/daemon.pid'):
 """ Make the current process a daemon. """

 try:
  # First fork
  try:
   if os.fork() &gt; 0:
    sys.exit(0)
  except OSError, e:
   sys.stderr.write('fork #1 failed" (%d) %s\n' % (e.errno, e.strerror))
   sys.exit(1)

  os.setsid()
  os.chdir(our_home_dir)
  os.umask(0)

  # Second fork
  try:
   pid = os.fork()
   if pid &gt; 0:
    # You must write the pid file here. After the exit()
    # the pid variable is gone.
    fpid = open(pidfile, 'wb')
    fpid.write(str(pid))
    fpid.close()
    sys.exit(0)
  except OSError, e:
   sys.stderr.write('fork #2 failed" (%d) %s\n' % (e.errno, e.strerror))
   sys.exit(1)

  si = open('/dev/null', 'r')
  so = open(out_log, 'a+', 0)
  se = open(err_log, 'a+', 0)
  os.dup2(si.fileno(), sys.stdin.fileno())
  os.dup2(so.fileno(), sys.stdout.fileno())
  os.dup2(se.fileno(), sys.stderr.fileno())
 except Exception, e:
  sys.stderr.write(str(e))
 
 #2 on XP and later you can use the sc.exe program to use any .exe as service: 

 &gt;sc create
Creates a service entry in the registry and Service Database.
SYNTAX:
sc create [service name] [binPath= ] &lt;option1&gt; &lt;option2&gt;...
CREATE OPTIONS:
NOTE: The option name includes the equal sign.
 type= &lt;own|share|interact|kernel|filesys|rec&gt;
  (default = own)
 start= &lt;boot|system|auto|demand|disabled&gt;
  (default = demand)
 error= &lt;normal|severe|critical|ignore&gt;
  (default = normal)
 binPath= &lt;BinaryPathName&gt;
 group= &lt;LoadOrderGroup&gt;
 tag= &lt;yes|no&gt;
 depend= &lt;Dependencies(separated by / (forward slash))&gt;
 obj= &lt;AccountName|ObjectName&gt;
  (default = LocalSystem)
 DisplayName= &lt;display name&gt;
 password= &lt;password&gt;
 

 You can start your pythonscript by starting the python interpreter with your script as argument: 

 python.exe myscript.py
 
 #3 Assuming this is for Windows, see this recipe based on srvany 
 #4 There is the very helpful Pypi package which is the basis for my daemons written in Python. 
 #5 If you are talking about linux, it is as easy as doing something like ./myscript.py &amp;