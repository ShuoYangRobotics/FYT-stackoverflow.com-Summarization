Question (ID-8904271): In Python, is it possible to unpack a list of strings and put a single character from each string into a generator? I'm using Python 2.7. 

 Let's say I have a list like so: 

 string_list = ['hello', 'apple', 'green', 'paint', 'sting']
 

 Where each string in the list is the same length. 

 I want to create a generator that would be doing something like the following code: 

 for i in xrange(len(string_list)):
 my_gen = (ch for a_string[i] in string_list)
 

 So the first run, my_gen would have 'h', 'a', 'g', 'p', s'. The next run it would have 'e', 'p', 'r', 'a', 't'. 
 Answers (Total-6): #0 Just use the built-in function zip - 

 like in 

 for letters in zip('hello', 'apple', 'green', 'paint', 'sting'):
  print letters
 

 zip is a built-in that does just that: combine one element of each iterable in a tuple, for each iteration. 

 Running the above example, you have: 

 &gt;&gt;&gt; for letters in zip('hello', 'apple', 'green', 'paint', 'sting'):
... print letters
... 
('h', 'a', 'g', 'p', 's')
('e', 'p', 'r', 'a', 't')
('l', 'p', 'e', 'i', 'i')
('l', 'l', 'e', 'n', 'n')
('o', 'e', 'n', 't', 'g')
 
 #1 izip does exactly what you want: 

 from itertools import izip
for letters in izip(*string_list):
 print letters
 

 The * operator unpacks your string_list so that izip sees it as five sequences of characters, instead of just a single list of strings. 
Output: 

 ('h', 'a', 'g', 'p', 's')
('e', 'p', 'r', 'a', 't')
('l', 'p', 'e', 'i', 'i')
('l', 'l', 'e', 'n', 'n')
('o', 'e', 'n', 't', 'g')
 

 The built-in zip function works too, but it's not lazy (i.e. it immediately returns a list of all the tuples, instead of generating them one at a time). 
 #2 The following recipe comes from the itertools documentation : 

 from itertools import islice, cycle

def roundrobin(*iterables):
 "roundrobin('ABC', 'D', 'EF') --&gt; A D E B F C"
 # Recipe credited to George Sakkis
 pending = len(iterables)
 nexts = cycle(iter(it).next for it in iterables)
 while pending:
  try:
   for next in nexts:
    yield next()
  except StopIteration:
   pending -= 1
   nexts = cycle(islice(nexts, pending))
 

 Besides being very fast, one advantage of this approach is that it works well if the input iterables are of different lengths. 
 #3 Use the zip function that takes several lists (iterables) and yields tuples of corresponding items: 

 zip(*string_list)
 

 yields (successively) 

 [('h', 'a', 'g', 'p', 's'),
 ('e', 'p', 'r', 'a', 't'),
 ('l', 'p', 'e', 'i', 'i'),
 ('l', 'l', 'e', 'n', 'n'),
 ('o', 'e', 'n', 't', 'g')]
 
 #4 val = zip('hello','apple','green','paint','sting')
 

 or zip(*string_list) 

 print val[0]
 

 output = ('h', 'a', 'g', 'p', 's') 

 print val[1]
 

 output = ('e', 'p', 'r', 'a', 't') 
 #5 def foo(string_list):
 for i in xrange(len(string_list)):
  yield (a_string[i] for a_string in string_list)
string_list = ['hello', 'apple', 'green', 'paint', 'sting']
for nth_string_list in foo(string_list):
 for ch in nth_string_list:
  print ch