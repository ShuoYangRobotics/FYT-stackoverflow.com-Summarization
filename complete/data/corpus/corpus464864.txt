Question (ID-464864): Python code to pick out all possible combinations from a list? I have a list with 15 numbers in, and I need to write some code that produces all 32,768 combinations of those numbers. 

 I've found some code (by googling) that apparently does what I'm looking for, but I found the code fairly opaque and am wary of using it. Plus I have a feeling there must be a more elegant solution. 

 The only thing that occurs to me would be to just loop through the decimal integers 1-32768 and convert those to binary, and use the binary representation as a filter to pick out the appropriate numbers. 

 Does anyone know of a better way? Using map(), maybe? 

 Thanks, 

 Ben 
 Answers (Total-6): #0 Have a look at itertools.combinations : 

 
 itertools.combinations(iterable, r)
 
 
 Return r length subsequences of elements from
 the input iterable. 
 
 Combinations are emitted in lexicographic sort order. So, if the
 input iterable is sorted, the
 combination tuples will be produced in
 sorted order. 
 

 Since 2.6, batteries are included! 
 #1 Alabaster's answer missed one aspect: Ben asked for ALL combinations... not just combinations of length "r". 

 So you'd either have to loop through all lengths "L": 

 stuff = [1, 2, 3]
for L in range(0, len(stuff)+1):
 for subset in itertools.combinations(stuff, L):
 print(subset)
 

 Or -- if you want to get snazzy (or bend the brain of whoever reads your code after you) -- you can generate the chain of "combinations()" generators, and iterate through that: 

 from itertools import chain, combinations
def all_subsets(ss):
 return chain(*map(lambda x: combinations(ss, x), range(0, len(ss)+1)))

for subset in all_subsets(stuff):
 print(subset)
 
 #2 If you don't have access to Python 2.6 you might find it in a recipe from the Python Cookbook . I'm sure there are some more recipes for this topic. 
 #3 Here's a lazy one-liner, also using itertools: 

 def combinations(iter):
 return ( set(compress(iter,mask)) for mask in product(*[[0,1]]*len(iter)) )
 

 Main idea behind this answer: there are 2^N combinations -- same as the number of binary strings of length N. For each binary string, you pick all elements corresponding to a "1". 

 abc
 |
 V
000 -&gt; 
001 -&gt; c
010 -&gt; b
011 -&gt; bc
100 -&gt; a
101 -&gt; a c
110 -&gt; ab
111 -&gt; abc
 

 You may wish to redefine as list(iter) so len will work on generators. 

 

 Demo 

 &gt;&gt;&gt; list(combinations(range(4)))
[set(), {3}, {2}, {2, 3}, {1}, {1, 3}, {1, 2}, {1, 2, 3}, {0}, {0, 3}, {0, 2}, {0, 2, 3}, {0, 1}, {0, 1, 3}, {0, 1, 2}, {0, 1, 2, 3}]

&gt;&gt;&gt; list(combinations('abcd'))
[set(), {'d'}, {'c'}, {'c', 'd'}, {'b'}, {'b', 'd'}, {'c', 'b'}, {'c', 'b', 'd'}, {'a'}, {'a', 'd'}, {'a', 'c'}, {'a', 'c', 'd'}, {'a', 'b'}, {'a', 'b', 'd'}, {'a', 'c', 'b'}, {'a', 'c', 'b', 'd'}]
 
 #4 I agree with Dan H that Ben indeed asked for all combinations. itertools.combinations() does not give all combinations. 

 Another issue is, if the input iterable is big, it is perhaps better to return a generator instead of everything in a list: 

 iterable = range(10)
for s in xrange(len(iterable)+1):
 for comb in itertools.combinations(iterable, s):
 yield comb
 
 #5 Using list comprehension: 

 def selfCombine( list2Combine, length ):
 listCombined = str( ['list2Combine[i' + str( i ) + ']' for i in range( length )] ).replace( "'", '' ) \
      + 'for i0 in range(len( list2Combine ) )'
 if length &gt; 1:
  listCombined += str( [' for i' + str( i ) + ' in range( i' + str( i - 1 ) + ', len( list2Combine ) )' for i in range( 1, length )] )\
   .replace( "', '", ' ' )\
   .replace( "['", '' )\
   .replace( "']", '' )

 listCombined = '[' + listCombined + ']'
 listCombined = eval( listCombined )

 return listCombined

list2Combine = ['A', 'B', 'C']
listCombined = selfCombine( list2Combine, 2 )
 

 Output would be: 

 ['A', 'A']
['A', 'B']
['A', 'C']
['B', 'B']
['B', 'C']
['C', 'C']