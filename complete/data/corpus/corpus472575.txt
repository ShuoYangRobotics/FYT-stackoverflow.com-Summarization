Question (ID-472575): select single item from a collection : Python I created a utility function to return the expected single item from an generator expression 

 print one(name for name in ('bob','fred') if name=='bob')
 

 Is this a good way to go about it? 

 def one(g):
 try:
  val = g.next()
  try:
   g.next()
  except StopIteration:
   return val
  else:
   raise Exception('Too many values')
 except StopIteration:
  raise Exception('No values')
 
 Answers (Total-7): #0 A simpler solution is to use tuple unpacking. This will already do everything you want, including checking that it contains exactly one item. 

 Single item: 

 &gt;&gt;&gt; name, = (name for name in ('bob','fred') if name=='bob')
 &gt;&gt;&gt; name
 'bob'
 

 Too many items: 

 &gt;&gt;&gt; name, = (name for name in ('bob','bob') if name=='bob')
Traceback (most recent call last):
 File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: too many values to unpack
 

 No items: 

 &gt;&gt;&gt; name, = (name for name in ('fred','joe') if name=='bob')
Traceback (most recent call last):
 File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: need more than 0 values to unpack
 
 #1 Do you mean? 

 def one( someGenerator ):
 if len(list(someGenerator)) != 1: raise Exception( "Not a Singleton" )
 

 What are you trying to accomplish with all the extra code? 
 #2 Simple approach: 

 print (name for name in ('bob', 'fred') if name == 'bob').next()
 

 If you really want an error when there is more than one value, then you need a function. The most simple I can think of is ( EDITED to work with lists too): 

 def one(iterable):
 it = iter(iterable)
 val = it.next()
 try:
  it.next()
 except StopIteration:
  return val
 else:
  raise Exception('More than one value')
 
 #3 Have a look into the itertools.islice() method. 

 &gt;&gt;&gt; i2=itertools.islice((name for name in ('bob','fred') if name=='bob'),0,1,1)
&gt;&gt;&gt; i2.next()
'bob'
&gt;&gt;&gt; i2.next()
Traceback (most recent call last):
 File "&lt;interactive input&gt;", line 1, in &lt;module&gt;
StopIteration
&gt;&gt;&gt;
 

 
 This module implements a number of iterator building blocks inspired by constructs from the Haskell and SML programming languages. Each has been recast in a form suitable for Python. 
 
 The module standardizes a core set of fast, memory efficient tools that are useful by themselves or in combination. Standardization helps avoid the readability and reliability problems which arise when many different individuals create their own slightly varying implementations, each with their own quirks and naming conventions. 
 
 The tools are designed to combine readily with one another. This makes it easy to construct more specialized tools succinctly and efficiently in pure Python. 
 
 #4 Here is my try at the one() function. I would avoid the explicit .next() call and use a for loop instead. 

 def one(seq):
 counter = 0
 for elem in seq:
  result = elem
  counter += 1
  if counter &gt; 1:
   break
 if counter == 0:
  raise Exception('No values')
 elif counter &gt; 1:
  raise Exception('Too many values')
 return result
 
 #5 First, (to answer the actual question!) your solution will work fine as will the other variants proposed. 

 I would add that in this case, IMO, generators are overly complicated. If you expect to have one value, you'll probably never have enough for memory usage to be a concern, so I would have just used the obvious and much clearer: 

 children = [name for name in ('bob','fred') if name=='bob']
if len(children) == 0:
 raise Exception('No values')
elif len(children) &gt; 1:
 raise Exception('Too many values')
else:
 child = children[0]
 
 #6 How about using Python's for .. in syntax with a counter? Similar to unbeknown's answer. 

 def one(items):
 count = 0
 value = None

 for item in items:
  if count:
   raise Exception('Too many values')

  count += 1
  value = item

 if not count:
  raise Exception('No values')

 return value