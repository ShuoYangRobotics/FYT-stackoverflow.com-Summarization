Question (ID-5186839): Python Replace \\ with \ So I can't seem to figure this out... I have a string say, "a\\nb" and I want this to become "a\nb" . I've tried all the following and none seem to work; 

 &gt;&gt;&gt; a
'a\\nb'
&gt;&gt;&gt; a.replace("\\","\")
 File "&lt;stdin&gt;", line 1
 a.replace("\\","\")
      ^
SyntaxError: EOL while scanning string literal
&gt;&gt;&gt; a.replace("\\",r"\")
 File "&lt;stdin&gt;", line 1
 a.replace("\\",r"\")
      ^
SyntaxError: EOL while scanning string literal
&gt;&gt;&gt; a.replace("\\",r"\\")
'a\\\\nb'
&gt;&gt;&gt; a.replace("\\","\\")
'a\\nb'
 

 I really don't understand why the last one works, because this works fine: 

 &gt;&gt;&gt; a.replace("\\","%")
'a%nb'
 

 Is there something I'm missing here? 

 EDIT I understand that \ is an escape character. What I'm trying to do here is turn all \\n \\t etc. into \n \t etc. and replace doesn't seem to be working the way I imagined it would. 

 &gt;&gt;&gt; a = "a\\nb"
&gt;&gt;&gt; b = "a\nb"
&gt;&gt;&gt; print a
a\nb
&gt;&gt;&gt; print b
a
b
&gt;&gt;&gt; a.replace("\\","\\")
'a\\nb'
&gt;&gt;&gt; a.replace("\\\\","\\")
'a\\nb'
 

 I want string a to look like string b. But replace isn't replacing slashes like I thought it would. 
 Answers (Total-6): #0 There is no reason to use replace for this, Python comes with batteries included. 

 What you have is a encoded string (using the string_escape encoding) and you want to decode it: 

 &gt;&gt;&gt; s = r"Escaped\nNewline"
&gt;&gt;&gt; print s
Escaped\nNewline
&gt;&gt;&gt; s.decode('string_escape')
'Escaped\nNewline'
&gt;&gt;&gt; print s.decode('string_escape')
Escaped
Newline
&gt;&gt;&gt; "a\\nb".decode('string_escape')
'a\nb'
 
 #1 You are missing, that \ is the escape character. 

 Look here: http://docs.python.org/reference/lexical_analysis.html 
at 2.4.1 "Escape Sequence" 

 Most importantly \n is a newline character.
And \\ is an escaped escape character :D 

 &gt;&gt;&gt; a = 'a\\\\nb'
&gt;&gt;&gt; a
'a\\\\nb'
&gt;&gt;&gt; print a
a\\nb
&gt;&gt;&gt; a.replace('\\\\', '\\')
'a\\nb'
&gt;&gt;&gt; print a.replace('\\\\', '\\')
a\nb
 
 #2 It's because, even in "raw" strings (=strings with an r before the starting quote(s)), an unescaped escape character cannot be the last character in the string. This should work instead: 

 '\\ '[0]
 
 #3 In Python string literals, backslash is an escape character. This is also true when the interactive prompt shows you the value of a string. It will give you the literal code representation of the string. Use the print statement to see what the string actually looks like. 

 This example shows the difference: 

 &gt;&gt;&gt; '\\'
'\\'
&gt;&gt;&gt; print '\\'
\
 
 #4 r'a\\nb'.replace('\\\\', '\\')
 

 or 

 'a\nb'.replace('\n', '\\n')
 
 #5 Your original string, a = 'a\\nb' does not actually have two '\' characters, the first one is an escape for the latter. If you do, print a , you'll see that you actually have only one '\' character. 

 &gt;&gt;&gt; a = 'a\\nb'
&gt;&gt;&gt; print a
a\nb
 

 If, however, what you mean is to interpret the '\n' as a newline character, without escaping the slash, then: 

 &gt;&gt;&gt; b = a.replace('\\n', '\n')
&gt;&gt;&gt; b
'a\nb'
&gt;&gt;&gt; print b
a
b