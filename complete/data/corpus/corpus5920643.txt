Question (ID-5920643): Add an item between each item already in the list Assuming I have the following list: 

 ['a','b','c','d','e']
 

 How can I append a new item (in this case a - ) between each item in this list, so that my list will look like the following? 

 ['a','-','b','-','c','-','d','-','e']
 

 Thanks. 
 Answers (Total-8): #0 &gt;&gt;&gt; list('-'.join(ls))
['a', '-', 'b', '-', 'c', '-', 'd', '-', 'e']
&gt;&gt;&gt; 
 
 #1 list = ['a', 'b', 'c', 'd', 'e']
result = []
for e in list:
 result.append(e)
 result.append('-')
result.pop()
 

 seems to work 
 #2 This should work with any list elements: 

 &gt;&gt;&gt; sep = '-'
&gt;&gt;&gt; ls = [1, 2, 13, 14]
&gt;&gt;&gt; sum([[i, '-'] for i in ls], [])[:-1]
[1, '-', 2, '-', 13, '-', 14]
 
 #3 I think this is a little more elegant/pythonic as well as being general. You may find it less readable if you are not used to a functional style though: 

 li = ['a','b','c','d','e']

from operator import add
reduce(add, [(elt, "-") for elt in li])[:-1]
 

 If you like, you could use lambda a, b: a+b instead of operator.add. 
 #4 Adapting this answer to a similar question : 

 &gt;&gt;&gt; input = ['a', 'b', 'c', 'd', 'e']
&gt;&gt;&gt; sep = ['-'] * len(input)
&gt;&gt;&gt; list(sum(zip(input, sep), ())[:-1])
['a', '-', 'b', '-', 'c', '-', 'd', '-', 'e']
 

 Another answer to the same question does this using itertools and a slightly modified separator list: 

 &gt;&gt;&gt; import itertools
&gt;&gt;&gt; sep = ['-'] * (len(input) - 1)
&gt;&gt;&gt; list(it.next() for it in itertools.cycle((iter(input), iter(sep))))
['a', '-', 'b', '-', 'c', '-', 'd', '-', 'e']
 
 #5 The following will add a "separator" element between each of those in a list: 

 seq = ['a','b','c','d','e']

def tween(seq, sep):
 return reduce(lambda r,v: r+[sep,v], seq[1:], seq[:1])

print tween(seq, '-')
 

 output: 

 ['a', '-', 'b', '-', 'c', '-', 'd', '-', 'e']
 

 FWIW, here's a similar thread titled Custom string joining in the Usenet comp.lang.python group that might interest you. 
 #6 li = ['a','b','c','d','e']
for i in xrange(len(li)-1,0,-1):
 li[i:i] = '-'
 

 or 

 from operator import concat
seq = ['a','b','c','d','e']
print reduce(concat,[['-',x] for x in seq[1:]],seq[0:1])
 

 or 

 li = ['a','b','c','d','e']
newli = li[0:1]
[ newli.extend(('-',x)) for x in li[1:]]
 
 #7 If you want to alter the list without generating a copy, this works, handles all input, and is pretty terse: 

 def intersperse(lst, item):
 for i in range(1, len(l)):
  l.insert(i * 2 - 1, item)
 

 Tested: 

 &gt;&gt;&gt; l = [1, 2, 3, 4, 5]
&gt;&gt;&gt; intersperse(l, '-')
&gt;&gt;&gt; l
[1, '-', 2, '-', 3, '-', 4, '-', 5]