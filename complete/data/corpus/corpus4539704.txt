Question (ID-4539704): Can I do a reduce on a list comprehension into two lists, based on two values? I've got the following code. 

 sum_review = reduce(add,[book['rw'] for book in books])
sum_rating = reduce(add,[book['rg'] for book in books])
items = len(books)
avg_review = sum_review/items
avg_rating = sum_rating/items
 

 What I'd like is this. 

 sum_review,sum_rating = reduce(add,([book['rw'],[book['rg']) for book in books])
items = len(books)
avg_review = sum_review/items
avg_rating = sum_rating/items
 

 Obviously this doesn't work. How can I solve this redundancy, without a regular loop? 
 Answers (Total-6): #0 I'd avoid using reduce here. For something so simple use sum : 

 sum_review = sum(book['rw'] for book in books)
sum_rating = sum(book['rg'] for book in books)
 

 In my opinion this simpler version doesn't need refactoring to remove redundancy. With just two items ( rw and rg ) I think it's best to just leave it as it is. 
 #1 zip(*iterable) is the Python way to transpose a list. I am not sure the readibility loss pays off, but this should work: 

 sum_review, sum_rating = map(sum, zip(*((book["rw"], book["rg"]) for book in books)))
 

 In any case, use built-in sum instead of reduce(operator.add, ....) 
 #2 You should prefer clarity over optimization. In 3 years of using Python, I have only had to profile to discover performance bottlenecks twice. Your original code is clear and efficient. Compressing the first two lines into one hurts readability and barely impacts performance. 

 If I had to revise your code, it would like this: 

 avg_review = sum(book['rw'] for book in books) / len(books)
avg_rating = sum(book['rg'] for book in books) / len(books)
 

 (That's five lines of code down to two with an improvement of clarity.) 
 #3 sum_review, sum_rating = reduce(lambda a,b: (a[0] + b[0], a[1]+b[1]), ((book['rw'], book['rg']) for book in books), (0,0) )
items = len(books)
avg_review = sum_review/items
avg_rating = sum_rating/items
 

 (tested) 
 #4 
 How can I solve this redundancy 
 

 By making a function, of course: 

 def average_value(items, key):
 values = [x[key] for x in items]
 return sum(items) / len(items)

avg_review, avg_rating = average_value(books, 'rw'), average_value(books, 'rg')
 
 #5 I you really want a one-liner for that, then this could do the job (untested): 

 sum_review, sum_rating = [reduce(add, [book[t] for book in books] for t in ('rw', 'rg')]
 

 However, the readability is questionable...