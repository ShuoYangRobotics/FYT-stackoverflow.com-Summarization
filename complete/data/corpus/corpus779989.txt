Question (ID-779989): What to write into log file? My question is simple: what to write into a log.
Are there any conventions?
What do I have to put in? 

 Since my app has to be released, I'd like to have friendly logs, which could be read by most people without asking what it is. 

 I already have some ideas, like a timestamp, a unique identifier for each function/method, etc..
I'd like to have several log levels, like tracing/debugging, informations, errors/warnings. 

 Do you use some pre-formatted log resources? 

 Thank you 
 Answers (Total-7): #0 It's quite pleasant, and already implemented. 

 Read this: http://docs.python.org/library/logging.html 

 

 Edit 

 "easy to parse, read," are generally contradictory features. English -- easy to read, hard to parse. XML -- easy to parse, hard to read. There is no format that achieves easy-to-read and easy-to-parse. Some log formats are "not horrible to read and not impossible to parse". 

 Some folks create multiple handlers so that one log has several formats: a summary for people to read and an XML version for automated parsing. 
 #1 Here are some suggestions for content: 

 
 timestamp 
 message 
 log message type (such as error, warning, trace, debug) 
 thread id ( so you can make sense of the log file from a multi threaded application) 
 

 Best practices for implementation: 

 
 Put a mutex around the write method so that you can be sure that each write is thread safe and will make sense. 
 Send 1 message at at a time to the log file, and specify the type of log message each time. Then you can set what type of logging you want to take on program startup. 
 Use no buffering on the file, or flush often in case there is a program crash. 
 

 Edit: I just noticed the question was tagged with Python, so please see S. Lott's answer before mine. It may be enough for your needs. 
 #2 Since you tagged your question python, I refer you to this question as well.
As for the content, Brian proposal is good. Remember however to add the program name if you are using a shared log. 

 The important thing about a logfile is "greppability". Try to provide all your info in a single line, with proper string identifiers that are unique (also in radix) for a particular condition. As for the timestamp, use the ISO-8601 standard which sorts nicely. 
 #3 A good idea is to look at log analysis software. Unless you plan to write your own, you will probably want to exploit an existing log analysis package such as Analog. If that is the case, you will probably want to generate a log output that is similar enough to the formats that it accepts. It will allow you to create nice charts and graphs with minimal effort! 
 #4 In my opinion, best approach is to use existing logging libraries such as log4j (or it's variations for other languages) . It gives you control on how your messages are formatted and you can change it without ever touching your code. It follows best practices, robust and used by millions of users. Of course, you can write you own logging framework, but that would be very odd thing to do, unless you need something very specific. In any case, walk though their documentation and see how log statements are presented there. 

 Check out log4py - Python ported version of log4j, I think there are several implementations for Python out there.. 
 #5 timeStamp i.e. DateTime YYYY/MM/DD:HH:mm:ss:ms
User
Thread ID
Function Name
Message/Error Message/Success Message/Function Trace 

 Have this in XML format and you can then easily write a parser for it. 

 &lt;log&gt;
 &lt;logEntry DebugLevel="0|1|2|3|4|5...."&gt;
 &lt;TimeStamp format="YYYY/MM/DD:HH:mm:ss:ms" value="2009/04/22:14:12:33:120" /&gt;
 &lt;ThreadId value="" /&gt;
 &lt;FunctionName value="" /&gt;
 &lt;Message type="Error|Success|Failure|Status|Trace"&gt;
  Your message goes here
 &lt;/Message&gt; 
 &lt;/logEntry&gt;
&lt;/log&gt;
 
 #6 Python's logging library are thread-safe for single process threads.