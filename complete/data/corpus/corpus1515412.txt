Question (ID-1515412): Declaring Unknown Type Variable in Python? I have a situation in Python(cough, homework) where I need to multiply EACH ELEMENT in a given list of objects a specified number of times and return the output of the elements. The problem is that the sample inputs given are of different types. For example, one case may input a list of strings whose elements I need to multiply while the others may be ints. So my return type needs to vary. I would like to do this without having to test what every type of object is. Is there a way to do this? I know in C# i could just use "var" but I don't know if such a thing exists in Python? 

 I realize that variables don't have to be declared, but in this case I can't see any way around it. Here's the function I made: 

 def multiplyItemsByFour(argsList):

output = ????

for arg in argsList:
  output += arg * 4

return output
 

 See how I need to add to the output variable. If I just try to take away the output assignment on the first line, I get an error that the variable was not defined. But if I assign it a 0 or a "" for an empty string, an exception could be thrown since you can't add 3 to a string or "a" to an integer, etc... 

 Here are some sample inputs and outputs: 

 Input: ('a','b') Output: 'aaaabbbb'
Input: (2,3,4) Output: 36
 

 Thanks! 
 Answers (Total-11): #0 def fivetimes(anylist):
 return anylist * 5
 

 As you see, if you're given a list argument, there's no need for any assignment whatsoever in order to "multiply it a given number of times and return the output". You talk about a given list; how is it given to you, if not (the most natural way) as an argument to your function? Not that it matters much -- if it's a global variable, a property of the object that's your argument, and so forth, this still doesn't necessitate any assignment. 

 If you were "homeworkically" forbidden from using the * operator of lists, and just required to implement it yourself, this would require assignment, but no declaration: 

 def multiply_the_hard_way(inputlist, multiplier):
 outputlist = []
 for i in range(multiplier):
  outputlist.extend(inputlist)
 return outputlist
 

 You can simply make the empty list "magicaly appear": there's no need to "declare" it as being anything whatsoever, it's an empty list and the Python compiler knows it as well as you or any reader of your code does. Binding it to the name outputlist doesn't require you to perform any special ritual either, just the binding (aka assignment) itself: names don't have types, only objects have types... that's Python!-) 

 Edit : OP now says output must not be a list, but rather int, float, or maybe string, and he is given no indication of what. I've asked for clarification -- multiplying a list ALWAYS returns a list, so clearly he must mean something different from what he originally said, that he had to multiply a list. Meanwhile, here's another attempt at mind-reading. Perhaps he must return a list where EACH ITEM of the input list is multiplied by the same factor (whether that item is an int, float, string, list, ...). Well then: 

 define multiply_each_item(somelist, multiplier):
 return [item * multiplier for item in somelist]
 

 Look ma, no hands^H^H^H^H^H assignment. (This is known as a "list comprehension", btw). 

 Or maybe (unlikely, but my mind-reading hat may be suffering interference from my tinfoil hat, will need to go to the mad hatter's shop to have them tuned) he needs to (say) multiply each list item as if they were the same type as the first item, but return them as their original type, so that for example 

 &gt;&gt;&gt; mystic(['zap', 1, 23, 'goo'], 2)
['zapzap', 11, 2323, 'googoo']
&gt;&gt;&gt; mystic([23, '12', 15, 2.5], 2)
[46, '24', 30, 4.0]
 

 Even this highly-mystical spec COULD be accomodated...: 

 &gt;&gt;&gt; def mystic(alist, mul):
... multyp = type(alist[0])
... return [type(x)(mul*multyp(x)) for x in alist]
...
 

 ...though I very much doubt it's the spec actually encoded in the mysterious runes of that homework assignment. Just about ANY precise spec can be either implemented or proven to be likely impossible as stated (by requiring you to solve the Halting Problem or demanding that P==NP, say;-). That may take some work ("prove the 4-color theorem", for example;-)... but still less than it takes to magically divine what the actual spec IS, from a collection of mutually contradictory observations, no examples, etc. Though in our daily work as software developer (ah for the good old times when all we had to face was homework!-) we DO meet a lot of such cases of course (and have to solve them to earn our daily bread;-). 

 EditEdit : finally seeing a precise spec I point out I already implemented that one, anyway, here it goes again: 

 def multiplyItemsByFour(argsList):
 return [item * 4 for item in argsList]
 

 EditEditEdit : finally/finally seeing a MORE precise spec, with (luxury!-) examples : 

 Input: ('a','b') Output: 'aaaabbbb' Input: (2,3,4) Output: 36
 

 So then what's wanted it the summation (and you can't use sum as it wouldn't work on strings) of the items in the input list, each multiplied by four. My preferred solution: 

 def theFinalAndTrulyRealProblemAsPosed(argsList):
 items = iter(argsList)
 output = next(items, []) * 4
 for item in items:
 output += item * 4
 return output
 

 If you're forbidden from using some of these constructs, such as built-ins items and iter , there are many other possibilities (slightly inferior ones) such as: 

 def theFinalAndTrulyRealProblemAsPosed(argsList):
 if not argsList: return None
 output = argsList[0] * 4
 for item in argsList[1:]:
 output += item * 4
 return output
 

 For an empty argsList , the first version returns [] , the second one returns None -- not sure what you're supposed to do in that corner case anyway. 
 #1 Are you sure this is for Python beginners? To me, the cleanest way to do this is with reduce() and lambda, both of which are not typical beginner tools, and sometimes discouraged even for experienced Python programmers: 

 def multiplyItemsByFour(argsList):
 if not argsList:
  return None
 newItems = [item * 4 for item in argsList]
 return reduce(lambda x, y: x + y, newItems)
 

 Like Alex Martelli, I've thrown in a quick test for an empty list at the beginning which returns None. Note that if you are using Python 3, you must import functools to use reduce(). 

 Essentially, the reduce(lambda...) solution is very similar to the other suggestions to set up an accumulator using the first input item, and then processing the rest of the input items; but is simply more concise. 
 #2 You don't need to declare variable types in python; a variable has the type of whatever's assigned to it. 

 EDIT: 

 To solve the re-stated problem, try this: 

 def multiplyItemsByFour(argsList):

output = argsList.pop(0) * 4

for arg in argsList:
  output += arg * 4

return output
 

 (This is probably not the most pythonic way of doing this, but it should at least start off your output variable as the right type, assuming the whole list is of the same type) 
 #3 Python is dynamically typed, you don't need to declare the type of a variable, because a variable doesn't have a type, only values do. (Any variable can store any value, a value never changes its type during its lifetime.) 

 def do_something(x):
 return x * 5
 

 This will work for any x you pass to it, the actual result depending on what type the value in x has. If x contains a number it will just do regular multiplication, if it contains a string the string will be repeated five times in a row, for lists and such it will repeat the list five times, and so on. For custom types (classes) it depends on whether the class has an operation defined for the multiplication operator. 
 #4 My guess is that the purpose of your homework is to expose you to "duck typing". The basic idea is that you don't worry about the types too much, you just worry about whether the behaviors work correctly. A classic example: 

 def add_two(a, b):
 return a + b

print add_two(1, 2) # prints 3

print add_two("foo", "bar") # prints "foobar"

print add_two([0, 1, 2], [3, 4, 5]) # prints [0, 1, 2, 3, 4, 5]
 

 Notice that when you def a function in Python, you don't declare a return type anywhere. It is perfectly okay for the same function to return different types based on its arguments. It's considered a virtue, even; consider that in Python we only need one definition of add_two() and we can add integers, add floats, concatenate strings, and join lists with it. Statically typed languages would require multiple implementations, unless they had an escape such as variant , but Python is dynamically typed. (Python is strongly typed, but dynamically typed. Some will tell you Python is weakly typed, but it isn't. In a weakly typed language such as JavaScript, the expression 1 + "1" will give you a result of 2; in Python this expression just raises a TypeError exception.) 

 It is considered very poor style to try to test the arguments to figure out their types, and then do things based on the types. If you need to make your code robust, you can always use a try block: 

 def safe_add_two(a, b):
 try:
  return a + b
 except TypeError:
  return None
 

 See also the Wikipedia page on duck typing . 
 #5 You gave these sample inputs and outputs: 

 Input: ('a','b') Output: 'aaaabbbb' Input: (2,3,4) Output: 36 

 I don't want to write the solution to your homework for you, but I do want to steer you in the correct direction. But I'm still not sure I understand what your problem is, because the problem as I understand it seems a bit difficult for an intro to Python class. 

 The most straightforward way to solve this requires that the arguments be passed in a list. Then, you can look at the first item in the list, and work from that. Here is a function that requires the caller to pass in a list of two items: 

 def handle_list_of_len_2(lst):
 return lst[0] * 4 + lst[1] * 4
 

 Now, how can we make this extend past two items? Well, in your sample code you weren't sure what to assign to your variable output. How about assigning lst[0]? Then it always has the correct type. Then you could loop over all the other elements in lst and accumulate to your output variable using += as you wrote. If you don't know how to loop over a list of items but skip the first thing in the list, Google search for "python list slice". 

 Now, how can we make this not require the user to pack up everything into a list, but just call the function? What we really want is some way to accept whatever arguments the user wants to pass to the function, and make a list out of them. Perhaps there is special syntax for declaring a function where you tell Python you just want the arguments bundled up into a list. You might check a good tutorial and see what it says about how to define a function. 

 Now that we have covered (very generally) how to accumulate an answer using +=, let's consider other ways to accumulate an answer. If you know how to use a list comprehension, you could use one of those to return a new list based on the argument list, with the multiply performed on each argument; you could then somehow reduce the list down to a single item and return it. Python 2.3 and newer have a built-in function called sum() and you might want to read up on that. [EDIT: Oh drat, sum() only works on numbers. See note added at end.] 

 I hope this helps. If you are still very confused, I suggest you contact your teacher and ask for clarification. Good luck. 

 P.S. Python 2.x have a built-in function called reduce() and it is possible to implement sum() using reduce() . However, the creator of Python thinks it is better to just use sum() and in fact he removed reduce() from Python 3.0 (well, he moved it into a module called functools ). 

 P.P.S. If you get the list comprehension working, here's one more thing to think about. If you use a list comprehension and then pass the result to sum() , you build a list to be used once and then discarded. Wouldn't it be neat if we could get the result, but instead of building the whole list and then discarding it we could just have the sum() function consume the list items as fast as they are generated? You might want to read this: http://stackoverflow.com/questions/47789/generator-expressions-vs-list-comprehension 

 EDIT: Oh drat, I assumed that Python's sum() builtin would use duck typing. Actually it is documented to work on numbers, only. I'm disappointed! I'll have to search and see if there were any discussions about that, and see why they did it the way they did; they probably had good reasons. Meanwhile, you might as well use your += solution. Sorry about that. 

 EDIT: Okay, reading through other answers, I now notice two ways suggested for peeling off the first element in the list. 

 For simplicity, because you seem like a Python beginner, I suggested simply using output = lst[0] and then using list slicing to skip past the first item in the list. However, Wooble in his answer suggested using output = lst.pop(0) which is a very clean solution: it gets the zeroth thing on the list, and then you can just loop over the list and you automatically skip the zeroth thing. However, this "mutates" the list! It's better if a function like this does not have "side effects" such as modifying the list passed to it. (Unless the list is a special list made just for that function call, such as a *args list.) Another way would be to use the "list slice" trick to make a copy of the list that has the first item removed. Alex Martelli provided an example of how to make an "iterator" using a Python feature called iter() , and then using iterator to get the "next" thing. Since the iterator hasn't been used yet, the next thing is the zeroth thing in the list. That's not really a beginner solution but it is the most elegant way to do this in Python; you could pass a really huge list to the function, and Alex Martelli's solution will neither mutate the list nor waste memory by making a copy of the list. 
 #6 Very easy in Python. You need to get the type of the data in your list - use the type() function on the first item - type(argsList[0]). Then to initialize output (where you now have ????) you need the 'zero' or nul value for that type. So just as int() or float() or str() returns the zero or nul for their type so to will type(argsList[0])() return the zero or nul value for whatever type you have in your list. 

 So, here is your function with one minor modification: 

 def multiplyItemsByFour(argsList):
 output = type(argsList[0])()
 for arg in argsList:
  output += arg * 4
 return output
 

 Works with::
argsList = [1, 2, 3, 4] or [1.0, 2.0, 3.0, 4.0] or "abcdef" ... etc, 
 #7 No need to test the objects, just multiply away! 

 'this is a string' * 6
14 * 6
[1,2,3] * 6
 

 all just work 
 #8 Try this: 

 def timesfourlist(list):
 nextstep = map(times_four, list)
 sum(nextstep)
 

 map performs the function passed in on each element of the list(returning a new list) and then sum does the += on the list. 
 #9 If you just want to fill in the blank in your code, you could try setting object=arglist[0].__class__() to give it the zero equivalent value of that class. 

 &gt;&gt;&gt; def multiplyItemsByFour(argsList):
 output = argsList[0].__class__()
 for arg in argsList:
   output += arg * 4
 return output

&gt;&gt;&gt; multiplyItemsByFour('ab')
'aaaabbbb'
&gt;&gt;&gt; multiplyItemsByFour((2,3,4))
36
&gt;&gt;&gt; multiplyItemsByFour((2.0,3.3))
21.199999999999999
 

 This will crash if the list is empty, but you can check for that case at the beginning of the function and return whatever you feel appropriate. 
 #10 Thanks to Alex Martelli, you have the best possible solution: 

 def theFinalAndTrulyRealProblemAsPosed(argsList):
 items = iter(argsList)
 output = next(items, []) * 4
 for item in items:
  output += item * 4
 return output
 

 This is beautiful and elegant. First we create an iterator with iter() , then we use next() to get the first object in the list. Then we accumulate as we iterate through the rest of the list, and we are done. We never need to know the type of the objects in argsList, and indeed they can be of different types as long as all the types can have operator + applied with them. This is duck typing. 

 For a moment there last night I was confused and thought that you wanted a function that, instead of taking an explicit list, just took one or more arguments. 

 def four_x_args(*args):
 return theFinalAndTrulyRealProblemAsPosed(args)
 

 The *args argument to the function tells Python to gather up all arguments to this function and make a tuple out of them; then the tuple is bound to the name args . You can easily make a list out of it, and then you could use the .pop(0) method to get the first item from the list. This costs the memory and time to build the list, which is why the iter() solution is so elegant. 

 def four_x_args(*args):
 argsList = list(args) # convert from tuple to list
 output = argsList.pop(0) * 4
 for arg in argsList:
  output += arg * 4
 return output
 

 This is just Wooble's solution, rewritten to use *args. 

 Examples of calling it: 

 print four_x_args(1) # prints 4
print four_x_args(1, 2) # prints 12
print four_x_args('a') # prints 'aaaa'
print four_x_args('ab', 'c') # prints 'ababababcccc'
 

 Finally, I'm going to be malicious and complain about the solution you accepted. That solution depends on the object's base class having a sensible null or zero, but not all classes have this. int() returns 0 , and str() returns '' (null string), so they work. But how about this: 

 class NaturalNumber(int):
 """
 Exactly like an int, but only values &gt;= 1 are possible.
 """
 def __new__(cls, initial_value=1):  
  try:
   n = int(initial_value)
   if n &lt; 1:
    raise ValueError
  except ValueError:
   raise ValueError, "NaturalNumber() initial value must be an int() &gt;= 1"
  return super(NaturalNumber, cls).__new__ (cls, n)


argList = [NaturalNumber(n) for n in xrange(1, 4)]

print theFinalAndTrulyRealProblemAsPosed(argList) # prints correct answer: 24

print NaturalNumber() # prints 1
print type(argList[0])() # prints 1, same as previous line

print multiplyItemsByFour(argList) # prints 25!
 

 Good luck in your studies, and I hope you enjoy Python as much as I do.