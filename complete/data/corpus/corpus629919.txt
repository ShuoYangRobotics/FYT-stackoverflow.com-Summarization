Question (ID-629919): Why avoid CGI for Python with LAMP hosting? I have been using PHP for years. Lately I've come across numerous forum posts stating that PHP is outdated , that modern programming languages are easier, more secure, etc. etc. 

 So, I decided to start learning Python . Since I'm used to using PHP, I just started building pages by uploading an .htaccess file with: 

 addtype text/html py
addhandler cgi-script .py
 

 Then, my sample pages look like: 

 
#!/usr/bin/python
print "content-type: text/html\n\n"
print "html tags, more stuff, etc."
 

 This works fine. But, I came across a comment in a post that said that CGI isn't the best way to use Python . Of course, it didn't mention what is the best way. 

 Why is it that using CGI is not the best way to use Python? What is the alternative? 

 Is there some totally other way to set up a simple Python site? Is there some completely different paradigm I should be looking at outside of .htaccess and .py files? 

 Related 

 
 Pros and Cons of different approaches to web programming in Python 
 What’s a good lightweight Python MVC framework? (esp., @Kevin Dangoor's answer ) 
 How do I use python for web development without relying on a framework? 
 Python Web Framework - Not App Framework or CMS Framework 
 Python web programming 
 
 Answers (Total-6): #0 Classic CGI isn't the best way to use anything at all. With classic CGI server has to spawn a new process for every request . 

 As for Python, you have few alternatives: 

 
 mod_wsgi 
 mod_python 
 fastcgi 
 standalone Python web server ( built-in , CherryPy , Tracd ) 
 standalone Python web server on non-standard port and mod_proxy in Apache 
 
 #1 
 Why is it that using CGI is not the best way to use Python? 
 

 I will stick up for CGI a little. It's good for development environments. 

 It's simple to wire up and you don't have to worry about module reloading problems. Naturally performance is terrible, but for dev you don't care. 

 Of course you should really be writing to the WSGI interface rather than CGI directly. You can then deploy through CGI using: 

 wsgiref.handlers.CGIHandler().run(application)
 

 and use the same application object to deploy through mod_wsgi other whatever other WSGI server you prefer in the production environment where speed matters (and the testing environment where you want it to be as close to production as possible). 
 #2  mod_wsgi is the proper alternative. It is preferable over CGI in almost all aspects. 
 #3 Really it's just an efficiency thing - CGI spawns an entire new process for every request, which is quite heavyweight for what it does. 

 PHP can be run through CGI as well, but mod_php embeds the interpreter within apache.
There's a mod_python which does the same job, and mod_wsgi as Yuval says. 
 #4 There is a page in the Python documentation that describes the advantages and disadvantages of the various possibilities . 

 mod_python 

 
 (…) These are the reasons why mod_python should be avoided when writing new programs. 
 

 WSGI 

 
 The Web Server Gateway Interface or
 WSGI for short is currently the best
 possible way to Python web
 programming. While it is great for
 programmers writing frameworks, the
 normal person does not need to get in
 direct contact with it. 
 

 FastCGI and stuff 

 
 These days, FastCGI is never used directly. 
 
 #5 Aside from the suggestions others make, you should really consider using a framework of some kind. You can and should be using FastCGI , mod_python, or mod_wsgi, but they weren't really intended for you to write code directly against. Might I suggest one of the following? 

 
 django (my favorite for practical applications) 
 pylons 
 cherrypy (my favorite for not-so-practical applications) 
 web.py