Question (ID-192261): How do I log an exception at warning- or info-level with trace back using the python logging framework? Using something like this: 

 
try:
 #Something...
except BaseException, excep:
 logger = logging.getLogger("componet")
 logger.warning("something raised an exception: " + excep)
 logger.info("something raised an exception: " + excep)


 

 I would rather not have it on the error-level cause in my special case it is not an error. At least not in that python-process. 
 Answers (Total-6): #0 Try using Logger.exception . 

 
 Logger.exception() creates a log
 message similar to Logger.error(). The
 difference is that Logger.exception()
 dumps a stack trace along with it.
 Call this method only from an
 exception handler. 
 
 #1 From The logging documentation : 

 
 There are two keyword arguments in
 kwargs which are inspected: exc_info
 which, if it does not evaluate as
 false, causes exception information to
 be added to the logging message. If an
 exception tuple (in the format
 returned by sys.exc_info()) is
 provided, it is used; otherwise,
 sys.exc_info() is called to get the
 exception information. 
 

 So do: 

 logger.warning("something raised an exception: " + excep,exc_info=True)
 
 #2 Use Logger.exception() . 

 try:
 #Something...
except BaseException, excep:
 logger = logging.getLogger("component")
 logger.exception("something raised an exception")
 
 #3 It is fairly well explained here . 

 You are pretty close though. You have the option of just using the default with 

 logging.warning("something raised an exception: " + excep)
 

 Or you can follow some of the examples on the linked page and get more sophisticated with multiple destinations and filter levels. 
 #4 In some cases, you might want to use the warnings library. You can have very fine-grained control over how your warnings are displayed. 
 #5 Here is one that works (python 2.6.5). 

 logger.critical("caught exception, traceback =", exc_info=True)