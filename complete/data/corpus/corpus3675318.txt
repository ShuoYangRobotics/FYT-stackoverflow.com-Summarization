Question (ID-3675318): How to replace the some characters from the end of a string? My question is very simple, but I didn't get the answer from google. 

 There is a python string: 

 s = "123123"
 

 I want to replace the last 2 with x . Suppose there is a method called replace_last : 

 r = replace_last(s, '2', 'x')
 print r
 1231x3
 

 Is there any built-in or easy method to do this? 

 

 UPDATE 

 Sorry, guys, since someone said my example is not clear, I just edited my example, but not quickly enough. 

 What I want is just replace a string with another string once, its similar with python's: 

 string.replace('a', 'b', 1)
 

 But is from the end to beginning. 
 Answers (Total-6): #0 This is exactly what the rpartition function is used for: 

 
 rpartition(...)
  S.rpartition(sep) -> (head, sep, tail) 

 Search for the separator sep in S, starting at the end of S, and return
the part before it, the separator itself, and the part after it. If the
separator is not found, return two empty strings and S.
 
 

 I wrote this function showing how to use rpartition in your use case: 

 def replace_last(source_string, replace_what, replace_with):
 head, sep, tail = source_string.rpartition(replace_what)
 return head + replace_with + tail

s = "123123"
r = replace_last(s, '2', 'x')
print r
 

 Output: 

 1231x3
 
 #1 Here is a solution based on a simplistic interpretation of your question. A better answer will require more information. 

 &gt;&gt;&gt; s = "aaa bbb aaa bbb"
&gt;&gt;&gt; separator = " "
&gt;&gt;&gt; parts = s.split(separator)
&gt;&gt;&gt; separator.join(parts[:-1] + ["xxx"])
'aaa bbb aaa xxx'
 

 Update 

 (After seeing edited question) another very specific answer. 

 &gt;&gt;&gt; s = "123123"
&gt;&gt;&gt; separator = "2"
&gt;&gt;&gt; parts = s.split(separator)
&gt;&gt;&gt; separator.join(parts[:-1]) + "x" + parts[-1]
'1231x3'
 

 Update 2 

 There is far better way to do this . Courtesy @mizipzor . 
 #2 &gt;&gt;&gt; s = "aaa bbb aaa bbb"
&gt;&gt;&gt; s[::-1].replace('bbb','xxx',1)[::-1]
'aaa bbb aaa xxx'
 

 For your second example 

 &gt;&gt;&gt; s = "123123"
&gt;&gt;&gt; s[::-1].replace('2','x',1)[::-1]
'1231x3'
 
 #3 When the wanted match is at the end of string, re.sub comes to the rescue. 

 &gt;&gt;&gt; import re
&gt;&gt;&gt; s = "aaa bbb aaa bbb"
&gt;&gt;&gt; s
'aaa bbb aaa bbb'
&gt;&gt;&gt; re.sub('bbb$', 'xxx', s)
'aaa bbb aaa xxx'
&gt;&gt;&gt; 
 
 #4 Using regular expressions, this is straight-forward 

 
 
  
  import re 
  
  s = "123123" 
  
  re.sub('23$', 'x3', s) 
  
 
 
 #5 This is one of the few string functions that doesn't have a left and right version, but we can mimic the behaviour using some of the string functions that do. 

 &gt;&gt;&gt; s = '123123'
&gt;&gt;&gt; t = s.rsplit('2', 1)
&gt;&gt;&gt; u = 'x'.join(t)
&gt;&gt;&gt; u
'1231x3'
 

 or 

 &gt;&gt;&gt; 'x'.join('123123'.rsplit('2', 1))
'1231x3'