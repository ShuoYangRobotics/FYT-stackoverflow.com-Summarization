Question (ID-4726949): Python elegant assignment based on True/False values I have a variable I want to set depending on the values in three booleans. The most straight-forward way is an if statement followed by a series of elifs: 

 if a and b and c:
 name = 'first'
elif a and b and not c:
 name = 'second'
elif a and not b and c:
 name = 'third'
elif a and not b and not c:
 name = 'fourth'
elif not a and b and c:
 name = 'fifth'
elif not a and b and not c:
 name = 'sixth'
elif not a and not b and c:
 name = 'seventh'
elif not a and not b and not c:
 name = 'eighth'
 

 This is a bit awkward, and I'm wondering if there's a more Pythonic way to handle this problem. A couple of ideas come to mind. 

 
 Dictionary hack: 

 name = {a and b and c: 'first',
  a and b and not c: 'second',
  a and not b and c: 'third',
  a and not b and not c: 'fourth',
  not a and b and c: 'fifth',
  not a and b and not c: 'sixth',
  not a and not b and c: 'seventh',
  not a and not b and not c: 'eighth'}[True]
 
 

 I call it a hack because I'm not too wild about seven of the keys being False and overriding each other. 

 
 And/or magic 

 name = (a and b and c and 'first' or
  a and b and not c and 'second' or
  a and not b and c and 'third' or
  a and not b and not c and 'fourth' or
  not a and b and c and 'fifth' or
  not a and b and not c and 'sixth' or
  not a and not b and c and 'seventh' or
  not a and not b and not c and 'eighth')
 
 

 This works because Python ands and ors return the last value to be evaluated, but you have to know that in order to understand this otherwise bizarre code. 

 None of these three options is very satisfying. What do you recommend? 
 Answers (Total-9): #0 You can think of a, b, and c as three bits that when put together form a number between 0 and 7. Then, you can have an array of the values ['first', 'second', ... 'eighth'] and use the bit value as an offset into the array. This would just be two lines of code (one to assemble the bits into a value from 0-7, and one to lookup the value in the array). 

 Here's the code: 

 nth = ['eighth', 'seventh', 'sixth', 'fifth', 'fourth', 'third', 'second', 'first']
nth[(a and 4 or 0) | (b and 2 or 0) | (c and 1 or 0)]
 
 #1 How about using a dict? 

 name = {(True, True, True): "first", (True, True, False): "second",
  (True, False, True): "third", (True, False, False): "fourth",
  (False, True, True): "fifth", (False, True, False): "sixth",
  (False, False, True): "seventh", (False, False, False): "eighth"}

print name[a,b,c] # prints "fifth" if a==False, b==True, c==True etc.
 
 #2 Maybe not much better, but how about 

 results = ['first', 'second', 'third', 'fourth', 
   'fifth', 'sixth', 'seventh', 'eighth']
name = results[((not a) &lt;&lt; 2) + ((not b) &lt;&lt; 1) + (not c)]
 
 #3 if a,b,c are really booleans: 

 li = ['eighth', 'seventh', 'sixth', 'fifth', 'fourth', 'third', 'second', 'first']
name = li[a*4 + b*2 + c]
 

 if they are not booleans: 

 li = ['eighth', 'seventh', 'sixth', 'fifth', 'fourth', 'third', 'second', 'first']
a,b,c = map(bool,(a,b,c))
name = li[a*4 + b*2 + c]
 

 idea from Clint Miller 
 #4 Since your getting all the combinations, you could create an index based on the values like this: 

 def value(a,b,c ): 
 values = ['8th','7th','6th','5th','4th','3rd','2nd','1st']
 index = ( 4 if a else 0 ) + ( 2 if b else 0 ) + ( 1 if c else 0 )
 return values[index]

if __name__ == "__main__":
 print value(True, True, True )
 print value(True, True, False )
 print value(True, False, True )
 print value(True, False, False )
 print value(False, True, True )
 print value(False, True, False)
 print value(False, False, True )
 print value(False, False, False)
 

 output: 

 1st
2nd
3rd
4th
5th
6th
7th
8th
 
 #5 What about nested ifs - it means you don't have to check everything several times and reads clearer to me (although maybe not quite as clever as some of the other answers): 

 if a:
 if b:
  if c:
   name="first"
  else:
   name="second"
 else:
  if c:
   name="third"
  else:
   name="fourth"
else:
 if b:
  if c:
   name="fifth"
  else:
   name="sixth"
 else:
  if c:
   name="seventh"
  else:
   name="eighth"
 
 #6 To measure speeds: 

 from time import clock
a,b,c = True,False,False

A,B,C,D,E,F,G,H = [],[],[],[],[],[],[],[]


for j in xrange(30):


 te = clock()
 for i in xrange(10000):
  name = (a and b and c and 'first' or
    a and b and not c and 'second' or
    a and not b and c and 'third' or
    a and not b and not c and 'fourth' or
    not a and b and c and 'fifth' or
    not a and b and not c and 'sixth' or
    not a and not b and c and 'seventh' or
    not a and not b and not c and 'eighth')
 A.append(clock()-te)



 te = clock()
 for i in xrange(10000):
  if a and b and c:
   name = 'first'
  elif a and b and not c:
   name = 'second'
  elif a and not b and c:
   name = 'third'
  elif a and not b and not c:
   name = 'fourth'
  elif not a and b and c:
   name = 'fifth'
  elif not a and b and not c:
   name = 'sixth'
  elif not a and not b and c:
   name = 'seventh'
  elif not a and not b and not c:
   name = 'eighth'
 B.append(clock()-te)

 #=====================================================================================

 li = ['eighth', 'seventh', 'sixth', 'fifth', 'fourth', 'third', 'second', 'first']
 te = clock()
 for i in xrange(10000):
  name = li[a*4 + b*2 + c]
 C.append(clock()-te)

 #=====================================================================================

 nth = ['eighth', 'seventh', 'sixth', 'fifth', 'fourth', 'third', 'second', 'first']
 te = clock()
 for i in xrange(10000):
  name = nth[(a and 4 or 0) | (b and 2 or 0) | (c and 1 or 0)]
 D.append(clock()-te)


 nth = ['eighth', 'seventh', 'sixth', 'fifth', 'fourth', 'third', 'second', 'first']
 te = clock()
 for i in xrange(10000):
  name = nth[(a and 4 or 0) + (b and 2 or 0) + (c and 1 or 0)]
 E.append(clock()-te)

 #=====================================================================================

 values = ['eighth', 'seventh', 'sixth', 'fifth', 'fourth', 'third', 'second', 'first']
 te = clock()
 for i in xrange(10000):
  name = values[( 4 if a else 0 )| ( 2 if b else 0 ) | ( 1 if c else 0 )]
 F.append(clock()-te)


 values = ['eighth', 'seventh', 'sixth', 'fifth', 'fourth', 'third', 'second', 'first']
 te = clock()
 for i in xrange(10000):
  name = values[( 4 if a else 0 ) + ( 2 if b else 0 ) + ( 1 if c else 0 )]
 G.append(clock()-te)

 #=====================================================================================

 dic = {(True, True, True): "first",
   (True, True, False): "second",
   (True, False, True): "third",
   (True, False, False): "fourth",
   (False, True, True): "fifth",
   (False, True, False): "sixth",
   (False, False, True): "seventh",
   (False, False, False): "eighth"}
 te = clock()
 for i in xrange(10000):
  name = dic[a,b,c]
 H.append(clock()-te)




print min(A),'\n', min(B),'\n\n', min(C),'\n\n', min(D),'\n',min(E),'\n\n',min(F),'\n', min(G),'\n\n', min(H)
 

 Result 

 0.0480533140385 
0.0450973517584 

0.0309056039245 

0.0295291720037 
0.0286550385594 

0.0280122194301 
0.0266760160858 

0.0249769174574
 
 #7 I'd go for the list/bits solution of @OscarRyz, @Clint and @Sven, but here's another one: 

 
S1 = frozenset(['first', 'second', 'third', 'fourth'])
S2 = frozenset(['first', 'second', 'fifth', 'sixth'])
S3 = frozenset(['first', 'third', 'fifth', 'seventh'])
last = 'eighth'
empty = frozenset([]) 

 def value(a, b, c):
 for r in (a and S1 or empty) &amp; (b and S2 or empty) &amp; (c and S3 or empty):
  return r
 return last 

 
 #8 Another option would be to create a helper function: 

 def first_true(*args):
 true_vals = (arg for arg in args if arg[0])
 return next(true_vals)[1]

name = first_true((a and b and c, 'first'),
     (a and b and not c, 'second'),
     (a and not b and c, 'third'),
     (a and not b and not c, 'fourth'),
     (not a and b and c, 'fifth'),
     (not a and b and not c, 'sixth'),
     (not a and not b and c, 'seventh'),
     (not a and not b and not c, 'eighth'))
 

 This method assumes that one of the tests passed in will be true. It could also be made lazier with lambdas.