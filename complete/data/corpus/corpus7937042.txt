Question (ID-7937042): How to remove the row that has special characters in it I have a large text file that has a lot of special characters in it like "$!@%#$/" plus many more and I would like to remove the line in the text file if it has any special characters in that line. The only characters I want to keep is a-z and A-Z. 

 If this was the file... 

 !Somejunk)(^%
)%(&amp;_
this
my_file
is
*(%%$
the
they're
file
 

 Then the only thing that would be left would be... 

 this
is
the
file
 

 A solution with linux command line tools, or a bash script, or a python script would be better, but anything that works will do! 
 Answers (Total-7): #0 $ grep '^[[:alpha:]]\+$' &lt;&lt; EOF
&gt; !Somejunk)(^%
&gt; )%(&amp;_
&gt; this
&gt; my_file
&gt; is
&gt; *(%%$
&gt; the
&gt; they're
&gt; file
&gt; EOF
this
is
the
file
 
 #1 This seems to work: 

 sed '/[^[:alpha:]]/d' source_file
 
 #2 If you want to keep ONLY lines with alpha characters (as the OP requested), then: 

 $ grep -v '[^a-zA-Z]' foo
 

 Or if you only want English characters: 

 $ grep -v '[^abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ]' foo
 

 But if you just want to remove non-alpha characters, sed will do the job: 

 $ cat foo | sed 's/[^a-zA-Z]//g'
 

 Or if you just want to kill binary , non-printable data, use strings: 

 $ strings foo
 
 #3 grep -v and some regex? 

 say,
 egrep -v '[^a-zA-Z]' 
 #4 You can use the following command to filter out the required lines: 

 grep '^[A-Za-z ]\+$' file 

 If you don't even allow spaces in rows, you may omit out space after z . 
 #5 or like this completely in bash 

 #!/bin/bash

file=$(cat file.txt);

for line in $file; do
 if [[ $line =~ ^[a-zA-Z]+$ ]]; then
  echo $line
 fi
done
 
 #6 I'm going to take the really nooby approach. 

 x = open('file','r')
y = x.read().split('\n')
x.close()

for z in range (0, len(y)):
 for a in range (0, len(y[z])):
  if not y[z][a].isalpha() and not y[z][a].isdigit():
   y[z][a] = ''

OutputString = '\n'.join(y)