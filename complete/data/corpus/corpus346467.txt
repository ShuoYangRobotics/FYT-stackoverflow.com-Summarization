Question (ID-346467): Format numbers in django templates I'm trying to format numbers. Examples: 

 1  =&gt; 1
12 =&gt; 12
123 =&gt; 123
1234 =&gt; 1,234
12345 =&gt; 12,345
 

 It strikes as a fairly common thing to do but I can't figure out which filter I'm supposed to use. 

 Edit: If you've a generic Python way to do this, I'm happy adding a formatted field in my model. 
 Answers (Total-7): #0 Django's contributed humanize application does this: 

 {% load humanize %}
{{ my_num|intcomma }}
 

 Be sure to add 'django.contrib.humanize' to your INSTALLED_APPS list in settings.py 
 #1 Regarding Ned Batchelder's solution, here it is with 2 decimal points and a dollar sign. 

 from django.contrib.humanize.templatetags.humanize import intcomma

def currency(dollars):
 dollars = float(dollars)
 return "$%s%s" % (intcomma(int(dollars)), ("%0.2f" % dollars)[-3:])
 

 Then you can 

 {{my_dollars | currency}}
 
 #2 If you don't want to get involved with locales here is a function that formats numbers: 

 def int_format(value, decimal_points=3, seperator=u'.'):
 value = str(value)
 if len(value) &lt;= decimal_points:
  return value
 # say here we have value = '12345' and the default params above
 parts = []
 while value:
  parts.append(value[-decimal_points:])
  value = value[:-decimal_points]
 # now we should have parts = ['345', '12']
 parts.reverse()
 # and the return value should be u'12.345'
 return seperator.join(parts)
 

 Creating a custom template filter from this function is trivial. 
 #3 Be aware that changing locale is process-wide and not thread safe (iow., can have side effects or can affect other code executed within the same process). 

 My proposition: check out the Babel package. Some means of integrating with Django templates are available. 
 #4 As far as I can tell it is not currently possible: Django Users: locale aware number formats 
 #5 The humanize app offers a nice and a quick way of formatting a number but if you need to use a separator different from the comma, it's simple to just reuse the code from the humanize app , replace the separator char, and create a custom filter . For example, use space as a separator: 

 @register.filter('intspace')
def intspace(value):
 """
 Converts an integer to a string containing spaces every three digits.
 For example, 3000 becomes '3 000' and 45000 becomes '45 000'.
 See django.contrib.humanize app
 """
 orig = force_unicode(value)
 new = re.sub("^(-?\d+)(\d{3})", '\g&lt;1&gt; \g&lt;2&gt;', orig)
 if orig == new:
  return new
 else:
  return intspace(new)
 
 #6 Well I couldn't find a Django way, but I did find a python way from inside my model: 

 def format_price(self):
 import locale
 locale.setlocale(locale.LC_ALL, '')
 return locale.format('%d', self.price, True)