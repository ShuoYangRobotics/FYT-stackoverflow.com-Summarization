Question (ID-3975376): Understanding dict.copy() - shallow or deep? While reading up the documentation for dict.copy() , it says that it makes a shallow copy of the dictionary. Same goes for the book I am following (Beazley's Python Reference), which says: 

 
 The m.copy() method makes a shallow
 copy of the items contained in a
 mapping object and places them in a
 new mapping object. 
 

 Consider this: 

 &gt;&gt;&gt; original = dict(a=1, b=2)
&gt;&gt;&gt; new = original.copy()
&gt;&gt;&gt; new.update({'c': 3})
&gt;&gt;&gt; original
{'a': 1, 'b': 2}
&gt;&gt;&gt; new
{'a': 1, 'c': 3, 'b': 2}
 

 So I assumed this would update the value of original (and add 'c': 3) also since I was doing a shallow copy. Like if you do it for a list: 

 &gt;&gt;&gt; original = [1, 2, 3]
&gt;&gt;&gt; new = original
&gt;&gt;&gt; new.append(4)
&gt;&gt;&gt; new, original
([1, 2, 3, 4], [1, 2, 3, 4])
 

 This works as expected. 

 Since both are shallow copies, why is that the dict.copy() doesn't work as I expect it to? Or my understanding of shallow vs deep copying is flawed? 
 Answers (Total-6): #0 By "shallow copying" it means the content of the dictionary is not copied by value, but just creating a new reference. 

 &gt;&gt;&gt; a = {1: [1,2,3]}
&gt;&gt;&gt; b = a.copy()
&gt;&gt;&gt; a, b
({1: [1, 2, 3]}, {1: [1, 2, 3]})
&gt;&gt;&gt; a[1].append(4)
&gt;&gt;&gt; a, b
({1: [1, 2, 3, 4]}, {1: [1, 2, 3, 4]})
 

 In contrast, a deep copy will copy all contents by value. 

 &gt;&gt;&gt; c = copy.deepcopy(a)
&gt;&gt;&gt; a, c
({1: [1, 2, 3, 4]}, {1: [1, 2, 3, 4]})
&gt;&gt;&gt; a[1].append(5)
&gt;&gt;&gt; a, c
({1: [1, 2, 3, 4, 5]}, {1: [1, 2, 3, 4]})
 

 So: 

 
 a = b : Reference assignment, Make a and b points to the same object. 

 a ---,
  v
  {1: L}
  ^ |
b ---' '----&gt; [1,2,3]
 
 a = b.copy() : Shallow copying, a and b will become two isolated objects, but their contents still share the same reference 

 a ---&gt; {1: L}
   |    
   &gt;---&gt; [1,2,3]
   |
b ---&gt; {1: M}
 
 a = copy.deepcopy(b) : Deep copying, a and b 's structure and content become completely isolated. 

 a ---&gt; {1: L}
   ‘-----&gt; [1,2,3]
b ---&gt; {1: M}
   ‘-----&gt; [1,2,3]
 
 
 #1 "new" and "original" are different dicts, that's why you can update just one of them.. The items are shallow-copied, not the dict itself. 
 #2 Take this example: 

 original = dict(a=1, b=2, c=dict(d=4, e=5))
new = original.copy()
 

 Now let's change a value in the 'shallow' (first) level: 

 new['a'] = 10
# new = {'a': 10, 'b': 2, 'c': {'d': 4, 'e': 5}}
# original = {'a': 1, 'b': 2, 'c': {'d': 4, 'e': 5}}
# no change in original, since ['a'] is an immutable integer
 

 Now let's change a value one level deeper: 

 new['c']['d'] = 40
# new = {'a': 10, 'b': 2, 'c': {'d': 40, 'e': 5}}
# original = {'a': 1, 'b': 2, 'c': {'d': 40, 'e': 5}}
# new['c'] points to the same original['d'] mutable dictionary, so it will be changed
 
 #3 
 The m.copy() method makes a shallow
 copy of the items contained in a
 mapping object and places them in a
 new mapping object. 
 

 So the dict does get deepcopied, but the items in it don't. Since the items in the dict are integers, they get 'deep'copied, since there is no such thing as shallow copying small integers. 

 Edit: Never mind, see below. 
 #4 Contents are shallow copied. 

 So if the original dict contains a list or another dictionary , modifying one them in the original or its shallow copy will modify them (the list or the dict ) in the other. 
 #5 It's not a matter of deep copy or shallow copy, none of what you're doing is deep copy. 

 Here: 

 &gt;&gt;&gt; new = original 
 

 you're creating a new reference to the the list/dict referenced by original. 

 while here: 

 &gt;&gt;&gt; new = original.copy()
&gt;&gt;&gt; # or
&gt;&gt;&gt; new = list(original) # dict(original)
 

 you're creating a new list/dict which is filled with a copy of the references of objects contained in the original container.