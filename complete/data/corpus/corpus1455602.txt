Question (ID-1455602): Printing tuple with string formatting in Python So, i have this problem.
I got tuple (1,2,3) which i should print with string formatting.
eg.
tup = (1,2,3)
print "this is a tuple %something" % (tup) 

 and this should print tuple representation with brackets, like
This is a tuple (1,2,3) 

 How in the world am I able to do this? Kinda lost here so if you guys could point me to a right direction :) 
 Answers (Total-6): #0 &gt;&gt;&gt; thetuple = (1, 2, 3)
&gt;&gt;&gt; print "this is a tuple: %s" % (thetuple,)
this is a tuple: (1, 2, 3)
 

 Making a singleton tuple with the tuple of interest as the only item, i.e. the (thetuple,) part, is the key bit here. 
 #1 This doesn't use string formatting, but you should be able to do: 

 print 'this is a tuple ', (1, 2, 3)
 

 If you really want to use string formatting: 

 print 'this is a tuple %s' % str((1, 2, 3))
# or
print 'this is a tuple %s' % ((1, 2, 3),)
 

 Note, this assumes you are using a Python version earlier than 3.0. 
 #2 &gt;&gt;&gt; tup = (1, 2, 3)
&gt;&gt;&gt; print "Here it is: %s" % (tup,)
Here it is: (1, 2, 3)
&gt;&gt;&gt;
 

 Note that (tup,) is a tuple containing a tuple. The outer tuple is the argument to the % operator. The inner tuple is its content, which is actually printed. 

 (tup) is an expression in brackets, which when evaluated results in tup . 

 (tup,) with the trailing comma is a tuple, which contains tup as is only member. 
 #3 Check out the pprint module. 
 #4 t = (1, 2, 3)

# the comma (,) concatenates the strings and adds a space
print "this is a tuple", (t)

# format is the most flexible way to do string formatting
print "this is a tuple {0}".format(t)

# classic string formatting
# I use it only when working with older Python versions
print "this is a tuple %s" % repr(t)
print "this is a tuple %s" % str(t)
 
 #5 I think the best way to do this is: 

 t = (1,2,3)

print "This is a tuple: %s" % str(t)
 

 If you're familiar with printf style formatting, then Python supports its own version. In Python, this is done using the "%" operator applied to strings (an overload of the modulo operator), which takes any string and applies printf-style formatting to it. 

 In our case, we are telling it to print "This is a tuple: ", and then adding a string "%s", and for the actual string, we're passing in a string representation of the tuple (by calling str(t)). 

 If you're not familiar with printf style formatting, I highly suggest learning, since it's very standard. Most languages support it in one way or another.