Question (ID-5249348): creating a reverse method for a python list from scratch I want to create a reverse method for a list. I know there already is such a method built into python but I want to try it from scratch. Here's what I have and it seems to make sense to me but it just returns the list in the same order. My understanding was that lists are mutable and I could just reassign values in the loop. 

 def reverse(data_list):
 length = len(data_list)
 s = length

 for item in data_list:
  s = s - 1
  data_list[s] = item
 return data_list
 
 Answers (Total-6): #0 def reverse(data_list):
 return data_list[::-1]
 

 
>> reverse([1,2,3,4,5])
[5, 4, 3, 2, 1]
 
 #1 an easy way in python (without using the reverse function) is using the [] access operator with negative values such as (print and create a new list in reverse order): 

 x = [1, 2 ,3, 4, 5]
newx = []
for i in range(1, len(x)+1):
 newx.append(x[-i])
 print x[-i]
 

 the function would be: 

 def reverse(list)
 newlist = []
 for i in range(1, len(list)+1):
 newlist.append(list[-1])
 return newlist
 
 #2 By the time you are half-way through the list, you have swapped all the items; as you continue through the second half, you are swapping them all back to their original locations again. 

 Instead try 

 def reverse(lst):
 i = 0   # first item
 j = len(lst)-1 # last item
 while i&lt;j:
  lst[i],lst[j] = lst[j],lst[i]
  i += 1
  j -= 1
 return lst
 

 This can be used in two ways: 

 a = [1,2,3,4,5]
reverse(a)  # in-place
print a   # -&gt; [5,4,3,2,1]

b = reverse(a[:]) # return the result of reversing a copy of a
print a   # -&gt; [5,4,3,2,1]
print b   # -&gt; [1,2,3,4,5]
 
 #3 I do not get the same list when I try to run your code. But I also do not get a reversed list because the list is moving forward through the list state which is changing from end back. I think the way you are looking to do it is: 

 def reverse(data_set):
 length = len(data_set)

 for i in range(0, length / 2):
 length = length - 1
 hold = data_set[i]
 data_set[i] = data_set[length]
 data_set[length] = hold
 return data_set
 

 here we actually reverse in half the iterations and we memoize the value of the index we are changing so we can set the "reversal" in the same step. 
 #4 You are changing the list that you iterate on it (data_list) because of that it's not working , try like this: 

 def reverse(data_list):
 length = len(data_list)
 s = length

 new_list = [None]*length

 for item in data_list:
  s = s - 1
  new_list[s] = item
 return new_list
 
 #5 Something like this should work: 

 mylist = [1,2,3,4,5]
def reverse(orig_list):
 data_list = orig_list[:]
 length = len(data_list)
 for i in xrange(0, length/2):
  tmp = data_list[length-i-1]
  data_list[length-i-1] = data_list[i]
  data_list[i] = tmp
 return data_list

reverse(mylist)
mylist