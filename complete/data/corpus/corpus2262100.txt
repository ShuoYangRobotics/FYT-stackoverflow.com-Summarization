Question (ID-2262100): RGB Int to RGB - Python How can I convert an RGB integer to the corresponding RGB tuple (R,G,B) ? Seems simple enough, but I can't find anything on google. 

 I know that for every RGB (r,g,b) you have the integer n = r256^2 + g256 + b , how can I solve the reverse in Python, IE given an n , I need the r , g , b values. 
 Answers (Total-7): #0 I'm not a Python expert by all means, but as far as I know it has the same operators as C. 

 If so this should work and it should also be a lot quicker than using modulo and division. 

 Blue = RGBint &amp; 255
Green = (RGBint &gt;&gt; 8) &amp; 255
Red = (RGBint &gt;&gt; 16) &amp; 255
 

 What it does it to mask out the lowest byte in each case (the binary and with 255.. Equals to a 8 one bits). For the green and red component it does the same, but shifts the color-channel into the lowest byte first. 
 #1 From a RGB integer: 

 Blue = RGBint mod 256
Green = RGBint / 256 mod 256
Red = RGBint / 256 / 256 mod 256
 

 This can be pretty simply implemented once you know how to get it. :) 

 Upd: Added python function. Not sure if there's a better way to do it, but this works on Python 3 and 2.4 

 def rgb_int2tuple(rgbint):
 return (rgbint // 256 // 256 % 256, rgbint // 256 % 256, rgbint % 256)
 

 There's also an excellent solution that uses bitshifting and masking that's no doubt much faster that Nils Pipenbrinck posted. 
 #2 I assume you have a 32-bit integer containing the RGB values (e.g. ARGB). Then you can unpack the binary data using the struct module: 

 # Create an example value (this represents your 32-bit input integer in this example).
# The following line results in exampleRgbValue = binary 0x00FF77F0 (big endian)
exampleRgbValue = struct.pack("&gt;I", 0x00FF77F0)

# Unpack the value (result is: a = 0, r = 255, g = 119, b = 240)
a, r, g, b = struct.unpack("BBBB", exampleRgbValue)
 
 #3 def unpack2rgb(intcol):
 tmp, blue= divmod(intcol, 256)
 tmp, green= divmod(tmp, 256)
 alpha, red= divmod(tmp, 256)
 return alpha, red, green, blue
 

 If only the divmod(value, (divider1, divider2, divider3â€¦)) suggestion was accepted, it would have simplified various time conversions too. 
 #4 &gt;&gt;&gt; import struct
&gt;&gt;&gt; str='aabbcc'
&gt;&gt;&gt; struct.unpack('BBB',str.decode('hex'))
(170, 187, 204)
 

 and 

 &gt;&gt;&gt; rgb = (50,100,150)
&gt;&gt;&gt; struct.pack('BBB',*rgb).encode('hex')
'326496'
 
 #5 There's probably a shorter way of doing this: 

 dec=10490586
hex="%06x" % dec
r=hex[:2]
g=hex[2:4]
b=hex[4:6]
rgb=(r,g,b)
 

 EDIT: this is wrong - gives the answer in Hex, OP wanted int.
EDIT2: refined to reduce misery and failure - needed '%06x' to ensure hex is always shown as six digits [thanks to Peter Hansen's comment]. 
 #6 &gt;&gt;&gt; r, g, b = (111, 121, 131)
&gt;&gt;&gt; packed = int('%02x%02x%02x' % (r, g, b), 16)
 

 This produces the following integer: 

 &gt;&gt;&gt; packed
7305603
 

 You can then unpack it either the long explicit way: 

 &gt;&gt;&gt; packed % 256
255
&gt;&gt;&gt; (packed / 256) % 256
131
&gt;&gt;&gt; (packed / 256 / 256) % 256
121
&gt;&gt;&gt; (packed / 256 / 256 / 256) % 256
111
 

 ..or in a more compact manner: 

 &gt;&gt;&gt; b, g, r = [(packed &gt;&gt; (8*i)) &amp; 255 for i in range(3)]
&gt;&gt;&gt; r, g, b
 

 Sample applies with any number of digits, e.g an RGBA colour: 

 &gt;&gt;&gt; packed = int('%02x%02x%02x%02x' % (111, 121, 131, 141), 16)
&gt;&gt;&gt; [(packed &gt;&gt; (8*i)) &amp; 255 for i in range(4)]
[141, 131, 121, 111]