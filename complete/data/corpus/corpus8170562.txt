Question (ID-8170562): Python: reduce on tuple of tuples I am trying to compute in Python the length of the path from a point A to a point B going through a list of intermediary points. I know how to do it but I do want to use the reduce Built-in function . 

 Why I tried so far, please note that it is completely wrong , is this: 

 reduce(lambda x,y: math.sqrt((y[1]-y[0])**2+(x[1]-x[0])**2) , ((1,2),(3,4),(1,8)))
 

 Any idea? 

 Thanks. 
 Answers (Total-8): #0 You should map before you reduce. 

 points = [(1, 2), (3, 4), (1, 8)]
distances = (math.hypot(b[0]-a[0], b[1]-a[1])
    for a, b in zip(points, points[1:]))
total_distance = sum(distances)
 

 or, if you must use reduce() , although sum() is better for this purpose: 

 import operator

total_distance = reduce(operator.add, distances)
 

 If you have a lot of points, you might find NumPy helpful in doing this all at once, quickly: 

 import numpy

total_distance = numpy.hypot(*numpy.diff(numpy.array(points), axis=0)).sum()
 

 Edit : use math.hypot() and add NumPy method. 
 #1 It isn't pretty but it can be done :-) 

 &gt;&gt;&gt; tot = ((1,2),(3,4),(1,8))
&gt;&gt;&gt; reduce(lambda d,((x0,y0),(x1,y1)): d + ((x1-x0)**2+(y1-y0)**2)**0.5, zip(tot[1:], tot[0:]), 0.0)
7.3005630797457695
 
 #2 reduce() is simply the wrong tool for this purpose. It is possible to do it with reduce() , but it is a bit weird: 

 def distance((x, d), y):
 return y, d + math.hypot(y[0] - x[0], y[1] - x[1])

print reduce(distance, [(3,4),(1,8)], ((1, 2), 0.0))[1]
 

 prints 

 7.30056307975
 

 The last parameter passed to the reduce() call is the starting point and the initial value for the distance. 
 #3 reduce does not work that way, you start with an initial value a, which you specify or is taken as first element from your iterable. afterwards, you pass a,next_element to the function (lambda) provided and store the result in a, repeat until all elements are iterated. 

 You can do what you want with sum and map by first calculating all distances from one point to the next and then summing them: 

 path = [(1,2),(3,4),(1,8)]
sum(map(lambda x,y: math.sqrt((x[0]-y[0])**2+(x[1]-y[1])**2), path[:-1],path[1:]))
 

 edit: or with the hypot function (thx @ralu): 

 sum(map(lambda x,y: math.hypot(x[0]-y[0],x[1]-y[1]), path[:-1],path[1:]))
 
 #4 Here is a redux meta-iterator that can be combined with the built-in reduce to get the result you want. This implementation avoids all buffering of the input sequence. 

 def redux(f):
 def execute(iterable):
 iterable = iter(iterable)
 try:
  state = iterable.next()
 except StopIteration:
  raise ValueError, 'empty sequences not supported'
 while True:
  newstate = iterable.next()
  yield f(state, newstate)
  state = newstate
 return execute

f = redux(lambda x, y: math.sqrt((y[0] - x[0])**2 + (y[1] - x[1])**2))
print reduce(operator.add, f(((1,2),(3,4),(1,8))))
 

 The above prints 7.30056307975 . 

 The redux function can be generalized to support more than two arguments at a time in a sliding window, by using inspect.getargspec to count the number of arguments required by its function argument. 
 #5 This is just not the sort of code you want to write.
Reduce won't be a good solution. 

 I suggest a iterative one.
It will be the most readable, pythonic and maintainable solution. 

 import math
path = [(1,2),(3,4),(1,8)]

def calc_dist(waypoints):
 dist = 0.0
 for i in range(len(waypoints) - 1):
  a = waypoints[i]
  b = waypoints[i+1]
  dist += math.hypot(a[0]-b[0], b[1]-a[1])
 return dist

print calc_dist( path )
 
 #6 I'm aware that what I'm about to suggest is not ideal, but I think this is as close as I can get for my contribution. This is a fun problem to solve, even if it isn't the most traditional application of reduce. 

 The key issue seems to be keeping track of the distance from point to point without overwriting the points themselves- adding another 'dimension' to each point gives you a field with which you can track the running distance. 

 iterable = ((1,2,0), (3,4,0), (1,8,0))
# originally ((1,2), (3,4), (1,8))

from math import sqrt

def func(tup1, tup2):
 '''function to pass to reduce'''

 # extract coordinates
 x0 = tup1[0]
 x1 = tup2[0]
 y0 = tup1[1]
 y1 = tup2[1]

 dist = tup1[2] # retrieve running total for distance

 dx = x1 - x0 # find change in x
 dy = y1 - y0 # find change in y

 # add new distance to running total
 dist += sqrt(dx**2 + dy**2) 

 # return 2nd point with the updated distance
 return tup2[:-1] + (dist,) # e.g. (3, 4, 2.828)
 

 Now reduce: 

 reduce(func, iterable)[-1]
# returns 7.3005630797457695
 

 This way, the intermediate tuple of tuples (i.e., after one 'reduction') becomes: 

 ((3, 4, 2.8284271247461903), (1,8,0))
 
 #7 Just for fun, here is an alternate solution with a slightly different approach than the reduce(sum, map(hypot, zip(...))) approach. 

 tot = ((1,2),(3,4),(1,8))
reduce(lambda (d,(x,y)),b: (d+math.hypot(x-b[0],y-b[1]), b), tot, (0, tot[0]))[0]
 

 Note that the reduce actually returns the tuple (distance, last point), hence the [0] at the end. I think this would be more efficient than zip solutions but haven't actually checked.