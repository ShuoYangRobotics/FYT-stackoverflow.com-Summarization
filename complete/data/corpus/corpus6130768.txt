Question (ID-6130768): Return None if Dictionary key is not available I need a way to get a dictionary value if its key exists, or simply return None, if it does not. 

 However, Python returns a key_error if you search for a key that does not exist. I know that I can check for the key, but I am looking for something more explicit. Is there a way to just return None if the key does not exist ? 
 Answers (Total-8): #0 You can use get() 

 value = d.get(key)
 

 which will return None if key is not in d or provide a different default value: 

 value = d.get(key, "empty")
 
 #1 Use dict.get 
 #2 Wonder no more. It's built into the language. 

 
 >>> help(dict)

 Help on class dict in module builtins:

 class dict(object)
  | dict() -> new empty dictionary
  | dict(mapping) -> new dictionary initialized from a mapping object's
  |  (key, value) pairs
 ...
  | 
  | get(...)
  |  D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None.
  | 
 ...
 
 #3 You should use the get() method from the dict class 

 d = {}
r = d.get( 'missing_key', None )
 

 This will result in r == None. If the key isn't found in the dictionary, the get function returns the second argument. 
 #4 If you want a more transparent solution, you can subclass dict to get this behavior: 

 class NoneDict(dict):
 def __getitem__(self, key):
  return dict.get(self, key)

&gt;&gt;&gt; foo = NoneDict([(1,"asdf"), (2,"qwerty")])
&gt;&gt;&gt; foo[1]
'asdf'
&gt;&gt;&gt; foo[2]
'qwerty'
&gt;&gt;&gt; foo[3] is None
True
 
 #5 As others have said above, you can use get(). 

 But to check for a key, you can also do: 

 d = {}
if 'keyname' in d:

 # d['keyname'] exists
 pass

else:

 # d['keyname'] does not exist
 pass
 
 #6 I usually use a defaultdict for situations like this. You supply a factory method that takes no arguments and creates a value when it sees a new key. It's more useful when you want to return something like an empty list on new keys ( see the examples ). 

 from collections import defaultdict
d = defaultdict(lambda : None)
print d['new_key'] #prints 'None'
 
 #7 You could use a dict object's get() method, as others have already suggested. Alternatively, depending on exactly what you're doing, you might be able use a try/except suite like this: 

 try:
 &lt;to do something with d[key]&gt;
except KeyError:
 &lt;deal with it not being there&gt;
 

 Which is considered to be a very "Pythonic" approach to handling the case.