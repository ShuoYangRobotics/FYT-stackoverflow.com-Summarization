Question (ID-6478845): Python split consecutive delimiters The default split method in Python treats consecutive spaces as a single delimiter. But if you specify a delimiter string, consecutive delimiters are not collapsed: 

 &gt;&gt;&gt; 'aaa'.split('a')
['', '', '', '']
 

 What is the most straightforward way to collapse consecutive delimiters? I know I could just remove empty strings from the result list: 

 &gt;&gt;&gt; result = 'aaa'.split('a')
&gt;&gt;&gt; result
['', '', '', '']
&gt;&gt;&gt; result = [item for item in result if item]
 

 But is there a more convenient way? 
 Answers (Total-6): #0 You can use a regular expression as the delimiter, as in : 

 re.split(pattern, string[, maxsplit=0, flags=0])
 

 From the docs . 
 #1 This is about as concise as you can get: 

 string = 'aaa'
result = [s for s in string.split('a') if s]
 

 Or you could switch to regular expressions: 

 string = 'aaa'
result = re.split('a+', string)
 
 #2 You could use regular expressions: 

 re.split(pattern, string[, maxsplit=0, flags=0])
 

 as 

 re.split('a+', 'aaa')
 
 #3 No, there isn't a more convenient way. Either you write your own split function, or do the removing empty strings. 

 But your solution seems very clear and pythonic. 
 #4 Although it's not exactly what you asked for, you can get rid of all non-unique tokens by using a set : 

 &gt;&gt;&gt; result
['', '', '']
&gt;&gt;&gt; set(result)
set([''])
 
 #5 I think your solution is perfectly OK. Here's an equivalent one: 

 filter(bool, 'aaa'.split('a'))
 

 Probably not as perspicuous as a list comprehension, though.