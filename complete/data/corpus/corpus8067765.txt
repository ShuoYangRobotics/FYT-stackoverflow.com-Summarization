Question (ID-8067765): python list copy: is there a difference between old[:] and list(old)? old = [1, 2, 3]
 

 What is the difference between the following two lines (if there is any)? 

 new = old[:]
new = list(old)
 

 Update I had already accepted ubershmekel's answer but later I've learned an interesting fact: [:] is faster for small list (10 elements) but list() is faster for larger list (100000 elements). 

 ~$ python -S -mtimeit -s "a = list(range(10))" "a[:]"
1000000 loops, best of 3: 0.198 usec per loop
~$ python -S -mtimeit -s "a = list(range(10))" "list(a)"
1000000 loops, best of 3: 0.453 usec per loop
~$ python -S -mtimeit -s "a = list(range(100000))" "a[:]"
1000 loops, best of 3: 675 usec per loop
~$ python -S -mtimeit -s "a = list(range(100000))" "list(a)"
1000 loops, best of 3: 664 usec per loop
 
 Answers (Total-6): #0 Yes there's a small difference. There was a discussion on this at /r/python recently after this blog post explained a readability difference, that [:] doesn't work with generators and keeps the same type as the original. 

 Technically, you get the same thing - a brand new list that still points to the same objects. Choose whichever one you like better (although [:] is a bit faster). Personally I agree with the blog post that list(old) is more readable. 

 To answer the comment about the specific difference, in python 3.2: 

 &gt;&gt;&gt; import dis
&gt;&gt;&gt; def colon(x):
...  return x[:]
...
&gt;&gt;&gt; def new_list(x):
...  return list(x)
...
&gt;&gt;&gt;
&gt;&gt;&gt; dis.dis(colon)
 2   0 LOAD_FAST    0 (x)
    3 LOAD_CONST    0 (None)
    6 LOAD_CONST    0 (None)
    9 BUILD_SLICE    2
    12 BINARY_SUBSCR
    13 RETURN_VALUE
&gt;&gt;&gt; dis.dis(new_list)
 2   0 LOAD_GLOBAL    0 (list)
    3 LOAD_FAST    0 (x)
    6 CALL_FUNCTION   1
    9 RETURN_VALUE
&gt;&gt;&gt;
 

 Why list(old) is slower I think is because the slicing mechanism doesn't need to "LOAD_GLOBAL" and "CALL_FUNCTION" on the list constructor, the entire operation is handled in C. 
 #1 If old is not a list, old[:] will be all the elements of old in the same kind of container as old (maybe a tuple or a string), while list(old) will be a list with the same elements. 

 I.e. if old is the string 'foo', old[:] will be the string 'foo', while list(old) wille be the list ['f', 'o', 'o']. 
 #2 If old is an array, then both are equivalent. But if old is some sort of iterator, only the list() syntax will work. For that reason, the second syntax is probably preferable, as it is more general. 
 #3 new = old[:] creates a copy of list old using the slice notation and stores it in new . 

 new = list(old) casts old to type list . It is already a list and it is assigned into new . 

 I believe these both give the same result. That is, new contains a copy of old . 
 #4 Nobody has yet mentioned that this functional difference between the two; list(a_generator) will work, while a_generator[:] makes no sense: 

 &gt;&gt;&gt; i = iter([1,2,3])
&gt;&gt;&gt; i[:]
Traceback (most recent call last):
 File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'listiterator' object is not subscriptable
&gt;&gt;&gt; list(i)
[1, 2, 3]
 
 #5 In the example you give, there is no difference: both result in a brand new list object with the same elements. 

 In general 

 
 new = old[:] will only work with objects that support slices, and new will be the same type as old 
 new = list(old) will work with any iterable, and new will be a list