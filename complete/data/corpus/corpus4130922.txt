Question (ID-4130922): how to increment datetime month in python i need to increment the month of a datetime value 

 next_month = datetime.datetime(mydate.year, mydate.month+1, 1)
 

 when the month is 12, it becomes 13 and raises error "month must be in 1..12". (I expected the year would increment) 

 I wanted to use timedelta, but it doesn't take month argument.
There is relativedelta python package, but i don't want to install it just only for this.
Also there is a solution using strtotime . 

 time = strtotime(str(mydate));
next_month = date("Y-m-d", strtotime("+1 month", time));
 

 I don't want to convert from datetime to str then to time, and then to datetime; therefore, it's still a library too 

 Does anyone have any good and simple solution just like using timedelta? 
 Answers (Total-6): #0 Edit - based on your comment of dates being needed to be rounded down if there are fewer days in the next month, here is a solution: 

 &gt;&gt;&gt; import datetime
&gt;&gt;&gt; import calendar
&gt;&gt;&gt;
&gt;&gt;&gt; def add_months(sourcedate,months):
...  month = sourcedate.month - 1 + months
...  year = sourcedate.year + month / 12
...  month = month % 12 + 1
...  day = min(sourcedate.day,calendar.monthrange(year,month)[1])
...  return datetime.date(year,month,day)
...
&gt;&gt;&gt; somedate = datetime.date.today()
&gt;&gt;&gt; somedate
datetime.date(2010, 11, 9)
&gt;&gt;&gt; add_months(somedate,1)
datetime.date(2010, 12, 9)
&gt;&gt;&gt; add_months(somedate,23)
datetime.date(2012, 10, 9)
&gt;&gt;&gt; otherdate = datetime.date(2010,10,31)
&gt;&gt;&gt; add_months(otherdate,1)
datetime.date(2010, 11, 30)
 

 Also, if you're not worried about hours, minutes and seconds you could use date rather than datetime . If you are worried about hours, minutes and seconds you need to modify my code to use datetime and copy hours, minutes and seconds from the source to the result. 
 #1 Well with some tweaks and use of timedelta here we go: 

 from datetime import datetime, timedelta


def inc_date(origin_date):
 day = origin_date.day
 month = origin_date.month
 year = origin_date.year
 if origin_date.month == 12:
  delta = datetime(year + 1, 1, day) - origin_date
 else:
  delta = datetime(year, month + 1, day) - origin_date
 return origin_date + delta

final_date = inc_date(datetime.today())
print final_date.date()
 
 #2 since no one suggested any solution, here is how i solved so far 

 year, month= divmod(mydate.month+1, 12)
if month == 0: 
  month = 12
  year = year -1
next_month = datetime.datetime(mydate.year + year, month, 1)
 
 #3 Perhaps add the number of days in the current month using calendar.monthrange()? 

 import calendar, datetime

def increment_month(when):
 days = calendar.monthrange(when.year, when.month)[1]
 return when + datetime.timedelta(days=days)

now = datetime.datetime.now()
print 'It is now %s' % now
print 'In a month, it will be %s' % increment_month(now)
 
 #4 Similar in ideal to Dave Webb's solution, but without all of that tricky modulo arithmetic: 

 import datetime, calendar

def increment_month(date):
 # Go to first of this month, and add 32 days to get to the next month
 next_month = date.replace(day=1) + datetime.timedelta(32)
 # Get the day of month that corresponds
 day = min(date.day, calendar.monthrange(next_month.year, next_month.month)[1])
 return next_month.replace(day=day)
 
 #5 example using the time object: 

 start_time = time.gmtime(time.time()) # start now

#increment one month
start_time = time.gmtime(time.mktime([start_time.tm_year, start_time.tm_mon+1, start_time.tm_mday, start_time.tm_hour, start_time.tm_min, start_time.tm_sec, 0, 0, 0]))