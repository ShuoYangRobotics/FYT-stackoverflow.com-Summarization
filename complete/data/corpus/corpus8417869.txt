Question (ID-8417869): scripting language to remove license preamble on files I want to recursively replace the "blah blah blah"
in my License region with nothing: 

 #region License
blah blah blah
blah blah blah
#endregion
 

 should be replaced with 

 #region License
#endregion
 

 This should apply to all of of my .cs files in a certain directory (recursive). I tried this with sed, but since I am on windows, I had some problems with line endings. How can I do this with perl (or python), or something native to windows? 

 EDIT: here is the solution I came up with, thanks to everyone here!: 

 #/bin/bash
list=`find . -name '*.cs' -o -name '*.h' -o -name '*.cpp'` 
for i in $list 
do
perl -i~ -ne 'if (/#region License/../#endregion/) {print if /#(?:end)? region/;next};print' $i 
done
 
 Answers (Total-8): #0 Something like this? 

 perl -i~ -pe 'undef $_ if /^#region License$/ .. /^#endregion$/'
 
 #1 Perl lets you use the range operator with regexes. 

 I guess this does what you mean: 

 cat &lt;yourfile&gt; | perl -e 'while (&lt;&gt;){ print unless /#region License/ ... /#endregion/ }'
 

 Edit:
Sorry, for windows it will not work like this. Here is a full example. 

 use strict;
use warnings;

while (&lt;DATA&gt;){
 print unless /#region License/ ... /#endregion/;
}

__DATA__

asdf
asdf
asdf

asdf
asdf
asdf

#region License
blah blah blah
blah blah blah
#endregion
asdf

asdf
asdf
asdf
 
 #2 #!/usr/bin/env python

with open('input') as fd:
 text=fd.read()

old="""#region License
blah blah blah
blah blah blah
#endregion

"""

new="""#region License
#endregion

"""

print text.replace(old,new)
 

 add some os.walk to traverse the directory and either write the result to stdout or replace original file with new content. See e.g. http://stackoverflow.com/a/5421671/297323 
 #3 perl -ne 'if (/#region/../#endregion/) {print if /#(?:end)?region/;next};print' file
 

 ...which leave the "#region license" and "#endregion" lines in the output as requested. 
 #4 ex ( vim -e ) maybe is a good choice. 

 echo -e 'g/^#region License$/+1,/^#endregion$/-1d\nx' | ex program.cs
 

 

 
 g/.../+1,/.../-1 => find lines between regexs( +1 => one line bellow, -1 => one line above) 
 d => delete 
 \n => Enter 
 x =>save and quit 
 

 

 In Windows, please use: 

 vim -c "g/^#region License/+1,/^#endregion/-1d" +x program.cs
 
 #5 read lines of the file, go thru each line if line starts with #region start skipping next lines, if lines ends with #endregion start collecting lines again, output final line into file e.g. 

 def filter_lines(lines):
 newlines = []
 startmarker = '#region'
 endmarker = '#endregion'
 skip = False
 for line in lines:

  if line.startswith(startmarker):
   newlines.append(line)
   skip = True
   continue
  if line.endswith(endmarker):
   skip = False

  if not skip: newlines.append(line)

 return newli
 

 nes 
 #6 python, in case the license bodies are all different in all sorts of unpredictable ways: 

 #!/usr/bin/env python

with open('input') as fd:
 text=fd.read()

try:
 start, rest = text.split("#region License\n", 1)
 middle, end = rest.split("#endregion\n", 1)
 print "%s\#region License\n#endregion\n%s" % (start, end)
except ValueError:
 # didn't contain a properly formatted license:
 print text
 
 #7 I would do something like this: 

 perl -i.orig -0777 -p -e 's/#region License.*?#endregion/#region License\n#endregion/s' test.cc
 

 
 -0777 means that the whole file will be slurped 
 -p is making the -e code to be surrounded by a while (&lt;>) { ... print $_ } block 
 -i.orig does the editing in place, and creates a backup 
 s flag at the end of the substitution makes the .* in the regexp match over eol 
 

 Use find to determine which files to process