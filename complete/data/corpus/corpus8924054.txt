Question (ID-8924054): From List of Dictionary To Dictionary I have some problem with my function. 

 I do an SQL Query to obtain a list that have some dictionary with only a key/value element.
This is a sample of my output: 

 myDictList = [{'id': 55, 'sigla': 'SNG'}, {'id': 62, 'sigla': 'TRP'}, 
 {'id': 71, 'sigla': 'PCNIM'}, {'id': 72, 'sigla': 'pc2ni'}, 
 {'id': 73, 'sigla': 'ccas'}, {'id': 74, 'sigla': 'ased1'}, 
 {'id': 75, 'sigla': '131s'}, {'id': 76, 'sigla': 'r888'}, 
 {'id': 56, 'sigla': 'DBL'}]
 

 The id are unique (for SQL constraint). 

 I've build a list of id in that way 

 r_id_list = list(rid['id'] for rid in roomList)
 

 Now, i would build a dict. like that from myDictList : 

 {55:'SNG',62:'TRP',71:'PCNIM'.... and so on}
 

 More over, i want to avoid part of code like that: 

 finalDict = {}
for element in myDictList:
 finalDict.update({element['id']:element['sigla']})
 

 I want to do that for some reasons: 

 
 I don't want to do two separate query to obtain some data that i can retrive with one 
 I don't want to iterate to every list element for retrive sigla value from r_id_list element 
 

 Some suggestion for a compact code that will not include a for cycle inside a for cycle, and increase the complexity? 
 Answers (Total-6): #0 finalDict = dict([(k['id'], k['sigla']) for k in myDictList])
 

 EDIT1 
As comment mentioned, it will be a better way to do. 

 finalDict = dict(((k['id'], k['sigla']) for k in myDictList))
 

 EDIT2 

 finalDict = dict((k['id'], k['sigla']) for k in myDictList)
 
 #1 Use dict() constructor with generator expression: 

 finalDict = dict((elem['id'], elem['sigla']) for elem in myDictList)
 
 #2 finaldict = {k['id']: k['sigla'] for k in myDictList}
 

 if you're on a current version of Python. Dictionary comprehensions have been introduced in Python 3 and backported to Python 2.7: 

 Python 2.7.2 (default, Jun 12 2011, 14:24:46) [MSC v.1500 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; myDictList = [{'id': 55, 'sigla': 'SNG'}, {'id': 62, 'sigla': 'TRP'},
... {'id': 71, 'sigla': 'PCNIM'}, {'id': 72, 'sigla': 'pc2ni'},
... {'id': 73, 'sigla': 'ccas'}, {'id': 74, 'sigla': 'ased1'},
... {'id': 75, 'sigla': '131s'}, {'id': 76, 'sigla': 'r888'},
... {'id': 56, 'sigla': 'DBL'}]
&gt;&gt;&gt; {k['id']: k['sigla'] for k in myDictList}
{71: 'PCNIM', 72: 'pc2ni', 73: 'ccas', 74: 'ased1', 75: '131s', 76: 'r888', 55:'SNG', 56: 'DBL', 62: 'TRP'}
 
 #3 Consider taking a step back here and looking outside the narrow focus of the question. You say "I do an SQL Query to obtain a list that have some dictionary". What are you using to do the SQL query? 

 By default Python database drivers return a tuple for each row rather than dict , so you presumably have some other code which is converting those tuples into a dict before you want to convert them back again. Your best bet would be to just do a query that returns tuples and construct your dict directly from that: 

 cursor.execute('SELECT id, sigla FROM sometable')
myDict = dict(cursor.fetchall())
 
 #4 res_dict = {}
for i in myDictList:
 res_dict[i['id']] = i['sigla']
 
 #5 As others have already pointed out the best way to build your final dictionary is using a generator expression like: 

 finalDict = dict((d['id'], d['sigla']) for d in myDictList)
 

 And if you still need an iterable over your ids you can have that just calling finalDict.keys() .