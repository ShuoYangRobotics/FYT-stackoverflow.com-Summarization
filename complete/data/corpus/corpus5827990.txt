Question (ID-5827990): python join equivalent I have a dictionary say.. 

 dict = {
 'a' : 'b',
 'c' : 'd'
}
 

 In php I would to something like implode ( ',', $dict ) and get the output 'a,b,c,d'
How do I do that in python? 
 Answers (Total-8): #0 This seems to be easiest way: 

 &gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; a = dict(a='b', c='d')
&gt;&gt;&gt; ','.join(chain(*a.items()))
'a,b,c,d'
 
 #1 First, the wrong answer: 

 ','.join('%s,%s' % i for i in D.iteritems())
 

 This answer is wrong because, while associative arrays in PHP do have a given order, dictionaries in Python don't . The way to compensate for that is to either use an ordered mapping type (such as OrderedDict ), or to force an explicit order: 

 ','.join('%s,%s' % (k, D[k]) for k in ('a', 'c'))
 
 #2 Use string join on a flattened list of dictionary items like this: 

 ",".join(i for p in dict.items() for i in p)
 

 Also, you probably want to use OrderedDict . 
 #3 This has quadratic performance, but if the dictionary is always small, that may not matter to you 

 &gt;&gt;&gt; sum({'a':'b','c':'d'}.items(), ())
('a', 'b', 'c', 'd')
 

 note that the dict.items() does not preserve the order, so ('c', 'd', 'a', 'b') would also be a possible output 
 #4 a=[]
[ a.extend([i,j]) for i,j in dict.items() ]
 
 #5 Either 

 [value for pair in {"a": "b", "c" : "d"}.iteritems() for value in pair]
 

 or 

 (lambda mydict: [value for pair in mydict.iteritems() for value in pair])({"a": "b", "c" : "d"}) 
 

 Explanation: 

 Simplified this example is return each value from each pair in the mydict 

 Edit: Also put a ",".join() around these. I didn't read your question properly 
 #6 This is not very elegant, but works: 

 result=list()
for ind in g:
 result.append(ind)
 for cval in g[ind]:
  result.append(cval)
 
 #7 dictList = dict.items() 

 This will return a list of all the items.