Question (ID-6402311): Python conditional assignment operator Does it exist a python equivalent to the ruby ||= operator (set the variable if the variable is not set) ? 

 Example in Ruby : 

 =====
 variable_not_set ||= 'bla bla'
 variable_not_set == 'bla bla'
 ====
 variable_set = 'pi pi'
 variable_set ||= 'bla bla'
 variable_set == 'pi pi'
 
 Answers (Total-6): #0 No, the replacement is: 

 try:
 v
except NameError:
 v = 'bla bla'
 

 However, wanting to use this construct is a sign of overly complicated code flow. Usually, you'd do the following: 

 try:
 v = complicated()
except ComplicatedError: # complicated failed
 v = 'fallback value'
 

 and never be unsure whether v is set or not. If it's one of many options that can either be set or not, use a dictionary and its get method which allows a default value. 
 #1 I'm surprised no one offered this answer. It's not as "built-in" as Ruby's ||= but it's basically equivalent and still a one-liner. 

 foo = foo if 'foo' in locals() else 'default'
 

 Of course, locals() is just a dictionary, so you can do: 

 foo = locals().get('foo', 'default')
 
 #2 No, not knowing which variables are defined is a bug, not a feature in Python. 

 Use dicts instead: 

 d = {}
d.setdefault('key', 1)
d['key'] == 1

d['key'] = 2
d.setdefault('key', 1)
d['key'] == 2
 
 #3 No, there is no nonsense like that. 
Something we have not missed in Python for 20 years. 
 #4 I am not sure I understand the question properly here ... Trying to "read" the value of an "undefined" variable name will trigger a NameError . (see here, that Python has "names" , not variables...). 

 == EDIT == 

 As pointed out in the comments by delnan, the code below is not robust and will break in numerous situations ... 

 Nevertheless, if your variable "exists", but has some sort of dummy value, like None , the following would work : 

 &gt;&gt;&gt; my_possibly_None_value = None
&gt;&gt;&gt; myval = my_possibly_None_value or 5
&gt;&gt;&gt; myval
5
&gt;&gt;&gt; my_possibly_None_value = 12
&gt;&gt;&gt; myval = my_possibly_None_value or 5
&gt;&gt;&gt; myval
12
&gt;&gt;&gt; 
 

 (see this paragraph about Truth Values ) 
 #5 I usually do this the following way: 

 def set_if_not_exists(obj,attr,value):
 if not hasattr(obj,attr): setattr(obj,attr,value)