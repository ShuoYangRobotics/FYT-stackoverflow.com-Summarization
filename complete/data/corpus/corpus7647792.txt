Question (ID-7647792): map lambda x,y with a constant x What would be an elegant way to map a 2 parameter Python lambda function to a list of values where the first parameter is constant and the second is taken from a list . 

 Example: 

 lambda x,y: x+y
x='a'
y=['2','4','8','16']
 

 expected result: 

 ['a2','a4','a8','a16']
 

 Notes: 

 
 This is just an example, the actual lambda function is more complicated 
 Assume I can't use list comprehension 
 
 Answers (Total-6): #0 You can use itertools.starmap 

 a = itertools.starmap(lambda x,y: x+y, zip(itertools.repeat(x), y))
a = list(a)
 

 and you get your desired output. 

 BTW, both itertools.imap and Python3's map will accept the following: 

 itertools.imap(lambda x,y: x+y, itertools.repeat(x), y)
 

 The default Python2's map will not stop at the end of y and will insert None s... 

 

 But a comprehension is much better 

 [x + num for num in y]
 
 #1 from itertools import repeat

map(lambda (x, y): x + y, zip(repeat(x), y))
 

 Update: for python3, I think this'll work: 

 map(lambda xy: ''.join(xy), zip(repeat(x), y))
 
 #2 Also you could use closure for this 

 x='a'
f = lambda y: x+y
map(f, ['1', '2', '3', '4', '5'])
&gt;&gt;&gt; ['a1', 'a2', 'a3', 'a4', 'a5']
 
 #3 def prependConstant(x, y):
 return map(lambda yel: x + yel, y)
 
 #4 ['a' + x for x in y]
 

 or if you really need a callable: 

 def f(x, y):
 return x + y

[f('a', x) for x in y]
 
 #5 Do you have to use lambda? 

 &gt;&gt;&gt; x='a'
&gt;&gt;&gt; y=['2','4','8','16']
&gt;&gt;&gt; map(x.__add__, y)
['a2', 'a4', 'a8', 'a16']
&gt;&gt;&gt;