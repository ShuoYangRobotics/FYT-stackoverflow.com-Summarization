Question (ID-8744113): python list by value not by reference Let's take an example 

 a=['help', 'copyright', 'credits', 'license']
b=a
b.append('XYZ')
b
['help', 'copyright', 'credits', 'license', 'XYZ']
a
['help', 'copyright', 'credits', 'license', 'XYZ']
 

 I wanted to append value in list 'b' but the value of list 'a' have also changed.
 
I think I have little idea why its like this (python passes lists by reference).
 
My question is "how can I pass it by value so that appending 'b' does't change values in 'a' ?" 
 Answers (Total-6): #0 As answered in the official Python FAQ : 

 b = a[:]
 
 #1 Also, you can do: 

 b = list(a)
 

 This will work for any sequence, even those that don't support indexers and slices... 
 #2 To copy a list you can use list(a) or a[:] . In both cases a new object is created. 
These two methods, however, have limitations with collections of mutable objects as inner object keep their references intact: 

 &gt;&gt;&gt; a = [[1,2],[3],[4]]

&gt;&gt;&gt; b = a[:]
&gt;&gt;&gt; c = list(a)

&gt;&gt;&gt; c[0].append(9)

&gt;&gt;&gt; a
[[1, 2, 9], [3], [4]]
&gt;&gt;&gt; c
[[1, 2, 9], [3], [4]]
&gt;&gt;&gt; b
[[1, 2, 9], [3], [4]]
&gt;&gt;&gt; 
 

 If you want a full copy of your objects you need copy.deepcopy 

 &gt;&gt;&gt; from copy import deepcopy
&gt;&gt;&gt; a = [[1,2],[3],[4]]

&gt;&gt;&gt; b = a[:]
&gt;&gt;&gt; c = deepcopy(a)

&gt;&gt;&gt; c[0].append(9)

&gt;&gt;&gt; a
[[1, 2], [3], [4]]
&gt;&gt;&gt; b
[[1, 2], [3], [4]]
&gt;&gt;&gt; c
[[1, 2, 9], [3], [4]]
&gt;&gt;&gt; 
 
 #3 To create a copy of a list do this: 

 b = a[:]
 
 #4 b = list(a) 

 See http://henry.precheur.org/python/copy_list . 
 #5 When you do b = a you simply create another pointer to the same memory of a ,
that's why when you append to b , a changes too. 

 You need to create copy of a and that's done like this: 

 b = a[:]