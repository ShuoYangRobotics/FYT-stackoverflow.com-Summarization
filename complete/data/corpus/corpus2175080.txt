Question (ID-2175080): sscanf in Python I'm looking for an equivalent to sscanf() in Python. I want to parse /proc/net/* files, in C I could do something like this: 

 int matches = sscanf(
  buffer,
  "%*d: %64[0-9A-Fa-f]:%X %64[0-9A-Fa-f]:%X %*X %*X:%*X %*X:%*X %*X %*d %*d %ld %*512s\n",
  local_addr, &amp;local_port, rem_addr, &amp;rem_port, &amp;inode);
 

 I thought at first to use str.split , however it doesn't split on the given characters, but the sep string as a whole: 

 &gt;&gt;&gt; lines = open("/proc/net/dev").readlines()
&gt;&gt;&gt; for l in lines[2:]:
&gt;&gt;&gt;  cols = l.split(string.whitespace + ":")
&gt;&gt;&gt;  print len(cols)
1
 

 Which should be returning 17, as explained above. 

 Is there a Python equivalent to sscanf (not RE), or a string splitting function in the standard library that splits on any of a range of characters that I'm not aware of? 
 Answers (Total-7): #0 You can split on a range of characters using the re module. 

 &gt;&gt;&gt; import re
&gt;&gt;&gt; r = re.compile('[ \t\n\r:]+')
&gt;&gt;&gt; r.split("abc:def ghi")
['abc', 'def', 'ghi']
 
 #1 Python doesn't have an sscanf equivalent built-in, and most of the time it actually makes a whole lot more sense to parse the input by working with the string directly, using regexps, or using a parsing tool. 

 Probably mostly useful for translating C, people have implemented sscanf , such as in this module: http://hkn.eecs.berkeley.edu/~dyoo/python/scanf/ 

 In this particular case if you just want to split the data based on multiple split characters, re.split is really the right tool. 
 #2 You can parse with module re using named groups . It won't parse the substrings to their actual datatypes (e.g. int ) but it's very convenient when parsing strings. 

 Given this sample line from /proc/net/tcp : 

 line=" 0: 00000000:0203 00000000:0000 0A 00000000:00000000 00:00000000 00000000  0  0 335 1 c1674320 300 0 0 0"
 

 An example mimicking your sscanf example with the variable could be: 

 import re
hex_digit_pattern = r"[\dA-Fa-f]"
pat = r"\d+: " + \
  r"(?P&lt;local_addr&gt;HEX+):(?P&lt;local_port&gt;HEX+) " + \
  r"(?P&lt;rem_addr&gt;HEX+):(?P&lt;rem_port&gt;HEX+) " + \
  r"HEX+ HEX+:HEX+ HEX+:HEX+ HEX+ +\d+ +\d+ " + \
  r"(?P&lt;inode&gt;\d+)"
pat = pat.replace("HEX", hex_digit_pattern)

values = re.search(pat, line).groupdict()

import pprint; pprint values
# prints:
# {'inode': '335',
# 'local_addr': '00000000',
# 'local_port': '0203',
# 'rem_addr': '00000000',
# 'rem_port': '0000'}
 
 #3 you can turn the ":" to space, and do the split.eg 

 &gt;&gt;&gt; f=open("/proc/net/dev")
&gt;&gt;&gt; for line in f:
...  line=line.replace(":"," ").split()
...  print len(line)
 

 no regex needed (for this case) 
 #4 Upvoted orip's answer. I think it is sound advice to use re module. The Kodos application is helpful when approaching a complex regexp task with Python. 

 http://kodos.sourceforge.net/home.html 
 #5 If the separators are ':', you can split on ':', and then use x.strip() on the strings to get rid of any leading or trailing whitespace. int() will ignore the spaces. 
 #6 There is an ActiveState recipe which implements a basic scanf
 http://code.activestate.com/recipes/502213-simple-scanf-implementation/