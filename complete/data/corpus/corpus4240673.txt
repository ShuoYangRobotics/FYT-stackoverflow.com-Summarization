Question (ID-4240673): Rails or Pylons -- Any good framework for Python? I have no background in web applications, but have a fairly experience background in C++, and a quick learner. 

 I have spent some time learning Python and reading through SQLAlchemy. I kind of like the idea of coding in pure Python OO, and then use a nice SQLAlchemy mapper to persist everything. I like this decoupled approach (using pure Python classes along a mapper function to talk to DB) better than the ActiveRecord idea of Rails. I think eventually I would have more control over connecting the DB to the app. (I need to work with a DB that is updated by a background process. Something like a web crawler that fills the DB.) 

 At the same time, some stuff makes me think again about Rails. Like streamlined Email and Ajax handling in Rails. 

 Am I thinking the right way, that Rails is less flexible for Form Validation Manipulations, and working with DB? And is it harder in Pylons to handle Email (notifications), RSS, Ajax? 

 What would you suggest? 
Thanks 
 Answers (Total-6): #0 Have a look at Django . It sounds like this exactely what you are looking for :-). 
 #1 Have a look at these Python frameworks: 

 
 Django : Probably the single most popular Python framework, but for better (and worse) is very-much a full-stack solution. 
 Pylons : As reaction to the Django One Way of working, Pylons, for better (and worse), uses a much looser binding of the modules that make up your framework. 
 TurboGears : As an attempt at a happy medium between Django and Pylons, TurboGears is based on Pylons, but comes ready made with certain component choices, and the glue to hold it together. 
 Zope : Zope is more of an application server and framework than a "web framework". It just happens to be web based.  
 

 The first three are all inspired by Ruby on Rails , but each has it's own ideas for improvement. Zope predates Rails, and is it's own world. 

 I've used TurboGears to develop a few small apps. Kinda nice. At the time, their docs were kinda bad. I hope that's changed. 

 I've also directly used Python Paste a few times.  Paste is the HTTP server base upon which Pylons, and in turn TurboGears, is based. Again very nice.  

 Also: When given the choice, I've always used SQLAlchemy as an ORM. It's truly an impressive piece of software that I've used for even non-web projects. 

 Hope this helps. Let us know what path you take. :-) 
 #2 Rails is written in Ruby, not Python. If you have your heart set on Python, then go with Django. But please give Rails a fair shake; ActiveRecord is not the only ORM available either. I use DataMapper for some apps too. I may be biased, but I'm inclined to think the Rails ecosystem is bigger than that of Django too. 
 #3 You should also checkout web2py instead of Django . Just an alternative you might consider. 

 Here's two "A vs. B" articles and discussions regarding the two: 

 
 Django vs. web2py 
 Reddit.com community discussion 
 
 #4 I wrote a few websites in Pylons over the years and I like it a lot. The great things about Pylons is that it consists mostly of third party libraries. That means that you're learning many useful libraries that can be used in you other projects, for example SQLAlchemy, WebOb, FormEncode, Beaker, Mako and so on ... Especially SQLAlchemy and Beaker are extremely useful in pretty much any context. 
 #5 You could also have a look to Nagare , another full stack framework.
Some of Nagare based projects already in production can be found on the Nagare web site.