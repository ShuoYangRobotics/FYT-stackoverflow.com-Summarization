Question (ID-575196): In Python, why can a function modify some arguments as perceived by the caller, but not others? I'm new to Python and am trying to understand its approach to variable scope. In this example, why is f() able to alter the value of x , as perceived within main() , but not the value of n ? 

 def f(n, x):
 n = 2
 x.append(4)
 print 'In f():', n, x

def main():
 n = 1
 x = [0,1,2,3]
 print 'Before:', n, x
 f(n, x)
 print 'After: ', n, x

main()
 

 Output: 

 Before: 1 [0, 1, 2, 3]
In f(): 2 [0, 1, 2, 3, 4]
After: 1 [0, 1, 2, 3, 4]
 
 Answers (Total-7): #0 Some answers contain a word "copy" in a context of a function call. I find it confusing. 

 Python doesn't copy objects you pass during a function call ever . 

 Function parameters are names . When you call a function Python binds these parameters to whatever objects you pass (via names in a caller scope). 

 Objects can be mutable (like lists) or immutable (like integers, strings in Python). Mutable object you can change. You can't change a name, you just can bind it to another object. 

 Your example is not about scopes or namespaces , it is about naming and binding and mutability of an object in Python. 

 def f(n, x): # these `n`, `x` have nothing to do with `n` and `x` from main()
 n = 2 # put `n` label on `2` balloon
 x.append(4) # call `append` method of whatever object `x` is referring to.
 print 'In f():', n, x
 x = [] # put `x` label on `[]` ballon
 # the above has no effect on the original list
 

 Here's nice pictures on the difference between variables in other languages and names in Python . 
 #1 f doesn't actually alter the value of x (which is always the same reference to an instance of a list). Rather, it alters the contents of this list. 

 In both cases, a copy is passed to the function. But since x is a reference to a list instance, only the reference is copied, not the contents of the list. 

 In case you are familiar with C, the following approaches the semantics of the Python code: 

 void f(int n, int* x) {
 n = 42;
 x[0] = 2;
}
 

 Here, n is an int and x is an int* but both are passed as a copy to the function. Nontheless, the memory pointed to by x is the same at the sides of the caller and the callee. 
 #2 I will rename variables to reduce confusion. n -> nf or nmain . x -> xf or xmain : 

 def f(nf, xf):
 nf = 2
 xf.append(4)
 print 'In f():', nf, xf

def main():
 nmain = 1
 xmain = [0,1,2,3]
 print 'Before:', nmain, xmain
 f(nmain, xmain)
 print 'After: ', nmain, xmain

main()
 

 When you call the function f , the Python runtime makes a copy of xmain and assigns it to xf , and similarly assigns a copy of nmain to nf . 

 In the case of n , the value that is copied is 1. 

 In the case of x the value that is copied is not the literal list [0, 1, 2, 3] . It is a reference to that list. xf and xmain are pointing at the same list, so when you modify xf you are also modifying xmain . 

 If, however, you were to write something like: 

  xf = ["foo", "bar"]
 xf.append(4)
 

 you would find that xmain has not changed. This is because, in the line xf = ["foo", "bar"] you have change xf to point to a new list. Any changes you make to this new list will have no effects on the list that xmain still points to. 

 Hope that helps. :-) 
 #3 n is an int (immutable), and a copy is passed to the function, so in the function you are changing the copy. 

 X is a list (mutable), and a copy of the pointer is passed o the function so x.append(4) changes the contents of the list. However, you you said x = [0,1,2,3,4] in your function, you would not change the contents of x in main(). 
 #4 You've got a number of answers already, and I broadly agree with J.F. Sebastian, but you might find this useful as a shortcut: 

 Any time you see varname = , you're creating a new name binding within the function's scope. Whatever value varname was bound to before is lost within this scope . 

 Any time you see varname.foo() you're calling a method on varname . The method may alter varname (e.g. list.append ). varname (or, rather, the object that varname names) may exist in more than one scope, and since it's the same object, any changes will be visible in all scopes. 

 [note that the global keyword creates an exception to the first case] 
 #5 It´s because a list is a mutable object. You´re not setting x to the value of [0,1,2,3], you´re defining a label to the object [0,1,2,3]. 

 You should declare your function f() like this: 

 def f(n, x=None):
 if x is None:
  x = []
 ...
 
 #6 Python is a pure pass-by-value language if you think about it the right way. A python variable stores the location of an object in memory. The Python variable does not store the object itself. When you pass a variable to a function, you are passing a copy of the address of the object being pointed to by the variable. 

 Contrasst these two functions 

 def foo(x):
 x[0] = 5

def goo(x):
 x = []
 

 Now, when you type into the shell 

 &gt;&gt;&gt; cow = [3,4,5]
&gt;&gt;&gt; foo(cow)
&gt;&gt;&gt; cow
[5,4,5]
 

 Compare this to goo. 

 &gt;&gt;&gt; cow = [3,4,5]
&gt;&gt;&gt; goo(cow)
&gt;&gt;&gt; goo
[3,4,5]
 

 In the first case, we pass a copy the address of cow to foo and foo modified the state of the object residing there. The object gets modified. 

 In the second case you pass a copy of the address of cow to goo. Then goo proceeds to change that copy. Effect: none. 

 I call this the pink house principle . If you make a copy of your address and tell a 
painter to paint the house at that address pink, you will wind up with a pink house.
If you give the painter a copy of your address and tell him to change it to a new address,
the address of your house does not change. 

 The explanation eliminates a lot of confusion. Python passes the addresses variables store by value.