Question (ID-1316767): How can I explicitly free memory in Python? I wrote a Python program that acts on a large input file to create a few million objects representing triangles. The algorithm is: 

 
 read an input file 
 process the file and create a list of triangles, represented by their vertices 
 output the vertices in the OFF format: a list of vertices followed by a list of triangles. The triangles are represented by indices into the list of vertices 
 

 The requirement of OFF that I print out the complete list of vertices before I print out the triangles means that I have to hold the list of triangles in memory before I write the output to file. In the meanwhile I'm getting memory errors because of the sizes of the lists. 

 What is the best way to tell Python that I no longer need some of the data, and it can be freed? 
 Answers (Total-9): #0 Unfortunately (depending on your version and release of Python) some types of objects use "free lists" which are a neat local optimization but may cause memory fragmentation, specifically by making more an more memory "earmarked" for only objects of a certain type and thereby unavailable to the "general fund". 

 The only really reliable way to ensure that a large but temporary use of memory DOES return all resources to the system when it's done, is to have that use happen in a subprocess, which does the memory-hungry work then terminates. Under such conditions, the operating system WILL do its job, and gladly recycle all the resources the subprocess may have gobbled up. Fortunately, the multiprocessing module makes this kind of operation (which used to be rather a pain) not too bad in modern versions of Python. 

 In your use case, it seems that the best way for the subprocesses to accumulate some results and yet ensure those results are available to the main process is to use semi-temporary files (by semi-temporary I mean, NOT the kind of files that automatically go away when closed, just ordinary files that you explicitly delete when you're all done with them). 
 #1 According to http://docs.python.org/library/gc.html you can force the Garbage Collector to release unreferenced memory with gc.collect() 
 #2 You can't explicitly free memory. What you need to do is to make sure you don't keep references to objects. They will then be garbage collected, freeing the memory. 

 In your case, when you need large lists, you typically need to reorganize the code, typically using generators/iterators instead. That way you don't need to have the large lists in memory at all. 

 http://www.prasannatech.net/2009/07/introduction-python-generators.html 
 #3 The del statement might be of use, but IIRC it isn't guaranteed to free the memory . The docs are here ... and a why it isn't released is here . 

 I have heard people on Linux and Unix-type systems forking a python process to do some work, getting results and then killing it. 

 This article has notes on the Python garbage collector, but I think lack of memory control is the downside to managed memory 
 #4 Lists of numbers are much less memory-efficient than the format used by the standard array module or the third-party Numpy module. You would save memory by putting your vertices in a Numpy 3xN array and your triangles in an N-element array. 
 #5 Python is garbage-collected, so if you reduce the size of your list, it will reclaim memory. You can also use the "del" statement to get rid of a variable completely: 

 biglist = [blah,blah,blah]
#...
del biglist
 
 #6 If you don't care about vertex reuse, you could have two output files--one for vertices and one for triangles. Then append the triangle file to the vertex file when you are done. 
 #7 Others have posted some ways that you might be able to "coax" the Python interpreter into freeing the memory (or otherwise avoid having memory problems). Chances are you should try their ideas out first. However, I feel it important to give you a direct answer to your question. 

 There isn't really any way to directly tell Python to free memory. The fact of that matter is that if you want that low a level of control, you're going to have to write an extension in C or C++. 

 That said, there are some tools to help with this: 

 
 cython 
 swig 
 boost python 
 
 #8 Gee - this is not really an answer - I am by no means a mathematician. 

 The only reason I write is that nobody else did ;-) Well in fact they just did while I was writing. 

 I think millions of objects is probably not so good - maybe better to have just a few and then put the hard cash (the numbers) into lists. 

 I believe NumPy should be good at number crushing, but I am by no means a mathematician!