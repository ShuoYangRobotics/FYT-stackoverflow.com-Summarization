Question (ID-8425046): The best way to filter a dictionary in Python I have a dictionary of string keys and float values. 

 mydict = {}
 mydict["joe"] = 20
 mydict["bill"] = 20.232
 mydict["tom"] = 0.0
 

 I want to filter the dictionary to only include pairs that have a value greater than zero. 

 In C#, I would do something like this: 

  dict = dict.Where(r=&gt;r.Value &gt; 0);
 

 What is the equivalent code in Python? 
 Answers (Total-6): #0 d = dict((k, v) for k, v in d.iteritems() if v &gt; 0)
 

 In Python 3, there's nicer syntax for this: 

 d = {k: v for k, v in d.items() if v &gt; 0}
 

 Note that this is not strictly a filter because it does create a new dictionary. 
 #1 Assuming your original dictionary is d1 you could use something like: 

 d2 = dict((k, v) for k, v in d1.items() if v &gt; 0)
 

 By the way, note that dict is already reserved in python. 
 #2 The dict constructor can take a sequence of (key,value) pairs, and the iteritems method of a dict produces a sequence of (key,value) pairs. It's two great tastes that taste great together. 

 newDict = dict([item for item in oldDict.iteritems() if item[1] &gt; 0])
 
 #3 foo = {}
foo["joe"] = 20
foo["bill"] = 20.232
foo["tom"] = 0.0

bar = dict((k,v) for k,v in foo.items() if v&gt;0)
 

 dict is a keyword in Python so I replaced it with foo. 
 #4 first of all you should not use the keyword dict as a variable name as it pollutes the namespace, and prevents you from referencing the dict class in the current or embedded scope. 

 d = {}
d["joe"] = 20
d["bill"] = 20.232
d["tom"] = 0.0

# create an intermediate generator that is fed into dict constructor 
# via a list comprehension
# this is more efficient that the pure "[...]" variant
d2 = dict(((k, v) for (k, v) in d.iteritems() if v &gt; 0)) 

print d2
# {'bill': 20.232, 'joe': 20}
 

 Alternatively, you could just create the generator and iterator over it directly. This more like a "filter", because the generator only references the values in the original dict instead of making a subset copy; and hence is more efficient than creating a new dictionary : 

 filtered = ((k, v) for (k, v) in d.iteritems() if v &gt; 0)

print filtered 
# &lt;generator object &lt;genexpr&gt; at 0x034A18F0&gt;

for k, v in filtered:
 print k, v

# bill 20.232
# joe 20
 
 #5 try 

 y = filter(lambda x:dict[x] &gt; 0.0,dict.keys())
 

 the lambda is feed the keys from the dict, and compares the values in the dict for each key, against the criteria, returning back the acceptable keys.