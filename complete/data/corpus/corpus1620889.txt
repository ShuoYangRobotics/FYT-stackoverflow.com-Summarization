Question (ID-1620889): Python RegEx skipping the first few characters? Hey I have a fairly basic question about regular expressions. I want to just return the text inside (and including) the body tags, and I know the following isn't right because it'll also match all the characters before the opening body tag. I was wondering how you would go about skipping those? 

 x = re.match('(.*&lt;body).*?(&lt;/body&gt;)', fileString)
 

 Thanks! 
 Answers (Total-6): #0 I don't know Python, but here's a quick example thrown together using Beautiful Soup , which I often see recommended for Python HTML parsing. 

 import BeautifulSoup

soup = BeautifulSoup(fileString)

bodyTag = soup.html.body.string
 

 That will (in theory) deal with all the complexities of HTML, which is very difficult with pure regex-based answers, because it's not what regex was designed for. 
 #1 Here is some example code which uses regex to find all the text between &lt;body&gt;...&lt;/body&gt; tags. Although this demonstrates some features of python's re module, note that the Beautiful Soup module is very easy to use and is a better tool to use if you plan on parsing HTML or XML. (See below for an example of how you could parse this using BeautifulSoup.) 

 #!/usr/bin/env python
import re

# Here we have a string with a multiline &lt;body&gt;...&lt;/body&gt;
fileString='''baz&lt;body&gt;foo
baby foo
baby foo
baby foo
&lt;/body&gt;&lt;body&gt;bar&lt;/body&gt;'''

# re.DOTALL tells re that '.' should match any character, including newlines.
x = re.search('(&lt;body&gt;.*?&lt;/body&gt;)', fileString, re.DOTALL)
for match in x.groups():
 print(match)
# &lt;body&gt;foo
# baby foo
# baby foo
# baby foo
# &lt;/body&gt;
 

 If you wish to collect all matches, you could use re.findall: 

 print(re.findall('(&lt;body&gt;.*?&lt;/body&gt;)', fileString, re.DOTALL))
# ['&lt;body&gt;foo\nbaby foo\nbaby foo\nbaby foo\n&lt;/body&gt;', '&lt;body&gt;bar&lt;/body&gt;']
 

 and if you plan to use this pattern more than once, you can pre-compile it: 

 pat=re.compile('(&lt;body&gt;.*?&lt;/body&gt;)', re.DOTALL)
print(pat.findall(fileString))
# ['&lt;body&gt;foo\nbaby foo\nbaby foo\nbaby foo\n&lt;/body&gt;', '&lt;body&gt;bar&lt;/body&gt;']
 

 And here is how you could do it with BeautifulSoup: 

 #!/usr/bin/env python
from BeautifulSoup import BeautifulSoup

fileString='''baz&lt;body&gt;foo
baby foo
baby foo
baby foo
&lt;/body&gt;&lt;body&gt;bar&lt;/body&gt;'''
soup = BeautifulSoup(fileString)
print(soup.body)
# &lt;body&gt;foo
# baby foo
# baby foo
# baby foo
# &lt;/body&gt;

print(soup.findAll('body'))
# [&lt;body&gt;foo
# baby foo
# baby foo
# baby foo
# &lt;/body&gt;, &lt;body&gt;bar&lt;/body&gt;]
 
 #2 You cannot parse HTML with regex. HTML is not a regular language. Use an HTML parser like lxml instead. 
 #3  x = re.match('.*(&lt;body&gt;.*?&lt;/body&gt;)', fileString)
 

 Consider minidom for HTML parsing. 
 #4 x = re.search('(&lt;body&gt;.*&lt;/body&gt;)', fileString)
x.group(1)
 

 Less typing than the match answers 
 #5 Does your fileString contain multiple lines ? In that case you may need to specify it or skip the lines explicitly: 

 x = re.match(r"(?:.|\n)*(&lt;body&gt;(?:.|\n)*&lt;/body&gt;)", fileString)
 

 or, more simply with the re module: 

 x = re.match(r".*(&lt;body&gt;.*&lt;/body&gt;)", fileString, re.DOTALL)
 

 x.groups()[0] should contain your string if x is not None.