Question (ID-5790860): [] and {} vs list() and dict(), which is better? I understand that they are both essentially the same thing, but in terms of style, which is the better (more Pythonic) one to use to create an empty list or dict? 
 Answers (Total-6): #0 In terms of speed, it's no competition for empty lists/dicts: 

 &gt;&gt;&gt; from timeit import timeit
&gt;&gt;&gt; timeit("[]")
0.040084982867934334
&gt;&gt;&gt; timeit("list()")
0.17704233359267718
&gt;&gt;&gt; timeit("{}")
0.033620194745424214
&gt;&gt;&gt; timeit("dict()")
0.1821558326547077
 

 and for non-empty: 

 &gt;&gt;&gt; timeit("[1,2,3]")
0.24316302770330367
&gt;&gt;&gt; timeit("list((1,2,3))")
0.44744206316727286
&gt;&gt;&gt; timeit("list(foo)", setup="foo=(1,2,3)")
0.446036018543964
&gt;&gt;&gt; timeit("{'a':1, 'b':2, 'c':3}")
0.20868602015059423
&gt;&gt;&gt; timeit("dict(a=1, b=2, c=3)")
0.47635635255323905
&gt;&gt;&gt; timeit("dict(bar)", setup="bar=[('a', 1), ('b', 2), ('c', 3)]")
0.9028228448029267
 

 Also, using the bracket notation let's you use list and dictionary comprehensions, which may be reason enough. 
 #1 The dict literal might be a tiny bit faster as its bytecode is shorter: 

 In [1]: import dis
In [2]: a = lambda: {}
In [3]: b = lambda: dict()

In [4]: dis.dis(a)
 1   0 BUILD_MAP    0
    3 RETURN_VALUE

In [5]: dis.dis(b)
 1   0 LOAD_GLOBAL    0 (dict)
    3 CALL_FUNCTION   0
    6 RETURN_VALUE
 

 Same applies to the list vs [] 
 #2 In my opinion [] and {} are the most pythonic and readable ways to create empty lists/dicts. 

 Be wary of set() 's though, for example: 

 this_set = {5}
some_other_set = {}
 

 Can be confusing. The first creates a set with one element, the second creates an empty dict and not a set. 
 #3 As it is not mentioned in the Python Style Guide you can use whatever style you want, it's a matter of personal taste. 
 #4 IMHO, using list() and dict() makes your Python look like C. Ugh. 
 #5 It's mainly a matter of choice most of the time. It's a matter of preference. 

 Note however that if you have numeric keys for example, that you can't do: 

 mydict = dict(1="foo", 2="bar")
 

 You have to do: 

 mydict = {"1":"foo", "2":"bar"}