Question (ID-4627981): Creating a dictionary from a string I have a string in the form of: 

 s = 'A - 13, B - 14, C - 29, M - 99'
 

 and so on (the length varies). What is the easiest way to create a dictionary from this? 

 A: 13, B: 14, C: 29 ...
 

 I know I can split but I can't get the right syntax on how to do it. If I split on - , then how do I join the two parts? 

 Iterating over this seems to much of a pain. 
 Answers (Total-6): #0 To solve your example you can do this: 

 mydict = dict((k.strip(), v.strip()) for k,v in 
    (item.split('-') for item in s.split(',')))
 

 It does 3 things: 

 
 split the string into "&lt;key&gt; - &lt;value&gt;" parts: s.split(',') 
 split each part into "&lt;key&gt; ", " &lt;value&gt;" pairs: item.split('-') 
 remove the whitespace from each pair: (k.strip(), v.strip()) 
 
 #1 &gt;&gt;&gt; s = 'A - 13, B - 14, C - 29, M - 99'
&gt;&gt;&gt; dict(e.split(' - ') for e in s.split(','))
{'A': '13', 'C': '29', 'B': '14', 'M': '99'}
 

 EDIT: The next solution is for when you want the values as integers, which I think is what you want. 

 &gt;&gt;&gt; dict((k, int(v)) for k, v in (e.split(' - ') for e in s.split(',')))
{'A': 13, ' B': 14, ' M': 99, ' C': 29}
 
 #2 &gt;&gt;&gt; dict((k.strip(),int(v.strip())) for k,v in (p.split('-') for p in s.split(',')))
{'A': 13, 'B': 14, 'M': 99, 'C': 29}
 
 #3 dict((p.split(' - ') for p in s.split(',')))
 
 #4 Here's an answer that doesn't use generator expressions and uses replace rather than strip . 

 &gt;&gt;&gt; s = 'A - 13, B - 14, C - 29, M - 99'
&gt;&gt;&gt; d = {}
&gt;&gt;&gt; for pair in s.replace(' ','').split(','):
...  k, v = pair.split('-')
...  d[k] = int(v)
...
&gt;&gt;&gt; d
{'A': 13, 'C': 29, 'B': 14, 'M': 99}
 
 #5 This should work: 

 dict(map(lambda l:map(lambda j:j.strip(),l), map(lambda i: i.split('-'), s.split(','))))
 

 If you don't want to strip, just do: 

 dict(map(lambda i: i.split('-'), s.split(',')))