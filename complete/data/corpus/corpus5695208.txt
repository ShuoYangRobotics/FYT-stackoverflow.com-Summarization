Question (ID-5695208): Group list by values Let's say I have a list like this: 

 list = [["A",0], ["B",1], ["C",0], ["D",2], ["E",2]]
 

 How can I most elegantly group this to get this list output in Python: 

 list = [["A", "C"], ["B"], ["D", "E"]]
 

 So the values are grouped by the secound value but the order is preserved... 
 Answers (Total-6): #0 values = set(map(lambda x:x[1], list))
newlist = [[y[0] for y in list if y[1]==x] for x in values]
 
 #1 from operator import itemgetter
from itertools import groupby

lki = [["A",0], ["B",1], ["C",0], ["D",2], ["E",2]]
lki.sort(key=itemgetter(1))

glo = [[x for x,y in g]
  for k,g in groupby(lki,key=itemgetter(1))]

print glo
 

 . 

 EDIT 

 Another solution that needs no import , is more readable, keeps the orders, and is 22 % less long than the preceding one: 

 oldlist = [["A",0], ["B",1], ["C",0], ["D",2], ["E",2]]

newlist, dicpos = [],{}
for val,k in oldlist:
 if k in dicpos:
  newlist[dicpos[k]].extend(val)
 else:
  newlist.append([val])
  dicpos[k] = len(dicpos)

print newlist
 
 #2 Howard's answer is concise and elegant, but it's also O(n^2) in the worst case. For large lists with large numbers of grouping key values, you'll want to sort the list first and then use itertools.groupby : 

 &gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; seq = [["A",0], ["B",1], ["C",0], ["D",2], ["E",2]]
&gt;&gt;&gt; seq.sort(key = itemgetter(1))
&gt;&gt;&gt; groups = groupby(seq, itemgetter(1))
&gt;&gt;&gt; [[item[0] for item in data] for (key, data) in groups]
[['A', 'C'], ['B'], ['D', 'E']]
 

 Edit: 

 I changed this after seeing eyequem's answer: itemgetter(1) is nicer than lambda x: x[1] . 
 #3 len = max(key for (item, key) in list)
newlist = [[] for i in range(len+1)]
for item,key in list:
 newlist[key].append(item)
 

 You can do it in a single list comprehension, perhaps more elegant but O(n**2): 

 [[item for (item,key) in list if key==i] for i in range(max(key for (item,key) in list)+1)]
 
 #4 I don't know about elegant, but it's certainly doable: 

 oldlist = [["A",0], ["B",1], ["C",0], ["D",2], ["E",2]]
# change into: list = [["A", "C"], ["B"], ["D", "E"]]

order=[]
dic=dict()
for value,key in oldlist:
 try:
 dic[key].append(value)
 except KeyError:
 order.append(key)
 dic[key]=[value]
newlist=map(dic.get, order)

print newlist
 

 This preserves the order of the first occurence of each key, as well as the order of items for each key. It requires the key to be hashable, but does not otherwise assign meaning to it. 
 #5 &gt;&gt;&gt; import collections
&gt;&gt;&gt; D1 = collections.defaultdict(list)
&gt;&gt;&gt; for element in L1:
...  D1[element[1]].append(element[0])
... 
&gt;&gt;&gt; L2 = D1.values()
&gt;&gt;&gt; print L2
[['A', 'C'], ['B'], ['D', 'E']]
&gt;&gt;&gt;