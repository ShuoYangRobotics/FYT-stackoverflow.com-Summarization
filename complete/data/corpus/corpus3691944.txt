Question (ID-3691944): How should I do rapid GUI development for R and Octave methods (possibly with Python)? We are a medium-sized academic research lab whose main outputs are new statistical methods for analyzing large datasets. We generally develop in R and MATLAB/Octave. 

 We would like to expand the reach of our work by building simple, wizard-style user interfaces to access our methods, either web-apps like RNAfold or stand-alone applications to analyze private data. 

 Ideally, we would like the interfaces to do some data checking, to only use FOSS, to run in Mac and Windows environments, and to be able to generate simple charts and graphs that can be output as figures suitable for publication. Also, we like Python because it’s a popular language in the lab and in our research community. 

 However, we want to be able to develop and release quickly and cheaply. We are lucky to be able to fund one developer in the lab and s/he has to support multiple projects. 

 There are a lot of groups with the same needs and constraints as us, so it would be useful to be able to develop a consistent long-term strategy for this type of challenge. 

 Edit 
I asked for comments on four possible approaches, included below with summary of comments: 

 
 Calling the R and Octave methods from Python. 
Answers:
 
 R / Python integration
 
 Rpy (from ChrisC ) 
 pyRserve (from radek ) 
 PypeR (from radek , see answer for paper link) 
 
 Using a Python client to call in to an Octave server (from ChrisC ) 
 
 Re-implementing our methods in Python. In general, this is not easy because our methods rely on other methods also implemented in R and Octave.
Answers:
 
 There was no comment on this approach, it's probably a bad idea. 
 
 Using a different framework to build user-interfaces. 
Answers:
 
 How about building GUIs and web-apps directly in R? (from hadley , see answer for tool refs) 
 
 Other ideas that we haven’t considered, e.g., integrating with workflow management systems like Taverna . 
Answers:
 
 Try a visual programming interface like RedR (from chrisamiller ) 
 
 

 My preferred answer 

 I'm first going to look into the approach suggested by Spacedman : using QtDesigner to build the UI for PyQt4 and calling R with RPy . We get a lot of students without a programming background who want to volunteer in the lab, and QtDesigner looks like something that we could train them to use effectively. 

 I would like develop GUIs directly in R as recommended by hadley but RQt , which I presume that I need to use QtDesigner, does not appear to be in active development (last update was summer of 2009). 

 Also, it looks like we may have to start implementing our methods exclusively in R, and translating over from MATLAB/Octave to R. In my field, this is probably not a bad idea anyways. 

 Appendix: 

 
 Python libraries to simplify user interface construction: 
 
 wxPython ( ChrisC ) 
 PyQt4 (from Spacedman ) 
 
 Other projects that integrate Python, R, and Octave:
 
 SAGE ( Dirk Eddelbuettel ) 
 Shogun ( Dirk Eddelbuettel ) 
 
 GUIs to make GUIs:
 
 QtDesigner with PyQt4 (from Spacedman ). Note Qt4 is both commercial and available under a LGPL. 
 
 
 Answers (Total-6): #0 Why not continue to develop directly in R? There are a number of packages that allow you to develop GUIs (gWidgets RGtk, tcl/tk, RQt, Rwxwidgets, rjava) or web applications . 
 #1 That's a tall order -- multi-platform, multi-backend (R and Ocatve), as well and cheap, fast and easy to use! 

 From the top of my head, look at these 

 
 Sage : they have what they call notebooks which are interactive web pages and showed a nice demo at useR! 2010; I think Octave is covered too 
 Shogun : which also integrates to Python, R and Octave and may have some tools for you to leverage. 
 
 #2 For R and Python integration you might also want to have a look at 

 
 pyRserve 
 PypeR [more in the paper ] 
 
 #3 I'd go with Python and PyQt4 for the UI, and use Rpy to interface to R. 

 There's the QtDesigner for interface designing and you can generate python from that. QtAssistant gives you a fully hyperlinked documentation set for Qt which is the best I've ever used. 

 Well worth it! 
 #4 I haven't tried directly connecting Octave with Python beyond setting up Octave apps as a server and having a Python client call in, but I've had some luck integrating R with Python courtesy RPy . In some of our applications we build e.g. a wxPython + matplotlib Python frontend, and call the R scripts directly through RPy. 
 #5 You might try looking at RedR , which lets you wrap R packages in a Python GUI.