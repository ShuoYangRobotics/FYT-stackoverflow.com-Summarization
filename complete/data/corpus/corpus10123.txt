Question (ID-10123): How do I treat an integer as an array of bytes in Python? I'm trying to decode the result of the Python os.wait() function. This returns, according to the Python docs: 

 
 a tuple containing its pid and exit status indication: a 16-bit number, whose low byte is the signal number that killed the process, and whose high byte is the exit status (if the signal number is zero); the high bit of the low byte is set if a core file was produced. 
 

 How do I decode the exit status indication (which is an integer) to obtain the high and low byte? To be specific, how do I implement the decode function used in the following code snippet: 

 (pid,status) = os.wait()
(exitstatus, signum) = decode(status)
 
 Answers (Total-6): #0 To answer your general question, you can use bit manipulation techniques: 

 pid, status = os.wait()
exitstatus, signum = status &amp; 0xFF, (status &amp; 0xFF00) &gt;&gt; 8
 

 However, there are also built-in funtions for interpreting exit status values: 

 pid, status = os.wait()
exitstatus, signum = os.WEXITSTATUS( status ), os.WTERMSIG( status )
 

 See also: 

 
 os.WCOREDUMP() 
 os.WIFCONTINUED() 
 os.WIFSTOPPED() 
 os.WIFSIGNALED() 
 os.WIFEXITED() 
 os.WSTOPSIG() 
 
 #1 This will do what you want: 

 signum = status &amp; 0xff
exitstatus = (status &amp; 0xff00) &gt;&gt; 8
 
 #2 You can unpack the status using bit-shifting and masking operators. 

 low = status &amp; 0x00FF
high = (status &amp; 0xFF00) &gt;&gt; 8
 

 I'm not a Python programmer, so I hope got the syntax correct. 
 #3 exitstatus, signum= divmod(status, 256)
 
 #4 The folks before me've nailed it, but if you really want it on one line, you can do this: 

 (signum, exitstatus) = (status &amp; 0xFF, (status &gt;&gt; 8) &amp; 0xFF)
 

 EDIT: Had it backwards. 
 #5 You can get break your int into a string of unsigned bytes with the struct module: 

 import struct
i = 3235830701 # 0xC0DEDBAD
s = struct.pack("&gt;L", i) # "&gt;" = Big-endian, "&lt;" = Little-endian
print s   # '\xc0\xde\xdb\xad'
print s[0]  # '\xc0'
print ord(s[0]) # 192 (which is 0xC0)
 

 If you couple this with the array module you can do this more conveniently: 

 import struct
i = 3235830701 # 0xC0DEDBAD
s = struct.pack("&gt;L", i) # "&gt;" = Big-endian, "&lt;" = Little-endian

import array
a = array.array("B") # B: Unsigned bytes
a.fromstring(s)
print a # array('B', [192, 222, 219, 173])