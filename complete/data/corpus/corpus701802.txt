Question (ID-701802): How do I execute a string containing Python code in Python? How do I execute a string containing Python code in Python? 
 Answers (Total-7): #0 For statements, use exec 

 ie. 

 &gt;&gt;&gt; mycode = 'print "hello world"'
&gt;&gt;&gt; exec mycode
Hello world
 

 When you need the value of an expression, use eval . eg 

 &gt;&gt;&gt; x = eval("2+2")
&gt;&gt;&gt; x
4
 

 However, the first step should be to ask yourself if you really need to. Executing code should generally be the position of last resort: It's slow, ugly and dangerous if it can contain user-entered code. You should always look at alternatives first, such as higher order functions, to see if these can better meet your needs. 
 #1 Use eval . 
 #2 In the example a string is executed as code using the exec function. 

 import sys
import StringIO

# create file-like string to capture output
codeOut = StringIO.StringIO()
codeErr = StringIO.StringIO()

code = """
def f(x):
 x = x + 1
 return x

print 'This is my output.'
"""

# capture output and errors
sys.stdout = codeOut
sys.stderr = codeErr

exec code

# restore stdout and stderr
sys.stdout = sys.__stdout__
sys.stderr = sys.__stderr__

print f(4)

s = codeErr.getvalue()

print "error:\n%s\n" % s

s = codeOut.getvalue()

print "output:\n%s" % s

codeOut.close()
codeErr.close()
 
 #3 eval() is just for expressions, while eval('x+1') works, eval('x=1') won't work for example. In that case, it's better to use exec , or even better: try to find a better solution :) 
 #4 Check out eval : 

 x = 1
print eval('x+1')
-&gt;2
 
 #5 The most logical solution would be to use the built-in eval() function .Another solution is to write that string to a temporary python file and execute it. 
 #6 Just a response to hekevintran's advice. I don't think you can redirect stderr/stdout with exec. See this page http://docs.python.org/library/sys.html?highlight=stderr#sys.stderr 

 it says "Changing these objects doesnâ€™t affect the standard I/O streams of processes executed by os.popen(), os.system() or the exec*() family of functions in the os module." 

 one approach I am experimenting with is: 

 try:
 result=eval(user_input)
except:
 exec(user_input) 

 eval returns a value, but doesn't work for all commands. exec works for all, but doesn't return a value. Still trying to figure out a way around this