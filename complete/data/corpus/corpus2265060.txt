Question (ID-2265060): Python: How to access parent class object through derived class instance? I'm sorry for my silly question, but...
let's suppose I have this classes: 

 class A():
 msg = 'hehehe'

class B(A):
 msg = 'hohoho'

class C(B):
 pass
 

 and an instance of B or C. So, how to get the variable 'msg' from the parent's class object through this instance?
I've tried this: 

 foo = B() #or C()
bar = super(foo.__class__)
print bar.msg
 

 but got the message: "TypeError: super() argument 1 must be type, not classobj" 
 Answers (Total-6): #0 You actually want to use 

 class A(object):
 ...
...
b = B()
bar = super(b.__class__, b)
print bar.msg
 

 Base classes must be new-style classes (inherit from object ) 
 #1 As msg is a class variable, you can just do: 

 print C.msg # prints hohoho
 

 If you overwrite the variable (as you do in class B ), you have to find the right parent class. Remember that Python supports multiple inheritance . 

 But as you define the classes and you now that B inherits from A you can always do this: 

 class B(A):
 msg = 'hohoho'

 def get_parent_message(self):
  return A.msg
 

 UPDATE: 

 The most reliable thing would be: 

 def get_parent_attribute(instance, attribute):
 for parent in instance.__class__.__bases__:
  if attribute in parent.__dict__:
    return parent.__dict__[attribute]
 

 and then: 

 foo = B()
print get_parent_attribute(foo, 'msg')
 
 #2 Not sure why you want to do this 

 &gt;&gt;&gt; class A(object):
...  msg = 'hehehe'
... 
&gt;&gt;&gt; class B(A):
...  msg = 'hohoho'
... 
&gt;&gt;&gt; foo=B()
&gt;&gt;&gt; foo.__class__.__mro__[1].msg
'hehehe'
&gt;&gt;&gt; 
 
 #3 Try with: 

 class A(object):
 msg = 'hehehe'
 

 EDIT: 

 For the 'msg' attribute you would need: 

 foo = B()
bar = super(foo.__class__, foo)
print bar.msg
 
 #4 foo = B()
print foo.__class__.__bases__[0].msg
// 'hehehe'
 
 #5 #for B() you can use __bases__
print foo.__class__.__bases__[0].msg
 

 But this is not gonna be easy when there are multiple base classes and/or the depth of hierarchy is not one.