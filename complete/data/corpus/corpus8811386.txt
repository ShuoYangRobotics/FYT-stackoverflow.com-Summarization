Question (ID-8811386): Count decade occurrences infile: 

 1 3
2 3
3 3
4 3
8 3
9 3
12 3
14 3
18 3
19 3
20 3
25 3
26 3
27 3
28 3
30 3
31 3
32 3
36 3
38 3
101 3
109 3
 

 Once I knew a one liner to count the decade occurrences. E.g. 5 thirties... 
I hope you do now. A python script would be awesome. 

 Desired output: 

 0 6
1 4
2 5
3 4
10 2
 
 Answers (Total-11): #0 With Perl, use a hash: 

 use warnings;
use strict;

my %decs;
while (&lt;DATA&gt;) {
 my ($n) = /([0-9]+)/;
 my $x = int($n / 10);
 $decs{$x}++;
}
print "$_ $decs{$_}\n" for sort { $a &lt;=&gt; $b } keys %decs;

__DATA__
1 3
2 3
3 3
4 3
8 3
9 3
12 3
14 3
18 3
19 3
20 3
25 3
26 3
27 3
28 3
30 3
31 3
32 3
36 3
38 3
101 3
109 3
 

 Output: 

 0 6
1 4
2 5
3 5
10 2
 
 #1 An awk one-liner for you - 

 awk '{x=$1/10; a[int(x)]++} END{for(i in a) print i,a[i] | "sort -n"}' INPUT_FILE
 

 Test: 

 [jaypal:~/Temp] cat file
1 3
2 3
3 3
4 3
8 3
9 3
12 3
14 3
18 3
19 3
20 3
25 3
26 3
27 3
28 3
30 3
31 3
32 3
36 3
38 3
101 3
109 3

[jaypal:~/Temp] awk '{x=$1/10; a[int(x)]++} END{for(i in a) print i,a[i] | "sort -n"}' file
0 6
1 4
2 5
3 5
10 2
 
 #2 I don't quite grok what you're attempting to do here, but I think you're looking for something as simple as 

 from collections import defaultdict
decades = defaultdict(int)
for line in open('infile.txt', 'r'):
 decades[int(line.split()[0]) / 10] += 1
for decade, count in decades:
 print "%s people in their %s0s" % (count, decade * 10)
 
 #3 if i understand correclty: 

 perl -ne '{use integer; $i{$_/=10}++} END{ map { print $_*10," : $i{$_}\n" } sort keys %i }'
 
 #4 I think this python module will do what you need: 

 import sys
import math
from collections import OrderedDict 

def count_decades( infile ):
 decade_counts = OrderedDict()
 for line in infile:
  number = int( line.split( ' ' )[ 0 ] )
  decade_index = int( math.floor( number / 10 ) )
  decade_counts[ decade_index ] = decade_counts.get( decade_index, 0 ) + 1
 return decade_counts

if __name__ == '__main__': 
 with open( sys.argv[ 1 ], 'r' ) as infile:
  decade_counts = count_decades( infile )  
  for key, count in decade_counts.items():
   print( "{} - {} occurs {} times".format( 
    key * 10 , key * 10 + 9, count ) )
 

 When invoked like this: 

 python occur.py decades.txt
 

 The result is: 

 0 - 9 occurs 6 times
10 - 19 occurs 4 times
20 - 29 occurs 5 times
30 - 39 occurs 5 times
100 - 109 occurs 2 times
 

 You may need different output, but it should be easy to customize... 

 UPDATE: 

 For OPs desired output change: 

 print( "{} - {} occurs {} times".format( 
    key * 10 , key * 10 + 9, count ) )
 

 to 

 print( "{} {}".format( 
    key , count ) )
 
 #5 In Python 2.7: 

 from collections import Counter
c = Counter(int(line.split()[0]) // 10 for line in open("infile"))
for k, v in sorted(c.iteritems()):
 print k, v
 
 #6 Other perl solution: 

 perl -ane '
 $h{ int( $F[0] / 10 ) }++;
 END {
 for $num ( sort { $a &lt;=&gt; $b } keys %h ) {
  printf qq[%d\t%d\n], $num, $h{ $num }
 }
 }
' file
 

 Result: 

 0  6
1  4
2  5
3  5
10  2
 
 #7 One line Python itertools solution (should work for Python >= 2.4): 

 &gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; sorted((key, len(list(group))) for key, group in groupby(
...  int(line.split()[0]) // 10 for line in open('infile')))
[(0, 6), (1, 4), (2, 5), (3, 5), (10, 2)]
 
 #8 Here's a short one in Perl :) 

 perl -nE 'END{say"$_\t$h{$_}"for sort{$a&lt;=&gt;$b}keys%h}++$h{$_/5&gt;&gt;1}' input.txt
 

 
0  6
1  4
2  5
3  5
10  2
 
 #9 This might work for you: 

 sed 's/\S\s*\S*$//;s/^$/0/' file | uniq -c | sed 's/\s*\(\S*\)\s\(\S*\)/\2\t\1/'
0  6
1  4
2  5
3  5
10  2
 

 It looks as if your data is sorted, if not insert a sort -n like so: 

 sed 's/\S\s*\S*$//;s/^$/0/' file | sort -n | uniq -c | sed 's/\s*\(\S*\)\s\(\S*\)/\2\t\1/'
 
 #10 Another approach: 

 perl -ne '$h{$.=$_/10}++}{print"$_ $h{$_}\n"for sort{$a-$b}keys%h' infile.txt
 

 Output: 

 0  6
1  4
2  5
3  5
10  2
 

 Can be shortened further with -E and say if available.