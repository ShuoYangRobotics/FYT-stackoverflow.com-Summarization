Question (ID-1403674): Pythonic way to return list of every n'th item in a larger list Say we have a list of numbers from zero to 1000. Is there a pythonic/efficient way to produce a list of the first and every subsequent 10th item? ie. [0, 10, 20, 30 ...] 

 Yes I can do this using a for loop but I'm wondering if there is a neater way to do this, perhaps even in one line? 
 Answers (Total-9): #0 &gt;&gt;&gt; l = range(165)
&gt;&gt;&gt; l[0::10]
[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160]
 

 EDIT: just for fun, a little timing comparison (ignoring the boundary condition): 

 $ python -m timeit -s "l = range(1000)" "l1 = [x for x in l if x % 10 == 0]"
1000 loops, best of 3: 525 usec per loop
$ python -m timeit -s "l = range(1000)" "l1 = l[0::10]"
100000 loops, best of 3: 4.02 usec per loop
 
 #1 You can use the slice operator like this: 

 l = [1,2,3,4,5]
l2 = l[::2] # get subsequent 2nd item
 
 #2 
 source_list[0::10] is the most obvious, but this doesn't work for any iterable and is not memory efficient for large lists. 
 itertools.islice(source_sequence, 0, None, 10) works for any iterable and is memery efficient, but probably is not the fastest solution for large list and big step. 
 (source_list[i] for i in xrange(0, len(source_list), 10)) 
 
 #3 From manual: s[i:j:k] slice of s from i to j with step k 

 li = range(100); sub = li[0::10]
&gt;&gt;&gt; sub
[0, 10, 20, 30, 40, 50, 60, 70, 80, 90]
 
 #4 newlist = oldlist[::10]
 

 This picks out every 10th element of the list. 
 #5 Why not just use a step parameter of range function as well to get: 

 l = range(0, 1000, 10)
 

 For comparison, on my machine: 

 H:\&gt;python -m timeit -s "l = range(1000)" "l1 = [x for x in l if x % 10 == 0]"
10000 loops, best of 3: 90.8 usec per loop
H:\&gt;python -m timeit -s "l = range(1000)" "l1 = l[0::10]"
1000000 loops, best of 3: 0.861 usec per loop
H:\&gt;python -m timeit -s "l = range(0, 1000, 10)"
100000000 loops, best of 3: 0.0172 usec per loop
 
 #6 Here is a better implementation of an "every 10th item" list comprehension, that does not use the list contents as part of the membership test: 

 &gt;&gt;&gt; l = range(165)
&gt;&gt;&gt; [ item for i,item in enumerate(l) if i%10==0 ]
[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160]
&gt;&gt;&gt; l = list("ABCDEFGHIJKLMNOPQRSTUVWXYZ")
&gt;&gt;&gt; [ item for i,item in enumerate(l) if i%10==0 ]
['A', 'K', 'U']
 

 But this is still far slower than just using list slicing. 
 #7 existing_list = range(0, 1001)
filtered_list = [i for i in existing_list if i % 10 == 0]
 
 #8 List comprehensions are exactly made for that: 

 smaller_list = [x for x in range(100001) if x % 10 == 0]
 

 You can get more info about them in the python official documentation:
 http://docs.python.org/tutorial/datastructures.html#list-comprehensions