Question (ID-5360220): how to split a list into pairs in all possible ways I have a list (say 6 elements for simplicity) 

 L = [0,1,2,3,4,5]
 

 and I want to chunk it into pairs in ALL possible ways. I show some configurations: 

 [(0,1),(2,3),(4,5)]

[(0,1),(2,4),(3,5)]

[(0,1),(2,5),(3,4)]
 

 and so on. 
Here (a,b)=(b,a) and the order of pairs is not important i.e. 

 [(0,1),(2,3),(4,5)] = [(0,1),(4,5),(2,3)]
 

 The total number of such configurations is 1*3*5*...*(N-1) where N is the length of my list. Do you know how to write a generator in Python that gives my all possible configurations for an arbitrary N . Thanks in advance. 
 Answers (Total-7): #0 I don't think there's any function in the standard library that does exactly what you need. Just using itertools.combinations can get you a list of all possible individual pairs, but doesn't actually solve the problem of all valid pair combinations. 

 You could solve this easily with: 

 import itertools
def all_pairs(lst):
 for p in itertools.permutations(lst):
  i = iter(p)
  yield zip(i,i)
 

 But this will get you duplicates as it treats (a,b) and (b,a) as different, and also gives all orderings of pairs. In the end, I figured it's easier to code this from scratch than trying to filter the results, so here's the correct function. 

 def all_pairs(lst):
 if len(lst) &lt; 2:
  yield lst
  return
 a = lst[0]
 for i in range(1,len(lst)):
  pair = (a,lst[i])
  for rest in all_pairs(lst[1:i]+lst[i+1:]):
   yield [pair] + rest
 

 It's recursive, so it will run into stack issues with a long list, but otherwise does what you need. 

 >>> for x in all_pairs([0,1,2,3,4,5]):
 print x

[(0, 1), (2, 3), (4, 5)]
[(0, 1), (2, 4), (3, 5)]
[(0, 1), (2, 5), (3, 4)]
[(0, 2), (1, 3), (4, 5)]
[(0, 2), (1, 4), (3, 5)]
[(0, 2), (1, 5), (3, 4)]
[(0, 3), (1, 2), (4, 5)]
[(0, 3), (1, 4), (2, 5)]
[(0, 3), (1, 5), (2, 4)]
[(0, 4), (1, 2), (3, 5)]
[(0, 4), (1, 3), (2, 5)]
[(0, 4), (1, 5), (2, 3)]
[(0, 5), (1, 2), (3, 4)]
[(0, 5), (1, 3), (2, 4)]
[(0, 5), (1, 4), (2, 3)] 
 #1 Yet another solution. Conceptually similar to @shang's, but it does not assume that groups are of size 2 (a pair): 

 import itertools

def generate_groups(lst, n):
 if not lst:
  yield []
 else:
  for group in (((lst[0],) + xs) for xs in itertools.combinations(lst[1:], n-1)):
   for groups in generate_groups([x for x in lst if x not in group], n):
    yield [group] + groups

pprint(list(generate_groups([0, 1, 2, 3, 4, 5], 2)))
 

 Which yields the same output others have already found: 

 [[(0, 1), (2, 3), (4, 5)],
 [(0, 1), (2, 4), (3, 5)],
 [(0, 1), (2, 5), (3, 4)],
 [(0, 2), (1, 3), (4, 5)],
 [(0, 2), (1, 4), (3, 5)],
 [(0, 2), (1, 5), (3, 4)],
 [(0, 3), (1, 2), (4, 5)],
 [(0, 3), (1, 4), (2, 5)],
 [(0, 3), (1, 5), (2, 4)],
 [(0, 4), (1, 2), (3, 5)],
 [(0, 4), (1, 3), (2, 5)],
 [(0, 4), (1, 5), (2, 3)],
 [(0, 5), (1, 2), (3, 4)],
 [(0, 5), (1, 3), (2, 4)],
 [(0, 5), (1, 4), (2, 3)]]
 
 #2 Try the following recursive generator function: 

 def pairs_gen(L):
 if len(L) == 2:
  yield [(L[0], L[1])]
 else:
  first = L.pop(0)
  for i, e in enumerate(L):
   second = L.pop(i)
   for list_of_pairs in pairs_gen(L):
    list_of_pairs.insert(0, (first, second))
    yield list_of_pairs
   L.insert(i, second)
  L.insert(0, first)
 

 Example usage: 

 &gt;&gt;&gt; for pairs in pairs_gen([0, 1, 2, 3, 4, 5]):
...  print pairs
...
[(0, 1), (2, 3), (4, 5)]
[(0, 1), (2, 4), (3, 5)]
[(0, 1), (2, 5), (3, 4)]
[(0, 2), (1, 3), (4, 5)]
[(0, 2), (1, 4), (3, 5)]
[(0, 2), (1, 5), (3, 4)]
[(0, 3), (1, 2), (4, 5)]
[(0, 3), (1, 4), (2, 5)]
[(0, 3), (1, 5), (2, 4)]
[(0, 4), (1, 2), (3, 5)]
[(0, 4), (1, 3), (2, 5)]
[(0, 4), (1, 5), (2, 3)]
[(0, 5), (1, 2), (3, 4)]
[(0, 5), (1, 3), (2, 4)]
[(0, 5), (1, 4), (2, 3)]
 
 #3 Take a look at itertools.combinations . 

 matt@stanley:~$ python
Python 2.6.5 (r265:79063, Apr 16 2010, 13:57:41) 
[GCC 4.4.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import itertools
&gt;&gt;&gt; list(itertools.combinations(range(6), 2))
[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5), (4, 5)]
 
 #4 L = [1, 1, 2, 3, 4]
answer = []
for i in range(len(L)):
 for j in range(i+1, len(L)):
  if (L[i],L[j]) not in answer:
   answer.append((L[i],L[j]))

print answer
[(1, 1), (1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]
 

 Hope this helps 
 #5 def f(l):
 if l == []:
  yield []
  return
 ll = l[1:]
 for j in range(len(ll)):
  for end in f(ll[:j] + ll[j+1:]):
   yield [(l[0], ll[j])] + end
 

 Usage: 

 for x in f([0,1,2,3,4,5]):
 print x

&gt;&gt;&gt; 
[(0, 1), (2, 3), (4, 5)]
[(0, 1), (2, 4), (3, 5)]
[(0, 1), (2, 5), (3, 4)]
[(0, 2), (1, 3), (4, 5)]
[(0, 2), (1, 4), (3, 5)]
[(0, 2), (1, 5), (3, 4)]
[(0, 3), (1, 2), (4, 5)]
[(0, 3), (1, 4), (2, 5)]
[(0, 3), (1, 5), (2, 4)]
[(0, 4), (1, 2), (3, 5)]
[(0, 4), (1, 3), (2, 5)]
[(0, 4), (1, 5), (2, 3)]
[(0, 5), (1, 2), (3, 4)]
[(0, 5), (1, 3), (2, 4)]
[(0, 5), (1, 4), (2, 3)]
 
 #6 How about this: 

 items = ["me", "you", "him"]
[(items[i],items[j]) for i in range(len(items)) for j in range(i+1, len(items))]

[('me', 'you'), ('me', 'him'), ('you', 'him')]
 

 or 

 items = [1, 2, 3, 5, 6]
[(items[i],items[j]) for i in range(len(items)) for j in range(i+1, len(items))]

[(1, 2), (1, 3), (1, 5), (1, 6), (2, 3), (2, 5), (2, 6), (3, 5), (3, 6), (5, 6)]