Question (ID-2031846): Python find list lengths in a sublist I am trying to find out how to get the length of every list that is held within a particular list. For example: 

 a = []
a.append([])
a[0].append([1,2,3,4,5])
a[0].append([1,2,3,4])
a[0].append([1,2,3])
 

 I'd like to run a command like: 

 len(a[0][:]) 
 

 which would output the answer I want which is a list of the lengths [5,4,3]. That command obviously does not work, and neither do a few others that I've tried. Please help! 
 Answers (Total-6): #0 [len(x) for x in a[0]] ? 

 &gt;&gt;&gt; a = []
&gt;&gt;&gt; a.append([])
&gt;&gt;&gt; a[0].append([1,2,3,4,5])
&gt;&gt;&gt; a[0].append([1,2,3,4])
&gt;&gt;&gt; a[0].append([1,2,3])
&gt;&gt;&gt; [len(x) for x in a[0]]
[5, 4, 3]
 
 #1 map(len, a[0]) 
 #2 [len(x) for x in a[0]]
 
 #3 This is known as List comprehension (click for more info and a description). 

 [len(l) for l in a[0]]
 
 #4 def lens(listoflists):
 return [len(x) for x in listoflists]
 

 now, just call lens(a[0]) instead of your desired len(a[0][:]) (you can, if you insist, add that redundant [:] , but that's just doing a copy for no purpose whatsoever -- waste not, want not;-). 
 #5 using the usual "old school" way 

 t=[]
for item in a[0]:
 t.append(len(item))
print t