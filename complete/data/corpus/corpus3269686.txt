Question (ID-3269686): Short rot13 function I am searching for an short and cool rot13 function in Python ;-)
I've written this function: 

 def rot13(s):
 chars = "abcdefghijklmnopqrstuvwxyz"
 trans = chars[13:]+chars[:13]
 rot_char = lambda c: trans[chars.find(c)] if chars.find(c)&gt;-1 else c
 return ''.join( rot_char(c) for c in s ) 
 

 Can anyone make it better? E.g supporting uppercase characters. 

 This is less a question, than having fun to find a short Python function ;-) 
 Answers (Total-7): #0 &gt;&gt;&gt; 'foobar'.encode('rot13')
'sbbone'
 

 (I've heard rumors this doesn't work in Python 3.x though.) 
 #1 Here's a maketrans/translate solution 

 import string #fixed typo was using
rot13 = string.maketrans( \
 "ABCDEFGHIJKLMabcdefghijklmNOPQRSTUVWXYZnopqrstuvwxyz", \
 "NOPQRSTUVWXYZnopqrstuvwxyzABCDEFGHIJKLMabcdefghijklm")
string.translate("Hello World!", rot13)
# 'Uryyb Jbeyq!'
 
 #2 The maketrans and translate functions in the string module are handy for this type of thing. Of course, the encode method in Amber's response is even handier for this specific case. 

 Here's a general solution: 

 import string

def make_rot_n(n):
 lc = string.lowercase
 trans = string.maketrans(lc, lc[n:] + lc[:n])
 return lambda s: string.translate(s, trans)

rot13 = make_rot_n(13)

rot13('foobar')
# 'sbbone'
 
 #3 its very simple 

 import codecs
codecs.encode('foobar', 'rot13')
&gt;&gt; 'sbbone'
 
 #4 /usr/lib/python/this.py 

 d = {}
for c in (65, 97):
 for i in range(26):
  d[chr(i+c)] = chr((i+13) % 26 + c)

print "".join([d.get(c, c) for c in s])
 
 #5 s = "foobar"
s.encode("rot13")
 
 #6 Try this: 

 import codecs
codecs.encode("text to be rot13()'ed", "rot13")