Question (ID-1118163): Turbogears 2 vs Django - any advice on choosing replacement for Turbogears 1? I have been using Turbogears 1 for prototyping small sites for the last couple of years and it is getting a little long in the tooth. Any suggestions on making the call between upgrading to Turbogears 2 or switching to something like Django? I'm torn between the familiarity of the TG community who are pretty responsive and do pretty good documentation vs the far larger community using Django. I am quite tempted by the built-in CMS features and the Google AppEngine support. 

 Any advice? 

 Thanks 

 .M. 
 Answers (Total-6): #0 TG2 is built on top of Pylons which has a fairly large community as well. TG got faster compared to TG1 and it includes a per-method (not just web pages) caching engine.
I think it's more AJAX-friendly than Django by the way pages can be easly published in HTML or JSON . 

 2011 update: after 3 years of bloated frameworks I'm an happy user of http://bottlepy.org/ 
 #1 I have experience with both Django and TG1.1. 

 IMO, TurboGears strong point is it's ORM: SQLAlchemy. I prefer TurboGears when the database side of things is non-trivial. 

 Django's ORM is just not that flexible and powerful. 

 That being said, I prefer Django. If the database schema is a good fit with Django's ORM I would go with Django. 

 In my experience, it is simply less hassle to use Django compared with TurboGears. 
 #2 I have been using Django for a year now and when I started I had no experience of Python or Django and found it very intuitive to use. 

 I have created a number of hobbyist Google App Engine apps using Django with the latest one being a CMS for my site. Using Django has meant that I have been able to code a lot quicker and with a lot less bugs. 
 #3 Am sure you would have read from plenty of comparison between TurboGears and DJango on web. 

 But as for your temptation on CMS and GAE, i can really think you got to go DJango way. 
Check these out, and decide youself. 

 Django with GAE 

 Django for CMS 
 #4 Ive only got one question...is the app you are developing directed towards social networking
 or customized business logic? 

 I personally find Django is good for social networking and pylons/turbogears if you really
 want the flexibility and no boundaries... 

 just my 2c 
 #5 TG2 seem much complicated and confusing, even for doing somewhat simple like a login page with multimple error messages
 How to extend the Turbogears 2.1 login functionality 
I think thats because of intemperance in modularity...