Question (ID-497885): Python tuple operations Is there anyway to get tuples operation in python to work like this: 

 &gt;&gt;&gt;a = (1,2,3)
&gt;&gt;&gt;b = (3,2,1)
&gt;&gt;&gt;a + b
(4,4,4)
 

 instead of: 

 &gt;&gt;&gt;a = (1,2,3)
&gt;&gt;&gt;b = (3,2,1)
&gt;&gt;&gt;a + b
(1,2,3,3,2,1)
 

 I know it works like that because the __add__ and __mul__ methods are defined to work like that.
So the only way would be to redefine them? 
 Answers (Total-7): #0 import operator
tuple(map(operator.add, a, b))
 
 #1 Sort of combined the first two answers, with a tweak to ironfroggy's code so that it returns a tuple: 

 import operator

class stuple(tuple):
 def __add__(self, other):
  return self.__class__(map(operator.add, self, other))
  # obviously leaving out checking lengths

&gt;&gt;&gt; a = stuple([1,2,3])
&gt;&gt;&gt; b = stuple([3,2,1])
&gt;&gt;&gt; a + b
(4, 4, 4)
 

 Note: using self.__class__ instead of stuple to ease subclassing. 
 #2 
 from numpy import * 

 a = array( [1,2,3] )
b = array( [3,2,1] )

print a + b
 

 

 gives array([4,4,4]). 

 See http://www.scipy.org/Tentative_NumPy_Tutorial 
 #3 map(sum,zip(a,b))
 
 #4 What others have said so far is correct, but if you're more generally interested in vectorizing your code, you might want to check out NumPy arrays. 
 #5 Yes. But you can't redefine built-in types. You have to subclass them: 

 
class MyTuple(tuple):
 def __add__(self, other):
   if len(self) != len(other):
    raise ValueError("tuple lengths don't match")
   return MyTuple(x + y for (x, y) in zip(self, other))
 
 #6 simple solution without class definition that returns tuple 

 import operator
tuple(map(operator.add,a,b))