Question (ID-1384406): Python: convert seconds to hh:mm:ss Please, how to convert an int (number a seconds) to these formats: mm:ss or hh:mm:ss ? 

 I need to do this with Python code (and if possible in a Django template ?). 

 Thank you very much ;-) 
 Answers (Total-10): #0 I can't believe any of the many answers gives what I'd consider the "one obvious way to do it" (and I'm not even Dutch...!-) -- up to just below 24 hours' worth of seconds (86399 seconds, specifically): 

 &gt;&gt;&gt; import time
&gt;&gt;&gt; time.strftime('%H:%M:%S', time.gmtime(12345))
'03:25:45'
 

 Doing it in a Django template's more finicky, since the time filter supports a funky time-formatting syntax (inspired, I believe, from PHP), and also needs the datetime module, and a timezone implementation such as pytz, to prep the data. For example: 

 &gt;&gt;&gt; from django import template as tt
&gt;&gt;&gt; import pytz
&gt;&gt;&gt; import datetime
&gt;&gt;&gt; tt.Template('{{ x|time:"H:i:s" }}').render(
...  tt.Context({'x': datetime.datetime.fromtimestamp(12345, pytz.utc)}))
u'03:25:45'
 

 Depending on your exact needs, it might be more convenient to define a custom filter for this formatting task in your app. 
 #1 &gt;&gt;&gt; a = datetime.timedelta(seconds=65)
datetime.timedelta(0, 65)
&gt;&gt;&gt; str(a)
'0:01:05'
 
 #2 Code that does what was requested, with examples, and showing how cases he didn't specify are handled: 

 def format_seconds_to_hhmmss(seconds):
 hours = seconds // (60*60)
 seconds %= (60*60)
 minutes = seconds // 60
 seconds %= 60
 return "%02i:%02i:%02i" % (hours, minutes, seconds)

def format_seconds_to_mmss(seconds):
 minutes = seconds // 60
 seconds %= 60
 return "%02i:%02i" % (minutes, seconds)

minutes = 60
hours = 60*60
assert format_seconds_to_mmss(7*minutes + 30) == "07:30"
assert format_seconds_to_mmss(15*minutes + 30) == "15:30"
assert format_seconds_to_mmss(1000*minutes + 30) == "1000:30"

assert format_seconds_to_hhmmss(2*hours + 15*minutes + 30) == "02:15:30"
assert format_seconds_to_hhmmss(11*hours + 15*minutes + 30) == "11:15:30"
assert format_seconds_to_hhmmss(99*hours + 15*minutes + 30) == "99:15:30"
assert format_seconds_to_hhmmss(500*hours + 15*minutes + 30) == "500:15:30"
 

 You can--and probably should--store this as a timedelta rather than an int, but that's a separate issue and timedelta doesn't actually make this particular task any easier. 
 #3 You can calculate the number of minutes and hours from the number of seconds by simple division: 

 seconds = 12345
minutes = seconds // 60
hours = minutes // 60

print "%02d:%02d:%02d" % (hours, minutes % 60, seconds % 60)
print "%02d:%02d" % (minutes, seconds % 60)
 

 Here // is pythons integer division. 
 #4 Have you read up on the datetime module? 

 Edit/update: SilentGhost's answer has the details my answer leaves out. If you like this answer, +1 his as well (or instead). Reposted here: 

 &gt;&gt;&gt; a = datetime.timedelta(seconds=65)
datetime.timedelta(0, 65)
&gt;&gt;&gt; str(a)
'0:01:05'
 
 #5 Besides the fact that Python has built in support for dates and times (see bigmattyh's response), finding minutes or hours from seconds is easy: 

 minutes = seconds / 60
hours = minutes / 60
 

 Now, when you want to display minutes or seconds, MOD them by 60 so that they will not be larger than 59 
 #6 Not being a python person but easiest without any libraries just: 

 total = 3800
seconds = total % 60
total = total - seconds
hours = total / 3600
total = total - (hours * 3600)
mins = total / 60
 

 Updated code, thanks sth 
 #7 Just be careful when dividing by 60: division between integers returns an integer ->
12/60 = 0 unless you import division from future.
The following is copy and pasted from Python 2.6.2: 

 IDLE 2.6.2  
&gt;&gt;&gt; 12/60
0
&gt;&gt;&gt; from __future__ import division
&gt;&gt;&gt; 12/60
0.20000000000000001
 
 #8 If you use divmod, you are immune to different flavors of integer division: 

 # show time strings for 3800 seconds

# easy way to get mm:ss
print "%02d:%02d" % divmod(3800, 60)

# easy way to get hh:mm:ss
print "%02d:%02d:%02d" % \
 reduce(lambda ll,b : divmod(ll[0],b) + ll[1:],
  [(3800,),60,60])


# function to convert floating point number of seconds to 
# hh:mm:ss.sss
def secondsToStr(t):
 return "%02d:%02d:%02d.%03d" % \
  reduce(lambda ll,b : divmod(ll[0],b) + ll[1:],
   [(t*1000,),1000,60,60])

print secondsToStr(3800.123)
 

 Prints: 

 63:20
01:03:20
01:03:20.123
 
 #9 If you need to do this a lot, you can precalculate all possible strings for number of seconds in a day: 

 try:
 from itertools import product
except ImportError:
 def product(*seqs):
  if len(seqs) == 2:
   for s1 in seqs[0]:
    for s2 in seqs[1]:
     yield (s1,s2)
  else:
   for s in seqs[0]:
    for p in product(*seqs[1:]):
     yield (s,) + p

hhmmss = {}
i = 0
for (h,m,s) in product(range(24),range(60),range(60)):
 hhmmss[i] = "%02d:%02d:%02d" % (h,m,s)
 i += 1
 

 Now conversion of seconds to format string is a fast dict lookup: 

 print hhmmss[12345]
 

 prints 

 '03:25:45'