Question (ID-7851077): how to return index of a sorted list? I need to sort a list and then return a list with the index of the sorted items in the list. For example, if the list I want to sort is [2,3,1,4,5], I need [2,0,1,3,4] to be returned. 

 This question was posted on bytes, but i thought i would repost it here.
 http://bytes.com/topic/python/answers/44513-sorting-list-then-return-index-sorted-item 

 my specific need to sort a list of objects based on a property of the objects. i then need to re-order a corresponding list to match the order of the newly sorted list. 

 is there a good way to do this? 
 Answers (Total-7): #0 You can use the python sorting functions' key parameter to sort the index array instead. 

 &gt;&gt;&gt; s = [2, 3, 1, 4, 5]
&gt;&gt;&gt; sorted(range(5), key=lambda k: s[k])
[2, 0, 1, 3, 4]
&gt;&gt;&gt; 
 
 #1 You can do this with numpy's argsort method if you have numpy available: 

 &gt;&gt;&gt; import numpy
&gt;&gt;&gt; vals = numpy.array([2,3,1,4,5])
&gt;&gt;&gt; vals
array([2, 3, 1, 4, 5])
&gt;&gt;&gt; sort_index = numpy.argsort(vals)
&gt;&gt;&gt; sort_index
array([2, 0, 1, 3, 4])
 

 If not available, taken from this question , this is the fastest method: 

 &gt;&gt;&gt; vals = [2,3,1,4,5]
&gt;&gt;&gt; sorted(range(len(vals)), key=vals.__getitem__)
[2, 0, 1, 3, 4]
 
 #2 If you need both the sorted list and the list of indices, you could do: 

 &gt;&gt;&gt; L = [2,3,1,4,5]
&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; indices, L_sorted = zip(*sorted(enumerate(L), key=itemgetter(1)))
&gt;&gt;&gt; list(L_sorted)
[1, 2, 3, 4, 5]
&gt;&gt;&gt; list(indices)
[2, 0, 1, 3, 4]
 

 Or, for Python &lt;2.4 (no itemgetter or sorted ): 

 &gt;&gt;&gt; temp = [(v,i) for i,v in enumerate(L)]
&gt;&gt;&gt; temp.sort
&gt;&gt;&gt; indices, L_sorted = zip(*temp)
 

 p.s. The zip(*iterable) idiom reverses the zip process (unzip). 

 

 Update: 

 To deal with your specific requirements: 

 
 "my specific need to sort a list of objects based on a property of the objects. i then need to re-order a corresponding list to match the order of the newly sorted list." 
 

 That's a long-winded way of doing it. You can achieve that with a single sort by zipping both lists together then sort using the object property as your sort key (and unzipping after). 

 zipped = zip(obj_list, secondary_list)
zipped_sorted = sorted(combined, key=lambda x: x[0].some_obj_attribute)
obj_list, secondary_list = map(list, zip(*zipped_sorted))
 

 Here's a simple example, using strings to represent your object. Here we use the length of the string as the key for sorting.: 

 &gt;&gt;&gt; str_list = ["banana", "apple", "nom", "Eeeeeeeeeeek"]
&gt;&gt;&gt; sec_list = [0.123423, 9.231, 23, 10.11001]
&gt;&gt;&gt; temp = sorted(zip(str_list, sec_list), key=lambda x: len(x[0]))
&gt;&gt;&gt; str_list, sec_list = map(list, zip(*temp))
&gt;&gt;&gt; str_list
['nom', 'apple', 'banana', 'Eeeeeeeeeeek']
&gt;&gt;&gt; sec_list
[23, 9.231, 0.123423, 10.11001]
 
 #3 What I would do, looking at your specific need: 

 Say you have list a with some values, and your keys are in the attribute x of the objects stored in list b 

 keys = {i:j.x for i,j in zip(a, b)}
a.sort(key=keys.__get_item__)
 

 With this method you get your list ordered without having to construct the intermediate permutation list you were asking for. 
 #4 How about 

 l1 = [2,3,1,4,5]
l2 = [l1.index(x) for x in sorted(l1)]
 
 #5 you can use numpy.argsort 

 or you can do: 

 test = [2,3,1,4,5]
idxs = zip(*sorted([(val, i) for i, val in enumerate(test)]))[1]
 
 #6 Straight out of the documentation for collections.OrderedDict : 

 &gt;&gt;&gt; # dictionary sorted by value
&gt;&gt;&gt; OrderedDict(sorted(d.items(), key=lambda t: t[1]))
OrderedDict([('pear', 1), ('orange', 2), ('banana', 3), ('apple', 4)])
 

 Adapted to the example in the original post: 

 &gt;&gt;&gt; l=[2,3,1,4,5]
&gt;&gt;&gt; OrderedDict(sorted(enumerate(l), key=lambda x: x[1])).keys()
[2, 0, 1, 3, 4]
 

 See http://docs.python.org/library/collections.html#collections.OrderedDict for details.