Question (ID-536148): C++ string parsing (python style) I love how in python I can do something like: 

 points = []
for line in open("data.txt"):
 a,b,c = map(float, line.split(','))
 points += [(a,b,c)]
 

 Basically it's reading a list of lines where each one represents a point in 3D space, the point is represented as three numbers separated by commas 

 How can this be done in C++ without too much headache? 

 Performance is not very important, this parsing only happens one time, so simplicity is more important. 

 P.S. I know it sounds like a newbie question, but believe me I've written a lexer in D (pretty much like C++) which involves reading some text char by char and recognizing tokens, 
it's just that, coming back to C++ after a long period of python, just makes me not wanna waste my time on such things. 
 Answers (Total-10): #0 I`d do something like this: 

 ifstream f("data.txt");
string str;
while (getline(f, str)) {
 Point p;
 sscanf(str.c_str(), "%f, %f, %f\n", &amp;p.x, &amp;p.y, &amp;p.z); 
 points.push_back(p);
}
 

 x,y,z must be floats. 

 And include: 

 #include &lt;iostream&gt;
#include &lt;fstream&gt;
 
 #1 All these good examples aside, in C++ you would normally override the operator &gt;&gt; for your point type to achieve something like this: 

 point p;
while (file &gt;&gt; p)
 points.push_back(p);
 

 or even: 

 copy(
 istream_iterator&lt;point&gt;(file),
 istream_iterator&lt;point&gt;(),
 back_inserter(points)
);
 

 The relevant implementation of the operator could look very much like the code by j_random_hacker. 
 #2 The C++ String Toolkit Library (StrTk) has the following solution to your problem: 

 #include &lt;string&gt;
#include &lt;deque&gt;
#include "strtk.hpp"

struct point { double x,y,z; }

int main()
{
 std::deque&lt;point&gt; points;
 point p;
 strtk::for_each_line("data.txt",
      [&amp;points,&amp;p](const std::string&amp; str)
      {
       strtk::parse(str,",",p.x,p.y,p.z);
       points.push_back(p);
      });
 return 0;
}
 

 More examples can be found Here 
 #3 #include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;sstream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;  // For replace()

using namespace std;

struct Point {
 double a, b, c;
};

int main(int argc, char **argv) {
 vector&lt;Point&gt; points;

 ifstream f("data.txt");

 string str;
 while (getline(f, str)) {
  replace(str.begin(), str.end(), ',', ' ');
  istringstream iss(str);
  Point p;
  iss &gt;&gt; p.a &gt;&gt; p.b &gt;&gt; p.c;
  points.push_back(p);
 }

 // Do something with points...

 return 0;
}
 
 #4 This answer is based on the previous answer by j_random_hacker and makes use of Boost Spirit. 

 #include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;sstream&gt;
#include &lt;string&gt;
#include &lt;boost/spirit.hpp&gt;

using namespace std;
using namespace boost;
using namespace boost::spirit;

struct Point {
 double a, b, c;
};

int main(int argc, char **argv) 
{
 vector&lt;Point&gt; points;

 ifstream f("data.txt");

 string str;
 Point p;
 rule&lt;&gt; point_p = 
   double_p[assign_a(p.a)] &gt;&gt; ',' 
  &gt;&gt; double_p[assign_a(p.b)] &gt;&gt; ',' 
  &gt;&gt; double_p[assign_a(p.c)] ; 

 while (getline(f, str)) 
 {
  parse( str, point_p, space_p );
  points.push_back(p);
 }

 // Do something with points...

 return 0;
}
 
 #5 Fun with Boost.Tuples: 

 #include &lt;boost/tuple/tuple_io.hpp&gt;
#include &lt;vector&gt;
#include &lt;fstream&gt;
#include &lt;iostream&gt;
#include &lt;algorithm&gt;

int main() {
 using namespace boost::tuples;
 typedef boost::tuple&lt;float,float,float&gt; PointT;

 std::ifstream f("input.txt");
 f &gt;&gt; set_open(' ') &gt;&gt; set_close(' ') &gt;&gt; set_delimiter(',');

 std::vector&lt;PointT&gt; v;

 std::copy(std::istream_iterator&lt;PointT&gt;(f), std::istream_iterator&lt;PointT&gt;(),
    std::back_inserter(v)
 );

 std::copy(v.begin(), v.end(), 
    std::ostream_iterator&lt;PointT&gt;(std::cout)
 );
 return 0;
}
 

 Note that this is not strictly equivalent to the Python code in your question because the tuples don't have to be on separate lines. For example, this: 

 1,2,3 4,5,6
 

 will give the same output than: 

 1,2,3
4,5,6
 

 It's up to you to decide if that's a bug or a feature :) 
 #6 You could read the file from a std::iostream line by line, put each line into a std::string and then use boost::tokenizer to split it. It won't be quite as elegant/short as the python one but a lot easier than reading things in a character at a time... 
 #7 One of Sony Picture Imagework's open-source projects is Pystring , which should make for a mostly direct translation of the string-splitting parts: 

 
 Pystring is a collection of C++ functions which match the interface and behavior of pythonâ€™s string class methods using std::string. Implemented in C++, it does not require or make use of a python interpreter. It provides convenience and familiarity for common string operations not included in the standard C++ library 
 

 There are a few examples , and some documentation 
 #8 Its nowhere near as terse, and of course I didn't compile this. 

 float atof_s( std::string &amp; s ) { return atoi( s.c_str() ); }
{ 
ifstream f("data.txt")
string str;
vector&lt;vector&lt;float&gt;&gt; data;
while( getline( f, str ) ) {
 vector&lt;float&gt; v;
 boost::algorithm::split_iterator&lt;string::iterator&gt; e;
 std::transform( 
  boost::algorithm::make_split_iterator( str, token_finder( is_any_of( "," ) ) ),
  e, v.begin(), atof_s );
 v.resize(3); // only grab the first 3
 data.push_back(v);
}
 
 #9 all these are good examples. yet they dont answer the following: 

 
 a CSV file with different column numbers (some rows with more columns than others) 
 or when some of the values have white space (ya yb,x1 x2,,x2,) 
 

 so for those who are still looking, this class:
 http://www.codeguru.com/cpp/tic/tic0226.shtml 
is pretty cool... some changes might be needed