Question (ID-156853): What is the best SNMP implementation for Python? I'm doing some GUI prototyping with Python for an SNMP application. Looking around there seem to be a number of python libraries I could use. As I'm prototyping I value a nice clean easy API over speed and preferably a commonly packaged library. Obviously the package should be open source. So far I've been looking PySNMP, Twisted-Snmp, pynetsnmp and seafelt's libsnmp. 
 Answers (Total-6): #0 Of the libraries you mention I'd single out the python net-snmp library and pysnmp. One of my criteria for choosing well supported libraries is are they in debian/ubuntu and these both pass that test. 

 Net-snmp does come with python bindings . Net-snmp is in some ways the de-facto snmp library (for linux at least) so it is probably a good choice in that respect. However net-snmp is an extrememly large and gangly C library (which I've spent rather a lot of time hacking on and reading the source code) which is a downside. 

 The other alternative is a pure python snmp library - pysnmp which seems like a sensible choice, though I haven't actually tried that one. The twisted wrapper for it could come in handy. 

 If I was starting a new SNMP development I'd try pysnmp to see how well it works, but the old faithful (py)net-snmp is always there if you need it. 

 If you just want a bit of light usage of snmp then you can use the net-snmp command line tools very easily, eg 

 snmpget -c password host -v1 enterprises.318.1.1.12.2.3.1.1.2.1
 

 To read the power usage of an APC powerbar, which would work fine for prototyping I would have thought. 

 [edit: one year later] 

 I've now had a chance to try the pysnmp library. 

 I wasn't happy with the stable branch 2.x, but the development 4.x works and has a lots of good features, including 

 
 MIB loading 
 Reasonably simple oneliner interface 
 Full support of set/get/walk with bulk versions of those 
 Sync and Async interface 
 Support for server (agent) and client (manager) 
 

 I found it moderately complicated to work with, but I managed to work it out with help from the docs and the source code. 

 Top tip: set os.environ['PYSNMP_MIB_DIR'] to point to directories with your own converted mibs in, and use build-pysnmp-mib to make them, or if that doesn't work 

 smidump -k -f python My-MIB.txt | libsmi2pysnmp &gt; My-MIB.py
 
 #1 Net-Snmp has python bindings. Very simple (command-line like functions) access to SNMP functionality. If you use the Net-Snmp trap daemon, you can direct trap info to python (or any other language) scripts. 
 #2 The most active project of "Security not my Problem" seems to be pycopia SNMP . I have no experience with any of them, but if you have troubles finding the correct one have a look at the mailinglist archives of the libraries to find the most active one. Those usually have the better API/implementation or at least more users. 
 #3 This isn't so much an answer as much as me sharing my experience testing these libraries. 

 I ran some snmpwalk benchmarks on PySNMP 4.x and net-snmp using python's multiprocessing.Pool . Benchmarks were pretty dirty (basically scaled up the thread pool until I didn't get any performance gains), so reader be-ware. Here's some observations: 

 netsnmp's python bindings: 

 
 Could pull down 11958 oids/sec on the quad core test box. 
 Didn't consume a lot of CPU. Seemed to be waiting on network I/O most of the time (keep reading). 
 Didn't support snmpbulkwalk, unfortunately. So this generates more network traffic and a single thread of execution tends to be slow. 
 It has some annoying MIB look up behavior. I had to specify 'ifName' instead of 'IF-MIB::ifName', which could lead to some ambiguity. I also couldn't seem to find a way to control MIB lookups very well. 
 Threading will not work well . Even if you want one thread of execution, run it in a separate process so you don't starve other threads. This library is thread safe, but not thread friendly. 
 

 PySNMP4: 

 
 Came in at 5560 oids/sec on the same box. 
 Very CPU intensive. I attribute this to the packet parsing being done in python. 
 MIB lookups I thought were really nice. 
 snmpwalks would leak some unrelated OIDs. For example, I'd walk IF-MIB::ifXTable and at the end I'd get IF-MIB::ifStackTable. IF-MIB dump . 
 I'd almost certainly tailor a wrapper for my application instead of using this library directly. Specifically I'd wrap all the error handling to use Exceptions. 
 I'm not a big fan of writing/reading asynchronous code, so I'd just ignore all the async bits and run big SNMP operations in a separate process. 
 

 Overall, I'm really kind of disappointed. There's really not a "best overall" library. Apart from the API and performance, PySNMP4 is great. Apart from having some strange MIB/oid lookup handling behavior and not supporting many bulk operations, NetSNMP's python bindings were great. 
 #4 I say the one I wrote last weekend: 

 http://code.google.com/p/multicore-snmp/ 

 Full process based API to Net-SNMP which supports V1-V3. 
 #5 I searched for SNMP implementations today, and my favourite is http://pysnmp.sourceforge.net 

 They offer one-liners (which are in fact a little bit longer than a normal line, but I am not picky): 

  from pysnmp.entity.rfc3413.oneliner import cmdgen

errorIndication, errorStatus, \
     errorIndex, varBinds = cmdgen.CommandGenerator().getCmd(
 # SNMP v1
# cmdgen.CommunityData('test-agent', 'public', 0),
 # SNMP v2
 cmdgen.CommunityData('test-agent', 'public'),
 # SNMP v3
# cmdgen.UsmUserData('test-user', 'authkey1', 'privkey1'),
 cmdgen.UdpTransportTarget(('localhost', 161)),
 # Plain OID
 (1,3,6,1,2,1,1,1,0),
 # ((mib-name, mib-symbol), instance-id)
 (('SNMPv2-MIB', 'sysObjectID'), 0)
 )
 

 I wrote a short SNMP interface fetching script here which handles overflowing Counter32 values on cheap HP 1810G switches:
 http://blog.lagentz.com/python/handling-snmp-counter32-overflows-on-hp1810-g-correctly/