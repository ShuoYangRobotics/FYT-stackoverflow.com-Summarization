Question (ID-2636656): How to do this in a pythonic way? Consider this Python snippet: 

 for a in range(10):

 if a == 7:
  pass
 if a == 8:
  pass
 if a == 9:
  pass
 else:
  print "yes"
 

 How can it be written shorter? 

 #Like this or...
if a ?????[7,8,9]:
 pass
 
 Answers (Total-8): #0 Use the in operator: 

 if a in (7,8,9):
 pass
 
 #1 To test if a falls within a range: 

 if 7 &lt;= a &lt;= 9:
 pass
 

 To test if a is in a given sequence: 

 if a in [3, 5, 42]:
 pass
 
 #2 for a in range(10):
 if a &gt; 6:
  continue
 print('yes')
 
 #3 Based on your original code the direct "pythonic" replacement is: 

 if not a in [7, 8, 9]:
  print 'yes'
 

 or 

 if a not in [7, 8, 9]:
  print 'yes'
 

 The latter reads a little better, so I guess it's a bit more "pythonic". 
 #4 if a in [7,8,9]
 
 #5 Depending on what you want to do, the map() function can also be interesting: 

 def _print(x):
 print 'yes'

map(_print, [a for a in range(10) if a not in (7,8,9)])
 
 #6 What about using lambda. 

 &gt;&gt;&gt; f = lambda x: x not in (7, 8, 9) and print('yes')
&gt;&gt;&gt; f(3)
yes
&gt;&gt;&gt; f(7)
False
 
 #7 Since the question is tagged as beginner, I'm going to add
some basic if-statement advice: 

 
 if a == 7:
 pass
if a == 8:
 pass
if a == 9:
 ...
else:
 ...
 
 

 are three independent if statements and the first two have no effect, the else refers only to 

 
 if a == 9:
 
 

 so if a is 7 or 8, the program prints "yes". For future use of if-else statement like this, make sure to use elif: 

 if a == 7:
 seven()
elif a == 8:
 eight()
elif a == 9:
 nine()
else:
 print "yes"
 

 or use just one if-statement if they call for the same action: 

 if a == 7 or a == 8 or a == 9:
 seven_eight_or_nine()
else:
 print "yes"