Question (ID-168409): How do you get a directory listing sorted by creation date in python? What is the best way to get a list of all files in a directory, sorted by date [created | modified], using python, on a windows machine? 
 Answers (Total-8): #0 I've done this in the past for a Python script to determine the last updated files in a directory: 

 import glob
import os

search_dir = "/mydir/"
# remove anything from the list that is not a file (directories, symlinks)
# thanks to J.F. Sebastion for pointing out that the requirement was a list 
# of files (presumably not including directories) 
files = filter(os.path.isfile, glob.glob(search_dir + "*"))
files.sort(key=lambda x: os.path.getmtime(x))
 

 That should do what you're looking for based on file mtime. 

 EDIT : Note that you can also use os.listdir() in place of glob.glob() if desired - the reason I used glob in my original code was that I was wanting to use glob to only search for files with a particular set of file extensions, which glob() was better suited to. To use listdir here's what it would look like: 

 import os

search_dir = "/mydir/"
os.chdir(search_dir)
files = filter(os.path.isfile, os.listdir(search_dir))
files = [os.path.join(search_dir, f) for f in files] # add path to each file
files.sort(key=lambda x: os.path.getmtime(x))
 
 #1 Here's a more verbose version of @Greg Hewgill 's answer . It is the most conforming to the question requirements. It makes a distinction between creation and modification dates (at least on Windows). 

 #!/usr/bin/env python
from stat import S_ISREG, ST_CTIME, ST_MODE
import os, sys, time

# path to the directory (relative or absolute)
dirpath = sys.argv[1] if len(sys.argv) == 2 else r'.'

# get all entries in the directory w/ stats
entries = (os.path.join(dirpath, fn) for fn in os.listdir(dirpath))
entries = ((os.stat(path), path) for path in entries)

# leave only regular files, insert creation date
entries = ((stat[ST_CTIME], path)
   for stat, path in entries if S_ISREG(stat[ST_MODE]))
#NOTE: on Windows `ST_CTIME` is a creation date 
# but on Unix it could be something else
#NOTE: use `ST_MTIME` to sort by a modification date

for cdate, path in sorted(entries):
 print time.ctime(cdate), os.path.basename(path)
 

 Example: 

 $ python stat_creation_date.py
Thu Feb 11 13:31:07 2009 stat_creation_date.py
 
 #2 Here's my version: 

 def getfiles(dirpath):
 a = [s for s in os.listdir(dirpath)
   if os.path.isfile(os.path.join(dirpath, s))]
 a.sort(key=lambda s: os.path.getmtime(os.path.join(dirpath, s)))
 return a
 

 First, we build a list of the file names. isfile() is used to skip directories; it can be omitted if directories should be included. Then, we sort the list in-place, using the modify date as the key. 
 #3 Here's a one-liner: 

 import os
import time
from pprint import pprint

pprint([(x[0], time.ctime(x[1].st_ctime)) for x in sorted([(fn, os.stat(fn)) for fn in os.listdir(".")], key = lambda x: x[1].st_ctime)])
 

 This calls os.listdir() to get a list of the filenames, then calls os.stat() for each one to get the creation time, then sorts against the creation time. 

 Note that this method only calls os.stat() once for each file, which will be more efficient than calling it for each comparison in a sort. 
 #4 sorted(filter(os.path.isfile, os.listdir('.')), 
 key=lambda p: os.stat(p).st_mtime)
 

 You could use os.walk('.').next()[-1] instead of filtering with os.path.isfile , but that leaves dead symlinks in the list, and os.stat will fail on them. 
 #5 There is an os.paht.getmtime function that gives the number of seconds since the epoch
and should be faster than os.stat. 

 os.chdir(directory)
sorted(filter(os.path.isfile, os.listdir('.')), key=os.path.getmtime)
 
 #6 this is a basic step for learn: 

 import os, stat, sys
import time

dirpath = sys.argv[1] if len(sys.argv) == 2 else r'.'

listdir = os.listdir(dirpath)

for i in listdir:
 os.chdir(dirpath)
 data_001 = os.path.realpath(i)
 listdir_stat1 = os.stat(data_001)
 listdir_stat2 = ((os.stat(data_001), data_001))
 print time.ctime(listdir_stat1.st_ctime), data_001
 
 #7 Maybe you should use shell commands. In Unix/Linux, find piped with sort will probably be able to do what you want.