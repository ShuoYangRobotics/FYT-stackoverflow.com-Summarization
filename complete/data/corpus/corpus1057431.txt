Question (ID-1057431): Loading all modules in a folder in Python Could someone provide me with a good way of importing a whole directory of modules? 
I have a structure like this: 

 /Foo
 bar.py
 spam.py
 eggs.py
 

 I tried just converting it to a package by adding __init__.py and doing from Foo import * but it didn't work the way I had hoped. 
 Answers (Total-6): #0 iterate thru all *.py files and put them as __all__ 
, but i am curious why you need that, there MUST be a better way. 

 here is a hacky way 

 import os
import glob
__all__ = [ os.path.basename(f)[:-3] for f in glob.glob(os.path.dirname(__file__)+"/*.py")]
 
 #1 Add the __all__ Variable to __init__.py containing: 

 __all__ = ["bar", "spam", "eggs"]
 

 See also http://docs.python.org/tutorial/modules.html 
 #2 Make the Foo directory a package by adding an __init__.py . In that __init__.py add: 

 import bar
import eggs
import spam
 

 Since you want it dynamic (which may or may not be a good idea), list all py-files with list dir and import them with something like this: 

 import os
for module in os.listdir(os.path.dirname(__file__)):
 if module == '__init__.py' or module[-3:] != '.py':
  continue
 __import__(module[:-3], locals(), globals())
del module
 

 Then, from your code do this: 

 import Foo
 

 You can now access the modules with 

 Foo.bar
Foo.eggs
Foo.spam
 

 etc. from Foo import * is not a good idea for several reasons, including name clashes and making it hard to analyze the code. 
 #3 See that your __init__.py defines __all__ . The modules - packages doc says 

 
 The __init__.py files are required to make Python treat the directories as containing packages; this is done to prevent directories with a common name, such as string, from unintentionally hiding valid modules that occur later on the module search path. In the simplest case, __init__.py can just be an empty file, but it can also execute initialization code for the package or set the __all__ variable, described later. 
 
 ... 
 
 The only solution is for the package author to provide an explicit index of the package. The import statement uses the following convention: if a package’s __init__.py code defines a list named __all__ , it is taken to be the list of module names that should be imported when from package import * is encountered. It is up to the package author to keep this list up-to-date when a new version of the package is released. Package authors may also decide not to support it, if they don’t see a use for importing * from their package. For example, the file sounds/effects/__init__.py could contain the following code: 
 
 __all__ = ["echo", "surround", "reverse"] 
 
 This would mean that from sound.effects import * would import the three named submodules of the sound package. 
 
 #4 Look at the pkgutil module from the standard library. It will let you do exactly what you want as long as you have an __init__.py file in the directory. The __init__.py file can be empty. 
 #5 Expanding Mihail answer, I believe the non-hackish way (as in, not handling directly the file paths) is the following: 

 
 create an empty __init__.py file under Foo/ 
 Execute 

 import pkgutil
import Foo
for importer, package_name, _ in pkgutil.iter_modules(['Foo']):
 full_package_name = 'Foo.%s' % package_name
 module = importer.find_module(package_name).load_module(full_package_name)
 print module
 
 

 You'll get: 

 &lt;module 'Foo.bar' from '/home/.../Foo/bar.pyc'&gt;
&lt;module 'Foo.spam' from '/home/.../Foo/spam.pyc'&gt;