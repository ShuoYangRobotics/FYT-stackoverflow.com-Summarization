Question (ID-2058802): How can I get the version defined in setup.py (setuptools) in my package? How could I get the version defined in setup.py from my package? (for --version, or other purposes) 

 thanks! 
 Answers (Total-6): #0 To retrieve the version from inside your package at runtime (what your question appears to actually be asking), you can use: 

 version = pkg_resources.require("MyProject")[0].version
 

 If you want to go the other way 'round (which appears to be what other answer authors here appear to have thought you were asking), make a version.py in your package with a __version__ line, then read it from setup.py using execfile('mypackage/version.py') , so that it sets __version__ in the setup.py namespace. 

 By the way, DO NOT import your package from your setup.py as suggested in another answer here: it will seem to work for you (because you already have your package's dependencies installed), but it will wreak havoc upon new users of your package, as they will not be able to install your package without manually installing the dependencies first. 
 #1 The best technique is to define __version__ in your product code, then import it into setup.py from there. This gives you a value you can read in your running module, and have only one place to define it. 

 The values in setup.py are not installed, and setup.py doesn't stick around after installation. 

 What I did (for example) in coverage.py: 

 # coverage/__init__.py
__version__ = "3.2"


# setup.py
from coverage import __version__

setup(
 name = 'coverage',
 version = __version__,
 ...
 )
 
 #2 This should also work, using regular expressions and depending on the metadata fields to have a format like this: 

 __fieldname__ = 'value'
 

 Use the following at the beginning of your setup.py: 

 import re
main_py = open('yourmodule.py').read()
metadata = dict(re.findall("__([a-z]+)__ = '([^']+)'", main_py))
 

 After that, you can use the metadata in your script like this: 

 print 'Author is:', metadata['author']
print 'Version is:', metadata['version']
 
 #3 Create a file in your source tree, e.g. in yourbasedir/yourpackage/_version.py . Let that file contain only a single line of code, like this: 

 __version__ = "1.1.0-r4704" 

 Then in your setup.py, open that file and parse out the version number like this: 

 
verstr = "unknown"
try:
 verstrline = open('yourpackage/_version.py', "rt").read()
except EnvironmentError:
 pass # Okay, there is no version file.
else:
 VSRE = r"^__version__ = ['\"]([^'\"]*)['\"]"
 mo = re.search(VSRE, verstrline, re.M)
 if mo:
  verstr = mo.group(1)
 else:
  raise RuntimeError("unable to find version in yourpackage/_version.py")
 

 Finally, in yourbasedir/yourpackage/__init__.py import _version like this: 

 
__version__ = "unknown"
try:
 from _version import __version__
except ImportError:
 # We're running in a tree that doesn't have a _version.py, so we don't know what our version is.
 pass
 

 An example of code that does this is the "pyutil" package that I maintain. (See PyPI or google search -- stackoverflow is disallowing me from including a hyperlink to it in this answer.) 

 @pjeby is right that you shouldn't import your package from its own setup.py. That will work when you test it by creating a new Python interpreter and executing setup.py in it first thing: python setup.py , but there are cases when it won't work. That's because import youpackage doesn't mean to read the current working directory for a directory named "yourpackage", it means to look in the current sys.modules for a key "yourpackage" and then to do various things if it isn't there. So it always works when you do python setup.py because you have a fresh, empty sys.modules , but this doesn't work in general. 

 For example, what if py2exe is executing your setup.py as part of the process of packaging up an application? I've seen a case like this where py2exe would put the wrong version number on a package because the package was getting its version number from import myownthing in its setup.py, but a different version of that package had previously been imported during the py2exe run. Likewise, what if setuptools, easy_install, distribute, or distutils2 is trying to build your package as part of a process of installing a different package that depends on yours? Then whether your package is importable at the time that its setup.py is being evaluated, or whether there is already a version of your package that has been imported during this Python interpreter's life, or whether importing your package requires other packages to be installed first, or has side-effects, can change the results. I've had several struggles with trying to re-use Python packages which caused problems for tools like py2exe and setuptools because their setup.py imports the package itself in order to find its version number. 

 By the way, this technique plays nicely with tools to automatically create the yourpackage/_version.py file for you, for example by reading your revision control history and writing out a version number based on the most recent tag in revision control history. Here is a tool that does that for darcs: http://tahoe-lafs.org/trac/darcsver/browser/trunk/README.rst and here is a code snippet which does the same thing for git: http://github.com/warner/python-ecdsa/blob/0ed702a9d4057ecf33eea969b8cf280eaccd89a1/setup.py#L34 
 #4 Your question is a little vague, but I think what you are asking is how to specify it. 

 You need to define __version__ like so: 

 __version__ = '1.4.4'
 

 And then you can confirm that setup.py knows about the version you just specified: 

 % ./setup.py --version
1.4.4
 
 #5 To avoid importing a file (and thus executing its code) one could parse it and recover the version attribute from the syntax tree: 

 # assuming 'path' holds the path to the file

import ast

with open(path, 'rU') as file:
 t = compile(file.read(), path, 'exec', ast.PyCF_ONLY_AST)
 for node in (n for n in t.body if isinstance(n, ast.Assign)):
  if len(node.targets) == 1:
   name = node.targets[0]
   if isinstance(name, ast.Name) and \
     name.id in ('__version__', '__version_info__', 'VERSION'):
    v = node.value
    if isinstance(v, ast.Str):
     version = v.s
     break
    if isinstance(v, ast.Tuple):
     r = []
     for e in v.elts:
      if isinstance(e, ast.Str):
       r.append(e.s)
      elif isinstance(e, ast.Num):
       r.append(str(e.n))
     version = '.'.join(r)
     break
 

 This code tries to find the __version__ or VERSION assignment at the top level of the module return is string value. The right side can be either a string or a tuple.