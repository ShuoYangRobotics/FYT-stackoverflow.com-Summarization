Question (ID-908258): Generating file to download with Django Is it possible to make a zip archive and offer it to download, but still not save a file to the hard drive? 
 Answers (Total-6): #0 To trigger a download you need to set Content-Disposition header: 

 from django.http import HttpResponse
from django.core.servers.basehttp import FileWrapper

# generate the file
response = HttpResponse(FileWrapper(myfile), content_type='application/zip')
response['Content-Disposition'] = 'attachment; filename=myfile.zip'
return response
 

 If you don't want the file on disk you need to use StringIO 

 import cStringIO as StringIO

myfile = StringIO.StringIO()
while not_finished:
 # generate chunk
 myfile.write(chunk)
 

 Optionally you can set Content-Length header as well: 

 response['Content-Length'] = myfile.tell()
 
 #1 You'll be happier creating a temporary file. This saves a lot of memory. When you have more than one or two users concurrently, you'll find the memory saving is very, very important. 

 You can, however, write to a StringIO object. 

 &gt;&gt;&gt; import zipfile
&gt;&gt;&gt; import StringIO
&gt;&gt;&gt; buffer= StringIO.StringIO()
&gt;&gt;&gt; z= zipfile.ZipFile( buffer, "w" )
&gt;&gt;&gt; z.write( "idletest" )
&gt;&gt;&gt; z.close()
&gt;&gt;&gt; len(buffer.getvalue())
778
 

 The "buffer" object is file-like with a 778 byte ZIP archive. 
 #2 Yes, you can use the zipfile module , zlib module or other compression modules to create a zip archive in memory. You can make your view write the zip archive to the HttpResponse object that the Django view returns instead of sending a context to a template. Lastly, you'll need to set the mimetype to the appropriate format to tell the browser to treat the response as a file . 
 #3 There is a code example at http://djangosnippets.org/snippets/365/ 
 #4 Why not make a tar file instead? Like so: 

 def downloadLogs(req, dir):
 response = HttpResponse(mimetype='application/x-gzip')
 response['Content-Disposition'] = 'attachment; filename=download.tar.gz'
 tarred = tarfile.open(fileobj=response, mode='w:gz')
 tarred.add(dir)
 tarred.close()

 return response
 
 #5 models.py 

 from django.db import models

class PageHeader(models.Model):
 image = models.ImageField(upload_to='uploads')
 

 views.py 

 from django.http import HttpResponse
from StringIO import StringIO
from models import *
import os, mimetypes, urllib

def random_header_image(request):
 header = PageHeader.objects.order_by('?')[0]
 image = StringIO(file(header.image.path, "rb").read())
 mimetype = mimetypes.guess_type(os.path.basename(header.image.name))[0]

 return HttpResponse(image.read(), mimetype=mimetype)