Question (ID-8932123): Writing a generalized function for both strings and lists in python So i'm green as grass and learning programming from How to think like a computer scientist: Learn python 3 . I'm able to answer the question (see below) but fear i'm missing the lesson. 

 Write a function (called insert_at_end) that will pass (return the bold given the two arguments before) for all three: 

 test(insert_at_end(5, [1, 3, 4, 6]), **[1, 3, 4, 6, 5]**)
test(insert_at_end('x', 'abc'), **'abcx'**)
test(insert_at_end(5, (1, 3, 4, 6)), **(1, 3, 4, 6, 5)**)
 

 The book gives this hint:"These exercises illustrate nicely that the sequence abstraction is general, ( because slicing, indexing, and concatenation are so general), so it is possible to write general functions that work over all sequence types.". 

 This version doesn't have solutions on-line (that i could find) but in I found someone's answers to a previous version of the text (for python 2.7) and they did it this way: 

 def encapsulate(val, seq):
 if type(seq) == type(""):
  return str(val)
 if type(seq) == type([]):
  return [val]
 return (val,)

def insert_at_end(val, seq): 
 return seq + encapsulate(val, seq)
 

 Which seems to be solving the question by distinguishing between lists and strings... going against the hint. So how about it Is there a way to answer the question (and about 10 more similar ones) without distinguishing? i.e not using "type()" 
 Answers (Total-9): #0 I'd say that the example isn't symetric, meaning that it asks the reader handle two different cases: 

 
 int, list 
 str, str 
 

 In my opinion, the exercise should ask to implement this: 

 
 list, list: insert_at_end([5], [1, 3, 4, 6]) 
 str, str: insert_at_end('x', 'abc') 
 

 In this case, the reader has to work only with two parameters that use the same sequence type and the hint would make much more sense. 
 #1 My best effort: 

 def insert_at_end(val, seq):
 t = type(seq)
 try:
  return seq + t(val)
 except TypeError:
  return seq + t([val])
 

 This will attempt to create the sequence of type(seq) and if val is not iterable produces a list and concatenates. 
 #2 That problem is one of a long list and the hint applies to all of them. I think it is reasonable that, having written the encapsulate function which can be re-used for things like insert_at_front , the rest of the implementation is type agnostic. 

 However, I think a better implementation of encapsulate might be: 

 def encapsulate(val, seq):
 if isinstance(seq, basestring):
  return val
 return type(seq)([val])
 

 which handles a wider range of types with less code. 
 #3 This is not a solution but rather an explanation why a truly elegant solution does not look possible. 

 
 + concatenates sequences, but only sequences of same type. 
 values passed as first argument to insert_at_end are 'scalar', so you have to convert them to the sequence type that the second argument has. 
 to do that, you cannot simply call a sequence constructor with a scalar argument and create a one-item sequence of that type: tuple(1) does not work. 
 str works differently than other sequence types: tuple(["a"]) is ("a",) , list(["a"]) is ["a"] , but str(["a"])) is "['a']" and not "a" . 
 

 This renders + useless in this situation, even though you can easily construct a sequence of given type cleanly, without instanceof , just by using type() . 

 You can't use slice assignment, too, since only lists are mutable. 

 In this situation, the solution by @Hamish looks cleanest. 
 #4 The challenge with this question (in Python 2.7, I'm testing 3.2 right now to verify) is that two of the possible input types for seq are immutable, and you're expected to return the same type as was passed in. For strings, this is less of an issue, because you could do this: 

 return seq + char
 

 As that will return a new string that's the concatenation of the input sequence and the appended character, but that doesn't work for lists or tuples. You can only concatenate a list to a list or a tuple to a tuple. If you wanted to avoid "type" checking, you could get there with something like this: 

 if hasattr(seq, 'append'): # List input.
 seq.append(char)
elif hasattr(seq, 'strip'): # String input.
 seq = seq + char
else: # Tuple
 seq = seq + (char,)

return seq
 

 That's really not much different from actually checking types, but it does avoid using the type function directly. 
 #5 This solution still requires some separate code for strings as opposed to lists/tuples, but it is more concise and doesn't do any checking for specific types. 

 def insert_at_end(val, seq):
 try:
  return seq + val
 except TypeError: # unsupported operand type(s) for +
  return seq + type(seq)([val])
 
 #6 Maybe this is nearer the answer: 

 def genappend(x, s):
 if isinstance(s, basestring):
  t = s[0:0].join
 else:
  t = type(s)
 lst = list(s)
 lst.append(x)
 return t(lst)

print genappend(5, [1,2,3,4]) 
print genappend(5, (1,2,3,4))
print genappend('5', '1234')
 

 There could also be completely user-defined sequence types. They will also work as long as convertable to and from a list. This also works: 

 print genappend('5', set('1234'))
 
 #7 I agree that the point is if item is iterable or not. 

 So my solution would be this: 

 def iterate(seq, item):
 for i in seq:
  yield i
 yield item

def insert_at_end(seq, item):
 if hasattr(item, '__iter__'):
  return seq + item
 else:
  return type(seq)(iterate(seq, item))
 

 Example: 

 &gt;&gt;&gt; insert_at_end('abc', 'x')
'abcx'
&gt;&gt;&gt; insert_at_end([1, 2, 4, 6], 5)
[1, 2, 4, 6, 5]
&gt;&gt;&gt; insert_at_end((1, 2, 4, 6), 5)
(1, 2, 4, 6, 5)
 

 Since insert_at_end can handle iterable and not, works fine even with: 

 &gt;&gt;&gt; insert_at_end('abc', 'xyz')
'abcxyz'
&gt;&gt;&gt; insert_at_end([1, 2, 4, 6], [5, 7])
[1, 2, 4, 6, 5, 7]
&gt;&gt;&gt; insert_at_end((1, 2, 4, 6), (5, 7))
(1, 2, 4, 6, 5, 7)
 
 #8 While encapsulate relies on the type, the code directly in insert_at_end does not, and relies on + meaning related things for all 3 types, and so in that sense, fits in with the hint.