Question (ID-817122): Delete digits in Python (Regex) I'm trying to delete all digits from a string.
However the next code deletes as well digits contained in any word, and obviously I don't want that.
I've been trying many regular expressions with no success. 

 Thanks! 

 

 s = "This must not b3 delet3d, but the number at the end yes 134411"
s = re.sub("\d+", "", s)
print s
 

 Result: 

 
 This must not b deletd, but the number at the end yes 
 
 Answers (Total-7): #0 Try this: 

 "\b\d+\b"
 

 That'll match only those digits that are not part of another word. 
 #1 Add a space before the \d+. 

 &gt;&gt;&gt; s = "This must not b3 delet3d, but the number at the end yes 134411"
&gt;&gt;&gt; s = re.sub(" \d+", " ", s)
&gt;&gt;&gt; s
'This must not b3 delet3d, but the number at the end yes '
 

 Edit: After looking at the comments, I decided to form a more complete answer. I think this accounts for all the cases. 

 s = re.sub("^\d+\s|\s\d+\s|\s\d+$", " ", s)
 
 #2 If your number is allways at the end of your strings try :
re.sub("\d+$", "", s) 

 otherwise, you may try
re.sub("(\s)\d+(\s)", "\1\2", s) 

 You can adjust the back-references to keep only one or two of the spaces (\s match any white separator) 
 #3 Using \s isn't very good, since it doesn't handle tabs, et al. A first cut at a better solution is: 

 re.sub(r"\b\d+\b", "", s)
 

 Note that the pattern is a raw string because \b is normally the backspace escape for strings, and we want the special word boundary regex escape instead. A slightly fancier version is: 

 re.sub(r"$\d+\W+|\b\d+\b|\W+\d+$", "", s)
 

 That tries to remove leading/trailing whitespace when there are digits at the beginning/end of the string. I say "tries" because if there are multiple numbers at the end then you still have some spaces. 
 #4 I don't know what your real situation looks like, but most of the answers look like they won't handle negative numbers or decimals, 

 re.sub(r"(\b|\s+\-?|^\-?)(\d+|\d*\.\d+)\b","") 

 The above should also handle things like, 

 "This must not b3 delet3d, but the number at the end yes -134.411" 

 But this is still incomplete - you probably need a more complete definition of what you can expect to find in the files you need to parse. 

 Edit: it's also worth noting that '\b' changes depending on the locale/character set you are using so you need to be a little careful with that. 
 #5 To handle digit strings at the beginning of a line as well: 

 s = re.sub(r"(^|\W)\d+", "", s)
 
 #6 Non-regex solution: 

 &gt;&gt;&gt; s = "This must not b3 delet3d, but the number at the end yes 134411"
&gt;&gt;&gt; " ".join([x for x in s.split(" ") if not x.isdigit()])
'This must not b3 delet3d, but the number at the end yes'
 

 Splits by " " , and checks if the chunk is a number by doing str().isdigit() , then joins them back together. More verbosely (not using a list comprehension): 

 words = s.split(" ")
non_digits = []
for word in words:
 if not word.isdigit():
  non_digits.append(word)

" ".join(non_digits)