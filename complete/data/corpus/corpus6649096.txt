Question (ID-6649096): Detect numbers in string value = 'ad.41.bd'

if len(value) == len(value.strip({0,1,2,3,4,5,6,7,8,9})):
 # no numbers
else:
 # numbers present
 

 There a cleaner way of detecting numbers in a string in Python? 
 Answers (Total-6): #0 &gt;&gt;&gt; value="ab3asdf"
&gt;&gt;&gt; any(c.isdigit() for c in value)
True
&gt;&gt;&gt; value="asf"
&gt;&gt;&gt; any(c.isdigit() for c in value)
False




&gt;&gt;&gt; value = 'ad.41.bd'
&gt;&gt;&gt; any(map(lambda c:c.isdigit(),value))
True
 

 EDIT: 

 &gt;&gt;&gt; value="1"+"a"*10**6
&gt;&gt;&gt; any(map(lambda c:c.isdigit(),value))
True
&gt;&gt;&gt; from itertools import imap
&gt;&gt;&gt; any(imap(lambda c:c.isdigit(),value))
True
 

 map took 1 second (on old python)
imap was instant because imap returns a generator. note often in the real world there is a higher probability of the number being at the end of the file name. 
 #1 What about this? 

 import re
if not re.search('\d+', value):
 # no numbers
else:
 # numbers present
 
 #2 from string import digits
def containsnumbers(value):
 return any(char in digits for char in value)
 

 EDIT: 

 And just for thoroughness: 

 any(c.isdigit()): 

 &gt;&gt;&gt; timeit.timeit('any(c.isdigit() for c in value)', setup='value = "abcd1"')
1.4080650806427002
 

 any(c in digits): 

 &gt;&gt;&gt; timeit.timeit('any(c in digits for c in value)', setup='from string import digits; value = "abcd1"')
1.392179012298584
 

 re.search (1 or more digits): 

 &gt;&gt;&gt; timeit.timeit("re.search('\d+', value)", setup='import re; value = "abcd1"')
1.8129329681396484
 

 re.search (stop after one digit): 

 &gt;&gt;&gt; timeit.timeit("re.search('\d', value)", setup='import re; value = "abcd1"')
1.599431037902832
 

 re.match (non-greedy): 

 &gt;&gt;&gt; timeit.timeit("re.match(r'^.*?\d', value)", setup='import re; value = "abcd1"')
1.6654980182647705
 

 re.match(greedy): 

 &gt;&gt;&gt; timeit.timeit("re.match(r'^.*\d', value)", setup='import re; value = "abcd1"')
1.5637178421020508
 

 any(map()): 

 &gt;&gt;&gt; timeit.timeit("any(map(lambda c:c.isdigit(),value))", setup='value = "abcd1"')
1.9165890216827393
 

 any(imap()): 

 &gt;&gt;&gt; timeit.timeit("any(imap(lambda c:c.isdigit(),value))", setup='from itertools import imap;value = "abcd1"')
1.370448112487793
 

 Generally, the less complex regexps ran more quickly. c.isdigit() and c in digits are almost equivalent. re.match is slightly faster than re.search . map() is the slowest solution, but imap() was the fastest (but within rounding error of any(c.isdigit) and any(c in digits) . 
 #3 You can use a regular expression : 

 import re
# or if re.search(r'\d', value):
if re.match(r'^.*?\d', value):
 # numbers present
else:
 # no numbers
 
 #4 if not any(c.isdigit() for c in value)
 # no numbers
else:
 # numbers present
 
 #5 If you want to know how big is the difference, you can use re.sub() 

 
 import re
digits_num = len(value) - len(re.sub(r'\d','',value))
if not digits_num:
 #without numbers
else:
 #with numbers - or elif digist_num == 3