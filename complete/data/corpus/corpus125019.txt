Question (ID-125019): Beginner looking for beautiful and instructional Python code As a complete beginner with no programming experience, I am trying to find beautiful Python code to study and play with. Please answer by pointing to a website, a book or some software project. 

 I have the following criterias: 

 
 complete code listings (working, hackable code) 
 beautiful code (highly readable, simple but effective) 
 instructional for the beginner (yes, hand-holding is needed) 
 

 I've tried learning how to program for too long now, never gotten to the point where the rubber hits the road. My main agenda is best spelled out by Nat Friedman's "How to become a hacker ". 

 I'm aware of O'Reilly's "Beautiful Code", but think of it as too advanced and confusing for a beginner. 
 Answers (Total-9): #0 Buy Programming Collective Intelligence . Great book of interesting AI algorithms based on mining data and all of the examples are in very easy to read Python. 

 The other great book is Text Processing in Python 
 #1 Read the Python libraries themselves. They're working, hackable, elegant, and instructional. Some is simple, some is complex. 

 Best of all, you got it when you downloaded Python itself. It's in your Python library directory. Nothing more to do except start poking around. 
 #2 Just do it. 

 Seriously, you're never going to learn to be a good programmer until you write some programs. First you'll write bad programs, then you'll fix them, then you'll write better ones, etc... 

 If you aren't insatiably motivated to try coding, then maybe it isn't for you. One way to get motivated is to get a job that requires you to code... for me, there's nothing like having my salary and pride on the line to get me working :) 
 #3 The Python project itself maintains a nice list of beginner's guides . 
 #4 Beautiful is so hard to define, there's no real answer to this question. Your best advice to follow what Nat says in the post you linked: 

 
 Download the source code to the program you want to change 
 Untar it on your hard drive 
 Get it to build and run 
 Open the source code in an editor 
 Find the part of the code that you need to change to make the program do what you want it to do 
 Make the changes you need to make to the code and test it to make sure it works 
 Run the diff -u command and email the output to the mailing list 
 

 There is no point looking for beautiful code. Just look at and fix bugs in projects that you use (Django &amp; Twisted might be good candidates). 
 #5 I've seen How to Think Like a Computer Scientist recommended in many blogs. 
 #6 I personally think that reading good code won't work until you have a firm understanding of the language, especially of its idioms. First, I recommend the basic Wikibook " Non-Programmer's Tutorial for Python " to start out. If most of that makes sense, you have a good understanding of the basics already. 

 After that, I recommend Dive into Python . You'll see a lot of other people recommending this book, because it's comprehensive and free. You'll learn a lot of language specific idioms in Dive into Python, especially in the first few chapters. As you're reading it, try to do basic programs using the techniques Mark Pilgrim shows. 

 Dive into Python gets into specific modules later in the book. That will probably get a little boring, and when it does, you might want to look at code. I don't feel qualified to rank the code used by these, but Django and Deluge are both bigger projects that will show you the organization of large programs. Though they will probably be overwhelming unless you take the time to really attack them one piece at a time and get a firm understanding. 
 #7 I've learned quite a bit of beautiful and useful Python from O'Reilly's Python Cookbook . http://oreilly.com/catalog/9780596001674/ 

 I've also learned much from ActiveState's Python Recipe's web page. http://code.activestate.com/recipes/langs/python/ 
 #8 I'd recommend you review Exaile music player for linux. It includes a lot of practically useful things like plugins, lambda, decorators, settings manager, gui (using GTK+) and much more. 

 Exaile source code is not an ideal but will give you enough helpful information and basic Python coding concepts.