Question (ID-2482230): Testing variable types in Python I'm creating an initialising function for the class 'Room', and found that the program wouldn't accept the tests I was doing on the input variables. 

 Why is this? 

 def __init__(self, code, name, type, size, description, objects, exits):
 self.code = code
 self.name = name
 self.type = type
 self.size = size
 self.description = description
 self.objects = objects
 self.exits = exits
   #Check for input errors:
 if type(self.code) != type(str()):
  print 'Error found in module rooms.py!'
  print 'Error number: 110'
 elif type(self.name) != type(str()):
  print 'Error found in module rooms.py!'
  print 'Error number: 111'
 elif type(self.type) != type(str()):
  print 'Error found in module rooms.py!'
  print 'Error number: 112'
 elif type(self.size) != type(int()):
  print 'Error found in module rooms.py!'
  print 'Error number: 113'
 elif type(self.description) != type(str()):
  print 'Error found in module rooms.py!'
  print 'Error number: 114'
 elif type(self.objects) != type(list()):
  print 'Error found in module rooms.py!'
  print 'Error number: 115'
 elif type(self.exits) != type(tuple()):
  print 'Error found in module rooms.py!'
  print 'Error number: 116'
 

 When I run this I get this error: 

 Traceback (most recent call last):
 File "/Users/Jasper/Development/Programming/MyProjects/Game Making Challenge/Europa I/rooms.py", line 148, in &lt;module&gt;
 myRoom = Room(101, 'myRoom', 'Basic Room', 5, '&lt;insert description&gt;', myObjects, myExits)
 File "/Users/Jasper/Development/Programming/MyProjects/Game Making Challenge/Europa I/rooms.py", line 29, in __init__
 if type(self.code) != type(str()):
TypeError: 'str' object is not callable
 

 ---- Thanks for help, but: ----- 

 does this apply for  isinstance(item, list) or  isinstance(item, tuple)? 
 Answers (Total-7): #0 Python is a dynamic language. It bad idea to test the types explicitly. In fact the code you write should in itself be such that you dont ever need to test the types of variables. 

 If you are coming from C/C++/Java then takes some time to get over that. 
 #1 Couple of things: 

 
 You have an incoming parameter named "type". This is masking the "type" built-in because it is a global, and locals trump globals. I assume this exception occurs because "type" has a string value. 
 Why are you printing error messages? The correct way to report an error is to raise an exception. 
 

 Overall I concur with the other answers that type-checking in general is a python anti-pattern. It it needed only in rare cases. 
 #2 Not answering the "why", but 

 
 str itself is a type already. You can use type(self.code) != str 
 But a better way is to use isinstance(self.code, str) . 
 
 #3 It's not a good idea testing for types like this. However, if you must, do: 

 if isinstance(item, str):
 # do your thing
 
 #4 Beside the ideas presented before you might want to check out decorator based type checking and contracts . 

 Historically there has been some interest in integrating optional typing to the language. 

 There are specific extension languages, such as Cython and Pyrex , that pretty much force you to type to some extent in order. The cool thing is that these languages allow you to generate high performance C extensions to use with your regular Python code. 
 #5 In general don't type-check, but if it's a genuine precondition for the arguments then verify them using assert rather than printing errors to stdout. 

 assert isinstance(code, str)
assert isinstance(name, str)
...
 
 #6 in python you just use the variables as if they where the type you want. 
if for some reason you have a function you call with different types, you can wrap your code in a try/catch. 

 def addOne(a):
 ''' 
 increments a with 1 if a is a number. 
 if a is a string, append '.' to it. 
 '''
 try:
  return a + 1
 except TypeError:
  return a + "."
 

 but you generally dont want to do that.
for the case above use to different functions