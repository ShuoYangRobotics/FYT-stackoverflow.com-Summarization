Question (ID-624926): how to detect whether a python variable is a function? I have a variable, x, and I want to know whether it is pointing to a function or not. 

 I had hoped I could do something like: 

 &gt;&gt;&gt; isinstance(x, function)
 

 but that gives me: 

 Traceback (most recent call last):
 File "&lt;stdin&gt;", line 1, in ?
NameError: name 'function' is not defined
 

 The reason I picked that is because 

 &gt;&gt;&gt; type(x)
&lt;type 'function'&gt;
 
 Answers (Total-9): #0 Just check if the object has a &#x5f;&#x5f;call&#x5f;&#x5f; attribute. Don't use callable(), as this is being deprecated. You can check this with: 

 hasattr(obj, '__call__')
 
 #1 Builtin types that don't have constructors (e.g. functions, generators, methods) are in the types module. You can use types.FunctionType in an isinstance call. 

 In [1]: import types
In [2]: types.FunctionType
Out[2]: &lt;type 'function'&gt;
In [3]: def f(): pass
 ...:
In [4]: isinstance(f, types.FunctionType)
Out[4]: True
In [5]: isinstance(lambda x : None, types.FunctionType)
Out[5]: True
 
 #2 The following should return a boolean: 

 callable(x)
 
 #3 callable(x) will return true if the object passed can be called in Python, but the function does not exist in Python 3.0, and properly speaking will not distinguish between: 

 class A(object):
 def __call__(self):
  return 'Foo'

def B():
 return 'Bar'

a = A()
b = B

print type(a), callable(a)
print type(b), callable(b)
 

 You'll get &lt;class 'A'&gt; True and &lt;type function&gt; True as output. 

 isinstance works perfectly well to determine if something is a function (try isinstance(b, types.FunctionType) ); if you're really interested in knowing if something can be called, you can either use hasattr(b, '__call__') or just try it. 

 test_as_func = True
try:
 b()
except TypeError:
 test_as_func = False
except:
 pass
 

 This, of course, won't tell you whether it's callable but throws a TypeError when it executes, or isn't callable in the first place. That may not matter to you. 
 #4 A function is just a class with a __call__ method, so you can do 

 hasattr(obj, '__call__')
 

 For example: 

 &gt;&gt;&gt; hasattr(x, '__call__')
True

&gt;&gt;&gt; x = 2
&gt;&gt;&gt; hasattr(x, '__call__')
False
 

 That is the "best" way of doing it, but depending on why you need to know if it's callable or note, you could just put it in a try/execpt block: 

 try:
 x()
except TypeError:
 print "was not callable"
 

 It's arguable if try/except is more Python'y than doing if hasattr(x, '__call__'): x() .. I would say hasattr is more accurate, since you wont accidently catch the wrong TypeError, for example: 

 &gt;&gt;&gt; def x():
...  raise TypeError
... 
&gt;&gt;&gt; hasattr(x, '__call__')
True # Correct
&gt;&gt;&gt; try:
...  x()
... except TypeError:
...  print "x was not callable"
... 
x was not callable # Wrong!
 
 #5 Python's 2to3 tool (http://docs.python.org/dev/library/2to3.html) suggests: 

 import collections
isinstance(obj, collections.Callable)
 

 It seems this was chosen instead of the hasattr(x, ' call ') method because of http://bugs.python.org/issue7006 . 
 #6 Try using callable(x) . 
 #7 Since Python 2.1 you can import isfunction from the inspect module. 

 &gt;&gt;&gt; from inspect import isfunction
&gt;&gt;&gt; def f(): pass
&gt;&gt;&gt; isfunction(f)
True
&gt;&gt;&gt; isfunction(lambda x: x)
True
 
 #8 In Python3 I came up with type (f) == type (lambda x:x) which yields True if f is a function and False if it is not. But I think I prefer isinstance (f, types.FunctionType) , which feels less ad hoc. I wanted to do type (f) is function , but that doesn't work.