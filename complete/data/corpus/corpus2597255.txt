Question (ID-2597255): Porting Perl to Python I am wondering if there are any tips or tricks to converting perl into python. It would be nice if there was a script like python's 2to3 . Or perhaps some compatibility libraries. It doesn't have to be complete, anything to help speed up the process would be helpful. 
 Answers (Total-6): #0 the best "tool" to convert Perl to Python is still yourself :). Learn the syntax of Python and how it works from Python docs . Then do the conversion manually. for example, Perl makes use of regex a lot, however, in Python, string manipulation is so easy that most of the time, regex is not needed. How would a converter know this beforehand?? There are also many ways to do things in Perl, so how would a converter know what is the best with Python equivalents ? therefore, manual conversion is still the best way to go 

 If you are interested, you can take a look at this book 
Also of interest, Pleac 
 #1 There are so many ways of doing the same thing in Perl that writing any sort of crosscompiler would be... painful at best. Reconstruct ( don't just translate) the program manually. 
 #2 Keep a phrasebook handy as you go through the code you want to port. 
 #3 Converting would require writing a Perl parser, semantic checker, and Python code generator. 

 Not practical. Perl parsers are hard enough for the Perl teams to get right. You'd be better off translating Perl to Python from the Perl AST (opcodes) using the Perl Opcode or related modules. 

 http://perldoc.perl.org/Opcode.html 

 Some notations do not map from Perl to Python without some work. Perl's closures are different, for example. So is its regex support. 

 In short, either convert it by hand, or use some integration modules to call Python from Perl or vice-versa. 
 #4 Why convert? >;-) 

 andrew -- Perl lover... 
 #5 Another approach is that you might be able to reuse existing Perl code and complement it with new Python code. 

 One possibility that might work for you is to use the perl Python module , which allows you to execute Perl code inside Python . 

 Another approach is to have Perl produce its output as simple text/YAML files which is parsed by Python for further processing. Thus, I was able to use my legacy Perl code without rewriting it, while switching to Python. Your mileage may vary, as this "gluing" method might be too slow for your needs. This "pass files" method is good when you have long calculations that produce intermediate results: you can start the computation in Perl, and continue it in Python.