Question (ID-4518641): how to round off a floating number in python Suppose I am having 8.8333333333333339 and I want to convert it to 8.84, how can I accomplish this in python ? round(8.8333333333333339 , 2) gives 8.8300000000000001 and not 8.84. I am new to python or programming in general.
Thanks
I dont want to print it as a string, the result will be further used. For more information on the problem please check this link http://openbookproject.net/pybiblio/practice/wilson/loan.php 
 Answers (Total-6): #0 This is normal (and has nothing to do with Python) because 8.83 cannot be represented exactly as a binary float, just as 1/3 cannot be represented exactly in decimal (0.333333... ad infinitum). 

 If you want to ensure absolute precision, you need the decimal module: 

 &gt;&gt;&gt; import decimal
&gt;&gt;&gt; a = decimal.Decimal("8.833333333339")
&gt;&gt;&gt; print(round(a,2))
8.83
 
 #1 8.833333333339 (or 8.833333333333334 ) properly rounded to two decimal places is 8.83 . Mathematically it sounds like what you want is a ceiling function . The one in Python's math module is named ceil : 

 import math

v = 8.8333333333333339
print math.ceil(v*100)/100
# 8.84
 

 Floor and ceiling functions generally map a real number to the largest previous or the smallest following integer, which has zero decimal places -- so to use them for 2 decimal places the number is first multiplied by 10**2 (or 100) and then divided by it to compensate. 

 How this applies to the linked loan and payment calculator problem 

 From the sample output it appears that they rounded up the monthly payment, which is what some people call what the ceiling function does. This means that each month a little more the 1/12 th of the total amount is being paid. That made the final payment a little smaller than usual -- since the remaining unpaid balance was only 8.76 . 

 It would be equally valid to use normal rounding producing a monthly payment of 8.83 and a slightly higher final payment of 8.87 . However, in the real world people generally don't like to have their payments go up, so rounding up each payment is the common practice -- it also returns the money to the lender more quickly. 
 #2 use the decimal module: http://docs.python.org/library/decimal.html 
 #3 If you round 8.8333333333339 to 2 decimals, the correct answer is 8.83, not 8.84. The reason you got 8.83000000001 is because 8.83 is a number that cannot be correctly reprecented in binary, and it gives you the closest one. If you want to print it without all the zeros, do as VGE says: 

 print "%.2f" % 8.833333333339 #(Replace number with the variable?)
 
 #4 If you want to round, 8.84 is the incorrect answer. 8.833333333333 rounded is 8.83 not 8.84. If you want to always round up, then you can use math.ceil. Do both in a combination with string formatting, because rounding a float number itself doesn't make sense. 

 "%.2f" % (math.ceil(x * 100) / 100)
 
 #5 You want to use the decimal module but you also need to specify the rounding mode. Here's an example: 

 &gt;&gt;&gt; import decimal
&gt;&gt;&gt; decimal.Decimal('8.333333').quantize(decimal.Decimal('.01'), rounding=decimal.ROUND_UP)
Decimal('8.34')
&gt;&gt;&gt; decimal.Decimal('8.333333').quantize(decimal.Decimal('.01'), rounding=decimal.ROUND_DOWN)
Decimal('8.33')
&gt;&gt;&gt;