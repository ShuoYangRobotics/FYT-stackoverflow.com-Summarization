Question (ID-613007): Python one-liner to print every file in the current directory How can I make the following one liner print every file through Python? 

 python -c "import sys;print '&gt;&gt;',sys.argv[1:]" | dir *.*
 

 Specifically would like to know how to pipe into a python -c.
DOS or Cygwin responses accepted. 
 Answers (Total-6): #0 python -c "import os; print os.listdir('.')"
 

 If you want to apply some formatting like you have in your question, 

 python -c "import os; print '\n'.join(['&gt;&gt;%s' % x for x in os.listdir('.')])"
 

 If you want to use a pipe, use xargs : 

 ls | xargs python -c "import sys; print '&gt;&gt;', sys.argv[1:]"
 

 or backticks: 

 python -c "import sys; print '&gt;&gt;', sys.argv[1:]" `ls`
 
 #1 You can read data piped into a Python script by reading sys.stdin. For example: 

 ls -al | python -c "import sys; print sys.stdin.readlines()"
 

 It is not entirely clear what you want to do (maybe I am stupid). The confusion comes from your example which is piping data out of a python script. 
 #2 If you want to print all files: 

 find . -type f
 

 If you want to print only the current directory's files 

 find . -type f -maxdepth 1
 

 If you want to include the ">>" before each line 

 find . -type f -maxdepth 1 | xargs -L 1 echo "&gt;&gt;"
 

 If you don't want the space between ">>" and $path from echo 

 find . -type f -maxdepth 1 | xargs -L 1 printf "&gt;&gt;%s\n"
 

 This is all using cygwin, of course. 
 #3 ls | python -c "import sys; print sys.stdin.read()"
 

 just read stdin as normal for pipes 
 #4 
 would like to know how to pipe though 
 

 You had the pipe the wrong way round, if you wanted to feed the output of ‘dir’ into Python, ‘dir’ would have to be on the left. eg.: 

 dir "*.*" | python -c "import sys;[sys.stdout.write('&gt;&gt;%s\n' % line) for line in sys.stdin]"
 

 (The hack with the list comprehension is because you aren't allowed a block-introducing ‘for’ statement on one line after a semicolon.) 

 Clearly the Python-native solution (‘os.listdir’) is much better in practice. 
 #5 
 Specifically would like to know how to pipe into a python -c 
 

 see cobbal's answer 

 piping through a program is transparent from the program's point of view, all the program knows is that it's getting input from the standard input stream 

 Generally speaking, a shell command of the form 

 A | B
 

 redirects the output of A to be the input of B 

 so if A spits "asdf" to standard output, then B gets "asdf" into its standard input 

 the standard input stream in python is sys.stdin