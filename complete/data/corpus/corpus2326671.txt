Question (ID-2326671): Anyone using Django in the "Enterprise" I know that the word “enterprise” gives some people the creeps, but I am curious to know if anyone has experience creating enterprise applications, similar to something like say… Java EE applications, which are highly concurrent, distributed applications with Django? I know Java has its own issues but its kind of viewed as THE enterprise framework and I think that’s unfortunate. 

 Some people say that Rails is a good replacement for Java EE but what about Django? Has anyone ever used it in this context? You only ever see pretty standard websites on djangosites.org and it seems like its capable of so much more. I am planning on scrapping some of our old systems which are written mostly on ASP.NET and some Java for something more easily maintainable. I started using Django for some other applications and find it to be fantastic for what I am using it for (Corporate news, intranet, etc.) internally but what about something like… an accounts receivable system, or a billing system, etc. 
I would hate to see a framework such as this pigeon-holed into a category it doesn't need to be. It seems to be used for social media/networking, content-heavy sites, not so much data processing, etc. I feel that it has all the elements needed to start down this path. Anyone have any thoughts? 
 Answers (Total-6): #0 Is this what you're looking for? 

 http://code.djangoproject.com/wiki/DjangoSuccessStories 

 Or are you looking for this list? http://www.djangosites.org/ 

 Here are Django powered sites in rating order: http://www.djangosites.org/highest-rated/ 

 How about Django sites focused on "business": http://www.djangosites.org/tag/business/ is that "Enterprise" enough? 

 We do econometric data processing with Django. High volume transactions. Is that "enterprise" enough? 
 #1 http://grono.net/ is a polish equivalent of Facebook and is used by a quite a few people (at some point it was a few million, now it's less, due to FB popularity). It works on distributed Django. 
 #2 Yes, Django is used in the "enterprise world". The good description of pros, cons and the related development efforts can be found here: 

 http://groups.google.com/group/django-developers/browse_thread/thread/c89e028a536514d3 
 #3 For the systems you want to replace, you may find that it is desirable to use something more powerful than Django's ORM like SQLAlchemy. It's not a question of scaling, but the fact is that Django's ORM makes it hard to build complex queries and often pushes you to do in Python what should be done by your RDBMS — when you don't have to resort to raw SQL. Although SQLAlchemy has a steeper learning curve, it has more features and is better suited to complex database operations. It's certainly worth your time to have a look at it before deciding on a web stack to build on. 

 This is probably less relevant to your questions but all the functionality in Django is also provided by other libraries that I find to be superior : Jinja2 for templating (it has the same syntax as Django templates without the mess that is the template tags system and better performance), WTForms for forms and modelforms, Babel for i18n (with many features not present in Django's own i18n library) and Werkzeug to provide a complete WSGI interface with URL routing. 
 #4 My company uses Python/Django as a base for our Intramas Platform. An entreprise grade web application platform that is deployed to about a dozen large clients. 

 Built in features include central contact management, document generator, extra security layers, default GUI for rapid application design (no messing with Django admin interface!). 

 Overall we are very pleased with Django as a base for our development, it is very extensible and the release cycle produces solid code (we upgrade often). 

 While our site (http://www.sinax.be) is in Dutch and not very extensive at the moment you can always contact me for more information. 
 #5 One of the biggest drawbacks in django is that although in theory the concept of applications being self-contained sounds nice, in practice it really doesn't work that well; even if you find some app that provides functionality that you need - it is not always easy to plug it in and go - you will always need to edit/hack at it. 

 Evaluating django as a central platform at my work for developing pluggable apps led to a few roadblocks: 

 
 ORM - yes, its great - but it is very specific and tailored. I have used it when I need some quick data processing done, but other than that you need to dive into something proper like SQLAlchemy. One thing we can't do easily is fetch random samples. This became a problem for us on a small data set (538,000+ rows approx.) with postgres. 
 Template system - again, very specific to django-styled apps. No real concept of pluggable theme components unless you grow it yourself; and this means developing things that are already provided by other platforms. 
 Not really a point against django per-se but lack of a central place to provide common services turned out to be a big issue for us. For example, no central authentication provider which we can plug into, no abstracted way of providing data credentials (separating of roles). So when we move things to production servers; the database credentials can't be edited on the server (as in the case with Java) and the db guys have to mess with my code base. 
 

 All these things have led me to look at Java portal servers as my "platform" and specifically Liferay as it has Python support. 

 I suggest you look at the big picture first before you commit yourself to django. I really love the framework, and I use it all the time on one-off projects, but as a central platform for developing all that we may need - django is not the answer for us. 

 I have now delegated django for self contained projects - like some specific mini-site for a department. If we need to use Python for something else, I now evaluate Pyramid as its more pluggable. For anything that needs integration beyond our department, I look at Java. 

 If all that fails - only then do we go to .NET.