Question (ID-5899185): Class with too many parameters..better design strategy? I am working with models of neurons. One class I am designing is a cell class which is a topological description of a neuron (several compartments connected together). It has many paramteres but they are all relevant, examples: 

 num_axon_segments, apical bifibrications, somatic length, somatic diameter, apical length, branching randomness, branching length and so on and so on...there are about 15 parameters in total! 

 I can set all these to some default value but my class looks crazy with several lines for paramters.. This kind of thing must happen occasionally to other people too..is there some obvious better way to design this or am I doing the right thing? 

 UPDATE: 
As some of you have asked I have attached my code for the class, as you can see this class has a huge number of parameters (>15) but they are all used and are necessary to define the topology of a cell. The problem essentially is that the poobject they physical object they create is very complex. I have attached an image representation of objects produced by this class. How would experienced programmers do this differently to avoid so many parameters in the definition? 

 

 class LayerV(__Cell):

def __init__(self,somatic_dendrites=10,oblique_dendrites=10,
   somatic_bifibs=3,apical_bifibs=10,oblique_bifibs=3,
   L_sigma=0.0,apical_branch_prob=1.0,
   somatic_branch_prob=1.0,oblique_branch_prob=1.0,
   soma_L=30,soma_d=25,axon_segs=5,myelin_L=100,
   apical_sec1_L=200,oblique_sec1_L=40,somadend_sec1_L=60,
   ldecf=0.98):

 import random
 import math

 #make main the regions:
 axon=Axon(n_axon_seg=axon_segs)

 soma=Soma(diam=soma_d,length=soma_L)

 main_apical_dendrite=DendriticTree(bifibs=
   apical_bifibs,first_sec_L=apical_sec1_L,
   L_sigma=L_sigma,L_decrease_factor=ldecf,
   first_sec_d=9,branch_prob=apical_branch_prob)

 #make the somatic denrites

 somatic_dends=self.dendrite_list(num_dends=somatic_dendrites,
     bifibs=somatic_bifibs,first_sec_L=somadend_sec1_L,
     first_sec_d=1.5,L_sigma=L_sigma,
     branch_prob=somatic_branch_prob,L_decrease_factor=ldecf)

 #make oblique dendrites:

 oblique_dends=self.dendrite_list(num_dends=oblique_dendrites,
     bifibs=oblique_bifibs,first_sec_L=oblique_sec1_L,
     first_sec_d=1.5,L_sigma=L_sigma,
     branch_prob=oblique_branch_prob,L_decrease_factor=ldecf)

 #connect axon to soma:
 axon_section=axon.get_connecting_section()
 self.soma_body=soma.body
 soma.connect(axon_section,region_end=1)

 #connect apical dendrite to soma:
 apical_dendrite_firstsec=main_apical_dendrite.get_connecting_section()
 soma.connect(apical_dendrite_firstsec,region_end=0)

 #connect oblique dendrites to apical first section:
 for dendrite in oblique_dends:
  apical_location=math.exp(-5*random.random()) #for now connecting randomly but need to do this on some linspace
  apsec=dendrite.get_connecting_section()
  apsec.connect(apical_dendrite_firstsec,apical_location,0)

 #connect dendrites to soma:
 for dend in somatic_dends:
  dendsec=dend.get_connecting_section()
  soma.connect(dendsec,region_end=random.random()) #for now connecting randomly but need to do this on some linspace

 #assign public sections
 self.axon_iseg=axon.iseg
 self.axon_hill=axon.hill
 self.axon_nodes=axon.nodes
 self.axon_myelin=axon.myelin
 self.axon_sections=[axon.hill]+[axon.iseg]+axon.nodes+axon.myelin
 self.soma_sections=[soma.body]
 self.apical_dendrites=main_apical_dendrite.all_sections+self.seclist(oblique_dends)
 self.somatic_dendrites=self.seclist(somatic_dends)
 self.dendrites=self.apical_dendrites+self.somatic_dendrites
 self.all_sections=self.axon_sections+[self.soma_sections]+self.dendrites
 
 Answers (Total-9): #0 Try this approach: 

 class Neuron(object):

 def __init__(self, **kwargs):
  prop_defaults = {
   "num_axon_segments": 0, 
   "apical_bifibrications": "fancy default",
   ...
  }

  for (prop, default) in prop_defaults.iteritems():
   setattr(self, prop, kwargs.get(prop, default))
 

 You can then create a Neuron like this: 

 n = Neuron(apical_bifibrications="special value")
 
 #1 You could perhaps use a Python"dict" object ?
 http://docs.python.org/tutorial/datastructures.html#dictionaries 
 #2 Having so many parameters suggests that the class is probably doing too many things. 

 I suggest that you want to divide your class into several classes, each of which take some of your parameters. That way each class is simpler and won't take so many parameters. 

 Without knowing more about your code, I can't say exactly how you should split it up. 
 #3 I'd say there is nothing wrong with this approach - if you need 15 parameters to model something, you need 15 parameters. And if there's no suitable default value, you have to pass in all 15 parameters when creating an object. Otherwise, you could just set the default and change it later via a setter or directly. 

 Another approach is to create subclasses for certain common kinds of neurons (in your example) and provide good defaults for certain values, or derive the values from other parameters. 

 Or you could encapsulate parts of the neuron in separate classes and reuse these parts for the actual neurons you model. I.e., you could write separate classes for modeling a synapse, an axon, the soma, etc. 
 #4 You could create a class for your parameters. 

 Instead passing a bunch of parameters, you pass one class. 
 #5 could you supply some example code of what you are working on? It would help to get an idea of what you are doing and get help to you sooner. 

 If it's just the arguments you are passing to the class that make it long, you don't have to put it all in init . You can set the parameters after you create the class, or pass a dictionary/class full of the parameters as an argument. 

 class MyClass(object):

 def __init__(self, **kwargs):
  arg1 = None
  arg2 = None
  arg3 = None

  for (key, value) in kwargs.iteritems():
   if hasattr(self, key):
    setattr(self, key, value)

if __name__ == "__main__":

 a_class = MyClass()
 a_class.arg1 = "A string"
 a_class.arg2 = 105
 a_class.arg3 = ["List", 100, 50.4]

 b_class = MyClass(arg1 = "Astring", arg2 = 105, arg3 = ["List", 100, 50.4])
 
 #6 Can you give a more detailed use case ? Maybe a prototype pattern will work: 

 If there are some similarities in groups of objects, a prototype pattern might help. 
Do you have a lot of cases where one population of neurons is just like another except different in some way ? ( i.e. rather than having a small number of discrete classes,
you have a large number of classes that slightly differ from each other. ) 

 Python is a classed based language, but just as you can simulate class based 
programming in a prototype based language like Javascript, you can simulate 
prototypes by giving your class a CLONE method, that creates a new object and
populates its ivars from the parent. Write the clone method so that keyword parameters
passed to it override the "inherited" parameters, so you can call it with something
like: 

 new_neuron = old_neuron.clone( branching_length=n1, branching_randomness=r2 )
 
 #7 I have never had to deal with this situation, or this topic. Your description implies to me that you may find, as you develop the design, that there are a number of additional classes that will become relevant - compartment is the most obvious. If these do emerge as classes in their own right, it is probable that some of your parameters become parameters of these additional classes. 
 #8 After looking over your code and realizing I have no idea how any of those parameters relate to each other (soley because of my lack of knowledge on the subject of neuroscience) I would point you to a very good book on object oriented design. Building Skills in Object Oriented Design by Steven F. Lott is an excellent read and I think would help you, and anyone else in laying out object oriented programs. 

 It is released under the Creative Commons License, so is free for you to use, here is a link of it in PDF format http://homepage.mac.com/s_lott/books/oodesign/build-python/latex/BuildingSkillsinOODesign.pdf 

 I think your problem boils down to the overall design of your classes. Sometimes, though very rarely, you need a whole lot of arguments to initialize, and most of the responses here have detailed other ways of initialization, but in a lot of cases you can break the class up into more easier to handle and less cumbersome classes.