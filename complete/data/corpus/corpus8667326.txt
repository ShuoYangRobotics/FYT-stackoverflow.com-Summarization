Question (ID-8667326): Python Dictionary or Alternative For instance, 

 if dict['sample']:
 //append values to dict['sample']
else:
 // assign new key to the python dictionary
 

 If dict['sample'] is empty, Python will throw errors. Does anyone know a better way to check on this? 

 All I want is something like that, I will have list of data, let's say a,a,b,c,g,g,g,g,g. 

 So, I want python dictionary to append the values of two a,a to dict['a'], and g,g,g,g,g to dict['g'] and so the rest as dict['b'] etc. A for loop will be executed to loop through the data of a,a,b,c,g,g,g,g,g. 

 I hope I've made my question clear. Any idea? Preferably, if Python's dictionary has a way to check existing key. 

 EDIT 

 Credit goes to @Paul McGuire. I've figured out the exact solution I wanted based on @Paul McGuire's answer. As shown below: 

 from collections import defaultdict

class Test:
 def __init__(self, a,b):
  self.a=a
  self.b=b

data = []
data.append(Test(a=4,b=6))
data.append(Test(a=1,b=2))
data.append(Test(a=1,b=3))
data.append(Test(a=2,b=2))
data.append(Test(a=3,b=2))
data.append(Test(a=4,b=5))
data.append(Test(a=4,b=2))
data.append(Test(a=1,b=2))
data.append(Test(a=5,b=9))
data.append(Test(a=4,b=7))

dd = defaultdict(list)
for c in data:
 dd[c.a].append(c.b)
print dd
 
 Answers (Total-7): #0 The old approaches of "if key in dict" or "dict.get" or "dict.setdefault" should all be set aside in favor of the now standard defaultdict : 

 data = "aabcggggg"

from collections import defaultdict
dd = defaultdict(list)
for c in data:
 dd[c].append(c)
print dd
 

 defaultdict takes care of the checking for key existence for you, all your code has to do is 1) define a factory function or class for the defaultdict to use to initialize a new key entry (in this case, defaultdict(list) ), and 2) define what to do with each key ( dd[c].append(c) ). Clean, simple, no clutter. 

 In your particular example, you could actually use itertools.groupby , since the groups of letters are all contiguous for each grouping value. groupby returns an iterator of tuples, each tuple containing the current key value and an iterator of the matching values. The following code works by converting each tuple's list-of-values-iterator to an actual list (in list(v) ), and passing the sequence of key-valuelist tuples to the dict constructor. 

 from itertools import groupby
print dict((k,list(v)) for k,v in groupby(data))
 

 prints: 

 {'a': ['a', 'a'], 'c': ['c'], 'b': ['b'], 'g': ['g', 'g', 'g', 'g', 'g']}
 
 #1 my_dict = {}
my_dict.setdefault('sample', []).append(value)
 

 second parameter of 'setdefault' method says what should be initial value if given key does not exist 
 #2 If I understand your values are lists. 

 if 'sample' in mydict:
 pass #whatever 
else: 
 mydict['sample'] = [] 
 

 What you want to do is the following: 

 A = ['a','a','b','b','b','c','c','c']

myDict = {}
for i in A:
 if i not in myDict: 
  myDict[i] = []
 myDict[i].append(i) 
print myDict
 
 #3 Every dict key should contain a list. Am I right? 

 d = dict()
try:
 d['sample'].append(new_data)
except KeyError:
 d['sample'] = [new_data]
 

 I believe this would work. By the way, you shouldn't use the name dict for a dictonary. dict is already used as a function. 

 Edit1: 

 I'm not really sure I understand what you trying to do. Nor do I know if my solution is the best of those proposed. But is it this you are trying to do? It seems a little bit odd? Or do you want to count how many times every letter occur? 

 # Create a list named l.
l = ['a', 'a', 'b', 'c', 'g', 'g', 'g', 'g','g']

# Create dictionary named d.
d = dict()

for i in l:
 try:
  d[i].append(i)
 except KeyError:
  d[i] = [i]
 
 #4 If you are using some very old python: 

 if not myDict.has_key(key):
 myDict[key]=[val]
else:
 myDict[key].append(val)
 

 Recently the has_key has been deprecated in favor of key in dict 
So nowadays, it would be: 

 if not key in myDict:
 myDict[key]=[val]
else:
 myDict[key].append(val)
 
 #5 Credit should goes to @Niclas Nilsson even though his posted solution didn't really worked for what I wanted, however, it did help me figure out the solution that I wanted in the simplest form. 

 Still, I appreciate everyone's help here for extra knowledge and alternative ways of solving it. Thanks a lot. 

 Following achieved what I wanted in the simplest way without additional library imported etc: 

 r = {}

try:
 if r['new_data']:
  r['new_data'] = 'appending'
except KeyError:
 r['new_data'] = 'new value'

print r['new_data']
 
 #6 The exact solution I wanted the most as shown below. Credit goes to @Paul McGuire 

 from collections import defaultdict

class Test:
 def __init__(self, a,b):
  self.a=a
  self.b=b

data = []
data.append(Test(a=4,b=6))
data.append(Test(a=1,b=2))
data.append(Test(a=1,b=3))
data.append(Test(a=2,b=2))
data.append(Test(a=3,b=2))
data.append(Test(a=4,b=5))
data.append(Test(a=4,b=2))
data.append(Test(a=1,b=2))
data.append(Test(a=5,b=9))
data.append(Test(a=4,b=7))

dd = defaultdict(list)
for c in data:
 dd[c.a].append(c.b)
print dd