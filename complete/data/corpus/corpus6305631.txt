Question (ID-6305631): Replace 'nnn0n' with 'nnn1n' in Python using regular expressions I would like to replace a string in form 'nnn0n' with the string in form 'nnn1n' where n is any digit. What the easiest way to do that? So, far I tried the following: 

 int(re.sub(r'^(\d+?)(0)(\d)$', r'\1???\3', '7001')) 
 

 But what ever I insert in place of '???' either just 1 or \1 returns incorrect result. 

 Any ideas? 

 EDIT : 

 I have come up with an ugly version: 

 re.sub(r'a1a', '1', re.sub(r'^(\d+?)(0)(\d)$', r'\1a1a\3', '7001'))
 

 Anything nicer? 
 Answers (Total-6): #0 You can do something like: 

 re.sub(r'^(\d{3})0(\d)$', r'\g&lt;1&gt;1\2', '7001')
 

 Or if it's not always three numbers before the 0 you want to replace: 

 re.sub(r'^(\d+)0(\d)$', r'\g&lt;1&gt;1\2', '1234509')
 

 Edit If you know that the number will always be of the same format, you can just use: 

 re.sub(r'0(?=\d$)', '1', '7001')
 
 #1 You don't really need regexes. 

 replace = lambda x: '{0}1{1}'.format(x[:-2], x[-1]) if x[-2] == '0' else x
# or: x[:-2] + '1' + x[-1]
print replace('12345678901')
 
 #2 You could use a named group to get around this 

 int(re.sub(r'^(?P&lt;prefix&gt;\d+?)0(\d)$', r'\g&lt;prefix&gt;1\2', '7001'))
 

 But the most natural approach would probably be 

 int(re.sub(r'0(\d)$', r'1\1', '7001'))
 
 #3 &gt;&gt;&gt; r = re.compile(r'(\d{3})0(\d)')
&gt;&gt;&gt; r.sub('\g&lt;1&gt;1\g&lt;2&gt;', '88808')
88818
 
 #4 Another one 'not brilliant' solution without regex - but i have to try it for myself atleast: 

 data = ['7001', '700001', '701', '71', '12345']
res = (int(x)+10 if len(x) &gt; 2 and x[-2] == '0' else int(x) for x in a )
print list(res)
 
 #5 Here's a numeric solution: 

 def addTenNumeric(n):
 """Add 10 to n if, as decimal, the 2nd least significant digit of n is 0"""
 if (n % 100) &lt; 10:
 return n + 10
 return n
 

 This ought to be a lot quicker than using regular expressions on string representations.