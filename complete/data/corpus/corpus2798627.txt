Question (ID-2798627): How can I detect DOS line breaks in a file? I have a bunch of files. Some are Unix line endings, many are DOS. I'd like to test each file to see if if is dos formatted, before I switch the line endings. 

 How would I do this? Is there a flag I can test for? Something similar? 
 Answers (Total-6): #0 Python can automatically detect what newline convention is used in a file , and you can access Python's guess through the newlines attribute of file objects: 

 f = open('myfile.txt', 'U')
f.readline() # Reads a line
# The following now contains the newline ending of the first line:
# It can be "\r\n" (Windows), "\n" (Unix), "\r" (old Mac OS).
# If no newline is found, it contains None.
print repr(f.newlines)
 

 This gives the newline ending of the first line (Unix, DOS, etc.), if any. As John M. pointed out, if by any chance you have a pathological file that uses more than one newline coding, f.newlines is a tuple with all the newline codings found so far, after reading many lines. 

 If you just want to convert all files, you can simply do: 

 text = open('myfile.txt', 'U').read() # Automatic ("Universal read") conversion of newlines to "\n"
open('myfile.txt', 'w').write(text) # Writes newlines for your platform
 
 #1 You could search the string for \r\n . That's DOS style line ending. 

 EDIT: Take a look at this 
 #2 If you just want to read text files, either DOS or Unix-formatted, this works: 

 print open('myfile.txt', 'U').read()
 

 That is, Python's "universal" file reader will automatically use all the different end of line markers, translating them to "\n". 

 http://docs.python.org/library/functions.html#open 
 #3 As a complete Python newbie &amp; just for fun, I tried to find some minimalistic way of checking this for one file. This seems to work: 

 if "\r\n" in open("/path/file.txt","rb").read():
 print "DOS line endings found"
 

 Edit : simplified as per John Machin's comment (no need to use regular expressions). 
 #4 dos linebreaks are \r\n , unix only \n . So just search for \r\n . 
 #5 Using grep &amp; bash: 

 grep -c -m 1 $'\r$' file

echo $'\r\n\r\n' | grep -c $'\r$'  # test

echo $'\r\n\r\n' | grep -c -m 1 $'\r$'