Question (ID-3578574): Convert list of Fractions to floats in Python I have a list of fractions, such as: 

 data = ['24/221 ', '25/221 ', '24/221 ', '25/221 ', '25/221 ', '30/221 ', '31/221 ', '31/221 ', '31/221 ', '31/221 ', '30/221 ', '30/221 ', '33/221 '] 

 How would I go about converting these to floats, e.g. 

 data = ['0.10 ', '0.11 ', '0.10 ', '0.11 ', '0.13 ', '0.14 ', '0.14 ', '0.14 ', '0.14 ', '0.14 ', '0.13 ', '0.13 ', '0.15 '] 

 The Fraction module seems to only convert to Fractions (not from) and float([x]) requires a string or integer. 

 Thanks in advance. 
 Answers (Total-6): #0 import fractions
data = [float(fractions.Fraction(x)) for x in data]
 

 or to match your example exactly (data ends up with strings): 

 import fractions
data = [str(float(fractions.Fraction(x))) for x in data]
 
 #1 import fractions
data = [str(round(float(fractions.Fraction(x)), 2)) for x in data]
 
 #2 Using the fraction module is nice and tidy, but is quite heavyweight (slower) compared to simple string split or partition 

 This list comprehension creates the floats as the answer with the most votes does 

 [(n/d) for n,d in (map(float, i.split("/")) for i in data)]
 

 If you want the two decimal place strings 

 ["%.2f"%(n/d) for n,d in (map(float, i.split("/")) for i in data)]
 
 #3 def split_divide(elem):
 (a,b) = [float(i) for i in elem.split('/')]
 return a/b

map(split_divide, ['1/2','2/3'])
 

 [0.5, 0.66666666666666663] 
 #4 data = [ x.split('/') for x in data ]
data = [ float(x[0]) / float(x[1]) for x in data ] 
 #5 Nested list comprehensions will get you your answer without importing extra modules (fractions is only in Python 2.6+). 

 &gt;&gt;&gt; ['%.2f' % (float(numerator)/float(denomator)) for numerator, denomator in [element.split('/') for element in data]]
['0.11', '0.11', '0.11', '0.11', '0.11', '0.14', '0.14', '0.14', '0.14', '0.14', '0.14', '0.14', '0.15']