Question (ID-602846): How can I access the current executing module or class name in Python? I would like to be able to dynamically retrieve the current executing module or class name from within an imported module. Here is some code: 

 foo.py: 

 def f():
 print __name__
 

 bar.py: 

 from foo import f

def b(): f()
 

 This obviously does not work as __name__ is the name of the module that contains the function. What I would like to be access inside the foo module is the name of the current executing module that is using foo . So in the case above it would be bar but if any other module imported foo I would like foo to dynamically have access to the name of that module. 

 Edit: The inspect module looks quite promising but it is not exactly what I was looking for. What I was hoping for was some sort of global or environment-level variable that I could access that would contain the name of the current executing module. Not that I am unwilling to traverse the stack to find that information - I just thought that Python may have exposed that data already. 

 Edit: Here is how I am trying to use this. I have two different Django applications that both need to log errors to file. Lets say that they are called "AppOne" and "AppTwo". I also have a place to which I would like to log these files: " /home/hare/app_logs ". In each application at any given point I would like to be able to import my logger module and call the log function which writes the log string to file. However what I would like to do is create a directory under app_logs that is the name of the current application ("AppOne" or "AppTwo") so that each application's log files will go in their respective logging directories. 

 In order to do this I thought that the best way would be for the logger module to have access to some sort of global variable that denotes the current application's name as it is responsible for knowing the location of the parent logging directory and creating the application's logging directory if it does not yet exist. 
 Answers (Total-7): #0 From the comment -- not the question. 

 "I am simply curious to see if what I am trying to do is possible." 

 The answer to "is it possible" is always "yes". Always. Unless your question involves time travel, anti-gravity or perpetual motion. 

 Since the answer is always "yes", your question is ill-formed. The real question is "what's a good way to have my logging module know the name of the client?" or something like that. 

 The answer is "Accept it as a parameter." Don't mess around with inspecting or looking for mysterious globals or other tricks. 

 Just follow the design pattern of logging.getLogger() and use explicitly-named loggers. A common idiom is the following 

 logger= logging.getLogger( __name__ )
 

 That handles almost all log naming perfectly. 
 #1 I think what you want to use is the inspect module, to inspect the python runtime stack. Check out this tutorial . I think it provides an almost exact example of what you want to do. 
 #2 The "currently executing module" clearly is foo, as that's what contains the function currently running - I think a better description as to what you want is the module of foo's immediate caller (which may itself be foo if you're calling a f() from a function in foo called by a function in bar. How far you want to go up depends on what you want this for. 

 In any case, assuming you want the immediate caller, you can obtain this by walking up the call stack. This can be accomplished by calling sys._getframe , with the aprropriate number of levels to walk. 

 def f():
 caller = sys._getframe(1) # Obtain calling frame
 print "Called from module", caller.f_globals['__name__']
 

 [Edit] : Actually, using the inspect module as suggested above is probably a cleaner way of obtaining the stack frame. The equivalent code is: 

 def f():
 caller = inspect.currentframe().f_back
 print "Called from module", caller.f_globals['__name__']
 

 (sys._getframe is documented as being for internal use - the inspect module is a more reliable API) 
 #3 I don't believe that's possible since that's out of foo 's scope. foo will only be aware of its internal scope since it may be being called by countless other modules and applications. 
 #4 __file__ is the path of current module the call is made. 
 #5 It's been a while since I've done python, but I believe that you can get access to the globals and locals of a caller through its traceback . 
 #6 This should work for referencing the current module: 

 import sys
sys.modules[__name__]