[{"text": ["It really looks like OS X has a bug when using poll() on a named pipe (FIFO)... can an expert confirm?"], "tag": "h2", "senID": 0}, {"text": ["I'm been trying to poll from a set of named-pipes for a little while now and i keep getting an immediate response of POLLNVAL on any named pipe file descriptor.", "After finding this blog post about broken polling in OS X I'm pretty certain that this is a b-u-g bug in OS X."], "tag": "p", "senID": 1}, {"text": ["I'm already planning on switching my code to using UDP sockets, but i wanted to ask SO for verification about this a) so that I'm sure it's really broken, and b) for documentation purposes."], "tag": "p", "senID": 2}, {"text": ["Here is a stripped down version of the code I wrote (although the code in the link above, which I tested, spells it out pretty well):"], "tag": "p", "senID": 3}, {"code": "<pre>\n<code>\n #includes\n...\n....\n#\n\nstatic const char* first_fifo_path = \"/tmp/fifo1\";\nstatic const char* second_fifo_path = \"/tmp/fifo2\";\n\nint setup_read_fifo(const char* path){\n  int fifo_fd = -1;\n\n  if( mkfifo(path, S_IRWXU | S_IRWXG | S_IRWXO) )\n    perror(\"error calling mkfifo()... already exists?\\n\");\n\n  if((fifo_fd = open(path, O_RDONLY | O_NDELAY)) &lt; 0)\n    perror(\"error calling open()\");\n\n  return fifo_fd;\n}\n\nvoid do_poll(int fd1, int fd2){\n  char inbuf[1024];\n  int num_fds = 2;\n  struct pollfd fds[num_fds];\n  int timeout_msecs = 500;\n\n  fds[0].fd = fd1;\n  fds[1].fd = fd2;\n  fds[0].events = POLLIN;\n  fds[1].events = POLLIN;\n\n  int ret;\n  while((ret = poll(fds, num_fds, timeout_msecs)) &gt;= 0){\n    if(ret &lt; 0){\n      printf(\"Error occured when polling\\n\");\n      printf(\"ret %d, errno %d\\n\", ret, errno);\n      printf(\"revents =  %xh : %xh \\n\\n\", fds[0].revents, fds[1].revents);\n    }\n\n   if(ret == 0){\n      printf(\"Timeout Occurred\\n\");\n      continue;\n    }                                                                   \n\n    for(int i = 0; i&lt; num_fds; i++){\n      if(int event = fds[i].revents){\n\n        if(event &amp; POLLHUP)\n          printf(\"Pollhup\\n\");\n        if(event &amp; POLLERR)\n          printf(\"POLLERR\\n\");\n        if(event &amp; POLLNVAL)\n          printf(\"POLLNVAL\\n\");\n\n        if(event &amp; POLLIN){\n          read(fds[i].fd, inbuf, sizeof(inbuf));\n          printf(\"Received: %s\", inbuf);\n        }\n      }\n    }\n  }\n}\n\nint main (int argc, char * const argv[]) {\n  do_poll(setup_read_fifo(first_fifo_path), setup_read_fifo(second_fifo_path));\n  return 0;\n}\n</code>\n</pre>\n", "senID": 4}, {"text": ["this outputs:"], "tag": "p", "senID": 5}, {"code": "<pre>\n$ ./executive \nPOLLNVAL\nPOLLNVAL\nPOLLNVAL\nPOLLNVAL\nPOLLNVAL\nPOLLNVAL\nPOLLNVAL\nPOLLNVAL\nPOLLNVAL\n...\n</pre>\n", "senID": 6}, {"text": ["ad nauseam."], "tag": "p", "senID": 7}, {"text": ["Anybody else run into this?", "This is a real bug right?"], "tag": "p", "senID": 8}]