[{"text": ["Should all public methods of an API be documented?"], "tag": "h2", "senID": 0}, {"text": ["When writing \"library\" type classes, is it better practice to always write markup documentation (i.e.", "javadoc) in java or assume that the code can be \"self-documenting\"?", "For example, given the following method stub:"], "tag": "p", "senID": 1}, {"code": "<pre>\n<code>\n /**\n * Copies all readable bytes from the provided input stream to the provided output\n * stream.  The output stream will be flushed, but neither stream will be closed.\n *\n * @param inStream an InputStream from which to read bytes.\n * @param outStream an OutputStream to which to copy the read bytes.\n * @throws IOException if there are any errors reading or writing.\n */\npublic void copyStream(InputStream inStream, OutputStream outStream) throws IOException {\n    // copy the stream\n}\n</code>\n</pre>\n", "senID": 2}, {"text": ["The javadoc seems to be self-evident, and noise that just needs to be updated if the funcion is changed at all.", "But the sentence about flushing and not closing the stream could be valuable."], "tag": "p", "senID": 3}, {"text": ["So, when writing a library, is it best to:"], "tag": "p", "senID": 4}, {"text": ["a) always document\nb) document anything that isn't obvious\nc) never document (code should speak for itself!", ")  "], "tag": "p", "senID": 5}, {"text": ["I usually use b), myself (since the code can be self-documenting otherwise)..."], "tag": "p", "senID": 6}]