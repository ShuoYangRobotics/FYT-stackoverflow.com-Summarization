[{"text": ["C++ RTTI Viable Examples"], "tag": "h2", "senID": 0}, {"text": ["I am familiar with C++ RTTI, and find the concept interesting."], "tag": "p", "senID": 1}, {"text": ["Still there exist a lot of more ways to abuse it than to use it correctly (the RTTI-switch dread comes to mind).", "As a developer, I found (and used) only two viable uses for it (more exactly, one and a half)."], "tag": "p", "senID": 2}, {"text": ["Could you share some of the ways RTTI is a viable solution to a problem, with example code/pseudo-code included?"], "tag": "p", "senID": 3}, {"text": ["Note: The aim is to have a repository of viable examples a junior developer can consult, criticize and learn from."], "tag": "p", "senID": 4}, {"text": ["Edit: You'll find below code using C++ RTTI"], "tag": "p", "senID": 5}, {"code": "<pre>\n<code>\n // A has a virtual destructor (i.e. is polymorphic)\n// B has a virtual destructor (i.e. is polymorphic)\n// B does (or does not ... pick your poison) inherits from A\n\nvoid doSomething(A * a)\n{\n   // typeid()::name() returns the \"name\" of the object (not portable)\n   std::cout &lt;&lt; \"a is [\" &lt;&lt; typeid(*a).name() &lt;&lt; \"]\"&lt;&lt; std::endl ;\n\n   // the dynamic_cast of a pointer to another will return NULL is\n   // the conversion is not possible\n   if(B * b = dynamic_cast&lt;B *&gt;(a))\n   {\n      std::cout &lt;&lt; \"a is b\" &lt;&lt; std::endl ;\n   }\n   else\n   {\n      std::cout &lt;&lt; \"a is NOT b\" &lt;&lt; std::endl ;\n   }\n}\n</code>\n</pre>\n", "senID": 6}]